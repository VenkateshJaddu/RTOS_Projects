
001_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800543c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f5c  20000070  080054ac  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fcc  080054ac  00007fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f66d  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e7  00000000  00000000  0001670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000190f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c25  00000000  00000000  0001a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b96  00000000  00000000  0001aced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125ae  00000000  00000000  0003e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d946c  00000000  00000000  00050e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a29d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  0012a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005378 	.word	0x08005378

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005378 	.word	0x08005378

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	TaskHandle_t task1_handle = NULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task2_handle = NULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb17 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f849 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8b5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task_1", 200, "Task_1 Executed", 2, &task1_handle);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0x90>)
 80005c6:	22c8      	movs	r2, #200	@ 0xc8
 80005c8:	491a      	ldr	r1, [pc, #104]	@ (8000634 <main+0x94>)
 80005ca:	481b      	ldr	r0, [pc, #108]	@ (8000638 <main+0x98>)
 80005cc:	f002 f9f2 	bl	80029b4 <xTaskCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	617b      	str	r3, [r7, #20]

  configASSERT(status == pdPASS);
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00b      	beq.n	80005f2 <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x4e>

  status = xTaskCreate(task2_handler, "Task_2", 200, "Task_2 Executed", 2, &task2_handle);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0x9c>)
 80005fc:	22c8      	movs	r2, #200	@ 0xc8
 80005fe:	4910      	ldr	r1, [pc, #64]	@ (8000640 <main+0xa0>)
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <main+0xa4>)
 8000602:	f002 f9d7 	bl	80029b4 <xTaskCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	617b      	str	r3, [r7, #20]

  configASSERT(status == pdPASS);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0x88>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	60fb      	str	r3, [r7, #12]
    }
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x84>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 8000628:	f002 fb24 	bl	8002c74 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <main+0x8c>
 8000630:	08005390 	.word	0x08005390
 8000634:	080053a0 	.word	0x080053a0
 8000638:	08000821 	.word	0x08000821
 800063c:	080053a8 	.word	0x080053a8
 8000640:	080053b8 	.word	0x080053b8
 8000644:	0800084d 	.word	0x0800084d

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 f85f 	bl	800471a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  **/
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <SystemClock_Config+0xd4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <SystemClock_Config+0xd8>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f8bc 	bl	8001854 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f8db 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fd3e 	bl	8001184 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070e:	f000 f8c5 	bl	800089c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	481a      	ldr	r0, [pc, #104]	@ (8000818 <MX_GPIO_Init+0xf4>)
 80007b0:	f000 fcce 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_GPIO_Init+0xf8>)
 80007cc:	f000 fb2c 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d0:	230c      	movs	r3, #12
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fb1c 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fb0e 	bl	8000e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\r\n",(char*)parameter);
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <task1_handler+0x24>)
 800082c:	f003 ff20 	bl	8004670 <iprintf>
		taskYIELD(); // Allow another equal-priority task to run
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <task1_handler+0x28>)
 8000832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	f3bf 8f6f 	isb	sy
		printf("%s\r\n",(char*)parameter);
 8000840:	bf00      	nop
 8000842:	e7f1      	b.n	8000828 <task1_handler+0x8>
 8000844:	080053c0 	.word	0x080053c0
 8000848:	e000ed04 	.word	0xe000ed04

0800084c <task2_handler>:
	}
}

void task2_handler(void *parameter)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\r\n",(char*)parameter);
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <task2_handler+0x24>)
 8000858:	f003 ff0a 	bl	8004670 <iprintf>
		taskYIELD();
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <task2_handler+0x28>)
 800085e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	f3bf 8f4f 	dsb	sy
 8000868:	f3bf 8f6f 	isb	sy
		printf("%s\r\n",(char*)parameter);
 800086c:	bf00      	nop
 800086e:	e7f1      	b.n	8000854 <task2_handler+0x8>
 8000870:	080053c0 	.word	0x080053c0
 8000874:	e000ed04 	.word	0xe000ed04

08000878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088a:	f000 f9cb 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40001000 	.word	0x40001000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08e      	sub	sp, #56	@ 0x38
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <HAL_InitTick+0xe4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a32      	ldr	r2, [pc, #200]	@ (80009dc <HAL_InitTick+0xe4>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <HAL_InitTick+0xe4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fd2e 	bl	8001390 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800093a:	2b00      	cmp	r3, #0
 800093c:	d103      	bne.n	8000946 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093e:	f000 fd13 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 8000942:	6378      	str	r0, [r7, #52]	@ 0x34
 8000944:	e004      	b.n	8000950 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000946:	f000 fd0f 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 800094a:	4603      	mov	r3, r0
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000952:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_InitTick+0xe8>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	0c9b      	lsrs	r3, r3, #18
 800095a:	3b01      	subs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <HAL_InitTick+0xec>)
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000962:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_InitTick+0xec>)
 8000966:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <HAL_InitTick+0xec>)
 800096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000970:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_InitTick+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_InitTick+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_InitTick+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000984:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <HAL_InitTick+0xec>)
 8000986:	f001 fa03 	bl	8001d90 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000994:	2b00      	cmp	r3, #0
 8000996:	d11b      	bne.n	80009d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000998:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <HAL_InitTick+0xec>)
 800099a:	f001 fa53 	bl	8001e44 <HAL_TIM_Base_Start_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d111      	bne.n	80009d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ac:	2036      	movs	r0, #54	@ 0x36
 80009ae:	f000 fa2d 	bl	8000e0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d808      	bhi.n	80009ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2036      	movs	r0, #54	@ 0x36
 80009be:	f000 fa09 	bl	8000dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_InitTick+0xf4>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e002      	b.n	80009d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	40001000 	.word	0x40001000
 80009ec:	20000004 	.word	0x20000004

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM6_DAC_IRQHandler+0x10>)
 8000a2e:	f001 fa79 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000008c 	.word	0x2000008c

08000a3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <ITM_SendChar+0x48>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <ITM_SendChar+0x48>)
 8000a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a50:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <ITM_SendChar+0x4c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <ITM_SendChar+0x4c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a5e:	bf00      	nop
 8000a60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f8      	beq.n	8000a60 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a6e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000edfc 	.word	0xe000edfc
 8000a88:	e0000e00 	.word	0xe0000e00

08000a8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e00a      	b.n	8000ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9e:	f3af 8000 	nop.w
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf0      	blt.n	8000a9e <_read+0x12>
  }

  return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e009      	b.n	8000aec <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ffab 	bl	8000a3c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf1      	blt.n	8000ad8 <_write+0x12>
  }
  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_close>:

int _close(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b26:	605a      	str	r2, [r3, #4]
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 fdfd 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fcef 	bl	80005a0 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bd0:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 8000bd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd8:	20012fcc 	.word	0x20012fcc

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8d8 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fe72 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe48 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	200000d4 	.word	0x200000d4

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200000d4 	.word	0x200000d4

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ffb1 	bl	8000d58 <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff80 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff54 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e165      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8154 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80ae 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001128 <HAL_GPIO_Init+0x300>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001128 <HAL_GPIO_Init+0x300>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a58      	ldr	r2, [pc, #352]	@ (800112c <HAL_GPIO_Init+0x304>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8001130 <HAL_GPIO_Init+0x308>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x21a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x216>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4d      	ldr	r2, [pc, #308]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x212>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <HAL_GPIO_Init+0x314>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x20e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4b      	ldr	r2, [pc, #300]	@ (8001140 <HAL_GPIO_Init+0x318>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x20a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <HAL_GPIO_Init+0x31c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x206>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a49      	ldr	r2, [pc, #292]	@ (8001148 <HAL_GPIO_Init+0x320>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x202>
 8001026:	2306      	movs	r3, #6
 8001028:	e00c      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800102a:	2307      	movs	r3, #7
 800102c:	e00a      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800102e:	2305      	movs	r3, #5
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001032:	2304      	movs	r3, #4
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	@ (800112c <HAL_GPIO_Init+0x304>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <HAL_GPIO_Init+0x324>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a31      	ldr	r2, [pc, #196]	@ (800114c <HAL_GPIO_Init+0x324>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <HAL_GPIO_Init+0x324>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_GPIO_Init+0x324>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_GPIO_Init+0x324>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_GPIO_Init+0x324>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x324>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a11      	ldr	r2, [pc, #68]	@ (800114c <HAL_GPIO_Init+0x324>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f ae96 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fcea 	bl	8000c4c <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fce6 	bl	8000c4c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f873 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	@ (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fae4 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	080053e0 	.word	0x080053e0
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <HAL_RCC_GetHCLKFreq+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800136c:	f7ff fff0 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	@ (800138c <HAL_RCC_GetPCLK1Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	080053f0 	.word	0x080053f0

08001390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	220f      	movs	r2, #15
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <HAL_RCC_GetClockConfig+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 020f 	and.w	r2, r3, #15
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f8:	b0ae      	sub	sp, #184	@ 0xb8
 80013fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800141a:	4bcb      	ldr	r3, [pc, #812]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b0c      	cmp	r3, #12
 8001424:	f200 8206 	bhi.w	8001834 <HAL_RCC_GetSysClockFreq+0x440>
 8001428:	a201      	add	r2, pc, #4	@ (adr r2, 8001430 <HAL_RCC_GetSysClockFreq+0x3c>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001465 	.word	0x08001465
 8001434:	08001835 	.word	0x08001835
 8001438:	08001835 	.word	0x08001835
 800143c:	08001835 	.word	0x08001835
 8001440:	0800146d 	.word	0x0800146d
 8001444:	08001835 	.word	0x08001835
 8001448:	08001835 	.word	0x08001835
 800144c:	08001835 	.word	0x08001835
 8001450:	08001475 	.word	0x08001475
 8001454:	08001835 	.word	0x08001835
 8001458:	08001835 	.word	0x08001835
 800145c:	08001835 	.word	0x08001835
 8001460:	08001665 	.word	0x08001665
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001464:	4bb9      	ldr	r3, [pc, #740]	@ (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800146a:	e1e7      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800146c:	4bb8      	ldr	r3, [pc, #736]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x35c>)
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001472:	e1e3      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001474:	4bb4      	ldr	r3, [pc, #720]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800147c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001480:	4bb1      	ldr	r3, [pc, #708]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d071      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148c:	4bae      	ldr	r3, [pc, #696]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	2200      	movs	r2, #0
 8001494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001498:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800149c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014b2:	4622      	mov	r2, r4
 80014b4:	462b      	mov	r3, r5
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0159      	lsls	r1, r3, #5
 80014c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c4:	0150      	lsls	r0, r2, #5
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4621      	mov	r1, r4
 80014cc:	1a51      	subs	r1, r2, r1
 80014ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80014d0:	4629      	mov	r1, r5
 80014d2:	eb63 0301 	sbc.w	r3, r3, r1
 80014d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014e4:	4649      	mov	r1, r9
 80014e6:	018b      	lsls	r3, r1, #6
 80014e8:	4641      	mov	r1, r8
 80014ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ee:	4641      	mov	r1, r8
 80014f0:	018a      	lsls	r2, r1, #6
 80014f2:	4641      	mov	r1, r8
 80014f4:	1a51      	subs	r1, r2, r1
 80014f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014f8:	4649      	mov	r1, r9
 80014fa:	eb63 0301 	sbc.w	r3, r3, r1
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800150c:	4649      	mov	r1, r9
 800150e:	00cb      	lsls	r3, r1, #3
 8001510:	4641      	mov	r1, r8
 8001512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001516:	4641      	mov	r1, r8
 8001518:	00ca      	lsls	r2, r1, #3
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	4603      	mov	r3, r0
 8001520:	4622      	mov	r2, r4
 8001522:	189b      	adds	r3, r3, r2
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
 8001526:	462b      	mov	r3, r5
 8001528:	460a      	mov	r2, r1
 800152a:	eb42 0303 	adc.w	r3, r2, r3
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800153c:	4629      	mov	r1, r5
 800153e:	024b      	lsls	r3, r1, #9
 8001540:	4621      	mov	r1, r4
 8001542:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001546:	4621      	mov	r1, r4
 8001548:	024a      	lsls	r2, r1, #9
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001552:	2200      	movs	r2, #0
 8001554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001558:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800155c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001560:	f7fe fea6 	bl	80002b0 <__aeabi_uldivmod>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4613      	mov	r3, r2
 800156a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800156e:	e067      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001570:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	2200      	movs	r2, #0
 8001578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800157c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001588:	67bb      	str	r3, [r7, #120]	@ 0x78
 800158a:	2300      	movs	r3, #0
 800158c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800158e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001592:	4622      	mov	r2, r4
 8001594:	462b      	mov	r3, r5
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	0159      	lsls	r1, r3, #5
 80015a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a4:	0150      	lsls	r0, r2, #5
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4621      	mov	r1, r4
 80015ac:	1a51      	subs	r1, r2, r1
 80015ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015b0:	4629      	mov	r1, r5
 80015b2:	eb63 0301 	sbc.w	r3, r3, r1
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015c4:	4649      	mov	r1, r9
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ce:	4641      	mov	r1, r8
 80015d0:	018a      	lsls	r2, r1, #6
 80015d2:	4641      	mov	r1, r8
 80015d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015d8:	4649      	mov	r1, r9
 80015da:	eb63 0b01 	sbc.w	fp, r3, r1
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015f2:	4692      	mov	sl, r2
 80015f4:	469b      	mov	fp, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	eb1a 0303 	adds.w	r3, sl, r3
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	462b      	mov	r3, r5
 8001600:	eb4b 0303 	adc.w	r3, fp, r3
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001612:	4629      	mov	r1, r5
 8001614:	028b      	lsls	r3, r1, #10
 8001616:	4621      	mov	r1, r4
 8001618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800161c:	4621      	mov	r1, r4
 800161e:	028a      	lsls	r2, r1, #10
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001628:	2200      	movs	r2, #0
 800162a:	673b      	str	r3, [r7, #112]	@ 0x70
 800162c:	677a      	str	r2, [r7, #116]	@ 0x74
 800162e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001632:	f7fe fe3d 	bl	80002b0 <__aeabi_uldivmod>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4613      	mov	r3, r2
 800163c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001640:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	3301      	adds	r3, #1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001662:	e0eb      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d06b      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800168a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001690:	2300      	movs	r3, #0
 8001692:	667b      	str	r3, [r7, #100]	@ 0x64
 8001694:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001698:	4622      	mov	r2, r4
 800169a:	462b      	mov	r3, r5
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	0159      	lsls	r1, r3, #5
 80016a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016aa:	0150      	lsls	r0, r2, #5
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4621      	mov	r1, r4
 80016b2:	1a51      	subs	r1, r2, r1
 80016b4:	61b9      	str	r1, [r7, #24]
 80016b6:	4629      	mov	r1, r5
 80016b8:	eb63 0301 	sbc.w	r3, r3, r1
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016ca:	4659      	mov	r1, fp
 80016cc:	018b      	lsls	r3, r1, #6
 80016ce:	4651      	mov	r1, sl
 80016d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d4:	4651      	mov	r1, sl
 80016d6:	018a      	lsls	r2, r1, #6
 80016d8:	4651      	mov	r1, sl
 80016da:	ebb2 0801 	subs.w	r8, r2, r1
 80016de:	4659      	mov	r1, fp
 80016e0:	eb63 0901 	sbc.w	r9, r3, r1
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f8:	4690      	mov	r8, r2
 80016fa:	4699      	mov	r9, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	eb18 0303 	adds.w	r3, r8, r3
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	462b      	mov	r3, r5
 8001706:	eb49 0303 	adc.w	r3, r9, r3
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001718:	4629      	mov	r1, r5
 800171a:	024b      	lsls	r3, r1, #9
 800171c:	4621      	mov	r1, r4
 800171e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001722:	4621      	mov	r1, r4
 8001724:	024a      	lsls	r2, r1, #9
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800172e:	2200      	movs	r2, #0
 8001730:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001732:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001734:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001738:	f7fe fdba 	bl	80002b0 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4613      	mov	r3, r2
 8001742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001746:	e065      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x420>
 8001748:	40023800 	.word	0x40023800
 800174c:	00f42400 	.word	0x00f42400
 8001750:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_GetSysClockFreq+0x458>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	2200      	movs	r2, #0
 800175c:	4618      	mov	r0, r3
 800175e:	4611      	mov	r1, r2
 8001760:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001764:	653b      	str	r3, [r7, #80]	@ 0x50
 8001766:	2300      	movs	r3, #0
 8001768:	657b      	str	r3, [r7, #84]	@ 0x54
 800176a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800176e:	4642      	mov	r2, r8
 8001770:	464b      	mov	r3, r9
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f04f 0100 	mov.w	r1, #0
 800177a:	0159      	lsls	r1, r3, #5
 800177c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001780:	0150      	lsls	r0, r2, #5
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4641      	mov	r1, r8
 8001788:	1a51      	subs	r1, r2, r1
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	4649      	mov	r1, r9
 800178e:	eb63 0301 	sbc.w	r3, r3, r1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017a0:	4659      	mov	r1, fp
 80017a2:	018b      	lsls	r3, r1, #6
 80017a4:	4651      	mov	r1, sl
 80017a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017aa:	4651      	mov	r1, sl
 80017ac:	018a      	lsls	r2, r1, #6
 80017ae:	4651      	mov	r1, sl
 80017b0:	1a54      	subs	r4, r2, r1
 80017b2:	4659      	mov	r1, fp
 80017b4:	eb63 0501 	sbc.w	r5, r3, r1
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	00eb      	lsls	r3, r5, #3
 80017c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c6:	00e2      	lsls	r2, r4, #3
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4643      	mov	r3, r8
 80017ce:	18e3      	adds	r3, r4, r3
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	464b      	mov	r3, r9
 80017d4:	eb45 0303 	adc.w	r3, r5, r3
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e6:	4629      	mov	r1, r5
 80017e8:	028b      	lsls	r3, r1, #10
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f0:	4621      	mov	r1, r4
 80017f2:	028a      	lsls	r2, r1, #10
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017fc:	2200      	movs	r2, #0
 80017fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001800:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001802:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001806:	f7fe fd53 	bl	80002b0 <__aeabi_uldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4613      	mov	r3, r2
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_RCC_GetSysClockFreq+0x458>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0f1b      	lsrs	r3, r3, #28
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001832:	e003      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800183a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001840:	4618      	mov	r0, r3
 8001842:	37b8      	adds	r7, #184	@ 0xb8
 8001844:	46bd      	mov	sp, r7
 8001846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	00f42400 	.word	0x00f42400

08001854 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e28d      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8083 	beq.w	800197a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001874:	4b94      	ldr	r3, [pc, #592]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d019      	beq.n	80018b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001880:	4b91      	ldr	r3, [pc, #580]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
        || \
 8001888:	2b08      	cmp	r3, #8
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800188c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001898:	d00c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b2:	d10b      	bne.n	80018cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b84      	ldr	r3, [pc, #528]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05b      	beq.n	8001978 <HAL_RCC_OscConfig+0x124>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d157      	bne.n	8001978 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e25a      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x90>
 80018d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7b      	ldr	r2, [pc, #492]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xcc>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0xb4>
 80018ee:	4b76      	ldr	r3, [pc, #472]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b73      	ldr	r3, [pc, #460]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a72      	ldr	r2, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xcc>
 8001908:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f990 	bl	8000c4c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f98c 	bl	8000c4c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e21f      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xdc>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f97c 	bl	8000c4c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f978 	bl	8000c4c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e20b      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x104>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06f      	beq.n	8001a66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001986:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d017      	beq.n	80019c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001992:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
        || \
 800199a:	2b08      	cmp	r3, #8
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800199e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x186>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1d3      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4937      	ldr	r1, [pc, #220]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HAL_RCC_OscConfig+0x278>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f925 	bl	8000c4c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff f921 	bl	8000c4c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1b4      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4925      	ldr	r1, [pc, #148]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_RCC_OscConfig+0x278>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f904 	bl	8000c4c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff f900 	bl	8000c4c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e193      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d036      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8e4 	bl	8000c4c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8e0 	bl	8000c4c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e173      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x234>
 8001aa6:	e01b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f8cd 	bl	8000c4c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e00e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f8c9 	bl	8000c4c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d907      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e15c      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	42470000 	.word	0x42470000
 8001ad0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ea      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8097 	beq.w	8001c1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b83      	ldr	r3, [pc, #524]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b7f      	ldr	r3, [pc, #508]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a7e      	ldr	r2, [pc, #504]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b79      	ldr	r3, [pc, #484]	@ (8001d04 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b76      	ldr	r3, [pc, #472]	@ (8001d04 <HAL_RCC_OscConfig+0x4b0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	@ (8001d04 <HAL_RCC_OscConfig+0x4b0>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f889 	bl	8000c4c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff f885 	bl	8000c4c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e118      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b6c      	ldr	r3, [pc, #432]	@ (8001d04 <HAL_RCC_OscConfig+0x4b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x31e>
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b68:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x358>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x340>
 8001b7a:	4b61      	ldr	r3, [pc, #388]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4a60      	ldr	r2, [pc, #384]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b86:	4b5e      	ldr	r3, [pc, #376]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0x358>
 8001b94:	4b5a      	ldr	r3, [pc, #360]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba0:	4b57      	ldr	r3, [pc, #348]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba4:	4a56      	ldr	r2, [pc, #344]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f84a 	bl	8000c4c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f846 	bl	8000c4c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0d7      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ee      	beq.n	8001bbc <HAL_RCC_OscConfig+0x368>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f834 	bl	8000c4c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff f830 	bl	8000c4c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0c1      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ee      	bne.n	8001be8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a3a      	ldr	r2, [pc, #232]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80ad 	beq.w	8001d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c26:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d060      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d145      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <HAL_RCC_OscConfig+0x4b4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f804 	bl	8000c4c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f800 	bl	8000c4c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e093      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	071b      	lsls	r3, r3, #28
 8001c92:	491b      	ldr	r1, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_RCC_OscConfig+0x4b4>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ffd5 	bl	8000c4c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe ffd1 	bl	8000c4c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e064      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x452>
 8001cc4:	e05c      	b.n	8001d80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_RCC_OscConfig+0x4b4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ffbe 	bl	8000c4c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7fe ffba 	bl	8000c4c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e04d      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x480>
 8001cf2:	e045      	b.n	8001d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e040      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <HAL_RCC_OscConfig+0x538>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d030      	beq.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d129      	bne.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d122      	bne.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d119      	bne.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	3b01      	subs	r3, #1
 8001d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d10f      	bne.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e041      	b.n	8001e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f839 	bl	8001e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 f9c0 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e04e      	b.n	8001efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d01d      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d010      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	e007      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	40010400 	.word	0x40010400
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40001800 	.word	0x40001800

08001f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0202 	mvn.w	r2, #2
 8001f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8d2 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8c4 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8d5 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0204 	mvn.w	r2, #4
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8ac 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89e 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8af 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f886 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f878 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f889 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f860 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f852 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f863 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0201 	mvn.w	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fbf4 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f906 	bl	80022c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f834 	bl	8002140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0220 	mvn.w	r2, #32
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8d8 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a43      	ldr	r2, [pc, #268]	@ (8002284 <TIM_Base_SetConfig+0x130>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <TIM_Base_SetConfig+0x134>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a41      	ldr	r2, [pc, #260]	@ (800228c <TIM_Base_SetConfig+0x138>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a40      	ldr	r2, [pc, #256]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a35      	ldr	r2, [pc, #212]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b4:	d027      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a32      	ldr	r2, [pc, #200]	@ (8002284 <TIM_Base_SetConfig+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d023      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a31      	ldr	r2, [pc, #196]	@ (8002288 <TIM_Base_SetConfig+0x134>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a30      	ldr	r2, [pc, #192]	@ (800228c <TIM_Base_SetConfig+0x138>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d017      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002294 <TIM_Base_SetConfig+0x140>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <TIM_Base_SetConfig+0x144>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	@ (800229c <TIM_Base_SetConfig+0x148>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	@ (80022a0 <TIM_Base_SetConfig+0x14c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <TIM_Base_SetConfig+0x150>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <TIM_Base_SetConfig+0x154>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f023 0201 	bic.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  }
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40010400 	.word	0x40010400
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800
 80022a0:	40001800 	.word	0x40001800
 80022a4:	40001c00 	.word	0x40001c00
 80022a8:	40002000 	.word	0x40002000

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0208 	add.w	r2, r3, #8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0208 	add.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d103      	bne.n	800234e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00c      	b.n	8002368 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3308      	adds	r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e002      	b.n	800235c <vListInsert+0x2e>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d2f6      	bcs.n	8002356 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6852      	ldr	r2, [r2, #4]
 80023c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d103      	bne.n	80023d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023fe:	2301      	movs	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <xQueueGenericReset+0x30>
        __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	60fb      	str	r3, [r7, #12]
    }
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d052      	beq.n	80024d0 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04e      	beq.n	80024d0 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	2100      	movs	r1, #0
 800243c:	fba3 2302 	umull	r2, r3, r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d000      	beq.n	8002446 <xQueueGenericReset+0x52>
 8002444:	2101      	movs	r1, #1
 8002446:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d141      	bne.n	80024d0 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800244c:	f001 fd96 	bl	8003f7c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002458:	6939      	ldr	r1, [r7, #16]
 800245a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	441a      	add	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2200      	movs	r2, #0
 800246a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	3b01      	subs	r3, #1
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	441a      	add	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	22ff      	movs	r2, #255	@ 0xff
 8002490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	22ff      	movs	r2, #255	@ 0xff
 8002498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00f      	beq.n	80024ca <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	3310      	adds	r3, #16
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fefc 	bl	80032ac <xTaskRemoveFromEventList>
 80024b4:	e009      	b.n	80024ca <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3310      	adds	r3, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff0a 	bl	80022d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3324      	adds	r3, #36	@ 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff05 	bl	80022d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024ca:	f001 fd89 	bl	8003fe0 <vPortExitCritical>
 80024ce:	e001      	b.n	80024d4 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <xQueueGenericReset+0xfe>
        __asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	60bb      	str	r3, [r7, #8]
    }
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024f2:	697b      	ldr	r3, [r7, #20]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02e      	beq.n	8002572 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002514:	2100      	movs	r1, #0
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	fba3 2302 	umull	r2, r3, r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d000      	beq.n	8002524 <xQueueGenericCreate+0x28>
 8002522:	2101      	movs	r1, #1
 8002524:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d123      	bne.n	8002572 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002532:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002536:	d81c      	bhi.n	8002572 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3350      	adds	r3, #80	@ 0x50
 8002546:	4618      	mov	r0, r3
 8002548:	f001 fe00 	bl	800414c <pvPortMalloc>
 800254c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01d      	beq.n	8002590 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3350      	adds	r3, #80	@ 0x50
 800255c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f815 	bl	800259a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002570:	e00e      	b.n	8002590 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <xQueueGenericCreate+0x94>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	613b      	str	r3, [r7, #16]
    }
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002590:	69fb      	ldr	r3, [r7, #28]
    }
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e002      	b.n	80025bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c8:	2101      	movs	r1, #1
 80025ca:	69b8      	ldr	r0, [r7, #24]
 80025cc:	f7ff ff12 	bl	80023f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	@ 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <xQueueReceive+0x32>
        __asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	623b      	str	r3, [r7, #32]
    }
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	e7fd      	b.n	800260e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <xQueueReceive+0x40>
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <xQueueReceive+0x44>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <xQueueReceive+0x46>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <xQueueReceive+0x62>
        __asm volatile
 800262a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	61fb      	str	r3, [r7, #28]
    }
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	e7fd      	b.n	800263e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002642:	f001 f841 	bl	80036c8 <xTaskGetSchedulerState>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <xQueueReceive+0x72>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <xQueueReceive+0x76>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueReceive+0x78>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <xQueueReceive+0x94>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	61bb      	str	r3, [r7, #24]
    }
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002674:	f001 fc82 	bl	8003f7c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d014      	beq.n	80026ae <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002688:	f000 f882 	bl	8002790 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269e:	3310      	adds	r3, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fe03 	bl	80032ac <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026a6:	f001 fc9b 	bl	8003fe0 <vPortExitCritical>
                return pdPASS;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e069      	b.n	8002782 <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026b4:	f001 fc94 	bl	8003fe0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e062      	b.n	8002782 <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fec8 	bl	800345c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026d0:	f001 fc86 	bl	8003fe0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026d4:	f000 fb22 	bl	8002d1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026d8:	f001 fc50 	bl	8003f7c <vPortEnterCritical>
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d103      	bne.n	80026f2 <xQueueReceive+0x112>
 80026ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d103      	bne.n	8002708 <xQueueReceive+0x128>
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002708:	f001 fc6a 	bl	8003fe0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800270c:	1d3a      	adds	r2, r7, #4
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f000 feb7 	bl	8003488 <xTaskCheckForTimeOut>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d123      	bne.n	8002768 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002722:	f000 f8ad 	bl	8002880 <prvIsQueueEmpty>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d017      	beq.n	800275c <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	3324      	adds	r3, #36	@ 0x24
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fd4d 	bl	80031d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800273a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800273c:	f000 f84e 	bl	80027dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002740:	f000 fafa 	bl	8002d38 <xTaskResumeAll>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d194      	bne.n	8002674 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <xQueueReceive+0x1ac>)
 800274c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	e78b      	b.n	8002674 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800275c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800275e:	f000 f83d 	bl	80027dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002762:	f000 fae9 	bl	8002d38 <xTaskResumeAll>
 8002766:	e785      	b.n	8002674 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800276a:	f000 f837 	bl	80027dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800276e:	f000 fae3 	bl	8002d38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002774:	f000 f884 	bl	8002880 <prvIsQueueEmpty>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f43f af7a 	beq.w	8002674 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002780:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002782:	4618      	mov	r0, r3
 8002784:	3730      	adds	r7, #48	@ 0x30
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000ed04 	.word	0xe000ed04

08002790 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	441a      	add	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d303      	bcc.n	80027c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68d9      	ldr	r1, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	461a      	mov	r2, r3
 80027ce:	6838      	ldr	r0, [r7, #0]
 80027d0:	f002 f819 	bl	8004806 <memcpy>
    }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027e4:	f001 fbca 	bl	8003f7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027f0:	e011      	b.n	8002816 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3324      	adds	r3, #36	@ 0x24
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fd54 	bl	80032ac <xTaskRemoveFromEventList>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800280a:	f000 fea5 	bl	8003558 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3b01      	subs	r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	dce9      	bgt.n	80027f2 <prvUnlockQueue+0x16>
 800281e:	e000      	b.n	8002822 <prvUnlockQueue+0x46>
                    break;
 8002820:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	22ff      	movs	r2, #255	@ 0xff
 8002826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800282a:	f001 fbd9 	bl	8003fe0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800282e:	f001 fba5 	bl	8003f7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002838:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800283a:	e011      	b.n	8002860 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3310      	adds	r3, #16
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd2f 	bl	80032ac <xTaskRemoveFromEventList>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002854:	f000 fe80 	bl	8003558 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	3b01      	subs	r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002864:	2b00      	cmp	r3, #0
 8002866:	dce9      	bgt.n	800283c <prvUnlockQueue+0x60>
 8002868:	e000      	b.n	800286c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800286a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	22ff      	movs	r2, #255	@ 0xff
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002874:	f001 fbb4 	bl	8003fe0 <vPortExitCritical>
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002888:	f001 fb78 	bl	8003f7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e001      	b.n	800289e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800289e:	f001 fb9f 	bl	8003fe0 <vPortExitCritical>

    return xReturn;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	60fb      	str	r3, [r7, #12]
    }
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d024      	beq.n	8002928 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e01e      	b.n	8002922 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028e4:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <vQueueAddToRegistry+0x9c>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d105      	bne.n	8002900 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4a13      	ldr	r2, [pc, #76]	@ (8002948 <vQueueAddToRegistry+0x9c>)
 80028fa:	4413      	add	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
                    break;
 80028fe:	e013      	b.n	8002928 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <vQueueAddToRegistry+0x70>
 8002906:	4a10      	ldr	r2, [pc, #64]	@ (8002948 <vQueueAddToRegistry+0x9c>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <vQueueAddToRegistry+0x9c>)
 8002918:	4413      	add	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b07      	cmp	r3, #7
 8002926:	d9dd      	bls.n	80028e4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200000d8 	.word	0x200000d8

0800294c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800295c:	f001 fb0e 	bl	8003f7c <vPortEnterCritical>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002966:	b25b      	sxtb	r3, r3
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d103      	bne.n	8002976 <vQueueWaitForMessageRestricted+0x2a>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800297c:	b25b      	sxtb	r3, r3
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d103      	bne.n	800298c <vQueueWaitForMessageRestricted+0x40>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800298c:	f001 fb28 	bl	8003fe0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3324      	adds	r3, #36	@ 0x24
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fc3d 	bl	8003220 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff18 	bl	80027dc <prvUnlockQueue>
    }
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08c      	sub	sp, #48	@ 0x30
 80029b8:	af04      	add	r7, sp, #16
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fbbf 	bl	800414c <pvPortMalloc>
 80029ce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d013      	beq.n	80029fe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029d6:	2058      	movs	r0, #88	@ 0x58
 80029d8:	f001 fbb8 	bl	800414c <pvPortMalloc>
 80029dc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029e4:	2258      	movs	r2, #88	@ 0x58
 80029e6:	2100      	movs	r1, #0
 80029e8:	69f8      	ldr	r0, [r7, #28]
 80029ea:	f001 fe96 	bl	800471a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029f4:	e005      	b.n	8002a02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f001 fc64 	bl	80042c4 <vPortFree>
 80029fc:	e001      	b.n	8002a02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f80f 	bl	8002a42 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a24:	69f8      	ldr	r0, [r7, #28]
 8002a26:	f000 f89d 	bl	8002b64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e002      	b.n	8002a36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	b2db      	uxtb	r3, r3
    }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b088      	sub	sp, #32
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	21a5      	movs	r1, #165	@ 0xa5
 8002a5c:	f001 fe5d 	bl	800471a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f023 0307 	bic.w	r3, r3, #7
 8002a78:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	617b      	str	r3, [r7, #20]
    }
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01e      	beq.n	8002ae0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e012      	b.n	8002ace <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	7819      	ldrb	r1, [r3, #0]
 8002ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3334      	adds	r3, #52	@ 0x34
 8002ab8:	460a      	mov	r2, r1
 8002aba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d9e9      	bls.n	8002aa8 <prvInitialiseNewTask+0x66>
 8002ad4:	e000      	b.n	8002ad8 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ad6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d90b      	bls.n	8002afe <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	613b      	str	r3, [r7, #16]
    }
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	e7fd      	b.n	8002afa <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d901      	bls.n	8002b08 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b04:	2304      	movs	r3, #4
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b12:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	3304      	adds	r3, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fbfb 	bl	8002314 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	3318      	adds	r3, #24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fbf6 	bl	8002314 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	f1c3 0205 	rsb	r2, r3, #5
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	69b8      	ldr	r0, [r7, #24]
 8002b44:	f001 f8ea 	bl	8003d1c <pxPortInitialiseStack>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b58:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b6c:	f001 fa06 	bl	8003f7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b70:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <prvAddNewTaskToReadyList+0xf8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a39      	ldr	r2, [pc, #228]	@ (8002c5c <prvAddNewTaskToReadyList+0xf8>)
 8002b78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b7a:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <prvAddNewTaskToReadyList+0xfc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b82:	4a37      	ldr	r2, [pc, #220]	@ (8002c60 <prvAddNewTaskToReadyList+0xfc>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b88:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <prvAddNewTaskToReadyList+0xf8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d110      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b90:	f000 fd00 	bl	8003594 <prvInitialiseTaskLists>
 8002b94:	e00d      	b.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b96:	4b33      	ldr	r3, [pc, #204]	@ (8002c64 <prvAddNewTaskToReadyList+0x100>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b9e:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <prvAddNewTaskToReadyList+0xfc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d802      	bhi.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bac:	4a2c      	ldr	r2, [pc, #176]	@ (8002c60 <prvAddNewTaskToReadyList+0xfc>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <prvAddNewTaskToReadyList+0x104>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c68 <prvAddNewTaskToReadyList+0x104>)
 8002bba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c68 <prvAddNewTaskToReadyList+0x104>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <prvAddNewTaskToReadyList+0x108>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <prvAddNewTaskToReadyList+0x108>)
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bda:	4925      	ldr	r1, [pc, #148]	@ (8002c70 <prvAddNewTaskToReadyList+0x10c>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3304      	adds	r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	3204      	adds	r2, #4
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <prvAddNewTaskToReadyList+0x10c>)
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c24:	4912      	ldr	r1, [pc, #72]	@ (8002c70 <prvAddNewTaskToReadyList+0x10c>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1c59      	adds	r1, r3, #1
 8002c34:	480e      	ldr	r0, [pc, #56]	@ (8002c70 <prvAddNewTaskToReadyList+0x10c>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4403      	add	r3, r0
 8002c40:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c42:	f001 f9cd 	bl	8003fe0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c46:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <prvAddNewTaskToReadyList+0x100>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <prvAddNewTaskToReadyList+0xfc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200001f0 	.word	0x200001f0
 8002c60:	20000118 	.word	0x20000118
 8002c64:	200001fc 	.word	0x200001fc
 8002c68:	2000020c 	.word	0x2000020c
 8002c6c:	200001f8 	.word	0x200001f8
 8002c70:	2000011c 	.word	0x2000011c

08002c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c7a:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <vTaskStartScheduler+0x8c>)
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	2282      	movs	r2, #130	@ 0x82
 8002c86:	491f      	ldr	r1, [pc, #124]	@ (8002d04 <vTaskStartScheduler+0x90>)
 8002c88:	481f      	ldr	r0, [pc, #124]	@ (8002d08 <vTaskStartScheduler+0x94>)
 8002c8a:	f7ff fe93 	bl	80029b4 <xTaskCreate>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8002c98:	f000 fdb4 	bl	8003804 <xTimerCreateTimerTask>
 8002c9c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d116      	bne.n	8002cd2 <vTaskStartScheduler+0x5e>
        __asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60bb      	str	r3, [r7, #8]
    }
 8002cb6:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <vTaskStartScheduler+0x98>)
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <vTaskStartScheduler+0x9c>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <vTaskStartScheduler+0xa0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ccc:	f001 f8b2 	bl	8003e34 <xPortStartScheduler>
 8002cd0:	e00f      	b.n	8002cf2 <vTaskStartScheduler+0x7e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d10b      	bne.n	8002cf2 <vTaskStartScheduler+0x7e>
        __asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	607b      	str	r3, [r7, #4]
    }
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	e7fd      	b.n	8002cee <vTaskStartScheduler+0x7a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <vTaskStartScheduler+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000214 	.word	0x20000214
 8002d04:	080053c8 	.word	0x080053c8
 8002d08:	08003571 	.word	0x08003571
 8002d0c:	20000210 	.word	0x20000210
 8002d10:	200001fc 	.word	0x200001fc
 8002d14:	200001f4 	.word	0x200001f4
 8002d18:	2000000c 	.word	0x2000000c

08002d1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <vTaskSuspendAll+0x18>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a03      	ldr	r2, [pc, #12]	@ (8002d34 <vTaskSuspendAll+0x18>)
 8002d28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	20000218 	.word	0x20000218

08002d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d46:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef4 <xTaskResumeAll+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <xTaskResumeAll+0x2e>
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
    }
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d66:	f001 f909 	bl	8003f7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d6a:	4b62      	ldr	r3, [pc, #392]	@ (8002ef4 <xTaskResumeAll+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a60      	ldr	r2, [pc, #384]	@ (8002ef4 <xTaskResumeAll+0x1bc>)
 8002d72:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d74:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef4 <xTaskResumeAll+0x1bc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 80b4 	bne.w	8002ee6 <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <xTaskResumeAll+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80af 	beq.w	8002ee6 <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d88:	e08a      	b.n	8002ea0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002efc <xTaskResumeAll+0x1c4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	6a12      	ldr	r2, [r2, #32]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	69d2      	ldr	r2, [r2, #28]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3318      	adds	r3, #24
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d103      	bne.n	8002dc0 <xTaskResumeAll+0x88>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3304      	adds	r3, #4
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d103      	bne.n	8002dfe <xTaskResumeAll+0xc6>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <xTaskResumeAll+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	4a38      	ldr	r2, [pc, #224]	@ (8002f00 <xTaskResumeAll+0x1c8>)
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <xTaskResumeAll+0x1cc>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3304      	adds	r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	3204      	adds	r2, #4
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	1d1a      	adds	r2, r3, #4
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4a28      	ldr	r2, [pc, #160]	@ (8002f04 <xTaskResumeAll+0x1cc>)
 8002e64:	441a      	add	r2, r3
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	615a      	str	r2, [r3, #20]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6e:	4925      	ldr	r1, [pc, #148]	@ (8002f04 <xTaskResumeAll+0x1cc>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1c59      	adds	r1, r3, #1
 8002e7e:	4821      	ldr	r0, [pc, #132]	@ (8002f04 <xTaskResumeAll+0x1cc>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4403      	add	r3, r0
 8002e8a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <xTaskResumeAll+0x1d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <xTaskResumeAll+0x1d4>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <xTaskResumeAll+0x1c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af70 	bne.w	8002d8a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002eb0:	f000 fbee 	bl	8003690 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eb4:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <xTaskResumeAll+0x1d8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ec0:	f000 f838 	bl	8002f34 <xTaskIncrementTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <xTaskResumeAll+0x1d4>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f1      	bne.n	8002ec0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <xTaskResumeAll+0x1d8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <xTaskResumeAll+0x1d4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ee6:	f001 f87b 	bl	8003fe0 <vPortExitCritical>

    return xAlreadyYielded;
 8002eea:	697b      	ldr	r3, [r7, #20]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000218 	.word	0x20000218
 8002ef8:	200001f0 	.word	0x200001f0
 8002efc:	200001b0 	.word	0x200001b0
 8002f00:	200001f8 	.word	0x200001f8
 8002f04:	2000011c 	.word	0x2000011c
 8002f08:	20000118 	.word	0x20000118
 8002f0c:	20000204 	.word	0x20000204
 8002f10:	20000200 	.word	0x20000200

08002f14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <xTaskGetTickCount+0x1c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f20:	687b      	ldr	r3, [r7, #4]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200001f4 	.word	0x200001f4

08002f34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	@ 0x28
 8002f38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80030f8 <xTaskIncrementTick+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 80ce 	bne.w	80030e4 <xTaskIncrementTick+0x1b0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f48:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <xTaskIncrementTick+0x1c8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f50:	4a6a      	ldr	r2, [pc, #424]	@ (80030fc <xTaskIncrementTick+0x1c8>)
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d121      	bne.n	8002fa0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f5c:	4b68      	ldr	r3, [pc, #416]	@ (8003100 <xTaskIncrementTick+0x1cc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	607b      	str	r3, [r7, #4]
    }
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <xTaskIncrementTick+0x46>
 8002f7e:	4b60      	ldr	r3, [pc, #384]	@ (8003100 <xTaskIncrementTick+0x1cc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	4b5f      	ldr	r3, [pc, #380]	@ (8003104 <xTaskIncrementTick+0x1d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5d      	ldr	r2, [pc, #372]	@ (8003100 <xTaskIncrementTick+0x1cc>)
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003104 <xTaskIncrementTick+0x1d0>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b5d      	ldr	r3, [pc, #372]	@ (8003108 <xTaskIncrementTick+0x1d4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a5b      	ldr	r2, [pc, #364]	@ (8003108 <xTaskIncrementTick+0x1d4>)
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	f000 fb78 	bl	8003690 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800310c <xTaskIncrementTick+0x1d8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f0c0 80a1 	bcc.w	80030ee <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fac:	4b54      	ldr	r3, [pc, #336]	@ (8003100 <xTaskIncrementTick+0x1cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	4b55      	ldr	r3, [pc, #340]	@ (800310c <xTaskIncrementTick+0x1d8>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	601a      	str	r2, [r3, #0]
                    break;
 8002fbe:	e096      	b.n	80030ee <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003100 <xTaskIncrementTick+0x1cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d203      	bcs.n	8002fe0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800310c <xTaskIncrementTick+0x1d8>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002fde:	e086      	b.n	80030ee <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3304      	adds	r3, #4
 8003002:	429a      	cmp	r2, r3
 8003004:	d103      	bne.n	800300e <xTaskIncrementTick+0xda>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01e      	beq.n	8003064 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	6a12      	ldr	r2, [r2, #32]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	69d2      	ldr	r2, [r2, #28]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3318      	adds	r3, #24
 8003048:	429a      	cmp	r2, r3
 800304a:	d103      	bne.n	8003054 <xTaskIncrementTick+0x120>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2200      	movs	r2, #0
 8003058:	629a      	str	r2, [r3, #40]	@ 0x28
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1e5a      	subs	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <xTaskIncrementTick+0x1dc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <xTaskIncrementTick+0x1dc>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307a:	4926      	ldr	r1, [pc, #152]	@ (8003114 <xTaskIncrementTick+0x1e0>)
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3304      	adds	r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	3204      	adds	r2, #4
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1d1a      	adds	r2, r3, #4
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4a16      	ldr	r2, [pc, #88]	@ (8003114 <xTaskIncrementTick+0x1e0>)
 80030ba:	441a      	add	r2, r3
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	615a      	str	r2, [r3, #20]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	4913      	ldr	r1, [pc, #76]	@ (8003114 <xTaskIncrementTick+0x1e0>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1c59      	adds	r1, r3, #1
 80030d4:	480f      	ldr	r0, [pc, #60]	@ (8003114 <xTaskIncrementTick+0x1e0>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e2:	e763      	b.n	8002fac <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <xTaskIncrementTick+0x1e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <xTaskIncrementTick+0x1e4>)
 80030ec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3728      	adds	r7, #40	@ 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000218 	.word	0x20000218
 80030fc:	200001f4 	.word	0x200001f4
 8003100:	200001a8 	.word	0x200001a8
 8003104:	200001ac 	.word	0x200001ac
 8003108:	20000208 	.word	0x20000208
 800310c:	20000210 	.word	0x20000210
 8003110:	200001f8 	.word	0x200001f8
 8003114:	2000011c 	.word	0x2000011c
 8003118:	20000200 	.word	0x20000200

0800311c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003122:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <vTaskSwitchContext+0xa4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800312a:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <vTaskSwitchContext+0xa8>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003130:	e040      	b.n	80031b4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8003132:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <vTaskSwitchContext+0xa8>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003138:	4b23      	ldr	r3, [pc, #140]	@ (80031c8 <vTaskSwitchContext+0xac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	f1c3 031f 	rsb	r3, r3, #31
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	491f      	ldr	r1, [pc, #124]	@ (80031cc <vTaskSwitchContext+0xb0>)
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	607b      	str	r3, [r7, #4]
    }
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <vTaskSwitchContext+0x5a>
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a11      	ldr	r2, [pc, #68]	@ (80031cc <vTaskSwitchContext+0xb0>)
 8003186:	4413      	add	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3308      	adds	r3, #8
 800319c:	429a      	cmp	r2, r3
 800319e:	d104      	bne.n	80031aa <vTaskSwitchContext+0x8e>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <vTaskSwitchContext+0xb4>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	20000218 	.word	0x20000218
 80031c4:	20000204 	.word	0x20000204
 80031c8:	200001f8 	.word	0x200001f8
 80031cc:	2000011c 	.word	0x2000011c
 80031d0:	20000118 	.word	0x20000118

080031d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	60fb      	str	r3, [r7, #12]
    }
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031fc:	4b07      	ldr	r3, [pc, #28]	@ (800321c <vTaskPlaceOnEventList+0x48>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3318      	adds	r3, #24
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f892 	bl	800232e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800320a:	2101      	movs	r1, #1
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f000 fa79 	bl	8003704 <prvAddCurrentTaskToDelayedList>
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000118 	.word	0x20000118

08003220 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	613b      	str	r3, [r7, #16]
    }
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	e7fd      	b.n	8003246 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	61da      	str	r2, [r3, #28]
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	621a      	str	r2, [r3, #32]
 8003262:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	3218      	adds	r2, #24
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f103 0218 	add.w	r2, r3, #24
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	629a      	str	r2, [r3, #40]	@ 0x28
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68b8      	ldr	r0, [r7, #8]
 800329c:	f000 fa32 	bl	8003704 <prvAddCurrentTaskToDelayedList>
    }
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000118 	.word	0x20000118

080032ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b08b      	sub	sp, #44	@ 0x2c
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60fb      	str	r3, [r7, #12]
    }
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	6a12      	ldr	r2, [r2, #32]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	69d2      	ldr	r2, [r2, #28]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3318      	adds	r3, #24
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d103      	bne.n	8003308 <xTaskRemoveFromEventList+0x5c>
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003318:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <xTaskRemoveFromEventList+0x198>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d15e      	bne.n	80033de <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	3304      	adds	r3, #4
 8003342:	429a      	cmp	r2, r3
 8003344:	d103      	bne.n	800334e <xTaskRemoveFromEventList+0xa2>
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	2201      	movs	r2, #1
 8003364:	409a      	lsls	r2, r3
 8003366:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <xTaskRemoveFromEventList+0x19c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	4a36      	ldr	r2, [pc, #216]	@ (8003448 <xTaskRemoveFromEventList+0x19c>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003374:	4935      	ldr	r1, [pc, #212]	@ (800344c <xTaskRemoveFromEventList+0x1a0>)
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	3204      	adds	r2, #4
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a26      	ldr	r2, [pc, #152]	@ (800344c <xTaskRemoveFromEventList+0x1a0>)
 80033b4:	441a      	add	r2, r3
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	615a      	str	r2, [r3, #20]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033be:	4923      	ldr	r1, [pc, #140]	@ (800344c <xTaskRemoveFromEventList+0x1a0>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1c59      	adds	r1, r3, #1
 80033ce:	481f      	ldr	r0, [pc, #124]	@ (800344c <xTaskRemoveFromEventList+0x1a0>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4403      	add	r3, r0
 80033da:	6019      	str	r1, [r3, #0]
 80033dc:	e01b      	b.n	8003416 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033de:	4b1c      	ldr	r3, [pc, #112]	@ (8003450 <xTaskRemoveFromEventList+0x1a4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	61da      	str	r2, [r3, #28]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	621a      	str	r2, [r3, #32]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	6a3a      	ldr	r2, [r7, #32]
 80033f8:	3218      	adds	r2, #24
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f103 0218 	add.w	r2, r3, #24
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <xTaskRemoveFromEventList+0x1a4>)
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28
 800340c:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <xTaskRemoveFromEventList+0x1a4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a0f      	ldr	r2, [pc, #60]	@ (8003450 <xTaskRemoveFromEventList+0x1a4>)
 8003414:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <xTaskRemoveFromEventList+0x1a8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	429a      	cmp	r2, r3
 8003422:	d905      	bls.n	8003430 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <xTaskRemoveFromEventList+0x1ac>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e001      	b.n	8003434 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003436:	4618      	mov	r0, r3
 8003438:	372c      	adds	r7, #44	@ 0x2c
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000218 	.word	0x20000218
 8003448:	200001f8 	.word	0x200001f8
 800344c:	2000011c 	.word	0x2000011c
 8003450:	200001b0 	.word	0x200001b0
 8003454:	20000118 	.word	0x20000118
 8003458:	20000204 	.word	0x20000204

0800345c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <vTaskInternalSetTimeOutState+0x24>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <vTaskInternalSetTimeOutState+0x28>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20000208 	.word	0x20000208
 8003484:	200001f4 	.word	0x200001f4

08003488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	613b      	str	r3, [r7, #16]
    }
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60fb      	str	r3, [r7, #12]
    }
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80034ce:	f000 fd55 	bl	8003f7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <xTaskCheckForTimeOut+0xc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d102      	bne.n	80034f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e026      	b.n	8003540 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b17      	ldr	r3, [pc, #92]	@ (8003554 <xTaskCheckForTimeOut+0xcc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d00a      	beq.n	8003514 <xTaskCheckForTimeOut+0x8c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	d305      	bcc.n	8003514 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e015      	b.n	8003540 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20b      	bcs.n	8003536 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	1ad2      	subs	r2, r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff96 	bl	800345c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e004      	b.n	8003540 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003540:	f000 fd4e 	bl	8003fe0 <vPortExitCritical>

    return xReturn;
 8003544:	69fb      	ldr	r3, [r7, #28]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200001f4 	.word	0x200001f4
 8003554:	20000208 	.word	0x20000208

08003558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <vTaskMissedYield+0x14>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000204 	.word	0x20000204

08003570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003578:	f000 f84c 	bl	8003614 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <prvIdleTask+0x20>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800358c:	bf00      	nop
 800358e:	e7f3      	b.n	8003578 <prvIdleTask+0x8>
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	e00c      	b.n	80035ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4a12      	ldr	r2, [pc, #72]	@ (80035f4 <prvInitialiseTaskLists+0x60>)
 80035ac:	4413      	add	r3, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fe90 	bl	80022d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3301      	adds	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d9ef      	bls.n	80035a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035c0:	480d      	ldr	r0, [pc, #52]	@ (80035f8 <prvInitialiseTaskLists+0x64>)
 80035c2:	f7fe fe87 	bl	80022d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035c6:	480d      	ldr	r0, [pc, #52]	@ (80035fc <prvInitialiseTaskLists+0x68>)
 80035c8:	f7fe fe84 	bl	80022d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035cc:	480c      	ldr	r0, [pc, #48]	@ (8003600 <prvInitialiseTaskLists+0x6c>)
 80035ce:	f7fe fe81 	bl	80022d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80035d2:	480c      	ldr	r0, [pc, #48]	@ (8003604 <prvInitialiseTaskLists+0x70>)
 80035d4:	f7fe fe7e 	bl	80022d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80035d8:	480b      	ldr	r0, [pc, #44]	@ (8003608 <prvInitialiseTaskLists+0x74>)
 80035da:	f7fe fe7b 	bl	80022d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035de:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <prvInitialiseTaskLists+0x78>)
 80035e0:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <prvInitialiseTaskLists+0x64>)
 80035e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <prvInitialiseTaskLists+0x7c>)
 80035e6:	4a05      	ldr	r2, [pc, #20]	@ (80035fc <prvInitialiseTaskLists+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000011c 	.word	0x2000011c
 80035f8:	20000180 	.word	0x20000180
 80035fc:	20000194 	.word	0x20000194
 8003600:	200001b0 	.word	0x200001b0
 8003604:	200001c4 	.word	0x200001c4
 8003608:	200001dc 	.word	0x200001dc
 800360c:	200001a8 	.word	0x200001a8
 8003610:	200001ac 	.word	0x200001ac

08003614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361a:	e019      	b.n	8003650 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800361c:	f000 fcae 	bl	8003f7c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003620:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <prvCheckTasksWaitingTermination+0x50>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe feb7 	bl	80023a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <prvCheckTasksWaitingTermination+0x54>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3b01      	subs	r3, #1
 8003638:	4a0b      	ldr	r2, [pc, #44]	@ (8003668 <prvCheckTasksWaitingTermination+0x54>)
 800363a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <prvCheckTasksWaitingTermination+0x58>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <prvCheckTasksWaitingTermination+0x58>)
 8003644:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003646:	f000 fccb 	bl	8003fe0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f810 	bl	8003670 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <prvCheckTasksWaitingTermination+0x58>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e1      	bne.n	800361c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200001c4 	.word	0x200001c4
 8003668:	200001f0 	.word	0x200001f0
 800366c:	200001d8 	.word	0x200001d8

08003670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fe21 	bl	80042c4 <vPortFree>
            vPortFree( pxTCB );
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fe1e 	bl	80042c4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <prvResetNextTaskUnblockTime+0x30>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <prvResetNextTaskUnblockTime+0x34>)
 80036a0:	f04f 32ff 	mov.w	r2, #4294967295
 80036a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036a6:	e005      	b.n	80036b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <prvResetNextTaskUnblockTime+0x30>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <prvResetNextTaskUnblockTime+0x34>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	200001a8 	.word	0x200001a8
 80036c4:	20000210 	.word	0x20000210

080036c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036ce:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <xTaskGetSchedulerState+0x34>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036d6:	2301      	movs	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	e008      	b.n	80036ee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <xTaskGetSchedulerState+0x38>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036e4:	2302      	movs	r3, #2
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	e001      	b.n	80036ee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036ee:	687b      	ldr	r3, [r7, #4]
    }
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	200001fc 	.word	0x200001fc
 8003700:	20000218 	.word	0x20000218

08003704 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800370e:	4b36      	ldr	r3, [pc, #216]	@ (80037e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003714:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fe40 	bl	80023a0 <uxListRemove>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	4b2e      	ldr	r3, [pc, #184]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4013      	ands	r3, r2
 800373a:	4a2d      	ldr	r2, [pc, #180]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xec>)
 800373c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d124      	bne.n	8003790 <prvAddCurrentTaskToDelayedList+0x8c>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800374c:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	3204      	adds	r2, #4
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	4b1c      	ldr	r3, [pc, #112]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1d      	ldr	r2, [pc, #116]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003780:	615a      	str	r2, [r3, #20]
 8003782:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800378e:	e026      	b.n	80037de <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003798:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d209      	bcs.n	80037bc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a8:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f7fe fdba 	bl	800232e <vListInsert>
}
 80037ba:	e010      	b.n	80037de <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037bc:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <prvAddCurrentTaskToDelayedList+0xf8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe fdb0 	bl	800232e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d202      	bcs.n	80037de <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80037d8:	4a09      	ldr	r2, [pc, #36]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6013      	str	r3, [r2, #0]
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001f4 	.word	0x200001f4
 80037ec:	20000118 	.word	0x20000118
 80037f0:	200001f8 	.word	0x200001f8
 80037f4:	200001dc 	.word	0x200001dc
 80037f8:	200001ac 	.word	0x200001ac
 80037fc:	200001a8 	.word	0x200001a8
 8003800:	20000210 	.word	0x20000210

08003804 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800380e:	f000 fa4f 	bl	8003cb0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003812:	4b12      	ldr	r3, [pc, #72]	@ (800385c <xTimerCreateTimerTask+0x58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800381a:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <xTimerCreateTimerTask+0x5c>)
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2302      	movs	r3, #2
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003828:	490e      	ldr	r1, [pc, #56]	@ (8003864 <xTimerCreateTimerTask+0x60>)
 800382a:	480f      	ldr	r0, [pc, #60]	@ (8003868 <xTimerCreateTimerTask+0x64>)
 800382c:	f7ff f8c2 	bl	80029b4 <xTaskCreate>
 8003830:	4603      	mov	r3, r0
 8003832:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <xTimerCreateTimerTask+0x4e>
        __asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	603b      	str	r3, [r7, #0]
    }
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <xTimerCreateTimerTask+0x4a>
        return xReturn;
 8003852:	687b      	ldr	r3, [r7, #4]
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000024c 	.word	0x2000024c
 8003860:	20000250 	.word	0x20000250
 8003864:	080053d0 	.word	0x080053d0
 8003868:	08003911 	.word	0x08003911

0800386c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003878:	e008      	b.n	800388c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	18d1      	adds	r1, r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f8df 	bl	8003a5c <prvInsertTimerInActiveList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <prvReloadTimer+0xe>
        }
    }
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ba:	4b14      	ldr	r3, [pc, #80]	@ (800390c <prvProcessExpiredTimer+0x5c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fd69 	bl	80023a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff ffc3 	bl	800386c <prvReloadTimer>
 80038e6:	e008      	b.n	80038fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	4798      	blx	r3
    }
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000244 	.word	0x20000244

08003910 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f859 	bl	80039d4 <prvGetNextExpireTime>
 8003922:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f805 	bl	8003938 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800392e:	f000 f8d7 	bl	8003ae0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003932:	bf00      	nop
 8003934:	e7f0      	b.n	8003918 <prvTimerTask+0x8>
	...

08003938 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003942:	f7ff f9eb 	bl	8002d1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f866 	bl	8003a1c <prvSampleTimeNow>
 8003950:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d130      	bne.n	80039ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <prvProcessTimerOrBlockTask+0x3c>
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	429a      	cmp	r2, r3
 8003964:	d806      	bhi.n	8003974 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003966:	f7ff f9e7 	bl	8002d38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff9f 	bl	80038b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003972:	e024      	b.n	80039be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800397a:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <prvProcessTimerOrBlockTask+0x90>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <prvProcessTimerOrBlockTask+0x50>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <prvProcessTimerOrBlockTask+0x52>
 8003988:	2300      	movs	r3, #0
 800398a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800398c:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <prvProcessTimerOrBlockTask+0x94>)
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	f7fe ffd7 	bl	800294c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800399e:	f7ff f9cb 	bl	8002d38 <xTaskResumeAll>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <prvProcessTimerOrBlockTask+0x98>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
    }
 80039b8:	e001      	b.n	80039be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039ba:	f7ff f9bd 	bl	8002d38 <xTaskResumeAll>
    }
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000248 	.word	0x20000248
 80039cc:	2000024c 	.word	0x2000024c
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <prvGetNextExpireTime+0x44>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <prvGetNextExpireTime+0x16>
 80039e6:	2201      	movs	r2, #1
 80039e8:	e000      	b.n	80039ec <prvGetNextExpireTime+0x18>
 80039ea:	2200      	movs	r2, #0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <prvGetNextExpireTime+0x44>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e001      	b.n	8003a08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a08:	68fb      	ldr	r3, [r7, #12]
    }
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000244 	.word	0x20000244

08003a1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a24:	f7ff fa76 	bl	8002f14 <xTaskGetTickCount>
 8003a28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <prvSampleTimeNow+0x3c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d205      	bcs.n	8003a40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a34:	f000 f916 	bl	8003c64 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a46:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <prvSampleTimeNow+0x3c>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000254 	.word	0x20000254

08003a5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d812      	bhi.n	8003aa8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e01b      	b.n	8003ace <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a96:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <prvInsertTimerInActiveList+0x7c>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7fe fc44 	bl	800232e <vListInsert>
 8003aa6:	e012      	b.n	8003ace <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d206      	bcs.n	8003abe <prvInsertTimerInActiveList+0x62>
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e007      	b.n	8003ace <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <prvInsertTimerInActiveList+0x80>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fc30 	bl	800232e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ace:	697b      	ldr	r3, [r7, #20]
    }
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000248 	.word	0x20000248
 8003adc:	20000244 	.word	0x20000244

08003ae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ae6:	e0a9      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f2c0 80a6 	blt.w	8003c3c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fc4d 	bl	80023a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff87 	bl	8003a1c <prvSampleTimeNow>
 8003b0e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f200 808e 	bhi.w	8003c36 <prvProcessReceivedCommands+0x156>
 8003b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <prvProcessReceivedCommands+0x40>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b45 	.word	0x08003b45
 8003b28:	08003bad 	.word	0x08003bad
 8003b2c:	08003bc1 	.word	0x08003bc1
 8003b30:	08003c0d 	.word	0x08003c0d
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b45 	.word	0x08003b45
 8003b3c:	08003bad 	.word	0x08003bad
 8003b40:	08003bc1 	.word	0x08003bc1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	18d1      	adds	r1, r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	69f8      	ldr	r0, [r7, #28]
 8003b64:	f7ff ff7a 	bl	8003a5c <prvInsertTimerInActiveList>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d065      	beq.n	8003c3a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4413      	add	r3, r2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4619      	mov	r1, r3
 8003b88:	69f8      	ldr	r0, [r7, #28]
 8003b8a:	f7ff fe6f 	bl	800386c <prvReloadTimer>
 8003b8e:	e008      	b.n	8003ba2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	69f8      	ldr	r0, [r7, #28]
 8003ba8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003baa:	e046      	b.n	8003c3a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003bbe:	e03d      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	617b      	str	r3, [r7, #20]
    }
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	18d1      	adds	r1, r2, r3
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f7ff ff29 	bl	8003a5c <prvInsertTimerInActiveList>
                        break;
 8003c0a:	e017      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003c1a:	69f8      	ldr	r0, [r7, #28]
 8003c1c:	f000 fb52 	bl	80042c4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c20:	e00c      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c34:	e002      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <prvProcessReceivedCommands+0x15c>
                        break;
 8003c3a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c3c:	4b08      	ldr	r3, [pc, #32]	@ (8003c60 <prvProcessReceivedCommands+0x180>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f107 0108 	add.w	r1, r7, #8
 8003c44:	2200      	movs	r2, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fcca 	bl	80025e0 <xQueueReceive>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f47f af4a 	bne.w	8003ae8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000024c 	.word	0x2000024c

08003c64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c6a:	e009      	b.n	8003c80 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <prvSwitchTimerLists+0x44>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c76:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7a:	6838      	ldr	r0, [r7, #0]
 8003c7c:	f7ff fe18 	bl	80038b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <prvSwitchTimerLists+0x44>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <prvSwitchTimerLists+0x44>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c90:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <prvSwitchTimerLists+0x48>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a04      	ldr	r2, [pc, #16]	@ (8003ca8 <prvSwitchTimerLists+0x44>)
 8003c96:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c98:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <prvSwitchTimerLists+0x48>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
    }
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000244 	.word	0x20000244
 8003cac:	20000248 	.word	0x20000248

08003cb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cb4:	f000 f962 	bl	8003f7c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <prvCheckForValidListAndQueue+0x54>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11d      	bne.n	8003cfc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cc0:	4811      	ldr	r0, [pc, #68]	@ (8003d08 <prvCheckForValidListAndQueue+0x58>)
 8003cc2:	f7fe fb07 	bl	80022d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cc6:	4811      	ldr	r0, [pc, #68]	@ (8003d0c <prvCheckForValidListAndQueue+0x5c>)
 8003cc8:	f7fe fb04 	bl	80022d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <prvCheckForValidListAndQueue+0x60>)
 8003cce:	4a0e      	ldr	r2, [pc, #56]	@ (8003d08 <prvCheckForValidListAndQueue+0x58>)
 8003cd0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <prvCheckForValidListAndQueue+0x64>)
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <prvCheckForValidListAndQueue+0x5c>)
 8003cd6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cd8:	2200      	movs	r2, #0
 8003cda:	210c      	movs	r1, #12
 8003cdc:	200a      	movs	r0, #10
 8003cde:	f7fe fc0d 	bl	80024fc <xQueueGenericCreate>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <prvCheckForValidListAndQueue+0x54>)
 8003ce6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <prvCheckForValidListAndQueue+0x54>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <prvCheckForValidListAndQueue+0x54>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4908      	ldr	r1, [pc, #32]	@ (8003d18 <prvCheckForValidListAndQueue+0x68>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fdd8 	bl	80028ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cfc:	f000 f970 	bl	8003fe0 <vPortExitCritical>
    }
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000024c 	.word	0x2000024c
 8003d08:	2000021c 	.word	0x2000021c
 8003d0c:	20000230 	.word	0x20000230
 8003d10:	20000244 	.word	0x20000244
 8003d14:	20000248 	.word	0x20000248
 8003d18:	080053d8 	.word	0x080053d8

08003d1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b04      	subs	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d80 <pxPortInitialiseStack+0x64>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b14      	subs	r3, #20
 8003d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b04      	subs	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f06f 0202 	mvn.w	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b20      	subs	r3, #32
 8003d70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	08003d85 	.word	0x08003d85

08003d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d8e:	4b13      	ldr	r3, [pc, #76]	@ (8003ddc <prvTaskExitError+0x58>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d00b      	beq.n	8003db0 <prvTaskExitError+0x2c>
        __asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
    }
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <prvTaskExitError+0x28>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60bb      	str	r3, [r7, #8]
    }
 8003dc2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003dc4:	bf00      	nop
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0fc      	beq.n	8003dc6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000010 	.word	0x20000010

08003de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <pxCurrentTCBConst2>)
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	f380 8809 	msr	PSP, r0
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	4770      	bx	lr
 8003dfc:	f3af 8000 	nop.w

08003e00 <pxCurrentTCBConst2>:
 8003e00:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e08:	4808      	ldr	r0, [pc, #32]	@ (8003e2c <prvPortStartFirstTask+0x24>)
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	6800      	ldr	r0, [r0, #0]
 8003e0e:	f380 8808 	msr	MSP, r0
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8814 	msr	CONTROL, r0
 8003e1a:	b662      	cpsie	i
 8003e1c:	b661      	cpsie	f
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	df00      	svc	0
 8003e28:	bf00      	nop
 8003e2a:	0000      	.short	0x0000
 8003e2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop

08003e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e3a:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <xPortStartScheduler+0x124>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a47      	ldr	r2, [pc, #284]	@ (8003f5c <xPortStartScheduler+0x128>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10b      	bne.n	8003e5c <xPortStartScheduler+0x28>
        __asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
    }
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f58 <xPortStartScheduler+0x124>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a3f      	ldr	r2, [pc, #252]	@ (8003f60 <xPortStartScheduler+0x12c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10b      	bne.n	8003e7e <xPortStartScheduler+0x4a>
        __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	60fb      	str	r3, [r7, #12]
    }
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e7e:	4b39      	ldr	r3, [pc, #228]	@ (8003f64 <xPortStartScheduler+0x130>)
 8003e80:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	22ff      	movs	r2, #255	@ 0xff
 8003e8e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <xPortStartScheduler+0x134>)
 8003ea4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea6:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eac:	e009      	b.n	8003ec2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003eae:	4b2f      	ldr	r3, [pc, #188]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003eb6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b80      	cmp	r3, #128	@ 0x80
 8003ecc:	d0ef      	beq.n	8003eae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00b      	beq.n	8003ef2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
    }
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003efa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f04:	4a19      	ldr	r2, [pc, #100]	@ (8003f6c <xPortStartScheduler+0x138>)
 8003f06:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f10:	4b17      	ldr	r3, [pc, #92]	@ (8003f70 <xPortStartScheduler+0x13c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <xPortStartScheduler+0x13c>)
 8003f16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <xPortStartScheduler+0x13c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <xPortStartScheduler+0x13c>)
 8003f22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f28:	f000 f8e0 	bl	80040ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <xPortStartScheduler+0x140>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f32:	f000 f8ff 	bl	8004134 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <xPortStartScheduler+0x144>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f78 <xPortStartScheduler+0x144>)
 8003f3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f42:	f7ff ff61 	bl	8003e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f46:	f7ff f8e9 	bl	800311c <vTaskSwitchContext>
    prvTaskExitError();
 8003f4a:	f7ff ff1b 	bl	8003d84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	e000ed00 	.word	0xe000ed00
 8003f5c:	410fc271 	.word	0x410fc271
 8003f60:	410fc270 	.word	0x410fc270
 8003f64:	e000e400 	.word	0xe000e400
 8003f68:	20000258 	.word	0x20000258
 8003f6c:	2000025c 	.word	0x2000025c
 8003f70:	e000ed20 	.word	0xe000ed20
 8003f74:	20000010 	.word	0x20000010
 8003f78:	e000ef34 	.word	0xe000ef34

08003f7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
    }
 8003f94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <vPortEnterCritical+0x5c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <vPortEnterCritical+0x5c>)
 8003f9e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <vPortEnterCritical+0x5c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d110      	bne.n	8003fca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <vPortEnterCritical+0x60>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <vPortEnterCritical+0x4e>
        __asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	603b      	str	r3, [r7, #0]
    }
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <vPortEnterCritical+0x4a>
    }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003fe6:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <vPortExitCritical+0x50>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <vPortExitCritical+0x26>
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
    }
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004006:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <vPortExitCritical+0x50>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <vPortExitCritical+0x50>)
 800400e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <vPortExitCritical+0x50>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <vPortExitCritical+0x44>
 8004018:	2300      	movs	r3, #0
 800401a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004022:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000010 	.word	0x20000010
	...

08004040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004040:	f3ef 8009 	mrs	r0, PSP
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <pxCurrentTCBConst>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f01e 0f10 	tst.w	lr, #16
 8004050:	bf08      	it	eq
 8004052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004064:	f380 8811 	msr	BASEPRI, r0
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f7ff f854 	bl	800311c <vTaskSwitchContext>
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f380 8811 	msr	BASEPRI, r0
 800407c:	bc09      	pop	{r0, r3}
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	6808      	ldr	r0, [r1, #0]
 8004082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004086:	f01e 0f10 	tst.w	lr, #16
 800408a:	bf08      	it	eq
 800408c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004090:	f380 8809 	msr	PSP, r0
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w

080040a0 <pxCurrentTCBConst>:
 80040a0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
        __asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
    }
 80040c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80040c2:	f7fe ff37 	bl	8002f34 <xTaskIncrementTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <SysTick_Handler+0x40>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f383 8811 	msr	BASEPRI, r3
    }
 80040de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <vPortSetupTimerInterrupt+0x34>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <vPortSetupTimerInterrupt+0x38>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <vPortSetupTimerInterrupt+0x3c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <vPortSetupTimerInterrupt+0x40>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <vPortSetupTimerInterrupt+0x44>)
 800410a:	3b01      	subs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800410e:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <vPortSetupTimerInterrupt+0x34>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010
 8004124:	e000e018 	.word	0xe000e018
 8004128:	20000000 	.word	0x20000000
 800412c:	10624dd3 	.word	0x10624dd3
 8004130:	e000e014 	.word	0xe000e014

08004134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004144 <vPortEnableVFP+0x10>
 8004138:	6801      	ldr	r1, [r0, #0]
 800413a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800413e:	6001      	str	r1, [r0, #0]
 8004140:	4770      	bx	lr
 8004142:	0000      	.short	0x0000
 8004144:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop

0800414c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	@ 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004158:	f7fe fde0 	bl	8002d1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800415c:	4b54      	ldr	r3, [pc, #336]	@ (80042b0 <pvPortMalloc+0x164>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004164:	f000 f90c 	bl	8004380 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d012      	beq.n	8004194 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800416e:	2208      	movs	r2, #8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	3308      	adds	r3, #8
 800417a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	43db      	mvns	r3, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d804      	bhi.n	8004190 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	4413      	add	r3, r2
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	e001      	b.n	8004194 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	db71      	blt.n	800427e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d06e      	beq.n	800427e <pvPortMalloc+0x132>
 80041a0:	4b44      	ldr	r3, [pc, #272]	@ (80042b4 <pvPortMalloc+0x168>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d869      	bhi.n	800427e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80041aa:	4b43      	ldr	r3, [pc, #268]	@ (80042b8 <pvPortMalloc+0x16c>)
 80041ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80041ae:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <pvPortMalloc+0x16c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041b4:	e004      	b.n	80041c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d903      	bls.n	80041d2 <pvPortMalloc+0x86>
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f1      	bne.n	80041b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80041d2:	4b37      	ldr	r3, [pc, #220]	@ (80042b0 <pvPortMalloc+0x164>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	429a      	cmp	r2, r3
 80041da:	d050      	beq.n	800427e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2208      	movs	r2, #8
 80041e2:	4413      	add	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	2308      	movs	r3, #8
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d920      	bls.n	8004240 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <pvPortMalloc+0xdc>
        __asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
    }
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f000 f8fc 	bl	8004438 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004240:	4b1c      	ldr	r3, [pc, #112]	@ (80042b4 <pvPortMalloc+0x168>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <pvPortMalloc+0x168>)
 800424c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800424e:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <pvPortMalloc+0x168>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <pvPortMalloc+0x170>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d203      	bcs.n	8004262 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800425a:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <pvPortMalloc+0x168>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <pvPortMalloc+0x170>)
 8004260:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004274:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <pvPortMalloc+0x174>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <pvPortMalloc+0x174>)
 800427c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800427e:	f7fe fd5b 	bl	8002d38 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <pvPortMalloc+0x158>
        __asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
    }
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <pvPortMalloc+0x154>
    return pvReturn;
 80042a4:	69fb      	ldr	r3, [r7, #28]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	@ 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20012e68 	.word	0x20012e68
 80042b4:	20012e6c 	.word	0x20012e6c
 80042b8:	20012e60 	.word	0x20012e60
 80042bc:	20012e70 	.word	0x20012e70
 80042c0:	20012e74 	.word	0x20012e74

080042c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04b      	beq.n	800436e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80042d6:	2308      	movs	r3, #8
 80042d8:	425b      	negs	r3, r3
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db0b      	blt.n	8004304 <vPortFree+0x40>
        __asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	60fb      	str	r3, [r7, #12]
    }
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <vPortFree+0x60>
        __asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60bb      	str	r3, [r7, #8]
    }
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0fdb      	lsrs	r3, r3, #31
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d118      	bne.n	800436e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004348:	f7fe fce8 	bl	8002d1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <vPortFree+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4413      	add	r3, r2
 8004356:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <vPortFree+0xb4>)
 8004358:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800435a:	6938      	ldr	r0, [r7, #16]
 800435c:	f000 f86c 	bl	8004438 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <vPortFree+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <vPortFree+0xb8>)
 8004368:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800436a:	f7fe fce5 	bl	8002d38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20012e6c 	.word	0x20012e6c
 800437c:	20012e78 	.word	0x20012e78

08004380 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004386:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800438a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800438c:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <prvHeapInit+0xa4>)
 800438e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3307      	adds	r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <prvHeapInit+0xa4>)
 80043b0:	4413      	add	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <prvHeapInit+0xa8>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80043be:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <prvHeapInit+0xa8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4413      	add	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80043cc:	2208      	movs	r2, #8
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a13      	ldr	r2, [pc, #76]	@ (800442c <prvHeapInit+0xac>)
 80043e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80043e2:	4b12      	ldr	r3, [pc, #72]	@ (800442c <prvHeapInit+0xac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <prvHeapInit+0xac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	1ad2      	subs	r2, r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004400:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <prvHeapInit+0xac>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <prvHeapInit+0xb0>)
 800440e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a07      	ldr	r2, [pc, #28]	@ (8004434 <prvHeapInit+0xb4>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000260 	.word	0x20000260
 8004428:	20012e60 	.word	0x20012e60
 800442c:	20012e68 	.word	0x20012e68
 8004430:	20012e70 	.word	0x20012e70
 8004434:	20012e6c 	.word	0x20012e6c

08004438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <prvInsertBlockIntoFreeList+0xac>)
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e002      	b.n	800444c <prvInsertBlockIntoFreeList+0x14>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d8f7      	bhi.n	8004446 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d118      	bne.n	80044c0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d00d      	beq.n	80044b6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e008      	b.n	80044c8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044b6:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <prvInsertBlockIntoFreeList+0xb0>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e003      	b.n	80044c8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d002      	beq.n	80044d6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20012e60 	.word	0x20012e60
 80044e8:	20012e68 	.word	0x20012e68

080044ec <std>:
 80044ec:	2300      	movs	r3, #0
 80044ee:	b510      	push	{r4, lr}
 80044f0:	4604      	mov	r4, r0
 80044f2:	e9c0 3300 	strd	r3, r3, [r0]
 80044f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044fa:	6083      	str	r3, [r0, #8]
 80044fc:	8181      	strh	r1, [r0, #12]
 80044fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004500:	81c2      	strh	r2, [r0, #14]
 8004502:	6183      	str	r3, [r0, #24]
 8004504:	4619      	mov	r1, r3
 8004506:	2208      	movs	r2, #8
 8004508:	305c      	adds	r0, #92	@ 0x5c
 800450a:	f000 f906 	bl	800471a <memset>
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <std+0x58>)
 8004510:	6263      	str	r3, [r4, #36]	@ 0x24
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <std+0x5c>)
 8004514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <std+0x60>)
 8004518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <std+0x64>)
 800451c:	6323      	str	r3, [r4, #48]	@ 0x30
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <std+0x68>)
 8004520:	6224      	str	r4, [r4, #32]
 8004522:	429c      	cmp	r4, r3
 8004524:	d006      	beq.n	8004534 <std+0x48>
 8004526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800452a:	4294      	cmp	r4, r2
 800452c:	d002      	beq.n	8004534 <std+0x48>
 800452e:	33d0      	adds	r3, #208	@ 0xd0
 8004530:	429c      	cmp	r4, r3
 8004532:	d105      	bne.n	8004540 <std+0x54>
 8004534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453c:	f000 b960 	b.w	8004800 <__retarget_lock_init_recursive>
 8004540:	bd10      	pop	{r4, pc}
 8004542:	bf00      	nop
 8004544:	08004695 	.word	0x08004695
 8004548:	080046b7 	.word	0x080046b7
 800454c:	080046ef 	.word	0x080046ef
 8004550:	08004713 	.word	0x08004713
 8004554:	20012e7c 	.word	0x20012e7c

08004558 <stdio_exit_handler>:
 8004558:	4a02      	ldr	r2, [pc, #8]	@ (8004564 <stdio_exit_handler+0xc>)
 800455a:	4903      	ldr	r1, [pc, #12]	@ (8004568 <stdio_exit_handler+0x10>)
 800455c:	4803      	ldr	r0, [pc, #12]	@ (800456c <stdio_exit_handler+0x14>)
 800455e:	f000 b869 	b.w	8004634 <_fwalk_sglue>
 8004562:	bf00      	nop
 8004564:	20000014 	.word	0x20000014
 8004568:	080050bd 	.word	0x080050bd
 800456c:	20000024 	.word	0x20000024

08004570 <cleanup_stdio>:
 8004570:	6841      	ldr	r1, [r0, #4]
 8004572:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <cleanup_stdio+0x34>)
 8004574:	4299      	cmp	r1, r3
 8004576:	b510      	push	{r4, lr}
 8004578:	4604      	mov	r4, r0
 800457a:	d001      	beq.n	8004580 <cleanup_stdio+0x10>
 800457c:	f000 fd9e 	bl	80050bc <_fflush_r>
 8004580:	68a1      	ldr	r1, [r4, #8]
 8004582:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <cleanup_stdio+0x38>)
 8004584:	4299      	cmp	r1, r3
 8004586:	d002      	beq.n	800458e <cleanup_stdio+0x1e>
 8004588:	4620      	mov	r0, r4
 800458a:	f000 fd97 	bl	80050bc <_fflush_r>
 800458e:	68e1      	ldr	r1, [r4, #12]
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <cleanup_stdio+0x3c>)
 8004592:	4299      	cmp	r1, r3
 8004594:	d004      	beq.n	80045a0 <cleanup_stdio+0x30>
 8004596:	4620      	mov	r0, r4
 8004598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459c:	f000 bd8e 	b.w	80050bc <_fflush_r>
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	bf00      	nop
 80045a4:	20012e7c 	.word	0x20012e7c
 80045a8:	20012ee4 	.word	0x20012ee4
 80045ac:	20012f4c 	.word	0x20012f4c

080045b0 <global_stdio_init.part.0>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <global_stdio_init.part.0+0x30>)
 80045b4:	4c0b      	ldr	r4, [pc, #44]	@ (80045e4 <global_stdio_init.part.0+0x34>)
 80045b6:	4a0c      	ldr	r2, [pc, #48]	@ (80045e8 <global_stdio_init.part.0+0x38>)
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	4620      	mov	r0, r4
 80045bc:	2200      	movs	r2, #0
 80045be:	2104      	movs	r1, #4
 80045c0:	f7ff ff94 	bl	80044ec <std>
 80045c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045c8:	2201      	movs	r2, #1
 80045ca:	2109      	movs	r1, #9
 80045cc:	f7ff ff8e 	bl	80044ec <std>
 80045d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045d4:	2202      	movs	r2, #2
 80045d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045da:	2112      	movs	r1, #18
 80045dc:	f7ff bf86 	b.w	80044ec <std>
 80045e0:	20012fb4 	.word	0x20012fb4
 80045e4:	20012e7c 	.word	0x20012e7c
 80045e8:	08004559 	.word	0x08004559

080045ec <__sfp_lock_acquire>:
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <__sfp_lock_acquire+0x8>)
 80045ee:	f000 b908 	b.w	8004802 <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	20012fbd 	.word	0x20012fbd

080045f8 <__sfp_lock_release>:
 80045f8:	4801      	ldr	r0, [pc, #4]	@ (8004600 <__sfp_lock_release+0x8>)
 80045fa:	f000 b903 	b.w	8004804 <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	20012fbd 	.word	0x20012fbd

08004604 <__sinit>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	f7ff fff0 	bl	80045ec <__sfp_lock_acquire>
 800460c:	6a23      	ldr	r3, [r4, #32]
 800460e:	b11b      	cbz	r3, 8004618 <__sinit+0x14>
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	f7ff bff0 	b.w	80045f8 <__sfp_lock_release>
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <__sinit+0x28>)
 800461a:	6223      	str	r3, [r4, #32]
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <__sinit+0x2c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f5      	bne.n	8004610 <__sinit+0xc>
 8004624:	f7ff ffc4 	bl	80045b0 <global_stdio_init.part.0>
 8004628:	e7f2      	b.n	8004610 <__sinit+0xc>
 800462a:	bf00      	nop
 800462c:	08004571 	.word	0x08004571
 8004630:	20012fb4 	.word	0x20012fb4

08004634 <_fwalk_sglue>:
 8004634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004638:	4607      	mov	r7, r0
 800463a:	4688      	mov	r8, r1
 800463c:	4614      	mov	r4, r2
 800463e:	2600      	movs	r6, #0
 8004640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004644:	f1b9 0901 	subs.w	r9, r9, #1
 8004648:	d505      	bpl.n	8004656 <_fwalk_sglue+0x22>
 800464a:	6824      	ldr	r4, [r4, #0]
 800464c:	2c00      	cmp	r4, #0
 800464e:	d1f7      	bne.n	8004640 <_fwalk_sglue+0xc>
 8004650:	4630      	mov	r0, r6
 8004652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d907      	bls.n	800466c <_fwalk_sglue+0x38>
 800465c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004660:	3301      	adds	r3, #1
 8004662:	d003      	beq.n	800466c <_fwalk_sglue+0x38>
 8004664:	4629      	mov	r1, r5
 8004666:	4638      	mov	r0, r7
 8004668:	47c0      	blx	r8
 800466a:	4306      	orrs	r6, r0
 800466c:	3568      	adds	r5, #104	@ 0x68
 800466e:	e7e9      	b.n	8004644 <_fwalk_sglue+0x10>

08004670 <iprintf>:
 8004670:	b40f      	push	{r0, r1, r2, r3}
 8004672:	b507      	push	{r0, r1, r2, lr}
 8004674:	4906      	ldr	r1, [pc, #24]	@ (8004690 <iprintf+0x20>)
 8004676:	ab04      	add	r3, sp, #16
 8004678:	6808      	ldr	r0, [r1, #0]
 800467a:	f853 2b04 	ldr.w	r2, [r3], #4
 800467e:	6881      	ldr	r1, [r0, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	f000 f9f1 	bl	8004a68 <_vfiprintf_r>
 8004686:	b003      	add	sp, #12
 8004688:	f85d eb04 	ldr.w	lr, [sp], #4
 800468c:	b004      	add	sp, #16
 800468e:	4770      	bx	lr
 8004690:	20000020 	.word	0x20000020

08004694 <__sread>:
 8004694:	b510      	push	{r4, lr}
 8004696:	460c      	mov	r4, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	f000 f868 	bl	8004770 <_read_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	bfab      	itete	ge
 80046a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046a6:	89a3      	ldrhlt	r3, [r4, #12]
 80046a8:	181b      	addge	r3, r3, r0
 80046aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046ae:	bfac      	ite	ge
 80046b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046b2:	81a3      	strhlt	r3, [r4, #12]
 80046b4:	bd10      	pop	{r4, pc}

080046b6 <__swrite>:
 80046b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ba:	461f      	mov	r7, r3
 80046bc:	898b      	ldrh	r3, [r1, #12]
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	4605      	mov	r5, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4616      	mov	r6, r2
 80046c6:	d505      	bpl.n	80046d4 <__swrite+0x1e>
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	2302      	movs	r3, #2
 80046ce:	2200      	movs	r2, #0
 80046d0:	f000 f83c 	bl	800474c <_lseek_r>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	4632      	mov	r2, r6
 80046e2:	463b      	mov	r3, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ea:	f000 b853 	b.w	8004794 <_write_r>

080046ee <__sseek>:
 80046ee:	b510      	push	{r4, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f6:	f000 f829 	bl	800474c <_lseek_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	bf15      	itete	ne
 8004700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800470a:	81a3      	strheq	r3, [r4, #12]
 800470c:	bf18      	it	ne
 800470e:	81a3      	strhne	r3, [r4, #12]
 8004710:	bd10      	pop	{r4, pc}

08004712 <__sclose>:
 8004712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004716:	f000 b809 	b.w	800472c <_close_r>

0800471a <memset>:
 800471a:	4402      	add	r2, r0
 800471c:	4603      	mov	r3, r0
 800471e:	4293      	cmp	r3, r2
 8004720:	d100      	bne.n	8004724 <memset+0xa>
 8004722:	4770      	bx	lr
 8004724:	f803 1b01 	strb.w	r1, [r3], #1
 8004728:	e7f9      	b.n	800471e <memset+0x4>
	...

0800472c <_close_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_close_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc f9e1 	bl	8000afe <_close>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_close_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_close_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20012fb8 	.word	0x20012fb8

0800474c <_lseek_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	@ (800476c <_lseek_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc f9f6 	bl	8000b4c <_lseek>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_lseek_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_lseek_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20012fb8 	.word	0x20012fb8

08004770 <_read_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d07      	ldr	r5, [pc, #28]	@ (8004790 <_read_r+0x20>)
 8004774:	4604      	mov	r4, r0
 8004776:	4608      	mov	r0, r1
 8004778:	4611      	mov	r1, r2
 800477a:	2200      	movs	r2, #0
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fc f984 	bl	8000a8c <_read>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_read_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_read_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	20012fb8 	.word	0x20012fb8

08004794 <_write_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	@ (80047b4 <_write_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc f98f 	bl	8000ac6 <_write>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_write_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_write_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20012fb8 	.word	0x20012fb8

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4d0d      	ldr	r5, [pc, #52]	@ (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	@ (80047f4 <__libc_init_array+0x3c>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2600      	movs	r6, #0
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4d0b      	ldr	r5, [pc, #44]	@ (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	@ (80047fc <__libc_init_array+0x44>)
 80047cc:	f000 fdd4 	bl	8005378 <_init>
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2600      	movs	r6, #0
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08005434 	.word	0x08005434
 80047f4:	08005434 	.word	0x08005434
 80047f8:	08005434 	.word	0x08005434
 80047fc:	08005438 	.word	0x08005438

08004800 <__retarget_lock_init_recursive>:
 8004800:	4770      	bx	lr

08004802 <__retarget_lock_acquire_recursive>:
 8004802:	4770      	bx	lr

08004804 <__retarget_lock_release_recursive>:
 8004804:	4770      	bx	lr

08004806 <memcpy>:
 8004806:	440a      	add	r2, r1
 8004808:	4291      	cmp	r1, r2
 800480a:	f100 33ff 	add.w	r3, r0, #4294967295
 800480e:	d100      	bne.n	8004812 <memcpy+0xc>
 8004810:	4770      	bx	lr
 8004812:	b510      	push	{r4, lr}
 8004814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481c:	4291      	cmp	r1, r2
 800481e:	d1f9      	bne.n	8004814 <memcpy+0xe>
 8004820:	bd10      	pop	{r4, pc}
	...

08004824 <_free_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4605      	mov	r5, r0
 8004828:	2900      	cmp	r1, #0
 800482a:	d041      	beq.n	80048b0 <_free_r+0x8c>
 800482c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004830:	1f0c      	subs	r4, r1, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfb8      	it	lt
 8004836:	18e4      	addlt	r4, r4, r3
 8004838:	f000 f8e0 	bl	80049fc <__malloc_lock>
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <_free_r+0x90>)
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	b933      	cbnz	r3, 8004850 <_free_r+0x2c>
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	6014      	str	r4, [r2, #0]
 8004846:	4628      	mov	r0, r5
 8004848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800484c:	f000 b8dc 	b.w	8004a08 <__malloc_unlock>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d908      	bls.n	8004866 <_free_r+0x42>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	1821      	adds	r1, r4, r0
 8004858:	428b      	cmp	r3, r1
 800485a:	bf01      	itttt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	1809      	addeq	r1, r1, r0
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	e7ed      	b.n	8004842 <_free_r+0x1e>
 8004866:	461a      	mov	r2, r3
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	b10b      	cbz	r3, 8004870 <_free_r+0x4c>
 800486c:	42a3      	cmp	r3, r4
 800486e:	d9fa      	bls.n	8004866 <_free_r+0x42>
 8004870:	6811      	ldr	r1, [r2, #0]
 8004872:	1850      	adds	r0, r2, r1
 8004874:	42a0      	cmp	r0, r4
 8004876:	d10b      	bne.n	8004890 <_free_r+0x6c>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	4401      	add	r1, r0
 800487c:	1850      	adds	r0, r2, r1
 800487e:	4283      	cmp	r3, r0
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	d1e0      	bne.n	8004846 <_free_r+0x22>
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	6053      	str	r3, [r2, #4]
 800488a:	4408      	add	r0, r1
 800488c:	6010      	str	r0, [r2, #0]
 800488e:	e7da      	b.n	8004846 <_free_r+0x22>
 8004890:	d902      	bls.n	8004898 <_free_r+0x74>
 8004892:	230c      	movs	r3, #12
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	e7d6      	b.n	8004846 <_free_r+0x22>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	1821      	adds	r1, r4, r0
 800489c:	428b      	cmp	r3, r1
 800489e:	bf04      	itt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	bf04      	itt	eq
 80048a8:	1809      	addeq	r1, r1, r0
 80048aa:	6021      	streq	r1, [r4, #0]
 80048ac:	6054      	str	r4, [r2, #4]
 80048ae:	e7ca      	b.n	8004846 <_free_r+0x22>
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
 80048b2:	bf00      	nop
 80048b4:	20012fc4 	.word	0x20012fc4

080048b8 <sbrk_aligned>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	4e0f      	ldr	r6, [pc, #60]	@ (80048f8 <sbrk_aligned+0x40>)
 80048bc:	460c      	mov	r4, r1
 80048be:	6831      	ldr	r1, [r6, #0]
 80048c0:	4605      	mov	r5, r0
 80048c2:	b911      	cbnz	r1, 80048ca <sbrk_aligned+0x12>
 80048c4:	f000 fcb6 	bl	8005234 <_sbrk_r>
 80048c8:	6030      	str	r0, [r6, #0]
 80048ca:	4621      	mov	r1, r4
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 fcb1 	bl	8005234 <_sbrk_r>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d103      	bne.n	80048de <sbrk_aligned+0x26>
 80048d6:	f04f 34ff 	mov.w	r4, #4294967295
 80048da:	4620      	mov	r0, r4
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	1cc4      	adds	r4, r0, #3
 80048e0:	f024 0403 	bic.w	r4, r4, #3
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d0f8      	beq.n	80048da <sbrk_aligned+0x22>
 80048e8:	1a21      	subs	r1, r4, r0
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 fca2 	bl	8005234 <_sbrk_r>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d1f2      	bne.n	80048da <sbrk_aligned+0x22>
 80048f4:	e7ef      	b.n	80048d6 <sbrk_aligned+0x1e>
 80048f6:	bf00      	nop
 80048f8:	20012fc0 	.word	0x20012fc0

080048fc <_malloc_r>:
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	1ccd      	adds	r5, r1, #3
 8004902:	f025 0503 	bic.w	r5, r5, #3
 8004906:	3508      	adds	r5, #8
 8004908:	2d0c      	cmp	r5, #12
 800490a:	bf38      	it	cc
 800490c:	250c      	movcc	r5, #12
 800490e:	2d00      	cmp	r5, #0
 8004910:	4606      	mov	r6, r0
 8004912:	db01      	blt.n	8004918 <_malloc_r+0x1c>
 8004914:	42a9      	cmp	r1, r5
 8004916:	d904      	bls.n	8004922 <_malloc_r+0x26>
 8004918:	230c      	movs	r3, #12
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	2000      	movs	r0, #0
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049f8 <_malloc_r+0xfc>
 8004926:	f000 f869 	bl	80049fc <__malloc_lock>
 800492a:	f8d8 3000 	ldr.w	r3, [r8]
 800492e:	461c      	mov	r4, r3
 8004930:	bb44      	cbnz	r4, 8004984 <_malloc_r+0x88>
 8004932:	4629      	mov	r1, r5
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff ffbf 	bl	80048b8 <sbrk_aligned>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	4604      	mov	r4, r0
 800493e:	d158      	bne.n	80049f2 <_malloc_r+0xf6>
 8004940:	f8d8 4000 	ldr.w	r4, [r8]
 8004944:	4627      	mov	r7, r4
 8004946:	2f00      	cmp	r7, #0
 8004948:	d143      	bne.n	80049d2 <_malloc_r+0xd6>
 800494a:	2c00      	cmp	r4, #0
 800494c:	d04b      	beq.n	80049e6 <_malloc_r+0xea>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	4639      	mov	r1, r7
 8004952:	4630      	mov	r0, r6
 8004954:	eb04 0903 	add.w	r9, r4, r3
 8004958:	f000 fc6c 	bl	8005234 <_sbrk_r>
 800495c:	4581      	cmp	r9, r0
 800495e:	d142      	bne.n	80049e6 <_malloc_r+0xea>
 8004960:	6821      	ldr	r1, [r4, #0]
 8004962:	1a6d      	subs	r5, r5, r1
 8004964:	4629      	mov	r1, r5
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ffa6 	bl	80048b8 <sbrk_aligned>
 800496c:	3001      	adds	r0, #1
 800496e:	d03a      	beq.n	80049e6 <_malloc_r+0xea>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	442b      	add	r3, r5
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	f8d8 3000 	ldr.w	r3, [r8]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	bb62      	cbnz	r2, 80049d8 <_malloc_r+0xdc>
 800497e:	f8c8 7000 	str.w	r7, [r8]
 8004982:	e00f      	b.n	80049a4 <_malloc_r+0xa8>
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	1b52      	subs	r2, r2, r5
 8004988:	d420      	bmi.n	80049cc <_malloc_r+0xd0>
 800498a:	2a0b      	cmp	r2, #11
 800498c:	d917      	bls.n	80049be <_malloc_r+0xc2>
 800498e:	1961      	adds	r1, r4, r5
 8004990:	42a3      	cmp	r3, r4
 8004992:	6025      	str	r5, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	6059      	strne	r1, [r3, #4]
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	bf08      	it	eq
 800499c:	f8c8 1000 	streq.w	r1, [r8]
 80049a0:	5162      	str	r2, [r4, r5]
 80049a2:	604b      	str	r3, [r1, #4]
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 f82f 	bl	8004a08 <__malloc_unlock>
 80049aa:	f104 000b 	add.w	r0, r4, #11
 80049ae:	1d23      	adds	r3, r4, #4
 80049b0:	f020 0007 	bic.w	r0, r0, #7
 80049b4:	1ac2      	subs	r2, r0, r3
 80049b6:	bf1c      	itt	ne
 80049b8:	1a1b      	subne	r3, r3, r0
 80049ba:	50a3      	strne	r3, [r4, r2]
 80049bc:	e7af      	b.n	800491e <_malloc_r+0x22>
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	bf0c      	ite	eq
 80049c4:	f8c8 2000 	streq.w	r2, [r8]
 80049c8:	605a      	strne	r2, [r3, #4]
 80049ca:	e7eb      	b.n	80049a4 <_malloc_r+0xa8>
 80049cc:	4623      	mov	r3, r4
 80049ce:	6864      	ldr	r4, [r4, #4]
 80049d0:	e7ae      	b.n	8004930 <_malloc_r+0x34>
 80049d2:	463c      	mov	r4, r7
 80049d4:	687f      	ldr	r7, [r7, #4]
 80049d6:	e7b6      	b.n	8004946 <_malloc_r+0x4a>
 80049d8:	461a      	mov	r2, r3
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d1fb      	bne.n	80049d8 <_malloc_r+0xdc>
 80049e0:	2300      	movs	r3, #0
 80049e2:	6053      	str	r3, [r2, #4]
 80049e4:	e7de      	b.n	80049a4 <_malloc_r+0xa8>
 80049e6:	230c      	movs	r3, #12
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f80c 	bl	8004a08 <__malloc_unlock>
 80049f0:	e794      	b.n	800491c <_malloc_r+0x20>
 80049f2:	6005      	str	r5, [r0, #0]
 80049f4:	e7d6      	b.n	80049a4 <_malloc_r+0xa8>
 80049f6:	bf00      	nop
 80049f8:	20012fc4 	.word	0x20012fc4

080049fc <__malloc_lock>:
 80049fc:	4801      	ldr	r0, [pc, #4]	@ (8004a04 <__malloc_lock+0x8>)
 80049fe:	f7ff bf00 	b.w	8004802 <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20012fbc 	.word	0x20012fbc

08004a08 <__malloc_unlock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	@ (8004a10 <__malloc_unlock+0x8>)
 8004a0a:	f7ff befb 	b.w	8004804 <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20012fbc 	.word	0x20012fbc

08004a14 <__sfputc_r>:
 8004a14:	6893      	ldr	r3, [r2, #8]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	b410      	push	{r4}
 8004a1c:	6093      	str	r3, [r2, #8]
 8004a1e:	da08      	bge.n	8004a32 <__sfputc_r+0x1e>
 8004a20:	6994      	ldr	r4, [r2, #24]
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	db01      	blt.n	8004a2a <__sfputc_r+0x16>
 8004a26:	290a      	cmp	r1, #10
 8004a28:	d103      	bne.n	8004a32 <__sfputc_r+0x1e>
 8004a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2e:	f000 bb6d 	b.w	800510c <__swbuf_r>
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	1c58      	adds	r0, r3, #1
 8004a36:	6010      	str	r0, [r2, #0]
 8004a38:	7019      	strb	r1, [r3, #0]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <__sfputs_r>:
 8004a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	18d5      	adds	r5, r2, r3
 8004a4c:	42ac      	cmp	r4, r5
 8004a4e:	d101      	bne.n	8004a54 <__sfputs_r+0x12>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e007      	b.n	8004a64 <__sfputs_r+0x22>
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	463a      	mov	r2, r7
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ffda 	bl	8004a14 <__sfputc_r>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1f3      	bne.n	8004a4c <__sfputs_r+0xa>
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a68 <_vfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	b09d      	sub	sp, #116	@ 0x74
 8004a70:	4614      	mov	r4, r2
 8004a72:	4698      	mov	r8, r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	b118      	cbz	r0, 8004a80 <_vfiprintf_r+0x18>
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <_vfiprintf_r+0x18>
 8004a7c:	f7ff fdc2 	bl	8004604 <__sinit>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a8e:	f7ff feb8 	bl	8004802 <__retarget_lock_acquire_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	d501      	bpl.n	8004a9c <_vfiprintf_r+0x34>
 8004a98:	692b      	ldr	r3, [r5, #16]
 8004a9a:	b99b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x5c>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f000 fb72 	bl	8005188 <__swsetup_r>
 8004aa4:	b170      	cbz	r0, 8004ac4 <_vfiprintf_r+0x5c>
 8004aa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa8:	07dc      	lsls	r4, r3, #31
 8004aaa:	d504      	bpl.n	8004ab6 <_vfiprintf_r+0x4e>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b01d      	add	sp, #116	@ 0x74
 8004ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d4f7      	bmi.n	8004aac <_vfiprintf_r+0x44>
 8004abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004abe:	f7ff fea1 	bl	8004804 <__retarget_lock_release_recursive>
 8004ac2:	e7f3      	b.n	8004aac <_vfiprintf_r+0x44>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad2:	2330      	movs	r3, #48	@ 0x30
 8004ad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c84 <_vfiprintf_r+0x21c>
 8004ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004adc:	f04f 0901 	mov.w	r9, #1
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae8:	b10a      	cbz	r2, 8004aee <_vfiprintf_r+0x86>
 8004aea:	2a25      	cmp	r2, #37	@ 0x25
 8004aec:	d1f9      	bne.n	8004ae2 <_vfiprintf_r+0x7a>
 8004aee:	ebba 0b04 	subs.w	fp, sl, r4
 8004af2:	d00b      	beq.n	8004b0c <_vfiprintf_r+0xa4>
 8004af4:	465b      	mov	r3, fp
 8004af6:	4622      	mov	r2, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ffa1 	bl	8004a42 <__sfputs_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f000 80a7 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b08:	445a      	add	r2, fp
 8004b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 809f 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b16:	2300      	movs	r3, #0
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b20:	f10a 0a01 	add.w	sl, sl, #1
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b2e:	4654      	mov	r4, sl
 8004b30:	2205      	movs	r2, #5
 8004b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b36:	4853      	ldr	r0, [pc, #332]	@ (8004c84 <_vfiprintf_r+0x21c>)
 8004b38:	f7fb fb6a 	bl	8000210 <memchr>
 8004b3c:	9a04      	ldr	r2, [sp, #16]
 8004b3e:	b9d8      	cbnz	r0, 8004b78 <_vfiprintf_r+0x110>
 8004b40:	06d1      	lsls	r1, r2, #27
 8004b42:	bf44      	itt	mi
 8004b44:	2320      	movmi	r3, #32
 8004b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b4a:	0713      	lsls	r3, r2, #28
 8004b4c:	bf44      	itt	mi
 8004b4e:	232b      	movmi	r3, #43	@ 0x2b
 8004b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b54:	f89a 3000 	ldrb.w	r3, [sl]
 8004b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5a:	d015      	beq.n	8004b88 <_vfiprintf_r+0x120>
 8004b5c:	9a07      	ldr	r2, [sp, #28]
 8004b5e:	4654      	mov	r4, sl
 8004b60:	2000      	movs	r0, #0
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b6c:	3b30      	subs	r3, #48	@ 0x30
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d94b      	bls.n	8004c0a <_vfiprintf_r+0x1a2>
 8004b72:	b1b0      	cbz	r0, 8004ba2 <_vfiprintf_r+0x13a>
 8004b74:	9207      	str	r2, [sp, #28]
 8004b76:	e014      	b.n	8004ba2 <_vfiprintf_r+0x13a>
 8004b78:	eba0 0308 	sub.w	r3, r0, r8
 8004b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	46a2      	mov	sl, r4
 8004b86:	e7d2      	b.n	8004b2e <_vfiprintf_r+0xc6>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	1d19      	adds	r1, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbb      	ittet	lt
 8004b94:	425b      	neglt	r3, r3
 8004b96:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9a:	9307      	strge	r3, [sp, #28]
 8004b9c:	9307      	strlt	r3, [sp, #28]
 8004b9e:	bfb8      	it	lt
 8004ba0:	9204      	strlt	r2, [sp, #16]
 8004ba2:	7823      	ldrb	r3, [r4, #0]
 8004ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ba6:	d10a      	bne.n	8004bbe <_vfiprintf_r+0x156>
 8004ba8:	7863      	ldrb	r3, [r4, #1]
 8004baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bac:	d132      	bne.n	8004c14 <_vfiprintf_r+0x1ac>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9203      	str	r2, [sp, #12]
 8004bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bba:	3402      	adds	r4, #2
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c94 <_vfiprintf_r+0x22c>
 8004bc2:	7821      	ldrb	r1, [r4, #0]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fb22 	bl	8000210 <memchr>
 8004bcc:	b138      	cbz	r0, 8004bde <_vfiprintf_r+0x176>
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	eba0 000a 	sub.w	r0, r0, sl
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4082      	lsls	r2, r0
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4829      	ldr	r0, [pc, #164]	@ (8004c88 <_vfiprintf_r+0x220>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004be8:	2206      	movs	r2, #6
 8004bea:	f7fb fb11 	bl	8000210 <memchr>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d03f      	beq.n	8004c72 <_vfiprintf_r+0x20a>
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <_vfiprintf_r+0x224>)
 8004bf4:	bb1b      	cbnz	r3, 8004c3e <_vfiprintf_r+0x1d6>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	3308      	adds	r3, #8
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	443b      	add	r3, r7
 8004c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c08:	e76a      	b.n	8004ae0 <_vfiprintf_r+0x78>
 8004c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7a8      	b.n	8004b66 <_vfiprintf_r+0xfe>
 8004c14:	2300      	movs	r3, #0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4620      	mov	r0, r4
 8004c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c26:	3a30      	subs	r2, #48	@ 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d903      	bls.n	8004c34 <_vfiprintf_r+0x1cc>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0c6      	beq.n	8004bbe <_vfiprintf_r+0x156>
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	e7c4      	b.n	8004bbe <_vfiprintf_r+0x156>
 8004c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c38:	4604      	mov	r4, r0
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7f0      	b.n	8004c20 <_vfiprintf_r+0x1b8>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	4607      	mov	r7, r0
 8004c50:	1c78      	adds	r0, r7, #1
 8004c52:	d1d6      	bne.n	8004c02 <_vfiprintf_r+0x19a>
 8004c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c56:	07d9      	lsls	r1, r3, #31
 8004c58:	d405      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	059a      	lsls	r2, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c62:	f7ff fdcf 	bl	8004804 <__retarget_lock_release_recursive>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	065b      	lsls	r3, r3, #25
 8004c6a:	f53f af1f 	bmi.w	8004aac <_vfiprintf_r+0x44>
 8004c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c70:	e71e      	b.n	8004ab0 <_vfiprintf_r+0x48>
 8004c72:	ab03      	add	r3, sp, #12
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	462a      	mov	r2, r5
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c7a:	a904      	add	r1, sp, #16
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f879 	bl	8004d74 <_printf_i>
 8004c82:	e7e4      	b.n	8004c4e <_vfiprintf_r+0x1e6>
 8004c84:	080053f8 	.word	0x080053f8
 8004c88:	08005402 	.word	0x08005402
 8004c8c:	00000000 	.word	0x00000000
 8004c90:	08004a43 	.word	0x08004a43
 8004c94:	080053fe 	.word	0x080053fe

08004c98 <_printf_common>:
 8004c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	4698      	mov	r8, r3
 8004ca0:	688a      	ldr	r2, [r1, #8]
 8004ca2:	690b      	ldr	r3, [r1, #16]
 8004ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bfb8      	it	lt
 8004cac:	4613      	movlt	r3, r2
 8004cae:	6033      	str	r3, [r6, #0]
 8004cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	b10a      	cbz	r2, 8004cbe <_printf_common+0x26>
 8004cba:	3301      	adds	r3, #1
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	0699      	lsls	r1, r3, #26
 8004cc2:	bf42      	ittt	mi
 8004cc4:	6833      	ldrmi	r3, [r6, #0]
 8004cc6:	3302      	addmi	r3, #2
 8004cc8:	6033      	strmi	r3, [r6, #0]
 8004cca:	6825      	ldr	r5, [r4, #0]
 8004ccc:	f015 0506 	ands.w	r5, r5, #6
 8004cd0:	d106      	bne.n	8004ce0 <_printf_common+0x48>
 8004cd2:	f104 0a19 	add.w	sl, r4, #25
 8004cd6:	68e3      	ldr	r3, [r4, #12]
 8004cd8:	6832      	ldr	r2, [r6, #0]
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	42ab      	cmp	r3, r5
 8004cde:	dc26      	bgt.n	8004d2e <_printf_common+0x96>
 8004ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	3b00      	subs	r3, #0
 8004ce8:	bf18      	it	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	0692      	lsls	r2, r2, #26
 8004cee:	d42b      	bmi.n	8004d48 <_printf_common+0xb0>
 8004cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c8      	blx	r9
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d01e      	beq.n	8004d3c <_printf_common+0xa4>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	f003 0306 	and.w	r3, r3, #6
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	bf02      	ittt	eq
 8004d0a:	68e5      	ldreq	r5, [r4, #12]
 8004d0c:	6833      	ldreq	r3, [r6, #0]
 8004d0e:	1aed      	subeq	r5, r5, r3
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	bf0c      	ite	eq
 8004d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d18:	2500      	movne	r5, #0
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	bfc4      	itt	gt
 8004d1e:	1a9b      	subgt	r3, r3, r2
 8004d20:	18ed      	addgt	r5, r5, r3
 8004d22:	2600      	movs	r6, #0
 8004d24:	341a      	adds	r4, #26
 8004d26:	42b5      	cmp	r5, r6
 8004d28:	d11a      	bne.n	8004d60 <_printf_common+0xc8>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e008      	b.n	8004d40 <_printf_common+0xa8>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4652      	mov	r2, sl
 8004d32:	4641      	mov	r1, r8
 8004d34:	4638      	mov	r0, r7
 8004d36:	47c8      	blx	r9
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d103      	bne.n	8004d44 <_printf_common+0xac>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d44:	3501      	adds	r5, #1
 8004d46:	e7c6      	b.n	8004cd6 <_printf_common+0x3e>
 8004d48:	18e1      	adds	r1, r4, r3
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	2030      	movs	r0, #48	@ 0x30
 8004d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d52:	4422      	add	r2, r4
 8004d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	e7c7      	b.n	8004cf0 <_printf_common+0x58>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4622      	mov	r2, r4
 8004d64:	4641      	mov	r1, r8
 8004d66:	4638      	mov	r0, r7
 8004d68:	47c8      	blx	r9
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d0e6      	beq.n	8004d3c <_printf_common+0xa4>
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7d9      	b.n	8004d26 <_printf_common+0x8e>
	...

08004d74 <_printf_i>:
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	7e0f      	ldrb	r7, [r1, #24]
 8004d7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d7c:	2f78      	cmp	r7, #120	@ 0x78
 8004d7e:	4691      	mov	r9, r2
 8004d80:	4680      	mov	r8, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	469a      	mov	sl, r3
 8004d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d8a:	d807      	bhi.n	8004d9c <_printf_i+0x28>
 8004d8c:	2f62      	cmp	r7, #98	@ 0x62
 8004d8e:	d80a      	bhi.n	8004da6 <_printf_i+0x32>
 8004d90:	2f00      	cmp	r7, #0
 8004d92:	f000 80d2 	beq.w	8004f3a <_printf_i+0x1c6>
 8004d96:	2f58      	cmp	r7, #88	@ 0x58
 8004d98:	f000 80b9 	beq.w	8004f0e <_printf_i+0x19a>
 8004d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004da4:	e03a      	b.n	8004e1c <_printf_i+0xa8>
 8004da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004daa:	2b15      	cmp	r3, #21
 8004dac:	d8f6      	bhi.n	8004d9c <_printf_i+0x28>
 8004dae:	a101      	add	r1, pc, #4	@ (adr r1, 8004db4 <_printf_i+0x40>)
 8004db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db4:	08004e0d 	.word	0x08004e0d
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004d9d 	.word	0x08004d9d
 8004dc0:	08004d9d 	.word	0x08004d9d
 8004dc4:	08004d9d 	.word	0x08004d9d
 8004dc8:	08004d9d 	.word	0x08004d9d
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004d9d 	.word	0x08004d9d
 8004dd4:	08004d9d 	.word	0x08004d9d
 8004dd8:	08004d9d 	.word	0x08004d9d
 8004ddc:	08004d9d 	.word	0x08004d9d
 8004de0:	08004f21 	.word	0x08004f21
 8004de4:	08004e4b 	.word	0x08004e4b
 8004de8:	08004edb 	.word	0x08004edb
 8004dec:	08004d9d 	.word	0x08004d9d
 8004df0:	08004d9d 	.word	0x08004d9d
 8004df4:	08004f43 	.word	0x08004f43
 8004df8:	08004d9d 	.word	0x08004d9d
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004d9d 	.word	0x08004d9d
 8004e04:	08004d9d 	.word	0x08004d9d
 8004e08:	08004ee3 	.word	0x08004ee3
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6032      	str	r2, [r6, #0]
 8004e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e09d      	b.n	8004f5c <_printf_i+0x1e8>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	6031      	str	r1, [r6, #0]
 8004e28:	0606      	lsls	r6, r0, #24
 8004e2a:	d501      	bpl.n	8004e30 <_printf_i+0xbc>
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	e003      	b.n	8004e38 <_printf_i+0xc4>
 8004e30:	0645      	lsls	r5, r0, #25
 8004e32:	d5fb      	bpl.n	8004e2c <_printf_i+0xb8>
 8004e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	da03      	bge.n	8004e44 <_printf_i+0xd0>
 8004e3c:	232d      	movs	r3, #45	@ 0x2d
 8004e3e:	426d      	negs	r5, r5
 8004e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e44:	4859      	ldr	r0, [pc, #356]	@ (8004fac <_printf_i+0x238>)
 8004e46:	230a      	movs	r3, #10
 8004e48:	e011      	b.n	8004e6e <_printf_i+0xfa>
 8004e4a:	6821      	ldr	r1, [r4, #0]
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	0608      	lsls	r0, r1, #24
 8004e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0xe8>
 8004e56:	0649      	lsls	r1, r1, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2ad      	uxthmi	r5, r5
 8004e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e5e:	4853      	ldr	r0, [pc, #332]	@ (8004fac <_printf_i+0x238>)
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	bf14      	ite	ne
 8004e64:	230a      	movne	r3, #10
 8004e66:	2308      	moveq	r3, #8
 8004e68:	2100      	movs	r1, #0
 8004e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e6e:	6866      	ldr	r6, [r4, #4]
 8004e70:	60a6      	str	r6, [r4, #8]
 8004e72:	2e00      	cmp	r6, #0
 8004e74:	bfa2      	ittt	ge
 8004e76:	6821      	ldrge	r1, [r4, #0]
 8004e78:	f021 0104 	bicge.w	r1, r1, #4
 8004e7c:	6021      	strge	r1, [r4, #0]
 8004e7e:	b90d      	cbnz	r5, 8004e84 <_printf_i+0x110>
 8004e80:	2e00      	cmp	r6, #0
 8004e82:	d04b      	beq.n	8004f1c <_printf_i+0x1a8>
 8004e84:	4616      	mov	r6, r2
 8004e86:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e8a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e8e:	5dc7      	ldrb	r7, [r0, r7]
 8004e90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e94:	462f      	mov	r7, r5
 8004e96:	42bb      	cmp	r3, r7
 8004e98:	460d      	mov	r5, r1
 8004e9a:	d9f4      	bls.n	8004e86 <_printf_i+0x112>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d10b      	bne.n	8004eb8 <_printf_i+0x144>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	07df      	lsls	r7, r3, #31
 8004ea4:	d508      	bpl.n	8004eb8 <_printf_i+0x144>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6861      	ldr	r1, [r4, #4]
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	bfde      	ittt	le
 8004eae:	2330      	movle	r3, #48	@ 0x30
 8004eb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004eb8:	1b92      	subs	r2, r2, r6
 8004eba:	6122      	str	r2, [r4, #16]
 8004ebc:	f8cd a000 	str.w	sl, [sp]
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	aa03      	add	r2, sp, #12
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fee6 	bl	8004c98 <_printf_common>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d14a      	bne.n	8004f66 <_printf_i+0x1f2>
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	b004      	add	sp, #16
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 0320 	orr.w	r3, r3, #32
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	4833      	ldr	r0, [pc, #204]	@ (8004fb0 <_printf_i+0x23c>)
 8004ee4:	2778      	movs	r7, #120	@ 0x78
 8004ee6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	6831      	ldr	r1, [r6, #0]
 8004eee:	061f      	lsls	r7, r3, #24
 8004ef0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ef4:	d402      	bmi.n	8004efc <_printf_i+0x188>
 8004ef6:	065f      	lsls	r7, r3, #25
 8004ef8:	bf48      	it	mi
 8004efa:	b2ad      	uxthmi	r5, r5
 8004efc:	6031      	str	r1, [r6, #0]
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	bf44      	itt	mi
 8004f02:	f043 0320 	orrmi.w	r3, r3, #32
 8004f06:	6023      	strmi	r3, [r4, #0]
 8004f08:	b11d      	cbz	r5, 8004f12 <_printf_i+0x19e>
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	e7ac      	b.n	8004e68 <_printf_i+0xf4>
 8004f0e:	4827      	ldr	r0, [pc, #156]	@ (8004fac <_printf_i+0x238>)
 8004f10:	e7e9      	b.n	8004ee6 <_printf_i+0x172>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f023 0320 	bic.w	r3, r3, #32
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	e7f6      	b.n	8004f0a <_printf_i+0x196>
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	e7bd      	b.n	8004e9c <_printf_i+0x128>
 8004f20:	6833      	ldr	r3, [r6, #0]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	6961      	ldr	r1, [r4, #20]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	062e      	lsls	r6, r5, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0x1c0>
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0x1c6>
 8004f34:	0668      	lsls	r0, r5, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0x1bc>
 8004f38:	8019      	strh	r1, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	4616      	mov	r6, r2
 8004f40:	e7bc      	b.n	8004ebc <_printf_i+0x148>
 8004f42:	6833      	ldr	r3, [r6, #0]
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	6032      	str	r2, [r6, #0]
 8004f48:	681e      	ldr	r6, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7fb f95e 	bl	8000210 <memchr>
 8004f54:	b108      	cbz	r0, 8004f5a <_printf_i+0x1e6>
 8004f56:	1b80      	subs	r0, r0, r6
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f64:	e7aa      	b.n	8004ebc <_printf_i+0x148>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	4632      	mov	r2, r6
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ad      	beq.n	8004ed0 <_printf_i+0x15c>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d413      	bmi.n	8004fa2 <_printf_i+0x22e>
 8004f7a:	68e0      	ldr	r0, [r4, #12]
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	bfb8      	it	lt
 8004f82:	4618      	movlt	r0, r3
 8004f84:	e7a6      	b.n	8004ed4 <_printf_i+0x160>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d09d      	beq.n	8004ed0 <_printf_i+0x15c>
 8004f94:	3501      	adds	r5, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dcf2      	bgt.n	8004f86 <_printf_i+0x212>
 8004fa0:	e7eb      	b.n	8004f7a <_printf_i+0x206>
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	f104 0619 	add.w	r6, r4, #25
 8004fa8:	e7f5      	b.n	8004f96 <_printf_i+0x222>
 8004faa:	bf00      	nop
 8004fac:	08005409 	.word	0x08005409
 8004fb0:	0800541a 	.word	0x0800541a

08004fb4 <__sflush_r>:
 8004fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbc:	0716      	lsls	r6, r2, #28
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	d454      	bmi.n	800506e <__sflush_r+0xba>
 8004fc4:	684b      	ldr	r3, [r1, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dc02      	bgt.n	8004fd0 <__sflush_r+0x1c>
 8004fca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd48      	ble.n	8005062 <__sflush_r+0xae>
 8004fd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d045      	beq.n	8005062 <__sflush_r+0xae>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fdc:	682f      	ldr	r7, [r5, #0]
 8004fde:	6a21      	ldr	r1, [r4, #32]
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	d030      	beq.n	8005046 <__sflush_r+0x92>
 8004fe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	0759      	lsls	r1, r3, #29
 8004fea:	d505      	bpl.n	8004ff8 <__sflush_r+0x44>
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ff2:	b10b      	cbz	r3, 8004ff8 <__sflush_r+0x44>
 8004ff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b0      	blx	r6
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	d106      	bne.n	8005016 <__sflush_r+0x62>
 8005008:	6829      	ldr	r1, [r5, #0]
 800500a:	291d      	cmp	r1, #29
 800500c:	d82b      	bhi.n	8005066 <__sflush_r+0xb2>
 800500e:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <__sflush_r+0x104>)
 8005010:	410a      	asrs	r2, r1
 8005012:	07d6      	lsls	r6, r2, #31
 8005014:	d427      	bmi.n	8005066 <__sflush_r+0xb2>
 8005016:	2200      	movs	r2, #0
 8005018:	6062      	str	r2, [r4, #4]
 800501a:	04d9      	lsls	r1, r3, #19
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	d504      	bpl.n	800502c <__sflush_r+0x78>
 8005022:	1c42      	adds	r2, r0, #1
 8005024:	d101      	bne.n	800502a <__sflush_r+0x76>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	b903      	cbnz	r3, 800502c <__sflush_r+0x78>
 800502a:	6560      	str	r0, [r4, #84]	@ 0x54
 800502c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	b1b9      	cbz	r1, 8005062 <__sflush_r+0xae>
 8005032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005036:	4299      	cmp	r1, r3
 8005038:	d002      	beq.n	8005040 <__sflush_r+0x8c>
 800503a:	4628      	mov	r0, r5
 800503c:	f7ff fbf2 	bl	8004824 <_free_r>
 8005040:	2300      	movs	r3, #0
 8005042:	6363      	str	r3, [r4, #52]	@ 0x34
 8005044:	e00d      	b.n	8005062 <__sflush_r+0xae>
 8005046:	2301      	movs	r3, #1
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	4602      	mov	r2, r0
 800504e:	1c50      	adds	r0, r2, #1
 8005050:	d1c9      	bne.n	8004fe6 <__sflush_r+0x32>
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0c6      	beq.n	8004fe6 <__sflush_r+0x32>
 8005058:	2b1d      	cmp	r3, #29
 800505a:	d001      	beq.n	8005060 <__sflush_r+0xac>
 800505c:	2b16      	cmp	r3, #22
 800505e:	d11e      	bne.n	800509e <__sflush_r+0xea>
 8005060:	602f      	str	r7, [r5, #0]
 8005062:	2000      	movs	r0, #0
 8005064:	e022      	b.n	80050ac <__sflush_r+0xf8>
 8005066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800506a:	b21b      	sxth	r3, r3
 800506c:	e01b      	b.n	80050a6 <__sflush_r+0xf2>
 800506e:	690f      	ldr	r7, [r1, #16]
 8005070:	2f00      	cmp	r7, #0
 8005072:	d0f6      	beq.n	8005062 <__sflush_r+0xae>
 8005074:	0793      	lsls	r3, r2, #30
 8005076:	680e      	ldr	r6, [r1, #0]
 8005078:	bf08      	it	eq
 800507a:	694b      	ldreq	r3, [r1, #20]
 800507c:	600f      	str	r7, [r1, #0]
 800507e:	bf18      	it	ne
 8005080:	2300      	movne	r3, #0
 8005082:	eba6 0807 	sub.w	r8, r6, r7
 8005086:	608b      	str	r3, [r1, #8]
 8005088:	f1b8 0f00 	cmp.w	r8, #0
 800508c:	dde9      	ble.n	8005062 <__sflush_r+0xae>
 800508e:	6a21      	ldr	r1, [r4, #32]
 8005090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005092:	4643      	mov	r3, r8
 8005094:	463a      	mov	r2, r7
 8005096:	4628      	mov	r0, r5
 8005098:	47b0      	blx	r6
 800509a:	2800      	cmp	r0, #0
 800509c:	dc08      	bgt.n	80050b0 <__sflush_r+0xfc>
 800509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	4407      	add	r7, r0
 80050b2:	eba8 0800 	sub.w	r8, r8, r0
 80050b6:	e7e7      	b.n	8005088 <__sflush_r+0xd4>
 80050b8:	dfbffffe 	.word	0xdfbffffe

080050bc <_fflush_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b913      	cbnz	r3, 80050cc <_fflush_r+0x10>
 80050c6:	2500      	movs	r5, #0
 80050c8:	4628      	mov	r0, r5
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	b118      	cbz	r0, 80050d6 <_fflush_r+0x1a>
 80050ce:	6a03      	ldr	r3, [r0, #32]
 80050d0:	b90b      	cbnz	r3, 80050d6 <_fflush_r+0x1a>
 80050d2:	f7ff fa97 	bl	8004604 <__sinit>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f3      	beq.n	80050c6 <_fflush_r+0xa>
 80050de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050e0:	07d0      	lsls	r0, r2, #31
 80050e2:	d404      	bmi.n	80050ee <_fflush_r+0x32>
 80050e4:	0599      	lsls	r1, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_fflush_r+0x32>
 80050e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ea:	f7ff fb8a 	bl	8004802 <__retarget_lock_acquire_recursive>
 80050ee:	4628      	mov	r0, r5
 80050f0:	4621      	mov	r1, r4
 80050f2:	f7ff ff5f 	bl	8004fb4 <__sflush_r>
 80050f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f8:	07da      	lsls	r2, r3, #31
 80050fa:	4605      	mov	r5, r0
 80050fc:	d4e4      	bmi.n	80050c8 <_fflush_r+0xc>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	059b      	lsls	r3, r3, #22
 8005102:	d4e1      	bmi.n	80050c8 <_fflush_r+0xc>
 8005104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005106:	f7ff fb7d 	bl	8004804 <__retarget_lock_release_recursive>
 800510a:	e7dd      	b.n	80050c8 <_fflush_r+0xc>

0800510c <__swbuf_r>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	460e      	mov	r6, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4605      	mov	r5, r0
 8005114:	b118      	cbz	r0, 800511e <__swbuf_r+0x12>
 8005116:	6a03      	ldr	r3, [r0, #32]
 8005118:	b90b      	cbnz	r3, 800511e <__swbuf_r+0x12>
 800511a:	f7ff fa73 	bl	8004604 <__sinit>
 800511e:	69a3      	ldr	r3, [r4, #24]
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	071a      	lsls	r2, r3, #28
 8005126:	d501      	bpl.n	800512c <__swbuf_r+0x20>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	b943      	cbnz	r3, 800513e <__swbuf_r+0x32>
 800512c:	4621      	mov	r1, r4
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f82a 	bl	8005188 <__swsetup_r>
 8005134:	b118      	cbz	r0, 800513e <__swbuf_r+0x32>
 8005136:	f04f 37ff 	mov.w	r7, #4294967295
 800513a:	4638      	mov	r0, r7
 800513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	1a98      	subs	r0, r3, r2
 8005144:	6963      	ldr	r3, [r4, #20]
 8005146:	b2f6      	uxtb	r6, r6
 8005148:	4283      	cmp	r3, r0
 800514a:	4637      	mov	r7, r6
 800514c:	dc05      	bgt.n	800515a <__swbuf_r+0x4e>
 800514e:	4621      	mov	r1, r4
 8005150:	4628      	mov	r0, r5
 8005152:	f7ff ffb3 	bl	80050bc <_fflush_r>
 8005156:	2800      	cmp	r0, #0
 8005158:	d1ed      	bne.n	8005136 <__swbuf_r+0x2a>
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	3b01      	subs	r3, #1
 800515e:	60a3      	str	r3, [r4, #8]
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	6022      	str	r2, [r4, #0]
 8005166:	701e      	strb	r6, [r3, #0]
 8005168:	6962      	ldr	r2, [r4, #20]
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	429a      	cmp	r2, r3
 800516e:	d004      	beq.n	800517a <__swbuf_r+0x6e>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	07db      	lsls	r3, r3, #31
 8005174:	d5e1      	bpl.n	800513a <__swbuf_r+0x2e>
 8005176:	2e0a      	cmp	r6, #10
 8005178:	d1df      	bne.n	800513a <__swbuf_r+0x2e>
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f7ff ff9d 	bl	80050bc <_fflush_r>
 8005182:	2800      	cmp	r0, #0
 8005184:	d0d9      	beq.n	800513a <__swbuf_r+0x2e>
 8005186:	e7d6      	b.n	8005136 <__swbuf_r+0x2a>

08005188 <__swsetup_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <__swsetup_r+0xa8>)
 800518c:	4605      	mov	r5, r0
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	460c      	mov	r4, r1
 8005192:	b118      	cbz	r0, 800519c <__swsetup_r+0x14>
 8005194:	6a03      	ldr	r3, [r0, #32]
 8005196:	b90b      	cbnz	r3, 800519c <__swsetup_r+0x14>
 8005198:	f7ff fa34 	bl	8004604 <__sinit>
 800519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a0:	0719      	lsls	r1, r3, #28
 80051a2:	d422      	bmi.n	80051ea <__swsetup_r+0x62>
 80051a4:	06da      	lsls	r2, r3, #27
 80051a6:	d407      	bmi.n	80051b8 <__swsetup_r+0x30>
 80051a8:	2209      	movs	r2, #9
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	f04f 30ff 	mov.w	r0, #4294967295
 80051b6:	e033      	b.n	8005220 <__swsetup_r+0x98>
 80051b8:	0758      	lsls	r0, r3, #29
 80051ba:	d512      	bpl.n	80051e2 <__swsetup_r+0x5a>
 80051bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051be:	b141      	cbz	r1, 80051d2 <__swsetup_r+0x4a>
 80051c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d002      	beq.n	80051ce <__swsetup_r+0x46>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff fb2b 	bl	8004824 <_free_r>
 80051ce:	2300      	movs	r3, #0
 80051d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	2300      	movs	r3, #0
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	b94b      	cbnz	r3, 8005202 <__swsetup_r+0x7a>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f8:	d003      	beq.n	8005202 <__swsetup_r+0x7a>
 80051fa:	4621      	mov	r1, r4
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f84f 	bl	80052a0 <__smakebuf_r>
 8005202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005206:	f013 0201 	ands.w	r2, r3, #1
 800520a:	d00a      	beq.n	8005222 <__swsetup_r+0x9a>
 800520c:	2200      	movs	r2, #0
 800520e:	60a2      	str	r2, [r4, #8]
 8005210:	6962      	ldr	r2, [r4, #20]
 8005212:	4252      	negs	r2, r2
 8005214:	61a2      	str	r2, [r4, #24]
 8005216:	6922      	ldr	r2, [r4, #16]
 8005218:	b942      	cbnz	r2, 800522c <__swsetup_r+0xa4>
 800521a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800521e:	d1c5      	bne.n	80051ac <__swsetup_r+0x24>
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	0799      	lsls	r1, r3, #30
 8005224:	bf58      	it	pl
 8005226:	6962      	ldrpl	r2, [r4, #20]
 8005228:	60a2      	str	r2, [r4, #8]
 800522a:	e7f4      	b.n	8005216 <__swsetup_r+0x8e>
 800522c:	2000      	movs	r0, #0
 800522e:	e7f7      	b.n	8005220 <__swsetup_r+0x98>
 8005230:	20000020 	.word	0x20000020

08005234 <_sbrk_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_sbrk_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f000 f88c 	bl	800535c <_sbrk>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_sbrk_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_sbrk_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20012fb8 	.word	0x20012fb8

08005254 <__swhatbuf_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	2900      	cmp	r1, #0
 800525e:	b096      	sub	sp, #88	@ 0x58
 8005260:	4615      	mov	r5, r2
 8005262:	461e      	mov	r6, r3
 8005264:	da0d      	bge.n	8005282 <__swhatbuf_r+0x2e>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	bf14      	ite	ne
 8005272:	2340      	movne	r3, #64	@ 0x40
 8005274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005278:	2000      	movs	r0, #0
 800527a:	6031      	str	r1, [r6, #0]
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	b016      	add	sp, #88	@ 0x58
 8005280:	bd70      	pop	{r4, r5, r6, pc}
 8005282:	466a      	mov	r2, sp
 8005284:	f000 f848 	bl	8005318 <_fstat_r>
 8005288:	2800      	cmp	r0, #0
 800528a:	dbec      	blt.n	8005266 <__swhatbuf_r+0x12>
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005296:	4259      	negs	r1, r3
 8005298:	4159      	adcs	r1, r3
 800529a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800529e:	e7eb      	b.n	8005278 <__swhatbuf_r+0x24>

080052a0 <__smakebuf_r>:
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052a4:	079d      	lsls	r5, r3, #30
 80052a6:	4606      	mov	r6, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	d507      	bpl.n	80052bc <__smakebuf_r+0x1c>
 80052ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	2301      	movs	r3, #1
 80052b6:	6163      	str	r3, [r4, #20]
 80052b8:	b003      	add	sp, #12
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052bc:	ab01      	add	r3, sp, #4
 80052be:	466a      	mov	r2, sp
 80052c0:	f7ff ffc8 	bl	8005254 <__swhatbuf_r>
 80052c4:	9f00      	ldr	r7, [sp, #0]
 80052c6:	4605      	mov	r5, r0
 80052c8:	4639      	mov	r1, r7
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7ff fb16 	bl	80048fc <_malloc_r>
 80052d0:	b948      	cbnz	r0, 80052e6 <__smakebuf_r+0x46>
 80052d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d6:	059a      	lsls	r2, r3, #22
 80052d8:	d4ee      	bmi.n	80052b8 <__smakebuf_r+0x18>
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	e7e2      	b.n	80052ac <__smakebuf_r+0xc>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	6020      	str	r0, [r4, #0]
 80052ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052f6:	b15b      	cbz	r3, 8005310 <__smakebuf_r+0x70>
 80052f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f81d 	bl	800533c <_isatty_r>
 8005302:	b128      	cbz	r0, 8005310 <__smakebuf_r+0x70>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	431d      	orrs	r5, r3
 8005314:	81a5      	strh	r5, [r4, #12]
 8005316:	e7cf      	b.n	80052b8 <__smakebuf_r+0x18>

08005318 <_fstat_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	@ (8005338 <_fstat_r+0x20>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	f7fb fbf6 	bl	8000b16 <_fstat>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	d102      	bne.n	8005334 <_fstat_r+0x1c>
 800532e:	682b      	ldr	r3, [r5, #0]
 8005330:	b103      	cbz	r3, 8005334 <_fstat_r+0x1c>
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	bd38      	pop	{r3, r4, r5, pc}
 8005336:	bf00      	nop
 8005338:	20012fb8 	.word	0x20012fb8

0800533c <_isatty_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d06      	ldr	r5, [pc, #24]	@ (8005358 <_isatty_r+0x1c>)
 8005340:	2300      	movs	r3, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	602b      	str	r3, [r5, #0]
 8005348:	f7fb fbf5 	bl	8000b36 <_isatty>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_isatty_r+0x1a>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_isatty_r+0x1a>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	20012fb8 	.word	0x20012fb8

0800535c <_sbrk>:
 800535c:	4a04      	ldr	r2, [pc, #16]	@ (8005370 <_sbrk+0x14>)
 800535e:	6811      	ldr	r1, [r2, #0]
 8005360:	4603      	mov	r3, r0
 8005362:	b909      	cbnz	r1, 8005368 <_sbrk+0xc>
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <_sbrk+0x18>)
 8005366:	6011      	str	r1, [r2, #0]
 8005368:	6810      	ldr	r0, [r2, #0]
 800536a:	4403      	add	r3, r0
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4770      	bx	lr
 8005370:	20012fc8 	.word	0x20012fc8
 8005374:	20012fd0 	.word	0x20012fd0

08005378 <_init>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr

08005384 <_fini>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr
