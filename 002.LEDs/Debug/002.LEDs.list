
002.LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800760c  0800760c  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  0800760c  0800760c  0000860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007614  08007614  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007614  08007614  00008614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007618  08007618  00008618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800761c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  08007638  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  08007638  000094a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159fa  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ca  00000000  00000000  0001ea46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00021d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  000231c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221de  00000000  00000000  000241a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a36  00000000  00000000  00046386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef33c  00000000  00000000  0005edbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e0f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  0014e13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ea  00000000  00000000  00153748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007468 	.word	0x08007468

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007468 	.word	0x08007468

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e80 	.word	0x20012e80

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 0208 	add.w	r2, r3, #8
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80005c8:	f240 1019 	movw	r0, #281	@ 0x119
 80005cc:	f004 fbbc 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80005e6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80005ea:	f004 fbad 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d103      	bne.n	8000616 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e00c      	b.n	8000630 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3308      	adds	r3, #8
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e002      	b.n	8000624 <vListInsert+0x2e>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	429a      	cmp	r2, r3
 800062e:	d2f6      	bcs.n	800061e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800065c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8000660:	f004 fb72 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	6892      	ldr	r2, [r2, #8]
 8000682:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	6852      	ldr	r2, [r2, #4]
 800068c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	d103      	bne.n	80006a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	1e5a      	subs	r2, r3, #1
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f240 101d 	movw	r0, #285	@ 0x11d
 80006ba:	f004 fb81 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10b      	bne.n	80006fc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d05d      	beq.n	80007be <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000706:	2b00      	cmp	r3, #0
 8000708:	d059      	beq.n	80007be <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000712:	2100      	movs	r1, #0
 8000714:	fba3 2302 	umull	r2, r3, r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d000      	beq.n	800071e <xQueueGenericReset+0x52>
 800071c:	2101      	movs	r1, #1
 800071e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14c      	bne.n	80007be <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000724:	f002 f81e 	bl	8002764 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000730:	6939      	ldr	r1, [r7, #16]
 8000732:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000734:	fb01 f303 	mul.w	r3, r1, r3
 8000738:	441a      	add	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000754:	3b01      	subs	r3, #1
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	22ff      	movs	r2, #255	@ 0xff
 8000768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	22ff      	movs	r2, #255	@ 0xff
 8000770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d114      	bne.n	80007a4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d01a      	beq.n	80007b8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	3310      	adds	r3, #16
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f884 	bl	8001894 <xTaskRemoveFromEventList>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d012      	beq.n	80007b8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <xQueueGenericReset+0x128>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	e009      	b.n	80007b8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	3310      	adds	r3, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fef3 	bl	8000594 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	3324      	adds	r3, #36	@ 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff feee 	bl	8000594 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007b8:	f002 f806 	bl	80027c8 <vPortExitCritical>
 80007bc:	e001      	b.n	80007c2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <xQueueGenericReset+0x114>
    __asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	4619      	mov	r1, r3
 80007e4:	2096      	movs	r0, #150	@ 0x96
 80007e6:	f004 faeb 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80007ea:	697b      	ldr	r3, [r7, #20]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	e000ed04 	.word	0xe000ed04

080007f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	4613      	mov	r3, r2
 8000804:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d02e      	beq.n	800086e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000810:	2100      	movs	r1, #0
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	fba3 2302 	umull	r2, r3, r3, r2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d000      	beq.n	8000820 <xQueueGenericCreate+0x28>
 800081e:	2101      	movs	r1, #1
 8000820:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000822:	2b00      	cmp	r3, #0
 8000824:	d123      	bne.n	800086e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800082e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000832:	d81c      	bhi.n	800086e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	3350      	adds	r3, #80	@ 0x50
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f8bc 	bl	80029c0 <pvPortMalloc>
 8000848:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01d      	beq.n	800088c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3350      	adds	r3, #80	@ 0x50
 8000858:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	4613      	mov	r3, r2
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f000 f81e 	bl	80008a8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800086c:	e00e      	b.n	800088c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10b      	bne.n	800088c <xQueueGenericCreate+0x94>
    __asm volatile
 8000874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000878:	f383 8811 	msr	BASEPRI, r3
 800087c:	f3bf 8f6f 	isb	sy
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	613b      	str	r3, [r7, #16]
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fc30 	bl	80050f4 <SEGGER_SYSVIEW_ShrinkId>
 8000894:	4603      	mov	r3, r0
 8000896:	4619      	mov	r1, r3
 8000898:	2098      	movs	r0, #152	@ 0x98
 800089a:	f004 fa91 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800089e:	69fb      	ldr	r3, [r7, #28]
    }
 80008a0:	4618      	mov	r0, r3
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e002      	b.n	80008ca <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008d6:	2101      	movs	r1, #1
 80008d8:	69b8      	ldr	r0, [r7, #24]
 80008da:	f7ff fef7 	bl	80006cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10b      	bne.n	8000922 <xQueueReceive+0x32>
    __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	623b      	str	r3, [r7, #32]
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	e7fd      	b.n	800091e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <xQueueReceive+0x40>
 8000928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <xQueueReceive+0x44>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <xQueueReceive+0x46>
 8000934:	2300      	movs	r3, #0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10b      	bne.n	8000952 <xQueueReceive+0x62>
    __asm volatile
 800093a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800093e:	f383 8811 	msr	BASEPRI, r3
 8000942:	f3bf 8f6f 	isb	sy
 8000946:	f3bf 8f4f 	dsb	sy
 800094a:	61fb      	str	r3, [r7, #28]
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000952:	f001 f9c1 	bl	8001cd8 <xTaskGetSchedulerState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <xQueueReceive+0x72>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <xQueueReceive+0x76>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <xQueueReceive+0x78>
 8000966:	2300      	movs	r3, #0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10b      	bne.n	8000984 <xQueueReceive+0x94>
    __asm volatile
 800096c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	61bb      	str	r3, [r7, #24]
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000984:	f001 feee 	bl	8002764 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	2b00      	cmp	r3, #0
 8000992:	d023      	beq.n	80009dc <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000998:	f000 f898 	bl	8000acc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00f      	beq.n	80009cc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ae:	3310      	adds	r3, #16
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 ff6f 	bl	8001894 <xTaskRemoveFromEventList>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d007      	beq.n	80009cc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009bc:	4b42      	ldr	r3, [pc, #264]	@ (8000ac8 <xQueueReceive+0x1d8>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80009cc:	f001 fefc 	bl	80027c8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80009d0:	2101      	movs	r1, #1
 80009d2:	20a4      	movs	r0, #164	@ 0xa4
 80009d4:	f004 f9f4 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80009d8:	2301      	movs	r3, #1
 80009da:	e071      	b.n	8000ac0 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d107      	bne.n	80009f2 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009e2:	f001 fef1 	bl	80027c8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80009e6:	2100      	movs	r1, #0
 80009e8:	20a4      	movs	r0, #164	@ 0xa4
 80009ea:	f004 f9e9 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e066      	b.n	8000ac0 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d106      	bne.n	8000a06 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f829 	bl	8001a54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a06:	f001 fedf 	bl	80027c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a0a:	f000 fbfb 	bl	8001204 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a0e:	f001 fea9 	bl	8002764 <vPortEnterCritical>
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1e:	d103      	bne.n	8000a28 <xQueueReceive+0x138>
 8000a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d103      	bne.n	8000a3e <xQueueReceive+0x14e>
 8000a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a3e:	f001 fec3 	bl	80027c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a42:	1d3a      	adds	r2, r7, #4
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f81a 	bl	8001a84 <xTaskCheckForTimeOut>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d123      	bne.n	8000a9e <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a58:	f000 f8b0 	bl	8000bbc <prvIsQueueEmpty>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d017      	beq.n	8000a92 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a64:	3324      	adds	r3, #36	@ 0x24
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fea0 	bl	80017b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a72:	f000 f851 	bl	8000b18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a76:	f000 fbd3 	bl	8001220 <xTaskResumeAll>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d181      	bne.n	8000984 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <xQueueReceive+0x1d8>)
 8000a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	f3bf 8f4f 	dsb	sy
 8000a8c:	f3bf 8f6f 	isb	sy
 8000a90:	e778      	b.n	8000984 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a94:	f000 f840 	bl	8000b18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a98:	f000 fbc2 	bl	8001220 <xTaskResumeAll>
 8000a9c:	e772      	b.n	8000984 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aa0:	f000 f83a 	bl	8000b18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aa4:	f000 fbbc 	bl	8001220 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aaa:	f000 f887 	bl	8000bbc <prvIsQueueEmpty>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f43f af67 	beq.w	8000984 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	20a4      	movs	r0, #164	@ 0xa4
 8000aba:	f004 f981 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8000abe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3730      	adds	r7, #48	@ 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d018      	beq.n	8000b10 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	441a      	add	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d303      	bcc.n	8000b00 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68d9      	ldr	r1, [r3, #12]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	461a      	mov	r2, r3
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f006 fc9e 	bl	800744c <memcpy>
    }
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b20:	f001 fe20 	bl	8002764 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b2a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b2c:	e011      	b.n	8000b52 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d012      	beq.n	8000b5c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3324      	adds	r3, #36	@ 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 feaa 	bl	8001894 <xTaskRemoveFromEventList>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b46:	f001 f809 	bl	8001b5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dce9      	bgt.n	8000b2e <prvUnlockQueue+0x16>
 8000b5a:	e000      	b.n	8000b5e <prvUnlockQueue+0x46>
                    break;
 8000b5c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	22ff      	movs	r2, #255	@ 0xff
 8000b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000b66:	f001 fe2f 	bl	80027c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b6a:	f001 fdfb 	bl	8002764 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b74:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b76:	e011      	b.n	8000b9c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d012      	beq.n	8000ba6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3310      	adds	r3, #16
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe85 	bl	8001894 <xTaskRemoveFromEventList>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000b90:	f000 ffe4 	bl	8001b5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dce9      	bgt.n	8000b78 <prvUnlockQueue+0x60>
 8000ba4:	e000      	b.n	8000ba8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ba6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	22ff      	movs	r2, #255	@ 0xff
 8000bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000bb0:	f001 fe0a 	bl	80027c8 <vPortExitCritical>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000bc4:	f001 fdce 	bl	8002764 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e001      	b.n	8000bda <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000bda:	f001 fdf5 	bl	80027c8 <vPortExitCritical>

    return xReturn;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10b      	bne.n	8000c14 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c00:	f383 8811 	msr	BASEPRI, r3
 8000c04:	f3bf 8f6f 	isb	sy
 8000c08:	f3bf 8f4f 	dsb	sy
 8000c0c:	60fb      	str	r3, [r7, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d024      	beq.n	8000c64 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e01e      	b.n	8000c5e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c20:	4a18      	ldr	r2, [pc, #96]	@ (8000c84 <vQueueAddToRegistry+0x9c>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4413      	add	r3, r2
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d105      	bne.n	8000c3c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <vQueueAddToRegistry+0x9c>)
 8000c36:	4413      	add	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
                    break;
 8000c3a:	e013      	b.n	8000c64 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10a      	bne.n	8000c58 <vQueueAddToRegistry+0x70>
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <vQueueAddToRegistry+0x9c>)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d104      	bne.n	8000c58 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4a0c      	ldr	r2, [pc, #48]	@ (8000c84 <vQueueAddToRegistry+0x9c>)
 8000c54:	4413      	add	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d9dd      	bls.n	8000c20 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8000c76:	20b6      	movs	r0, #182	@ 0xb6
 8000c78:	f004 f866 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000038 	.word	0x20000038

08000c88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000c98:	f001 fd64 	bl	8002764 <vPortEnterCritical>
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d103      	bne.n	8000cb2 <vQueueWaitForMessageRestricted+0x2a>
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbe:	d103      	bne.n	8000cc8 <vQueueWaitForMessageRestricted+0x40>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000cc8:	f001 fd7e 	bl	80027c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3324      	adds	r3, #36	@ 0x24
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fd8f 	bl	8001800 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff18 	bl	8000b18 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8000ce8:	20b9      	movs	r0, #185	@ 0xb9
 8000cea:	f004 f82d 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b08a      	sub	sp, #40	@ 0x28
 8000cfa:	af04      	add	r7, sp, #16
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fe59 	bl	80029c0 <pvPortMalloc>
 8000d0e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d013      	beq.n	8000d3e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000d16:	2058      	movs	r0, #88	@ 0x58
 8000d18:	f001 fe52 	bl	80029c0 <pvPortMalloc>
 8000d1c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d24:	2258      	movs	r2, #88	@ 0x58
 8000d26:	2100      	movs	r1, #0
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f006 fb63 	bl	80073f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	e005      	b.n	8000d42 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d36:	6938      	ldr	r0, [r7, #16]
 8000d38:	f001 ff74 	bl	8002c24 <vPortFree>
 8000d3c:	e001      	b.n	8000d42 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00d      	beq.n	8000d64 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9303      	str	r3, [sp, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 f82d 	bl	8000dbe <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000d64:	697b      	ldr	r3, [r7, #20]
    }
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b088      	sub	sp, #32
 8000d72:	af02      	add	r7, sp, #8
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff ffb3 	bl	8000cf6 <prvCreateTask>
 8000d90:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000d98:	6938      	ldr	r0, [r7, #16]
 8000d9a:	f000 f8a1 	bl	8000ee0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e002      	b.n	8000daa <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	4619      	mov	r1, r3
 8000dae:	20c2      	movs	r0, #194	@ 0xc2
 8000db0:	f004 f806 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8000db4:	697b      	ldr	r3, [r7, #20]
    }
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b088      	sub	sp, #32
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	21a5      	movs	r1, #165	@ 0xa5
 8000dd8:	f006 fb0c 	bl	80073f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000de6:	3b01      	subs	r3, #1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00b      	beq.n	8000e18 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e04:	f383 8811 	msr	BASEPRI, r3
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	617b      	str	r3, [r7, #20]
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d01e      	beq.n	8000e5c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e012      	b.n	8000e4a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	4413      	add	r3, r2
 8000e2a:	7819      	ldrb	r1, [r3, #0]
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	4413      	add	r3, r2
 8000e32:	3334      	adds	r3, #52	@ 0x34
 8000e34:	460a      	mov	r2, r1
 8000e36:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3301      	adds	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	d9e9      	bls.n	8000e24 <prvInitialiseNewTask+0x66>
 8000e50:	e000      	b.n	8000e54 <prvInitialiseNewTask+0x96>
            {
                break;
 8000e52:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d90b      	bls.n	8000e7a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	613b      	str	r3, [r7, #16]
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d901      	bls.n	8000e84 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e80:	2304      	movs	r3, #4
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e92:	3304      	adds	r3, #4
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb9f 	bl	80005d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fb9a 	bl	80005d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ea8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eac:	f1c3 0205 	rsb	r2, r3, #5
 8000eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	69b8      	ldr	r0, [r7, #24]
 8000ec0:	f001 fa52 	bl	8002368 <pxPortInitialiseStack>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ed4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000ee8:	f001 fc3c 	bl	8002764 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000eec:	4b50      	ldr	r3, [pc, #320]	@ (8001030 <prvAddNewTaskToReadyList+0x150>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8001030 <prvAddNewTaskToReadyList+0x150>)
 8000ef4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <prvAddNewTaskToReadyList+0x154>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d109      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000efe:	4a4d      	ldr	r2, [pc, #308]	@ (8001034 <prvAddNewTaskToReadyList+0x154>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f04:	4b4a      	ldr	r3, [pc, #296]	@ (8001030 <prvAddNewTaskToReadyList+0x150>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d110      	bne.n	8000f2e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000f0c:	f000 fe4a 	bl	8001ba4 <prvInitialiseTaskLists>
 8000f10:	e00d      	b.n	8000f2e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000f12:	4b49      	ldr	r3, [pc, #292]	@ (8001038 <prvAddNewTaskToReadyList+0x158>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d109      	bne.n	8000f2e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f1a:	4b46      	ldr	r3, [pc, #280]	@ (8001034 <prvAddNewTaskToReadyList+0x154>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d802      	bhi.n	8000f2e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000f28:	4a42      	ldr	r2, [pc, #264]	@ (8001034 <prvAddNewTaskToReadyList+0x154>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000f2e:	4b43      	ldr	r3, [pc, #268]	@ (800103c <prvAddNewTaskToReadyList+0x15c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <prvAddNewTaskToReadyList+0x15c>)
 8000f36:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <prvAddNewTaskToReadyList+0x15c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d016      	beq.n	8000f74 <prvAddNewTaskToReadyList+0x94>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 ffad 	bl	8004ea8 <SEGGER_SYSVIEW_OnTaskCreate>
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	461d      	mov	r5, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461c      	mov	r4, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	1ae3      	subs	r3, r4, r3
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	462b      	mov	r3, r5
 8000f70:	f002 f856 	bl	8003020 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f81a 	bl	8004fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f80:	2201      	movs	r2, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <prvAddNewTaskToReadyList+0x160>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001040 <prvAddNewTaskToReadyList+0x160>)
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f92:	492c      	ldr	r1, [pc, #176]	@ (8001044 <prvAddNewTaskToReadyList+0x164>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	3204      	adds	r2, #4
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1d1a      	adds	r2, r3, #4
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <prvAddNewTaskToReadyList+0x164>)
 8000fd2:	441a      	add	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fdc:	4919      	ldr	r1, [pc, #100]	@ (8001044 <prvAddNewTaskToReadyList+0x164>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <prvAddNewTaskToReadyList+0x164>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000ffe:	f001 fbe3 	bl	80027c8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <prvAddNewTaskToReadyList+0x158>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00e      	beq.n	8001028 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <prvAddNewTaskToReadyList+0x154>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <prvAddNewTaskToReadyList+0x148>
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <prvAddNewTaskToReadyList+0x168>)
 800101a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	f3bf 8f4f 	dsb	sy
 8001024:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bdb0      	pop	{r4, r5, r7, pc}
 8001030:	20000150 	.word	0x20000150
 8001034:	20000078 	.word	0x20000078
 8001038:	2000015c 	.word	0x2000015c
 800103c:	2000016c 	.word	0x2000016c
 8001040:	20000158 	.word	0x20000158
 8001044:	2000007c 	.word	0x2000007c
 8001048:	e000ed04 	.word	0xe000ed04

0800104c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d018      	beq.n	8001090 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800105e:	f000 f8d1 	bl	8001204 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <vTaskDelay+0x68>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00b      	beq.n	8001082 <vTaskDelay+0x36>
    __asm volatile
 800106a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	60bb      	str	r3, [r7, #8]
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	e7fd      	b.n	800107e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fe49 	bl	8001d1c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800108a:	f000 f8c9 	bl	8001220 <xTaskResumeAll>
 800108e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <vTaskDelay+0x6c>)
 8001098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80010a6:	20c5      	movs	r0, #197	@ 0xc5
 80010a8:	f003 fe4e 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000178 	.word	0x20000178
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e011      	b.n	80010f4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80010d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <prvCreateIdleTasks+0x88>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	7819      	ldrb	r1, [r3, #0]
 80010d8:	1d3a      	adds	r2, r7, #4
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	ddea      	ble.n	80010d0 <prvCreateIdleTasks+0x14>
 80010fa:	e000      	b.n	80010fe <prvCreateIdleTasks+0x42>
        {
            break;
 80010fc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	e015      	b.n	8001130 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <prvCreateIdleTasks+0x8c>)
 8001106:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <prvCreateIdleTasks+0x90>)
 800110e:	4413      	add	r3, r2
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2300      	movs	r3, #0
 800111a:	2282      	movs	r2, #130	@ 0x82
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f7ff fe26 	bl	8000d6e <xTaskCreate>
 8001122:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dde6      	ble.n	8001104 <prvCreateIdleTasks+0x48>
 8001136:	e000      	b.n	800113a <prvCreateIdleTasks+0x7e>
        {
            break;
 8001138:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800113a:	69fb      	ldr	r3, [r7, #28]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08007480 	.word	0x08007480
 8001148:	08001b75 	.word	0x08001b75
 800114c:	20000174 	.word	0x20000174

08001150 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001156:	f7ff ffb1 	bl	80010bc <prvCreateIdleTasks>
 800115a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001162:	f000 fe69 	bl	8001e38 <xTimerCreateTimerTask>
 8001166:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d124      	bne.n	80011b8 <vTaskStartScheduler+0x68>
    __asm volatile
 800116e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001172:	f383 8811 	msr	BASEPRI, r3
 8001176:	f3bf 8f6f 	isb	sy
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	60bb      	str	r3, [r7, #8]
}
 8001180:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <vTaskStartScheduler+0x9c>)
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <vTaskStartScheduler+0xa0>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <vTaskStartScheduler+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <vTaskStartScheduler+0xa8>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <vTaskStartScheduler+0xac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d102      	bne.n	80011a8 <vTaskStartScheduler+0x58>
 80011a2:	f003 fe65 	bl	8004e70 <SEGGER_SYSVIEW_OnIdle>
 80011a6:	e004      	b.n	80011b2 <vTaskStartScheduler+0x62>
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <vTaskStartScheduler+0xac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 febd 	bl	8004f2c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80011b2:	f001 f967 	bl	8002484 <xPortStartScheduler>
 80011b6:	e00f      	b.n	80011d8 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011be:	d10b      	bne.n	80011d8 <vTaskStartScheduler+0x88>
    __asm volatile
 80011c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011c4:	f383 8811 	msr	BASEPRI, r3
 80011c8:	f3bf 8f6f 	isb	sy
 80011cc:	f3bf 8f4f 	dsb	sy
 80011d0:	607b      	str	r3, [r7, #4]
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <vTaskStartScheduler+0xb0>)
 80011da:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80011dc:	20cd      	movs	r0, #205	@ 0xcd
 80011de:	f003 fdb3 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000170 	.word	0x20000170
 80011f0:	2000015c 	.word	0x2000015c
 80011f4:	20000154 	.word	0x20000154
 80011f8:	20000174 	.word	0x20000174
 80011fc:	20000078 	.word	0x20000078
 8001200:	20000000 	.word	0x20000000

08001204 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <vTaskSuspendAll+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	4a03      	ldr	r2, [pc, #12]	@ (800121c <vTaskSuspendAll+0x18>)
 8001210:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8001212:	20cf      	movs	r0, #207	@ 0xcf
 8001214:	f003 fd98 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000178 	.word	0x20000178

08001220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800122e:	f001 fa99 	bl	8002764 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8001236:	4b7a      	ldr	r3, [pc, #488]	@ (8001420 <xTaskResumeAll+0x200>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <xTaskResumeAll+0x36>
    __asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	603b      	str	r3, [r7, #0]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001256:	4b72      	ldr	r3, [pc, #456]	@ (8001420 <xTaskResumeAll+0x200>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a70      	ldr	r2, [pc, #448]	@ (8001420 <xTaskResumeAll+0x200>)
 800125e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001260:	4b6f      	ldr	r3, [pc, #444]	@ (8001420 <xTaskResumeAll+0x200>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 80ce 	bne.w	8001406 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <xTaskResumeAll+0x204>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80c9 	beq.w	8001406 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001274:	e092      	b.n	800139c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001276:	4b6c      	ldr	r3, [pc, #432]	@ (8001428 <xTaskResumeAll+0x208>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	6a12      	ldr	r2, [r2, #32]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	69d2      	ldr	r2, [r2, #28]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3318      	adds	r3, #24
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d103      	bne.n	80012ac <xTaskResumeAll+0x8c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	68d2      	ldr	r2, [r2, #12]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	6892      	ldr	r2, [r2, #8]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	429a      	cmp	r2, r3
 80012e0:	d103      	bne.n	80012ea <xTaskResumeAll+0xca>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fe57 	bl	8004fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	4b48      	ldr	r3, [pc, #288]	@ (800142c <xTaskResumeAll+0x20c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a46      	ldr	r2, [pc, #280]	@ (800142c <xTaskResumeAll+0x20c>)
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001318:	4945      	ldr	r1, [pc, #276]	@ (8001430 <xTaskResumeAll+0x210>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	3204      	adds	r2, #4
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	1d1a      	adds	r2, r3, #4
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a36      	ldr	r2, [pc, #216]	@ (8001430 <xTaskResumeAll+0x210>)
 8001358:	441a      	add	r2, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001362:	4933      	ldr	r1, [pc, #204]	@ (8001430 <xTaskResumeAll+0x210>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001374:	1c59      	adds	r1, r3, #1
 8001376:	482e      	ldr	r0, [pc, #184]	@ (8001430 <xTaskResumeAll+0x210>)
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4403      	add	r3, r0
 8001382:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <xTaskResumeAll+0x214>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	429a      	cmp	r2, r3
 8001390:	d904      	bls.n	800139c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001392:	4a29      	ldr	r2, [pc, #164]	@ (8001438 <xTaskResumeAll+0x218>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2101      	movs	r1, #1
 8001398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <xTaskResumeAll+0x208>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f47f af68 	bne.w	8001276 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80013ac:	f000 fc78 	bl	8001ca0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <xTaskResumeAll+0x21c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80013bc:	f000 f86a 	bl	8001494 <xTaskIncrementTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <xTaskResumeAll+0x218>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2101      	movs	r1, #1
 80013cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ef      	bne.n	80013bc <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <xTaskResumeAll+0x21c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <xTaskResumeAll+0x218>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <xTaskResumeAll+0x214>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <xTaskResumeAll+0x220>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f3bf 8f4f 	dsb	sy
 8001402:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001406:	f001 f9df 	bl	80027c8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4619      	mov	r1, r3
 800140e:	20d0      	movs	r0, #208	@ 0xd0
 8001410:	f003 fcd6 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8001414:	69bb      	ldr	r3, [r7, #24]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000178 	.word	0x20000178
 8001424:	20000150 	.word	0x20000150
 8001428:	20000110 	.word	0x20000110
 800142c:	20000158 	.word	0x20000158
 8001430:	2000007c 	.word	0x2000007c
 8001434:	20000078 	.word	0x20000078
 8001438:	20000164 	.word	0x20000164
 800143c:	20000160 	.word	0x20000160
 8001440:	e000ed04 	.word	0xe000ed04

08001444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <xTaskGetTickCount+0x20>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	20d1      	movs	r0, #209	@ 0xd1
 8001454:	f003 fcb4 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000154 	.word	0x20000154

08001468 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800146e:	f001 fa65 	bl	800293c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <xTaskGetTickCountFromISR+0x28>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	20d2      	movs	r0, #210	@ 0xd2
 8001480:	f003 fc9e 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001484:	683b      	ldr	r3, [r7, #0]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000154 	.word	0x20000154

08001494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800149e:	4b83      	ldr	r3, [pc, #524]	@ (80016ac <xTaskIncrementTick+0x218>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80f3 	bne.w	800168e <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80014a8:	4b81      	ldr	r3, [pc, #516]	@ (80016b0 <xTaskIncrementTick+0x21c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80014b0:	4a7f      	ldr	r2, [pc, #508]	@ (80016b0 <xTaskIncrementTick+0x21c>)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d121      	bne.n	8001500 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80014bc:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <xTaskIncrementTick+0x220>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <xTaskIncrementTick+0x4a>
    __asm volatile
 80014c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	607b      	str	r3, [r7, #4]
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	e7fd      	b.n	80014da <xTaskIncrementTick+0x46>
 80014de:	4b75      	ldr	r3, [pc, #468]	@ (80016b4 <xTaskIncrementTick+0x220>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	4b74      	ldr	r3, [pc, #464]	@ (80016b8 <xTaskIncrementTick+0x224>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a72      	ldr	r2, [pc, #456]	@ (80016b4 <xTaskIncrementTick+0x220>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4a72      	ldr	r2, [pc, #456]	@ (80016b8 <xTaskIncrementTick+0x224>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b72      	ldr	r3, [pc, #456]	@ (80016bc <xTaskIncrementTick+0x228>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a70      	ldr	r2, [pc, #448]	@ (80016bc <xTaskIncrementTick+0x228>)
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	f000 fbd0 	bl	8001ca0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001500:	4b6f      	ldr	r3, [pc, #444]	@ (80016c0 <xTaskIncrementTick+0x22c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	429a      	cmp	r2, r3
 8001508:	f0c0 80ac 	bcc.w	8001664 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800150c:	4b69      	ldr	r3, [pc, #420]	@ (80016b4 <xTaskIncrementTick+0x220>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001516:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <xTaskIncrementTick+0x22c>)
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]
                    break;
 800151e:	e0a1      	b.n	8001664 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001520:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <xTaskIncrementTick+0x220>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	d203      	bcs.n	8001540 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001538:	4a61      	ldr	r2, [pc, #388]	@ (80016c0 <xTaskIncrementTick+0x22c>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	6013      	str	r3, [r2, #0]
                        break;
 800153e:	e091      	b.n	8001664 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	68d2      	ldr	r2, [r2, #12]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	6892      	ldr	r2, [r2, #8]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	3304      	adds	r3, #4
 8001562:	429a      	cmp	r2, r3
 8001564:	d103      	bne.n	800156e <xTaskIncrementTick+0xda>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01e      	beq.n	80015c4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	6a12      	ldr	r2, [r2, #32]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	69d2      	ldr	r2, [r2, #28]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	3318      	adds	r3, #24
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d103      	bne.n	80015b4 <xTaskIncrementTick+0x120>
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fcf2 	bl	8004fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	2201      	movs	r2, #1
 80015d2:	409a      	lsls	r2, r3
 80015d4:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <xTaskIncrementTick+0x230>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4313      	orrs	r3, r2
 80015da:	4a3a      	ldr	r2, [pc, #232]	@ (80016c4 <xTaskIncrementTick+0x230>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e2:	4939      	ldr	r1, [pc, #228]	@ (80016c8 <xTaskIncrementTick+0x234>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	3204      	adds	r2, #4
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1d1a      	adds	r2, r3, #4
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <xTaskIncrementTick+0x234>)
 8001622:	441a      	add	r2, r3
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	4926      	ldr	r1, [pc, #152]	@ (80016c8 <xTaskIncrementTick+0x234>)
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <xTaskIncrementTick+0x234>)
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4403      	add	r3, r0
 800164c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <xTaskIncrementTick+0x238>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	429a      	cmp	r2, r3
 800165a:	f67f af57 	bls.w	800150c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800165e:	2301      	movs	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001662:	e753      	b.n	800150c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001664:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <xTaskIncrementTick+0x238>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800166a:	4917      	ldr	r1, [pc, #92]	@ (80016c8 <xTaskIncrementTick+0x234>)
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d901      	bls.n	8001680 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <xTaskIncrementTick+0x23c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	e004      	b.n	8001698 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <xTaskIncrementTick+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <xTaskIncrementTick+0x240>)
 8001696:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	20db      	movs	r0, #219	@ 0xdb
 800169e:	f003 fb8f 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000178 	.word	0x20000178
 80016b0:	20000154 	.word	0x20000154
 80016b4:	20000108 	.word	0x20000108
 80016b8:	2000010c 	.word	0x2000010c
 80016bc:	20000168 	.word	0x20000168
 80016c0:	20000170 	.word	0x20000170
 80016c4:	20000158 	.word	0x20000158
 80016c8:	2000007c 	.word	0x2000007c
 80016cc:	20000078 	.word	0x20000078
 80016d0:	20000164 	.word	0x20000164
 80016d4:	20000160 	.word	0x20000160

080016d8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <vTaskSwitchContext+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <vTaskSwitchContext+0xc4>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80016ec:	e04f      	b.n	800178e <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <vTaskSwitchContext+0xc4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <vTaskSwitchContext+0xc8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001702:	7afb      	ldrb	r3, [r7, #11]
 8001704:	f1c3 031f 	rsb	r3, r3, #31
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4926      	ldr	r1, [pc, #152]	@ (80017a4 <vTaskSwitchContext+0xcc>)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10b      	bne.n	8001736 <vTaskSwitchContext+0x5e>
    __asm volatile
 800171e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001722:	f383 8811 	msr	BASEPRI, r3
 8001726:	f3bf 8f6f 	isb	sy
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	607b      	str	r3, [r7, #4]
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <vTaskSwitchContext+0x5a>
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <vTaskSwitchContext+0xcc>)
 8001742:	4413      	add	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	3308      	adds	r3, #8
 8001758:	429a      	cmp	r2, r3
 800175a:	d103      	bne.n	8001764 <vTaskSwitchContext+0x8c>
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <vTaskSwitchContext+0xd0>)
 800176c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <vTaskSwitchContext+0xd4>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <vTaskSwitchContext+0xd0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d102      	bne.n	8001780 <vTaskSwitchContext+0xa8>
 800177a:	f003 fb79 	bl	8004e70 <SEGGER_SYSVIEW_OnIdle>
 800177e:	e004      	b.n	800178a <vTaskSwitchContext+0xb2>
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <vTaskSwitchContext+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fbd1 	bl	8004f2c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <vTaskSwitchContext+0xd0>)
 800178c:	681b      	ldr	r3, [r3, #0]
    }
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000178 	.word	0x20000178
 800179c:	20000164 	.word	0x20000164
 80017a0:	20000158 	.word	0x20000158
 80017a4:	2000007c 	.word	0x2000007c
 80017a8:	20000078 	.word	0x20000078
 80017ac:	20000174 	.word	0x20000174

080017b0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80017c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017c4:	f383 8811 	msr	BASEPRI, r3
 80017c8:	f3bf 8f6f 	isb	sy
 80017cc:	f3bf 8f4f 	dsb	sy
 80017d0:	60fb      	str	r3, [r7, #12]
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <vTaskPlaceOnEventList+0x4c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3318      	adds	r3, #24
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe ff08 	bl	80005f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80017e6:	2101      	movs	r1, #1
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f000 fa97 	bl	8001d1c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80017ee:	20e1      	movs	r0, #225	@ 0xe1
 80017f0:	f003 faaa 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000078 	.word	0x20000078

08001800 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10b      	bne.n	800182a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	f3bf 8f6f 	isb	sy
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	613b      	str	r3, [r7, #16]
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	e7fd      	b.n	8001826 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <vTaskPlaceOnEventListRestricted+0x90>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	61da      	str	r2, [r3, #28]
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <vTaskPlaceOnEventListRestricted+0x90>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6892      	ldr	r2, [r2, #8]
 8001840:	621a      	str	r2, [r3, #32]
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <vTaskPlaceOnEventListRestricted+0x90>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	3218      	adds	r2, #24
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <vTaskPlaceOnEventListRestricted+0x90>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f103 0218 	add.w	r2, r3, #24
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <vTaskPlaceOnEventListRestricted+0x90>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f000 fa4e 	bl	8001d1c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8001880:	20e3      	movs	r0, #227	@ 0xe3
 8001882:	f003 fa61 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000078 	.word	0x20000078

08001894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10b      	bne.n	80018c2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80018aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ae:	f383 8811 	msr	BASEPRI, r3
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	60fb      	str	r3, [r7, #12]
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	e7fd      	b.n	80018be <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	6a12      	ldr	r2, [r2, #32]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	69d2      	ldr	r2, [r2, #28]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	3318      	adds	r3, #24
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d103      	bne.n	80018f0 <xTaskRemoveFromEventList+0x5c>
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1e5a      	subs	r2, r3, #1
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001900:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <xTaskRemoveFromEventList+0x1a8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d164      	bne.n	80019d2 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	6a3a      	ldr	r2, [r7, #32]
 8001914:	68d2      	ldr	r2, [r2, #12]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	6892      	ldr	r2, [r2, #8]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	3304      	adds	r3, #4
 800192a:	429a      	cmp	r2, r3
 800192c:	d103      	bne.n	8001936 <xTaskRemoveFromEventList+0xa2>
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fb31 	bl	8004fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	2201      	movs	r2, #1
 8001954:	409a      	lsls	r2, r3
 8001956:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <xTaskRemoveFromEventList+0x1ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	4a38      	ldr	r2, [pc, #224]	@ (8001a40 <xTaskRemoveFromEventList+0x1ac>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001964:	4937      	ldr	r1, [pc, #220]	@ (8001a44 <xTaskRemoveFromEventList+0x1b0>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3304      	adds	r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	3204      	adds	r2, #4
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	1d1a      	adds	r2, r3, #4
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4a28      	ldr	r2, [pc, #160]	@ (8001a44 <xTaskRemoveFromEventList+0x1b0>)
 80019a4:	441a      	add	r2, r3
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ae:	4925      	ldr	r1, [pc, #148]	@ (8001a44 <xTaskRemoveFromEventList+0x1b0>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a3a      	ldr	r2, [r7, #32]
 80019be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019c0:	1c59      	adds	r1, r3, #1
 80019c2:	4820      	ldr	r0, [pc, #128]	@ (8001a44 <xTaskRemoveFromEventList+0x1b0>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	6019      	str	r1, [r3, #0]
 80019d0:	e01b      	b.n	8001a0a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <xTaskRemoveFromEventList+0x1b4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	61da      	str	r2, [r3, #28]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	621a      	str	r2, [r3, #32]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	3218      	adds	r2, #24
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	f103 0218 	add.w	r2, r3, #24
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <xTaskRemoveFromEventList+0x1b4>)
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <xTaskRemoveFromEventList+0x1b4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <xTaskRemoveFromEventList+0x1b4>)
 8001a08:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <xTaskRemoveFromEventList+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d905      	bls.n	8001a24 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <xTaskRemoveFromEventList+0x1bc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e001      	b.n	8001a28 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	20e4      	movs	r0, #228	@ 0xe4
 8001a2e:	f003 f9c7 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000178 	.word	0x20000178
 8001a40:	20000158 	.word	0x20000158
 8001a44:	2000007c 	.word	0x2000007c
 8001a48:	20000110 	.word	0x20000110
 8001a4c:	20000078 	.word	0x20000078
 8001a50:	20000164 	.word	0x20000164

08001a54 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <vTaskInternalSetTimeOutState+0x28>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <vTaskInternalSetTimeOutState+0x2c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8001a6c:	20e7      	movs	r0, #231	@ 0xe7
 8001a6e:	f003 f96b 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000168 	.word	0x20000168
 8001a80:	20000154 	.word	0x20000154

08001a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10b      	bne.n	8001aac <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	613b      	str	r3, [r7, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	60fb      	str	r3, [r7, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001aca:	f000 fe4b 	bl	8002764 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <xTaskCheckForTimeOut+0xd0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	d102      	bne.n	8001aee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e026      	b.n	8001b3c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <xTaskCheckForTimeOut+0xd4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d00a      	beq.n	8001b10 <xTaskCheckForTimeOut+0x8c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d305      	bcc.n	8001b10 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e015      	b.n	8001b3c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d20b      	bcs.n	8001b32 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff94 	bl	8001a54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e004      	b.n	8001b3c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b3c:	f000 fe44 	bl	80027c8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4619      	mov	r1, r3
 8001b44:	20e8      	movs	r0, #232	@ 0xe8
 8001b46:	f003 f93b 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000154 	.word	0x20000154
 8001b58:	20000168 	.word	0x20000168

08001b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <vTaskMissedYield+0x14>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8001b66:	20e9      	movs	r0, #233	@ 0xe9
 8001b68:	f003 f8ee 	bl	8004d48 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000164 	.word	0x20000164

08001b74 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b7c:	f000 f852 	bl	8001c24 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <prvIdleTask+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d9f9      	bls.n	8001b7c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <prvIdleTask+0x2c>)
 8001b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b98:	e7f0      	b.n	8001b7c <prvIdleTask+0x8>
 8001b9a:	bf00      	nop
 8001b9c:	2000007c 	.word	0x2000007c
 8001ba0:	e000ed04 	.word	0xe000ed04

08001ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e00c      	b.n	8001bca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <prvInitialiseTaskLists+0x60>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fce8 	bl	8000594 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d9ef      	bls.n	8001bb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <prvInitialiseTaskLists+0x64>)
 8001bd2:	f7fe fcdf 	bl	8000594 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <prvInitialiseTaskLists+0x68>)
 8001bd8:	f7fe fcdc 	bl	8000594 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <prvInitialiseTaskLists+0x6c>)
 8001bde:	f7fe fcd9 	bl	8000594 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001be2:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <prvInitialiseTaskLists+0x70>)
 8001be4:	f7fe fcd6 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001be8:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <prvInitialiseTaskLists+0x74>)
 8001bea:	f7fe fcd3 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <prvInitialiseTaskLists+0x78>)
 8001bf0:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <prvInitialiseTaskLists+0x64>)
 8001bf2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <prvInitialiseTaskLists+0x7c>)
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <prvInitialiseTaskLists+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000007c 	.word	0x2000007c
 8001c08:	200000e0 	.word	0x200000e0
 8001c0c:	200000f4 	.word	0x200000f4
 8001c10:	20000110 	.word	0x20000110
 8001c14:	20000124 	.word	0x20000124
 8001c18:	2000013c 	.word	0x2000013c
 8001c1c:	20000108 	.word	0x20000108
 8001c20:	2000010c 	.word	0x2000010c

08001c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c2a:	e019      	b.n	8001c60 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001c2c:	f000 fd9a 	bl	8002764 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c30:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <prvCheckTasksWaitingTermination+0x50>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fd15 	bl	800066c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <prvCheckTasksWaitingTermination+0x54>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <prvCheckTasksWaitingTermination+0x54>)
 8001c4a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <prvCheckTasksWaitingTermination+0x58>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <prvCheckTasksWaitingTermination+0x58>)
 8001c54:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001c56:	f000 fdb7 	bl	80027c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f810 	bl	8001c80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <prvCheckTasksWaitingTermination+0x58>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e1      	bne.n	8001c2c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000124 	.word	0x20000124
 8001c78:	20000150 	.word	0x20000150
 8001c7c:	20000138 	.word	0x20000138

08001c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 ffc9 	bl	8002c24 <vPortFree>
            vPortFree( pxTCB );
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 ffc6 	bl	8002c24 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <prvResetNextTaskUnblockTime+0x30>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <prvResetNextTaskUnblockTime+0x34>)
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cb6:	e005      	b.n	8001cc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <prvResetNextTaskUnblockTime+0x30>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <prvResetNextTaskUnblockTime+0x34>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000108 	.word	0x20000108
 8001cd4:	20000170 	.word	0x20000170

08001cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <xTaskGetSchedulerState+0x3c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	e008      	b.n	8001cfe <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <xTaskGetSchedulerState+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	20f5      	movs	r0, #245	@ 0xf5
 8001d04:	f003 f85c 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001d08:	687b      	ldr	r3, [r7, #4]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000015c 	.word	0x2000015c
 8001d18:	20000178 	.word	0x20000178

08001d1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <prvAddCurrentTaskToDelayedList+0x100>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <prvAddCurrentTaskToDelayedList+0x104>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001d32:	4b3c      	ldr	r3, [pc, #240]	@ (8001e24 <prvAddCurrentTaskToDelayedList+0x108>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc94 	bl	800066c <uxListRemove>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001d4a:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	2201      	movs	r2, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <prvAddCurrentTaskToDelayedList+0x110>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	4a33      	ldr	r2, [pc, #204]	@ (8001e2c <prvAddCurrentTaskToDelayedList+0x110>)
 8001d60:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d124      	bne.n	8001db4 <prvAddCurrentTaskToDelayedList+0x98>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d021      	beq.n	8001db4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d70:	4b2f      	ldr	r3, [pc, #188]	@ (8001e30 <prvAddCurrentTaskToDelayedList+0x114>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	6892      	ldr	r2, [r2, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	3204      	adds	r2, #4
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1d1a      	adds	r2, r3, #4
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <prvAddCurrentTaskToDelayedList+0x114>)
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <prvAddCurrentTaskToDelayedList+0x114>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a20      	ldr	r2, [pc, #128]	@ (8001e30 <prvAddCurrentTaskToDelayedList+0x114>)
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001db2:	e02e      	b.n	8001e12 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d20d      	bcs.n	8001de8 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 f92e 	bl	8005034 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7fe fc08 	bl	80005f6 <vListInsert>
}
 8001de6:	e014      	b.n	8001e12 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2104      	movs	r1, #4
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f920 	bl	8005034 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <prvAddCurrentTaskToDelayedList+0x10c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	69b8      	ldr	r0, [r7, #24]
 8001dfe:	f7fe fbfa 	bl	80005f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <prvAddCurrentTaskToDelayedList+0x118>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d202      	bcs.n	8001e12 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8001e0c:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <prvAddCurrentTaskToDelayedList+0x118>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000154 	.word	0x20000154
 8001e20:	20000108 	.word	0x20000108
 8001e24:	2000010c 	.word	0x2000010c
 8001e28:	20000078 	.word	0x20000078
 8001e2c:	20000158 	.word	0x20000158
 8001e30:	2000013c 	.word	0x2000013c
 8001e34:	20000170 	.word	0x20000170

08001e38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001e42:	f000 fa5b 	bl	80022fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <xTimerCreateTimerTask+0x64>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <xTimerCreateTimerTask+0x68>)
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e5c:	4911      	ldr	r1, [pc, #68]	@ (8001ea4 <xTimerCreateTimerTask+0x6c>)
 8001e5e:	4812      	ldr	r0, [pc, #72]	@ (8001ea8 <xTimerCreateTimerTask+0x70>)
 8001e60:	f7fe ff85 	bl	8000d6e <xTaskCreate>
 8001e64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	603b      	str	r3, [r7, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8001e8c:	f002 ff98 	bl	8004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001e90:	687b      	ldr	r3, [r7, #4]
    }
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001ac 	.word	0x200001ac
 8001ea0:	200001b0 	.word	0x200001b0
 8001ea4:	08007488 	.word	0x08007488
 8001ea8:	08001f51 	.word	0x08001f51

08001eac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001eb8:	e008      	b.n	8001ecc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	18d1      	adds	r1, r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f8df 	bl	800209c <prvInsertTimerInActiveList>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ea      	bne.n	8001eba <prvReloadTimer+0xe>
        }
    }
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <prvProcessExpiredTimer+0x5c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fbaf 	bl	800066c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff ffc3 	bl	8001eac <prvReloadTimer>
 8001f26:	e008      	b.n	8001f3a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	4798      	blx	r3
    }
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001a4 	.word	0x200001a4

08001f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f859 	bl	8002014 <prvGetNextExpireTime>
 8001f62:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4619      	mov	r1, r3
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f805 	bl	8001f78 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001f6e:	f000 f8d7 	bl	8002120 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f72:	bf00      	nop
 8001f74:	e7f0      	b.n	8001f58 <prvTimerTask+0x8>
	...

08001f78 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001f82:	f7ff f93f 	bl	8001204 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f866 	bl	800205c <prvSampleTimeNow>
 8001f90:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d130      	bne.n	8001ffa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <prvProcessTimerOrBlockTask+0x3c>
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d806      	bhi.n	8001fb4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001fa6:	f7ff f93b 	bl	8001220 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff9f 	bl	8001ef0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001fb2:	e024      	b.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <prvProcessTimerOrBlockTask+0x90>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <prvProcessTimerOrBlockTask+0x50>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <prvProcessTimerOrBlockTask+0x52>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <prvProcessTimerOrBlockTask+0x94>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fe55 	bl	8000c88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001fde:	f7ff f91f 	bl	8001220 <xTaskResumeAll>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <prvProcessTimerOrBlockTask+0x98>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
    }
 8001ff8:	e001      	b.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001ffa:	f7ff f911 	bl	8001220 <xTaskResumeAll>
    }
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200001a8 	.word	0x200001a8
 800200c:	200001ac 	.word	0x200001ac
 8002010:	e000ed04 	.word	0xe000ed04

08002014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <prvGetNextExpireTime+0x44>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <prvGetNextExpireTime+0x16>
 8002026:	2201      	movs	r2, #1
 8002028:	e000      	b.n	800202c <prvGetNextExpireTime+0x18>
 800202a:	2200      	movs	r2, #0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <prvGetNextExpireTime+0x44>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e001      	b.n	8002048 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002048:	68fb      	ldr	r3, [r7, #12]
    }
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200001a4 	.word	0x200001a4

0800205c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002064:	f7ff f9ee 	bl	8001444 <xTaskGetTickCount>
 8002068:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <prvSampleTimeNow+0x3c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d205      	bcs.n	8002080 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002074:	f000 f91c 	bl	80022b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e002      	b.n	8002086 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002086:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <prvSampleTimeNow+0x3c>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800208c:	68fb      	ldr	r3, [r7, #12]
    }
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200001b4 	.word	0x200001b4

0800209c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d812      	bhi.n	80020e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	1ad2      	subs	r2, r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d302      	bcc.n	80020d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e01b      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <prvInsertTimerInActiveList+0x7c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fa88 	bl	80005f6 <vListInsert>
 80020e6:	e012      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d206      	bcs.n	80020fe <prvInsertTimerInActiveList+0x62>
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e007      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <prvInsertTimerInActiveList+0x80>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f7fe fa74 	bl	80005f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800210e:	697b      	ldr	r3, [r7, #20]
    }
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200001a8 	.word	0x200001a8
 800211c:	200001a4 	.word	0x200001a4

08002120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002132:	e0a9      	b.n	8002288 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f2c0 80a6 	blt.w	8002288 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3304      	adds	r3, #4
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa8d 	bl	800066c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff81 	bl	800205c <prvSampleTimeNow>
 800215a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	2b08      	cmp	r3, #8
 8002162:	f200 808e 	bhi.w	8002282 <prvProcessReceivedCommands+0x162>
 8002166:	a201      	add	r2, pc, #4	@ (adr r2, 800216c <prvProcessReceivedCommands+0x4c>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	08002191 	.word	0x08002191
 8002170:	08002191 	.word	0x08002191
 8002174:	080021f9 	.word	0x080021f9
 8002178:	0800220d 	.word	0x0800220d
 800217c:	08002259 	.word	0x08002259
 8002180:	08002191 	.word	0x08002191
 8002184:	08002191 	.word	0x08002191
 8002188:	080021f9 	.word	0x080021f9
 800218c:	0800220d 	.word	0x0800220d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	18d1      	adds	r1, r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	69f8      	ldr	r0, [r7, #28]
 80021b0:	f7ff ff74 	bl	800209c <prvInsertTimerInActiveList>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d065      	beq.n	8002286 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4413      	add	r3, r2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4619      	mov	r1, r3
 80021d4:	69f8      	ldr	r0, [r7, #28]
 80021d6:	f7ff fe69 	bl	8001eac <prvReloadTimer>
 80021da:	e008      	b.n	80021ee <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	69f8      	ldr	r0, [r7, #28]
 80021f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80021f6:	e046      	b.n	8002286 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800220a:	e03d      	b.n	8002288 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	617b      	str	r3, [r7, #20]
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	18d1      	adds	r1, r2, r3
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	69f8      	ldr	r0, [r7, #28]
 8002252:	f7ff ff23 	bl	800209c <prvInsertTimerInActiveList>
                        break;
 8002256:	e017      	b.n	8002288 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002266:	69f8      	ldr	r0, [r7, #28]
 8002268:	f000 fcdc 	bl	8002c24 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800226c:	e00c      	b.n	8002288 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002280:	e002      	b.n	8002288 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <prvProcessReceivedCommands+0x168>
                        break;
 8002286:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <prvProcessReceivedCommands+0x18c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f107 0108 	add.w	r1, r7, #8
 8002290:	2200      	movs	r2, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fb2c 	bl	80008f0 <xQueueReceive>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f af4a 	bne.w	8002134 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200001ac 	.word	0x200001ac

080022b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022b6:	e009      	b.n	80022cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <prvSwitchTimerLists+0x44>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80022c2:	f04f 31ff 	mov.w	r1, #4294967295
 80022c6:	6838      	ldr	r0, [r7, #0]
 80022c8:	f7ff fe12 	bl	8001ef0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <prvSwitchTimerLists+0x44>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80022d6:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <prvSwitchTimerLists+0x44>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <prvSwitchTimerLists+0x48>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <prvSwitchTimerLists+0x44>)
 80022e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <prvSwitchTimerLists+0x48>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
    }
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200001a4 	.word	0x200001a4
 80022f8:	200001a8 	.word	0x200001a8

080022fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002300:	f000 fa30 	bl	8002764 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <prvCheckForValidListAndQueue+0x54>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800230c:	4811      	ldr	r0, [pc, #68]	@ (8002354 <prvCheckForValidListAndQueue+0x58>)
 800230e:	f7fe f941 	bl	8000594 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002312:	4811      	ldr	r0, [pc, #68]	@ (8002358 <prvCheckForValidListAndQueue+0x5c>)
 8002314:	f7fe f93e 	bl	8000594 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <prvCheckForValidListAndQueue+0x60>)
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <prvCheckForValidListAndQueue+0x58>)
 800231c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <prvCheckForValidListAndQueue+0x64>)
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <prvCheckForValidListAndQueue+0x5c>)
 8002322:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002324:	2200      	movs	r2, #0
 8002326:	210c      	movs	r1, #12
 8002328:	200a      	movs	r0, #10
 800232a:	f7fe fa65 	bl	80007f8 <xQueueGenericCreate>
 800232e:	4603      	mov	r3, r0
 8002330:	4a07      	ldr	r2, [pc, #28]	@ (8002350 <prvCheckForValidListAndQueue+0x54>)
 8002332:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <prvCheckForValidListAndQueue+0x54>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <prvCheckForValidListAndQueue+0x54>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4908      	ldr	r1, [pc, #32]	@ (8002364 <prvCheckForValidListAndQueue+0x68>)
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fc50 	bl	8000be8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002348:	f000 fa3e 	bl	80027c8 <vPortExitCritical>
    }
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200001ac 	.word	0x200001ac
 8002354:	2000017c 	.word	0x2000017c
 8002358:	20000190 	.word	0x20000190
 800235c:	200001a4 	.word	0x200001a4
 8002360:	200001a8 	.word	0x200001a8
 8002364:	08007490 	.word	0x08007490

08002368 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3b04      	subs	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002380:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b04      	subs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b04      	subs	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002398:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <pxPortInitialiseStack+0x64>)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b14      	subs	r3, #20
 80023a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b04      	subs	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f06f 0202 	mvn.w	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b20      	subs	r3, #32
 80023bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	080023d1 	.word	0x080023d1

080023d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <prvTaskExitError+0x58>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d00b      	beq.n	80023fc <prvTaskExitError+0x2c>
    __asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <prvTaskExitError+0x28>
    __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	60bb      	str	r3, [r7, #8]
}
 800240e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002410:	bf00      	nop
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0fc      	beq.n	8002412 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000004 	.word	0x20000004
 800242c:	00000000 	.word	0x00000000

08002430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <pxCurrentTCBConst2>)
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	6808      	ldr	r0, [r1, #0]
 8002436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243a:	f380 8809 	msr	PSP, r0
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f380 8811 	msr	BASEPRI, r0
 800244a:	4770      	bx	lr
 800244c:	f3af 8000 	nop.w

08002450 <pxCurrentTCBConst2>:
 8002450:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop

08002458 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002458:	4808      	ldr	r0, [pc, #32]	@ (800247c <prvPortStartFirstTask+0x24>)
 800245a:	6800      	ldr	r0, [r0, #0]
 800245c:	6800      	ldr	r0, [r0, #0]
 800245e:	f380 8808 	msr	MSP, r0
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f380 8814 	msr	CONTROL, r0
 800246a:	b662      	cpsie	i
 800246c:	b661      	cpsie	f
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	df00      	svc	0
 8002478:	bf00      	nop
 800247a:	0000      	.short	0x0000
 800247c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop

08002484 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800248a:	4b69      	ldr	r3, [pc, #420]	@ (8002630 <xPortStartScheduler+0x1ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a69      	ldr	r2, [pc, #420]	@ (8002634 <xPortStartScheduler+0x1b0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10b      	bne.n	80024ac <xPortStartScheduler+0x28>
    __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80024ac:	4b60      	ldr	r3, [pc, #384]	@ (8002630 <xPortStartScheduler+0x1ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a61      	ldr	r2, [pc, #388]	@ (8002638 <xPortStartScheduler+0x1b4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10b      	bne.n	80024ce <xPortStartScheduler+0x4a>
    __asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	623b      	str	r3, [r7, #32]
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	e7fd      	b.n	80024ca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80024ce:	4b5b      	ldr	r3, [pc, #364]	@ (800263c <xPortStartScheduler+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	332c      	adds	r3, #44	@ 0x2c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a59      	ldr	r2, [pc, #356]	@ (8002640 <xPortStartScheduler+0x1bc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00b      	beq.n	80024f8 <xPortStartScheduler+0x74>
    __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61fb      	str	r3, [r7, #28]
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	3338      	adds	r3, #56	@ 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a51      	ldr	r2, [pc, #324]	@ (8002644 <xPortStartScheduler+0x1c0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00b      	beq.n	800251c <xPortStartScheduler+0x98>
    __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61bb      	str	r3, [r7, #24]
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002520:	4b49      	ldr	r3, [pc, #292]	@ (8002648 <xPortStartScheduler+0x1c4>)
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252e:	22ff      	movs	r2, #255	@ 0xff
 8002530:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <xPortStartScheduler+0x1c8>)
 8002546:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002548:	4b40      	ldr	r3, [pc, #256]	@ (800264c <xPortStartScheduler+0x1c8>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <xPortStartScheduler+0xe4>
    __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	617b      	str	r3, [r7, #20]
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <xPortStartScheduler+0x11a>
    __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	613b      	str	r3, [r7, #16]
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3301      	adds	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b80      	cmp	r3, #128	@ 0x80
 80025a8:	d0f1      	beq.n	800258e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d103      	bne.n	80025b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e004      	b.n	80025c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025c2:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	4a21      	ldr	r2, [pc, #132]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025cc:	4b20      	ldr	r3, [pc, #128]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <xPortStartScheduler+0x1cc>)
 80025d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <xPortStartScheduler+0x1d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <xPortStartScheduler+0x1d0>)
 80025e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80025ec:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <xPortStartScheduler+0x1d0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <xPortStartScheduler+0x1d0>)
 80025f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <xPortStartScheduler+0x1d4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80025fe:	f000 f96d 	bl	80028dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <xPortStartScheduler+0x1d8>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002608:	f000 f98c 	bl	8002924 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <xPortStartScheduler+0x1dc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a13      	ldr	r2, [pc, #76]	@ (8002660 <xPortStartScheduler+0x1dc>)
 8002612:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002616:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002618:	f7ff ff1e 	bl	8002458 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800261c:	f7ff f85c 	bl	80016d8 <vTaskSwitchContext>
    prvTaskExitError();
 8002620:	f7ff fed6 	bl	80023d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3730      	adds	r7, #48	@ 0x30
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	410fc271 	.word	0x410fc271
 8002638:	410fc270 	.word	0x410fc270
 800263c:	e000ed08 	.word	0xe000ed08
 8002640:	08002431 	.word	0x08002431
 8002644:	08002821 	.word	0x08002821
 8002648:	e000e400 	.word	0xe000e400
 800264c:	200001b8 	.word	0x200001b8
 8002650:	200001bc 	.word	0x200001bc
 8002654:	e000ed20 	.word	0xe000ed20
 8002658:	e000ed1c 	.word	0xe000ed1c
 800265c:	20000004 	.word	0x20000004
 8002660:	e000ef34 	.word	0xe000ef34

08002664 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <vInitPrioGroupValue+0xe8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <vInitPrioGroupValue+0xec>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10b      	bne.n	800268c <vInitPrioGroupValue+0x28>
    __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <vInitPrioGroupValue+0xe8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a30      	ldr	r2, [pc, #192]	@ (8002754 <vInitPrioGroupValue+0xf0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10b      	bne.n	80026ae <vInitPrioGroupValue+0x4a>
    __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	60fb      	str	r3, [r7, #12]
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	e7fd      	b.n	80026aa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <vInitPrioGroupValue+0xf4>)
 80026b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	22ff      	movs	r2, #255	@ 0xff
 80026be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b22      	ldr	r3, [pc, #136]	@ (800275c <vInitPrioGroupValue+0xf8>)
 80026d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026dc:	e009      	b.n	80026f2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 80026e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	2b80      	cmp	r3, #128	@ 0x80
 80026fc:	d0ef      	beq.n	80026de <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00b      	beq.n	8002722 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	60bb      	str	r3, [r7, #8]
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	e7fd      	b.n	800271e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 800272a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <vInitPrioGroupValue+0xfc>)
 8002736:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00
 8002750:	410fc271 	.word	0x410fc271
 8002754:	410fc270 	.word	0x410fc270
 8002758:	e000e400 	.word	0xe000e400
 800275c:	200001b8 	.word	0x200001b8
 8002760:	200001bc 	.word	0x200001bc

08002764 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
    __asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	607b      	str	r3, [r7, #4]
}
 800277c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <vPortEnterCritical+0x5c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	4a0e      	ldr	r2, [pc, #56]	@ (80027c0 <vPortEnterCritical+0x5c>)
 8002786:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002788:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <vPortEnterCritical+0x5c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d110      	bne.n	80027b2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <vPortEnterCritical+0x60>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <vPortEnterCritical+0x4e>
    __asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	603b      	str	r3, [r7, #0]
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	e7fd      	b.n	80027ae <vPortEnterCritical+0x4a>
    }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <vPortExitCritical+0x50>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <vPortExitCritical+0x26>
    __asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	607b      	str	r3, [r7, #4]
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <vPortExitCritical+0x50>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <vPortExitCritical+0x50>)
 80027f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80027f8:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <vPortExitCritical+0x50>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <vPortExitCritical+0x44>
 8002800:	2300      	movs	r3, #0
 8002802:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800280a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000004 	.word	0x20000004
 800281c:	00000000 	.word	0x00000000

08002820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002820:	f3ef 8009 	mrs	r0, PSP
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <pxCurrentTCBConst>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f01e 0f10 	tst.w	lr, #16
 8002830:	bf08      	it	eq
 8002832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283a:	6010      	str	r0, [r2, #0]
 800283c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002844:	f380 8811 	msr	BASEPRI, r0
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f7fe ff42 	bl	80016d8 <vTaskSwitchContext>
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f380 8811 	msr	BASEPRI, r0
 800285c:	bc09      	pop	{r0, r3}
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	6808      	ldr	r0, [r1, #0]
 8002862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002866:	f01e 0f10 	tst.w	lr, #16
 800286a:	bf08      	it	eq
 800286c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002870:	f380 8809 	msr	PSP, r0
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w

08002880 <pxCurrentTCBConst>:
 8002880:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop

08002888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
    __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	607b      	str	r3, [r7, #4]
}
 80028a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80028a2:	f002 f9d7 	bl	8004c54 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80028a6:	f7fe fdf5 	bl	8001494 <xTaskIncrementTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80028b0:	f002 fa2e 	bl	8004d10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <SysTick_Handler+0x50>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e001      	b.n	80028c2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80028be:	f002 fa0b 	bl	8004cd8 <SEGGER_SYSVIEW_RecordExitISR>
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f383 8811 	msr	BASEPRI, r3
}
 80028cc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <vPortSetupTimerInterrupt+0x34>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <vPortSetupTimerInterrupt+0x38>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <vPortSetupTimerInterrupt+0x3c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <vPortSetupTimerInterrupt+0x40>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <vPortSetupTimerInterrupt+0x44>)
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <vPortSetupTimerInterrupt+0x34>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010
 8002914:	e000e018 	.word	0xe000e018
 8002918:	20000010 	.word	0x20000010
 800291c:	10624dd3 	.word	0x10624dd3
 8002920:	e000e014 	.word	0xe000e014

08002924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002934 <vPortEnableVFP+0x10>
 8002928:	6801      	ldr	r1, [r0, #0]
 800292a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800292e:	6001      	str	r1, [r0, #0]
 8002930:	4770      	bx	lr
 8002932:	0000      	.short	0x0000
 8002934:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop

0800293c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002942:	f3ef 8305 	mrs	r3, IPSR
 8002946:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	d915      	bls.n	800297a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800294e:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <vPortValidateInterruptPriority+0x74>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002958:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <vPortValidateInterruptPriority+0x78>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	7afa      	ldrb	r2, [r7, #11]
 800295e:	429a      	cmp	r2, r3
 8002960:	d20b      	bcs.n	800297a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	607b      	str	r3, [r7, #4]
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800297a:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <vPortValidateInterruptPriority+0x7c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002982:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <vPortValidateInterruptPriority+0x80>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d90b      	bls.n	80029a2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	603b      	str	r3, [r7, #0]
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <vPortValidateInterruptPriority+0x62>
    }
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e3f0 	.word	0xe000e3f0
 80029b4:	200001b8 	.word	0x200001b8
 80029b8:	e000ed0c 	.word	0xe000ed0c
 80029bc:	200001bc 	.word	0x200001bc

080029c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	@ 0x38
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d022      	beq.n	8002a18 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80029d2:	2308      	movs	r3, #8
 80029d4:	43db      	mvns	r3, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d81b      	bhi.n	8002a14 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80029dc:	2208      	movs	r2, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d014      	beq.n	8002a18 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	f1c3 0308 	rsb	r3, r3, #8
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	43db      	mvns	r3, r3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d804      	bhi.n	8002a0e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	4413      	add	r3, r2
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e004      	b.n	8002a18 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	e001      	b.n	8002a18 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002a18:	f7fe fbf4 	bl	8001204 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c08 <pvPortMalloc+0x248>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002a24:	f000 f978 	bl	8002d18 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f2c0 80d3 	blt.w	8002bd6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80cf 	beq.w	8002bd6 <pvPortMalloc+0x216>
 8002a38:	4b74      	ldr	r3, [pc, #464]	@ (8002c0c <pvPortMalloc+0x24c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	f200 80c9 	bhi.w	8002bd6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a44:	4b72      	ldr	r3, [pc, #456]	@ (8002c10 <pvPortMalloc+0x250>)
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002a48:	4b71      	ldr	r3, [pc, #452]	@ (8002c10 <pvPortMalloc+0x250>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a50:	4a70      	ldr	r2, [pc, #448]	@ (8002c14 <pvPortMalloc+0x254>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d305      	bcc.n	8002a62 <pvPortMalloc+0xa2>
 8002a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a58:	4a6f      	ldr	r2, [pc, #444]	@ (8002c18 <pvPortMalloc+0x258>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d801      	bhi.n	8002a62 <pvPortMalloc+0xa2>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <pvPortMalloc+0xa4>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d129      	bne.n	8002abc <pvPortMalloc+0xfc>
    __asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	623b      	str	r3, [r7, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	4a61      	ldr	r2, [pc, #388]	@ (8002c14 <pvPortMalloc+0x254>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d305      	bcc.n	8002a9e <pvPortMalloc+0xde>
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	4a60      	ldr	r2, [pc, #384]	@ (8002c18 <pvPortMalloc+0x258>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d801      	bhi.n	8002a9e <pvPortMalloc+0xde>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <pvPortMalloc+0xe0>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <pvPortMalloc+0xfc>
    __asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61fb      	str	r3, [r7, #28]
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d903      	bls.n	8002ace <pvPortMalloc+0x10e>
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1d8      	bne.n	8002a80 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ace:	4b4e      	ldr	r3, [pc, #312]	@ (8002c08 <pvPortMalloc+0x248>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d07e      	beq.n	8002bd6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	4413      	add	r3, r2
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8002c14 <pvPortMalloc+0x254>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d305      	bcc.n	8002af6 <pvPortMalloc+0x136>
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	4a4a      	ldr	r2, [pc, #296]	@ (8002c18 <pvPortMalloc+0x258>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d801      	bhi.n	8002af6 <pvPortMalloc+0x136>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <pvPortMalloc+0x138>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <pvPortMalloc+0x154>
    __asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	61bb      	str	r3, [r7, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d90b      	bls.n	8002b3e <pvPortMalloc+0x17e>
    __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	617b      	str	r3, [r7, #20]
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	2308      	movs	r3, #8
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d924      	bls.n	8002b98 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <pvPortMalloc+0x1b8>
    __asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	613b      	str	r3, [r7, #16]
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <pvPortMalloc+0x24c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <pvPortMalloc+0x24c>)
 8002ba4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <pvPortMalloc+0x24c>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <pvPortMalloc+0x25c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d203      	bcs.n	8002bba <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <pvPortMalloc+0x24c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <pvPortMalloc+0x25c>)
 8002bb8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <pvPortMalloc+0x260>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a13      	ldr	r2, [pc, #76]	@ (8002c20 <pvPortMalloc+0x260>)
 8002bd4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002bd6:	f7fe fb23 	bl	8001220 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <pvPortMalloc+0x23c>
    __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <pvPortMalloc+0x238>
    return pvReturn;
 8002bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3738      	adds	r7, #56	@ 0x38
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20012dc8 	.word	0x20012dc8
 8002c0c:	20012dcc 	.word	0x20012dcc
 8002c10:	20012dc0 	.word	0x20012dc0
 8002c14:	200001c0 	.word	0x200001c0
 8002c18:	20012dbf 	.word	0x20012dbf
 8002c1c:	20012dd0 	.word	0x20012dd0
 8002c20:	20012dd4 	.word	0x20012dd4

08002c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d064      	beq.n	8002d00 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002c36:	2308      	movs	r3, #8
 8002c38:	425b      	negs	r3, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4a30      	ldr	r2, [pc, #192]	@ (8002d08 <vPortFree+0xe4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d305      	bcc.n	8002c58 <vPortFree+0x34>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d0c <vPortFree+0xe8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d801      	bhi.n	8002c58 <vPortFree+0x34>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <vPortFree+0x36>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <vPortFree+0x52>
    __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	617b      	str	r3, [r7, #20]
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <vPortFree+0x72>
    __asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	613b      	str	r3, [r7, #16]
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <vPortFree+0x92>
    __asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0fdb      	lsrs	r3, r3, #31
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01c      	beq.n	8002d00 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002cda:	f7fe fa93 	bl	8001204 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <vPortFree+0xec>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <vPortFree+0xec>)
 8002cea:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cec:	69b8      	ldr	r0, [r7, #24]
 8002cee:	f000 f86d 	bl	8002dcc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <vPortFree+0xf0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	4a06      	ldr	r2, [pc, #24]	@ (8002d14 <vPortFree+0xf0>)
 8002cfa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002cfc:	f7fe fa90 	bl	8001220 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d00:	bf00      	nop
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200001c0 	.word	0x200001c0
 8002d0c:	20012dbf 	.word	0x20012dbf
 8002d10:	20012dcc 	.word	0x20012dcc
 8002d14:	20012dd8 	.word	0x20012dd8

08002d18 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d1e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d24:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <prvHeapInit+0xa0>)
 8002d26:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3307      	adds	r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0307 	bic.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <prvHeapInit+0xa0>)
 8002d48:	4413      	add	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <prvHeapInit+0xa4>)
 8002d50:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <prvHeapInit+0xa4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002d60:	2208      	movs	r2, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <prvHeapInit+0xa8>)
 8002d74:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <prvHeapInit+0xa8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <prvHeapInit+0xa8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <prvHeapInit+0xa8>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <prvHeapInit+0xac>)
 8002da2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <prvHeapInit+0xb0>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	200001c0 	.word	0x200001c0
 8002dbc:	20012dc0 	.word	0x20012dc0
 8002dc0:	20012dc8 	.word	0x20012dc8
 8002dc4:	20012dd0 	.word	0x20012dd0
 8002dc8:	20012dcc 	.word	0x20012dcc

08002dcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002dd4:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <prvInsertBlockIntoFreeList+0xe4>)
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e002      	b.n	8002de0 <prvInsertBlockIntoFreeList+0x14>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d8f7      	bhi.n	8002dda <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	4a30      	ldr	r2, [pc, #192]	@ (8002eb0 <prvInsertBlockIntoFreeList+0xe4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <prvInsertBlockIntoFreeList+0xe8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d305      	bcc.n	8002e06 <prvInsertBlockIntoFreeList+0x3a>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb8 <prvInsertBlockIntoFreeList+0xec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d801      	bhi.n	8002e06 <prvInsertBlockIntoFreeList+0x3a>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <prvInsertBlockIntoFreeList+0x3c>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	60fb      	str	r3, [r7, #12]
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d108      	bne.n	8002e48 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	441a      	add	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	441a      	add	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d118      	bne.n	8002e8e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <prvInsertBlockIntoFreeList+0xf0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d00d      	beq.n	8002e84 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e008      	b.n	8002e96 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002e84:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <prvInsertBlockIntoFreeList+0xf0>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e003      	b.n	8002e96 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d002      	beq.n	8002ea4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	20012dc0 	.word	0x20012dc0
 8002eb4:	200001c0 	.word	0x200001c0
 8002eb8:	20012dbf 	.word	0x20012dbf
 8002ebc:	20012dc8 	.word	0x20012dc8

08002ec0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002ec4:	4803      	ldr	r0, [pc, #12]	@ (8002ed4 <_cbSendSystemDesc+0x14>)
 8002ec6:	f001 fe6f 	bl	8004ba8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002eca:	4803      	ldr	r0, [pc, #12]	@ (8002ed8 <_cbSendSystemDesc+0x18>)
 8002ecc:	f001 fe6c 	bl	8004ba8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08007498 	.word	0x08007498
 8002ed8:	080074e0 	.word	0x080074e0

08002edc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <SEGGER_SYSVIEW_Conf+0x20>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <SEGGER_SYSVIEW_Conf+0x20>)
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SEGGER_SYSVIEW_Conf+0x24>)
 8002eea:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <SEGGER_SYSVIEW_Conf+0x28>)
 8002eec:	f001 fae2 	bl	80044b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002ef0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002ef4:	f001 fb22 	bl	800453c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000010 	.word	0x20000010
 8002f00:	08002ec1 	.word	0x08002ec1
 8002f04:	080075b8 	.word	0x080075b8

08002f08 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e033      	b.n	8002f7c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002f14:	491e      	ldr	r1, [pc, #120]	@ (8002f90 <_cbSendTaskList+0x88>)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	491a      	ldr	r1, [pc, #104]	@ (8002f90 <_cbSendTaskList+0x88>)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3304      	adds	r3, #4
 8002f34:	6819      	ldr	r1, [r3, #0]
 8002f36:	4c16      	ldr	r4, [pc, #88]	@ (8002f90 <_cbSendTaskList+0x88>)
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4423      	add	r3, r4
 8002f44:	3308      	adds	r3, #8
 8002f46:	681c      	ldr	r4, [r3, #0]
 8002f48:	4d11      	ldr	r5, [pc, #68]	@ (8002f90 <_cbSendTaskList+0x88>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	442b      	add	r3, r5
 8002f56:	330c      	adds	r3, #12
 8002f58:	681d      	ldr	r5, [r3, #0]
 8002f5a:	4e0d      	ldr	r6, [pc, #52]	@ (8002f90 <_cbSendTaskList+0x88>)
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4433      	add	r3, r6
 8002f68:	3310      	adds	r3, #16
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	4622      	mov	r2, r4
 8002f72:	f000 f8bd 	bl	80030f0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <_cbSendTaskList+0x8c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3c6      	bcc.n	8002f14 <_cbSendTaskList+0xc>
  }
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	20012ddc 	.word	0x20012ddc
 8002f94:	20012e7c 	.word	0x20012e7c

08002f98 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002fa0:	f7fe fa62 	bl	8001468 <xTaskGetTickCountFromISR>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	469a      	mov	sl, r3
 8002faa:	4693      	mov	fp, r2
 8002fac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	f04f 0a00 	mov.w	sl, #0
 8002fbc:	f04f 0b00 	mov.w	fp, #0
 8002fc0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002fc4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002fc8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002fcc:	4652      	mov	r2, sl
 8002fce:	465b      	mov	r3, fp
 8002fd0:	1a14      	subs	r4, r2, r0
 8002fd2:	eb63 0501 	sbc.w	r5, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	00ab      	lsls	r3, r5, #2
 8002fe0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002fe4:	00a2      	lsls	r2, r4, #2
 8002fe6:	4614      	mov	r4, r2
 8002fe8:	461d      	mov	r5, r3
 8002fea:	eb14 0800 	adds.w	r8, r4, r0
 8002fee:	eb45 0901 	adc.w	r9, r5, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800300e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003020 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800302e:	2205      	movs	r2, #5
 8003030:	492b      	ldr	r1, [pc, #172]	@ (80030e0 <SYSVIEW_AddTask+0xc0>)
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f004 f9ce 	bl	80073d4 <memcmp>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04b      	beq.n	80030d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b07      	cmp	r3, #7
 8003044:	d903      	bls.n	800304e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003046:	4828      	ldr	r0, [pc, #160]	@ (80030e8 <SYSVIEW_AddTask+0xc8>)
 8003048:	f002 f95e 	bl	8005308 <SEGGER_SYSVIEW_Warn>
    return;
 800304c:	e044      	b.n	80030d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800304e:	4b25      	ldr	r3, [pc, #148]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4926      	ldr	r1, [pc, #152]	@ (80030ec <SYSVIEW_AddTask+0xcc>)
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4921      	ldr	r1, [pc, #132]	@ (80030ec <SYSVIEW_AddTask+0xcc>)
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003078:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	491b      	ldr	r1, [pc, #108]	@ (80030ec <SYSVIEW_AddTask+0xcc>)
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3308      	adds	r3, #8
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800308e:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4916      	ldr	r1, [pc, #88]	@ (80030ec <SYSVIEW_AddTask+0xcc>)
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	330c      	adds	r3, #12
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4910      	ldr	r1, [pc, #64]	@ (80030ec <SYSVIEW_AddTask+0xcc>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3310      	adds	r3, #16
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <SYSVIEW_AddTask+0xc4>)
 80030c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f80e 	bl	80030f0 <SYSVIEW_SendTaskInfo>
 80030d4:	e000      	b.n	80030d8 <SYSVIEW_AddTask+0xb8>
    return;
 80030d6:	bf00      	nop

}
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	080074f0 	.word	0x080074f0
 80030e4:	20012e7c 	.word	0x20012e7c
 80030e8:	080074f8 	.word	0x080074f8
 80030ec:	20012ddc 	.word	0x20012ddc

080030f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	2218      	movs	r2, #24
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f004 f974 	bl	80073f4 <memset>
  TaskInfo.TaskID     = TaskID;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f001 fc47 	bl	80049b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800312a:	bf00      	nop
 800312c:	3728      	adds	r7, #40	@ 0x28
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800313a:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <_DoInit+0xa0>)
 800313c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800313e:	22a8      	movs	r2, #168	@ 0xa8
 8003140:	2100      	movs	r1, #0
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f004 f956 	bl	80073f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2203      	movs	r2, #3
 800314c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2203      	movs	r2, #3
 8003152:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4a20      	ldr	r2, [pc, #128]	@ (80031d8 <_DoInit+0xa4>)
 8003158:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <_DoInit+0xa8>)
 800315e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003166:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	4a16      	ldr	r2, [pc, #88]	@ (80031d8 <_DoInit+0xa4>)
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4a17      	ldr	r2, [pc, #92]	@ (80031e0 <_DoInit+0xac>)
 8003184:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2210      	movs	r2, #16
 800318a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800319e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	e00c      	b.n	80031c2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1c3 030f 	rsb	r3, r3, #15
 80031ae:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <_DoInit+0xb0>)
 80031b0:	5cd1      	ldrb	r1, [r2, r3]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	460a      	mov	r2, r1
 80031ba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b0f      	cmp	r3, #15
 80031c6:	d9ef      	bls.n	80031a8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80031c8:	f3bf 8f5f 	dmb	sy
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20012e80 	.word	0x20012e80
 80031d8:	08007548 	.word	0x08007548
 80031dc:	20012f28 	.word	0x20012f28
 80031e0:	20013328 	.word	0x20013328
 80031e4:	080075c0 	.word	0x080075c0

080031e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80031f4:	2300      	movs	r3, #0
 80031f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	429a      	cmp	r2, r3
 800320a:	d905      	bls.n	8003218 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
 8003216:	e007      	b.n	8003228 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	1acb      	subs	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3b01      	subs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003232:	4293      	cmp	r3, r2
 8003234:	bf28      	it	cs
 8003236:	4613      	movcs	r3, r2
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4293      	cmp	r3, r2
 8003240:	bf28      	it	cs
 8003242:	4613      	movcs	r3, r2
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f004 f8f9 	bl	800744c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	4413      	add	r3, r2
 8003260:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	4413      	add	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	4413      	add	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	429a      	cmp	r2, r3
 8003282:	d101      	bne.n	8003288 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003288:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1b2      	bne.n	80031fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003298:	6a3b      	ldr	r3, [r7, #32]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3728      	adds	r7, #40	@ 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d911      	bls.n	80032ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	6938      	ldr	r0, [r7, #16]
 80032d6:	f004 f8b9 	bl	800744c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80032e8:	e01f      	b.n	800332a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	6938      	ldr	r0, [r7, #16]
 80032fe:	f004 f8a5 	bl	800744c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4619      	mov	r1, r3
 800331a:	6938      	ldr	r0, [r7, #16]
 800331c:	f004 f896 	bl	800744c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003320:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	60da      	str	r2, [r3, #12]
}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	429a      	cmp	r2, r3
 800334c:	d808      	bhi.n	8003360 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	3b01      	subs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e004      	b.n	800336a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  }
  return r;
 800336a:	697b      	ldr	r3, [r7, #20]
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	@ 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003384:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b53      	cmp	r3, #83	@ 0x53
 8003390:	d001      	beq.n	8003396 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003392:	f7ff fecf 	bl	8003134 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4a37      	ldr	r2, [pc, #220]	@ (8003480 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80033a4:	4413      	add	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80033bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d92b      	bls.n	800341c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	bf28      	it	cs
 80033d6:	4613      	movcs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e0:	4413      	add	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6939      	ldr	r1, [r7, #16]
 80033e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033ea:	f004 f82f 	bl	800744c <memcpy>
    NumBytesRead += NumBytesRem;
 80033ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4413      	add	r3, r2
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4413      	add	r3, r2
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4413      	add	r3, r2
 800340c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003414:	429a      	cmp	r2, r3
 8003416:	d101      	bne.n	800341c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003418:	2300      	movs	r3, #0
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4293      	cmp	r3, r2
 800342a:	bf28      	it	cs
 800342c:	4613      	movcs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343c:	4413      	add	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6939      	ldr	r1, [r7, #16]
 8003444:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003446:	f004 f801 	bl	800744c <memcpy>
    NumBytesRead += NumBytesRem;
 800344a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4413      	add	r3, r2
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	4413      	add	r3, r2
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4413      	add	r3, r2
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800346a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003474:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003478:	4618      	mov	r0, r3
 800347a:	3730      	adds	r7, #48	@ 0x30
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20012e80 	.word	0x20012e80

08003484 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	@ 0x30
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003490:	4b3e      	ldr	r3, [pc, #248]	@ (800358c <SEGGER_RTT_ReadNoLock+0x108>)
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b53      	cmp	r3, #83	@ 0x53
 800349c:	d001      	beq.n	80034a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800349e:	f7ff fe49 	bl	8003134 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	3360      	adds	r3, #96	@ 0x60
 80034ae:	4a37      	ldr	r2, [pc, #220]	@ (800358c <SEGGER_RTT_ReadNoLock+0x108>)
 80034b0:	4413      	add	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80034c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d92b      	bls.n	8003528 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4293      	cmp	r3, r2
 80034e0:	bf28      	it	cs
 80034e2:	4613      	movcs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	4413      	add	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034f6:	f003 ffa9 	bl	800744c <memcpy>
    NumBytesRead += NumBytesRem;
 80034fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4413      	add	r3, r2
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4413      	add	r3, r2
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4413      	add	r3, r2
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003520:	429a      	cmp	r2, r3
 8003522:	d101      	bne.n	8003528 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003524:	2300      	movs	r3, #0
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4293      	cmp	r3, r2
 8003536:	bf28      	it	cs
 8003538:	4613      	movcs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d019      	beq.n	8003576 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	4413      	add	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	6939      	ldr	r1, [r7, #16]
 8003550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003552:	f003 ff7b 	bl	800744c <memcpy>
    NumBytesRead += NumBytesRem;
 8003556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4413      	add	r3, r2
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800356e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4413      	add	r3, r2
 8003574:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003580:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003584:	4618      	mov	r0, r3
 8003586:	3730      	adds	r7, #48	@ 0x30
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20012e80 	.word	0x20012e80

08003590 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	3360      	adds	r3, #96	@ 0x60
 80035ac:	4a1f      	ldr	r2, [pc, #124]	@ (800362c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80035ae:	4413      	add	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d029      	beq.n	800360e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d82e      	bhi.n	800361c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d013      	beq.n	80035ee <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80035c6:	e029      	b.n	800361c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035c8:	6978      	ldr	r0, [r7, #20]
 80035ca:	f7ff feb2 	bl	8003332 <_GetAvailWriteSpace>
 80035ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d202      	bcs.n	80035de <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80035dc:	e021      	b.n	8003622 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	69b9      	ldr	r1, [r7, #24]
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff fe5b 	bl	80032a2 <_WriteNoCheck>
    break;
 80035ec:	e019      	b.n	8003622 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff fe9f 	bl	8003332 <_GetAvailWriteSpace>
 80035f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bf28      	it	cs
 80035fe:	4613      	movcs	r3, r2
 8003600:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff fe4b 	bl	80032a2 <_WriteNoCheck>
    break;
 800360c:	e009      	b.n	8003622 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	6978      	ldr	r0, [r7, #20]
 8003614:	f7ff fde8 	bl	80031e8 <_WriteBlocking>
 8003618:	61f8      	str	r0, [r7, #28]
    break;
 800361a:	e002      	b.n	8003622 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    break;
 8003620:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003622:	69fb      	ldr	r3, [r7, #28]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20012e80 	.word	0x20012e80

08003630 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b53      	cmp	r3, #83	@ 0x53
 8003648:	d001      	beq.n	800364e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800364a:	f7ff fd73 	bl	8003134 <_DoInit>
  SEGGER_RTT_LOCK();
 800364e:	f3ef 8311 	mrs	r3, BASEPRI
 8003652:	f04f 0120 	mov.w	r1, #32
 8003656:	f381 8811 	msr	BASEPRI, r1
 800365a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff ff95 	bl	8003590 <SEGGER_RTT_WriteDownBufferNoLock>
 8003666:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800366e:	697b      	ldr	r3, [r7, #20]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20012e80 	.word	0x20012e80

0800367c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800368a:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b53      	cmp	r3, #83	@ 0x53
 8003696:	d001      	beq.n	800369c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003698:	f7ff fd4c 	bl	8003134 <_DoInit>
  SEGGER_RTT_LOCK();
 800369c:	f3ef 8311 	mrs	r3, BASEPRI
 80036a0:	f04f 0120 	mov.w	r1, #32
 80036a4:	f381 8811 	msr	BASEPRI, r1
 80036a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036aa:	4b35      	ldr	r3, [pc, #212]	@ (8003780 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80036ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	3304      	adds	r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3301      	adds	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	dbeb      	blt.n	80036b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80036da:	e000      	b.n	80036de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80036dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	da3f      	bge.n	8003768 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80036e8:	6939      	ldr	r1, [r7, #16]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80036fc:	6939      	ldr	r1, [r7, #16]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	3304      	adds	r3, #4
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	3320      	adds	r3, #32
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	3328      	adds	r3, #40	@ 0x28
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3324      	adds	r3, #36	@ 0x24
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	332c      	adds	r3, #44	@ 0x2c
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003762:	f3bf 8f5f 	dmb	sy
 8003766:	e002      	b.n	800376e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003774:	69fb      	ldr	r3, [r7, #28]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20012e80 	.word	0x20012e80

08003784 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003792:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b53      	cmp	r3, #83	@ 0x53
 800379e:	d001      	beq.n	80037a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80037a0:	f7ff fcc8 	bl	8003134 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80037a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d82c      	bhi.n	8003808 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80037ae:	f3ef 8311 	mrs	r3, BASEPRI
 80037b2:	f04f 0120 	mov.w	r1, #32
 80037b6:	f381 8811 	msr	BASEPRI, r1
 80037ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	3360      	adds	r3, #96	@ 0x60
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
 8003806:	e002      	b.n	800380e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003810:	4618      	mov	r0, r3
 8003812:	3728      	adds	r7, #40	@ 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20012e80 	.word	0x20012e80

0800381c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60fa      	str	r2, [r7, #12]
 8003832:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d90a      	bls.n	8003850 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800383a:	2380      	movs	r3, #128	@ 0x80
 800383c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800383e:	e007      	b.n	8003850 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	1c53      	adds	r3, r2, #1
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1c59      	adds	r1, r3, #1
 800384a:	60f9      	str	r1, [r7, #12]
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <_EncodeStr+0x46>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b2da      	uxtb	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3307      	adds	r3, #7
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800389a:	4b34      	ldr	r3, [pc, #208]	@ (800396c <_HandleIncomingPacket+0xd8>)
 800389c:	7e1b      	ldrb	r3, [r3, #24]
 800389e:	4618      	mov	r0, r3
 80038a0:	1cfb      	adds	r3, r7, #3
 80038a2:	2201      	movs	r2, #1
 80038a4:	4619      	mov	r1, r3
 80038a6:	f7ff fded 	bl	8003484 <SEGGER_RTT_ReadNoLock>
 80038aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d057      	beq.n	8003962 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d031      	beq.n	800391c <_HandleIncomingPacket+0x88>
 80038b8:	2b80      	cmp	r3, #128	@ 0x80
 80038ba:	dc40      	bgt.n	800393e <_HandleIncomingPacket+0xaa>
 80038bc:	2b07      	cmp	r3, #7
 80038be:	dc15      	bgt.n	80038ec <_HandleIncomingPacket+0x58>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dd3c      	ble.n	800393e <_HandleIncomingPacket+0xaa>
 80038c4:	3b01      	subs	r3, #1
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d839      	bhi.n	800393e <_HandleIncomingPacket+0xaa>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <_HandleIncomingPacket+0x3c>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038f3 	.word	0x080038f3
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	080038ff 	.word	0x080038ff
 80038dc:	08003905 	.word	0x08003905
 80038e0:	0800390b 	.word	0x0800390b
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003917 	.word	0x08003917
 80038ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80038ee:	d033      	beq.n	8003958 <_HandleIncomingPacket+0xc4>
 80038f0:	e025      	b.n	800393e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80038f2:	f000 fee7 	bl	80046c4 <SEGGER_SYSVIEW_Start>
      break;
 80038f6:	e034      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80038f8:	f000 ff9e 	bl	8004838 <SEGGER_SYSVIEW_Stop>
      break;
 80038fc:	e031      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80038fe:	f001 f977 	bl	8004bf0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003902:	e02e      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003904:	f001 f93c 	bl	8004b80 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003908:	e02b      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800390a:	f000 ffbb 	bl	8004884 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800390e:	e028      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003910:	f001 fca8 	bl	8005264 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003914:	e025      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003916:	f001 fc87 	bl	8005228 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800391a:	e022      	b.n	8003962 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <_HandleIncomingPacket+0xd8>)
 800391e:	7e1b      	ldrb	r3, [r3, #24]
 8003920:	4618      	mov	r0, r3
 8003922:	1cfb      	adds	r3, r7, #3
 8003924:	2201      	movs	r2, #1
 8003926:	4619      	mov	r1, r3
 8003928:	f7ff fdac 	bl	8003484 <SEGGER_RTT_ReadNoLock>
 800392c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fbec 	bl	8005114 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800393c:	e00e      	b.n	800395c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	b25b      	sxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	da0c      	bge.n	8003960 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003946:	4b09      	ldr	r3, [pc, #36]	@ (800396c <_HandleIncomingPacket+0xd8>)
 8003948:	7e1b      	ldrb	r3, [r3, #24]
 800394a:	4618      	mov	r0, r3
 800394c:	1cfb      	adds	r3, r7, #3
 800394e:	2201      	movs	r2, #1
 8003950:	4619      	mov	r1, r3
 8003952:	f7ff fd97 	bl	8003484 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003956:	e003      	b.n	8003960 <_HandleIncomingPacket+0xcc>
      break;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <_HandleIncomingPacket+0xce>
      break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <_HandleIncomingPacket+0xce>
      break;
 8003960:	bf00      	nop
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20014340 	.word	0x20014340

08003970 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	@ 0x30
 8003974:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003976:	2301      	movs	r3, #1
 8003978:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003984:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398a:	e00b      	b.n	80039a4 <_TrySendOverflowPacket+0x34>
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	b2da      	uxtb	r2, r3
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003996:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a0:	09db      	lsrs	r3, r3, #7
 80039a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80039a8:	d8f0      	bhi.n	800398c <_TrySendOverflowPacket+0x1c>
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80039ba:	4b25      	ldr	r3, [pc, #148]	@ (8003a50 <_TrySendOverflowPacket+0xe0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80039c0:	4b22      	ldr	r3, [pc, #136]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	e00b      	b.n	80039ec <_TrySendOverflowPacket+0x7c>
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80039de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	09db      	lsrs	r3, r3, #7
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80039f0:	d8f0      	bhi.n	80039d4 <_TrySendOverflowPacket+0x64>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	4618      	mov	r0, r3
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fc fbfc 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003a28:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e004      	b.n	8003a40 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4a03      	ldr	r2, [pc, #12]	@ (8003a4c <_TrySendOverflowPacket+0xdc>)
 8003a3e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003a40:	693b      	ldr	r3, [r7, #16]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	@ 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20014340 	.word	0x20014340
 8003a50:	e0001004 	.word	0xe0001004

08003a54 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003a60:	4b98      	ldr	r3, [pc, #608]	@ (8003cc4 <_SendPacket+0x270>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d010      	beq.n	8003a8a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a68:	4b96      	ldr	r3, [pc, #600]	@ (8003cc4 <_SendPacket+0x270>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 812d 	beq.w	8003ccc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003a72:	4b94      	ldr	r3, [pc, #592]	@ (8003cc4 <_SendPacket+0x270>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d109      	bne.n	8003a8e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003a7a:	f7ff ff79 	bl	8003970 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003a7e:	4b91      	ldr	r3, [pc, #580]	@ (8003cc4 <_SendPacket+0x270>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f040 8124 	bne.w	8003cd0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003a88:	e001      	b.n	8003a8e <_SendPacket+0x3a>
    goto Send;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <_SendPacket+0x3c>
Send:
 8003a8e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b1f      	cmp	r3, #31
 8003a94:	d809      	bhi.n	8003aaa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003a96:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc4 <_SendPacket+0x270>)
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 8115 	bne.w	8003cd4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b17      	cmp	r3, #23
 8003aae:	d807      	bhi.n	8003ac0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e0c4      	b.n	8003c4a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8003acc:	d912      	bls.n	8003af4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	09da      	lsrs	r2, r3, #7
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	60fa      	str	r2, [r7, #12]
 8003ae8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e006      	b.n	8003b02 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b7e      	cmp	r3, #126	@ 0x7e
 8003b06:	d807      	bhi.n	8003b18 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e098      	b.n	8003c4a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b1e:	d212      	bcs.n	8003b46 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	09da      	lsrs	r2, r3, #7
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	3a01      	subs	r2, #1
 8003b38:	60fa      	str	r2, [r7, #12]
 8003b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e081      	b.n	8003c4a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4c:	d21d      	bcs.n	8003b8a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0b9a      	lsrs	r2, r3, #14
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	09db      	lsrs	r3, r3, #7
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	3a01      	subs	r2, #1
 8003b68:	60fa      	str	r2, [r7, #12]
 8003b6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	60fa      	str	r2, [r7, #12]
 8003b7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e05f      	b.n	8003c4a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b90:	d228      	bcs.n	8003be4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0d5a      	lsrs	r2, r3, #21
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0b9b      	lsrs	r3, r3, #14
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	3a01      	subs	r2, #1
 8003bac:	60fa      	str	r2, [r7, #12]
 8003bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	60fa      	str	r2, [r7, #12]
 8003bc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	60fa      	str	r2, [r7, #12]
 8003bd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e032      	b.n	8003c4a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0f1a      	lsrs	r2, r3, #28
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0d5b      	lsrs	r3, r3, #21
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0b9b      	lsrs	r3, r3, #14
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	3a01      	subs	r2, #1
 8003c14:	60fa      	str	r2, [r7, #12]
 8003c16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <_SendPacket+0x274>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c50:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc4 <_SendPacket+0x270>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	e00b      	b.n	8003c7c <_SendPacket+0x228>
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	09db      	lsrs	r3, r3, #7
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c80:	d8f0      	bhi.n	8003c64 <_SendPacket+0x210>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <_SendPacket+0x270>)
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	4618      	mov	r0, r3
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	f7fc fab5 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ca6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003cae:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <_SendPacket+0x270>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	60d3      	str	r3, [r2, #12]
 8003cb4:	e00f      	b.n	8003cd6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003cb6:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <_SendPacket+0x270>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b01      	ldr	r3, [pc, #4]	@ (8003cc4 <_SendPacket+0x270>)
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e008      	b.n	8003cd6 <_SendPacket+0x282>
 8003cc4:	20014340 	.word	0x20014340
 8003cc8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003ccc:	bf00      	nop
 8003cce:	e002      	b.n	8003cd6 <_SendPacket+0x282>
      goto SendDone;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <_SendPacket+0x282>
      goto SendDone;
 8003cd4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <_SendPacket+0x2d4>)
 8003cd8:	7e1b      	ldrb	r3, [r3, #24]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4a13      	ldr	r2, [pc, #76]	@ (8003d2c <_SendPacket+0x2d8>)
 8003cde:	460b      	mov	r3, r1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	440b      	add	r3, r1
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	336c      	adds	r3, #108	@ 0x6c
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <_SendPacket+0x2d4>)
 8003cee:	7e1b      	ldrb	r3, [r3, #24]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	490e      	ldr	r1, [pc, #56]	@ (8003d2c <_SendPacket+0x2d8>)
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4403      	add	r3, r0
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3370      	adds	r3, #112	@ 0x70
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d00b      	beq.n	8003d1e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d06:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <_SendPacket+0x2d4>)
 8003d08:	789b      	ldrb	r3, [r3, #2]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <_SendPacket+0x2d4>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d14:	f7ff fdbe 	bl	8003894 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d18:	4b03      	ldr	r3, [pc, #12]	@ (8003d28 <_SendPacket+0x2d4>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d1e:	bf00      	nop
 8003d20:	3728      	adds	r7, #40	@ 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20014340 	.word	0x20014340
 8003d2c:	20012e80 	.word	0x20012e80

08003d30 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d80a      	bhi.n	8003d60 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6051      	str	r1, [r2, #4]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b80      	cmp	r3, #128	@ 0x80
 8003d66:	d15a      	bne.n	8003e1e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	e00b      	b.n	8003da2 <_StoreChar+0x72>
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	1c59      	adds	r1, r3, #1
 8003d92:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	09db      	lsrs	r3, r3, #7
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da6:	d8f0      	bhi.n	8003d8a <_StoreChar+0x5a>
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e00b      	b.n	8003dda <_StoreChar+0xaa>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	61f9      	str	r1, [r7, #28]
 8003dcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	09db      	lsrs	r3, r3, #7
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dde:	d8f0      	bhi.n	8003dc2 <_StoreChar+0x92>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	221a      	movs	r2, #26
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fe2b 	bl	8003a54 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fd3a 	bl	800387c <_PreparePacket>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	@ 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e42:	e007      	b.n	8003e54 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	623b      	str	r3, [r7, #32]
    Width++;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3301      	adds	r3, #1
 8003e52:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d2f3      	bcs.n	8003e44 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d901      	bls.n	8003e68 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d000      	beq.n	8003e74 <_PrintUnsigned+0x4c>
 8003e72:	e01f      	b.n	8003eb4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01c      	beq.n	8003eb4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <_PrintUnsigned+0x68>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <_PrintUnsigned+0x68>
        c = '0';
 8003e8a:	2330      	movs	r3, #48	@ 0x30
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e001      	b.n	8003e94 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003e90:	2320      	movs	r3, #32
 8003e92:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e94:	e007      	b.n	8003ea6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003e9c:	7efb      	ldrb	r3, [r7, #27]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ff45 	bl	8003d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <_PrintUnsigned+0x8c>
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3f0      	bcc.n	8003e96 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d903      	bls.n	8003ec2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	e009      	b.n	8003ed6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d200      	bcs.n	8003ed6 <_PrintUnsigned+0xae>
        break;
 8003ed4:	e005      	b.n	8003ee2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003ee0:	e7e8      	b.n	8003eb4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003efa:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <_PrintUnsigned+0x128>)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff ff13 	bl	8003d30 <_StoreChar>
    Digit /= Base;
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f2a:	e006      	b.n	8003f3a <_PrintUnsigned+0x112>
        FieldWidth--;
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003f32:	2120      	movs	r1, #32
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fefb 	bl	8003d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <_PrintUnsigned+0x120>
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d3f1      	bcc.n	8003f2c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3728      	adds	r7, #40	@ 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	080075e0 	.word	0x080075e0

08003f54 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bfb8      	it	lt
 8003f68:	425b      	neglt	r3, r3
 8003f6a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003f70:	e007      	b.n	8003f82 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f7a:	613b      	str	r3, [r7, #16]
    Width++;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	daf3      	bge.n	8003f72 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d901      	bls.n	8003f96 <_PrintInt+0x42>
    Width = NumDigits;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <_PrintInt+0x5e>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db04      	blt.n	8003fac <_PrintInt+0x58>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <_PrintInt+0x5e>
    FieldWidth--;
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <_PrintInt+0x6e>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <_PrintInt+0x9c>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d111      	bne.n	8003ff0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fd2:	e006      	b.n	8003fe2 <_PrintInt+0x8e>
        FieldWidth--;
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003fda:	2120      	movs	r1, #32
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fea7 	bl	8003d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <_PrintInt+0x9c>
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3f1      	bcc.n	8003fd4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da07      	bge.n	8004006 <_PrintInt+0xb2>
    v = -v;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003ffc:	212d      	movs	r1, #45	@ 0x2d
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fe96 	bl	8003d30 <_StoreChar>
 8004004:	e008      	b.n	8004018 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004010:	212b      	movs	r1, #43	@ 0x2b
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff fe8c 	bl	8003d30 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d019      	beq.n	8004056 <_PrintInt+0x102>
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d114      	bne.n	8004056 <_PrintInt+0x102>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d111      	bne.n	8004056 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004038:	e006      	b.n	8004048 <_PrintInt+0xf4>
        FieldWidth--;
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	3b01      	subs	r3, #1
 800403e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004040:	2130      	movs	r1, #48	@ 0x30
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff fe74 	bl	8003d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <_PrintInt+0x102>
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	429a      	cmp	r2, r3
 8004054:	d3f1      	bcc.n	800403a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff fedf 	bl	8003e28 <_PrintUnsigned>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b098      	sub	sp, #96	@ 0x60
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004080:	f3ef 8311 	mrs	r3, BASEPRI
 8004084:	f04f 0120 	mov.w	r1, #32
 8004088:	f381 8811 	msr	BASEPRI, r1
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408e:	48b7      	ldr	r0, [pc, #732]	@ (800436c <_VPrintTarget+0x2f8>)
 8004090:	f7ff fbf4 	bl	800387c <_PreparePacket>
 8004094:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004096:	4bb5      	ldr	r3, [pc, #724]	@ (800436c <_VPrintTarget+0x2f8>)
 8004098:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80040ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 81a8 	beq.w	8004414 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80040c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040c8:	2b25      	cmp	r3, #37	@ 0x25
 80040ca:	f040 8195 	bne.w	80043f8 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80040ce:	2300      	movs	r3, #0
 80040d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80040de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040e2:	3b23      	subs	r3, #35	@ 0x23
 80040e4:	2b0d      	cmp	r3, #13
 80040e6:	d83f      	bhi.n	8004168 <_VPrintTarget+0xf4>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <_VPrintTarget+0x7c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004159 	.word	0x08004159
 80040f4:	08004169 	.word	0x08004169
 80040f8:	08004169 	.word	0x08004169
 80040fc:	08004169 	.word	0x08004169
 8004100:	08004169 	.word	0x08004169
 8004104:	08004169 	.word	0x08004169
 8004108:	08004169 	.word	0x08004169
 800410c:	08004169 	.word	0x08004169
 8004110:	08004149 	.word	0x08004149
 8004114:	08004169 	.word	0x08004169
 8004118:	08004129 	.word	0x08004129
 800411c:	08004169 	.word	0x08004169
 8004120:	08004169 	.word	0x08004169
 8004124:	08004139 	.word	0x08004139
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e01a      	b.n	800416e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e012      	b.n	800416e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e00a      	b.n	800416e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e002      	b.n	800416e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004168:	2300      	movs	r3, #0
 800416a:	653b      	str	r3, [r7, #80]	@ 0x50
 800416c:	bf00      	nop
        }
      } while (v);
 800416e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1b0      	bne.n	80040d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004174:	2300      	movs	r3, #0
 8004176:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004184:	2b2f      	cmp	r3, #47	@ 0x2f
 8004186:	d912      	bls.n	80041ae <_VPrintTarget+0x13a>
 8004188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800418c:	2b39      	cmp	r3, #57	@ 0x39
 800418e:	d80e      	bhi.n	80041ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	461a      	mov	r2, r3
 80041a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041a6:	4413      	add	r3, r2
 80041a8:	3b30      	subs	r3, #48	@ 0x30
 80041aa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80041ac:	e7e4      	b.n	8004178 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80041ae:	2300      	movs	r3, #0
 80041b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80041ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041be:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c0:	d11d      	bne.n	80041fe <_VPrintTarget+0x18a>
        sFormat++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3301      	adds	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80041d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80041d6:	d912      	bls.n	80041fe <_VPrintTarget+0x18a>
 80041d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041dc:	2b39      	cmp	r3, #57	@ 0x39
 80041de:	d80e      	bhi.n	80041fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80041e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	461a      	mov	r2, r3
 80041f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041f6:	4413      	add	r3, r2
 80041f8:	3b30      	subs	r3, #48	@ 0x30
 80041fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80041fc:	e7e4      	b.n	80041c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004206:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800420a:	2b6c      	cmp	r3, #108	@ 0x6c
 800420c:	d003      	beq.n	8004216 <_VPrintTarget+0x1a2>
 800420e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004212:	2b68      	cmp	r3, #104	@ 0x68
 8004214:	d107      	bne.n	8004226 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004224:	e7ef      	b.n	8004206 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004226:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800422a:	2b25      	cmp	r3, #37	@ 0x25
 800422c:	f000 80d8 	beq.w	80043e0 <_VPrintTarget+0x36c>
 8004230:	2b25      	cmp	r3, #37	@ 0x25
 8004232:	f2c0 80dc 	blt.w	80043ee <_VPrintTarget+0x37a>
 8004236:	2b78      	cmp	r3, #120	@ 0x78
 8004238:	f300 80d9 	bgt.w	80043ee <_VPrintTarget+0x37a>
 800423c:	2b58      	cmp	r3, #88	@ 0x58
 800423e:	f2c0 80d6 	blt.w	80043ee <_VPrintTarget+0x37a>
 8004242:	3b58      	subs	r3, #88	@ 0x58
 8004244:	2b20      	cmp	r3, #32
 8004246:	f200 80d2 	bhi.w	80043ee <_VPrintTarget+0x37a>
 800424a:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <_VPrintTarget+0x1dc>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004347 	.word	0x08004347
 8004254:	080043ef 	.word	0x080043ef
 8004258:	080043ef 	.word	0x080043ef
 800425c:	080043ef 	.word	0x080043ef
 8004260:	080043ef 	.word	0x080043ef
 8004264:	080043ef 	.word	0x080043ef
 8004268:	080043ef 	.word	0x080043ef
 800426c:	080043ef 	.word	0x080043ef
 8004270:	080043ef 	.word	0x080043ef
 8004274:	080043ef 	.word	0x080043ef
 8004278:	080043ef 	.word	0x080043ef
 800427c:	080042d5 	.word	0x080042d5
 8004280:	080042fb 	.word	0x080042fb
 8004284:	080043ef 	.word	0x080043ef
 8004288:	080043ef 	.word	0x080043ef
 800428c:	080043ef 	.word	0x080043ef
 8004290:	080043ef 	.word	0x080043ef
 8004294:	080043ef 	.word	0x080043ef
 8004298:	080043ef 	.word	0x080043ef
 800429c:	080043ef 	.word	0x080043ef
 80042a0:	080043ef 	.word	0x080043ef
 80042a4:	080043ef 	.word	0x080043ef
 80042a8:	080043ef 	.word	0x080043ef
 80042ac:	080043ef 	.word	0x080043ef
 80042b0:	080043bb 	.word	0x080043bb
 80042b4:	080043ef 	.word	0x080043ef
 80042b8:	080043ef 	.word	0x080043ef
 80042bc:	08004371 	.word	0x08004371
 80042c0:	080043ef 	.word	0x080043ef
 80042c4:	08004321 	.word	0x08004321
 80042c8:	080043ef 	.word	0x080043ef
 80042cc:	080043ef 	.word	0x080043ef
 80042d0:	08004347 	.word	0x08004347
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1d19      	adds	r1, r3, #4
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80042e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80042e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd1c 	bl	8003d30 <_StoreChar>
        break;
 80042f8:	e07a      	b.n	80043f0 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1d19      	adds	r1, r3, #4
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6011      	str	r1, [r2, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004308:	f107 0010 	add.w	r0, r7, #16
 800430c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004316:	220a      	movs	r2, #10
 8004318:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800431a:	f7ff fe1b 	bl	8003f54 <_PrintInt>
        break;
 800431e:	e067      	b.n	80043f0 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6011      	str	r1, [r2, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800432e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004330:	f107 0010 	add.w	r0, r7, #16
 8004334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800433e:	220a      	movs	r2, #10
 8004340:	f7ff fd72 	bl	8003e28 <_PrintUnsigned>
        break;
 8004344:	e054      	b.n	80043f0 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	1d19      	adds	r1, r3, #4
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6011      	str	r1, [r2, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004354:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004356:	f107 0010 	add.w	r0, r7, #16
 800435a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004364:	2210      	movs	r2, #16
 8004366:	f7ff fd5f 	bl	8003e28 <_PrintUnsigned>
        break;
 800436a:	e041      	b.n	80043f0 <_VPrintTarget+0x37c>
 800436c:	20014370 	.word	0x20014370
      case 's':
        s = va_arg(*pParamList, const char*);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	1d19      	adds	r1, r3, #4
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800437e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <_VPrintTarget+0x314>
          s = "(null)";
 8004384:	4b4a      	ldr	r3, [pc, #296]	@ (80044b0 <_VPrintTarget+0x43c>)
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004392:	3301      	adds	r3, #1
 8004394:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800439e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80043a2:	f107 0310 	add.w	r3, r7, #16
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fcc1 	bl	8003d30 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043b2:	d9e9      	bls.n	8004388 <_VPrintTarget+0x314>
        break;
 80043b4:	e01c      	b.n	80043f0 <_VPrintTarget+0x37c>
            break;
 80043b6:	bf00      	nop
        break;
 80043b8:	e01a      	b.n	80043f0 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1d19      	adds	r1, r3, #4
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6011      	str	r1, [r2, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80043c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043ca:	f107 0010 	add.w	r0, r7, #16
 80043ce:	2300      	movs	r3, #0
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2308      	movs	r3, #8
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2308      	movs	r3, #8
 80043d8:	2210      	movs	r2, #16
 80043da:	f7ff fd25 	bl	8003e28 <_PrintUnsigned>
        break;
 80043de:	e007      	b.n	80043f0 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80043e0:	f107 0310 	add.w	r3, r7, #16
 80043e4:	2125      	movs	r1, #37	@ 0x25
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fca2 	bl	8003d30 <_StoreChar>
        break;
 80043ec:	e000      	b.n	80043f0 <_VPrintTarget+0x37c>
      default:
        break;
 80043ee:	bf00      	nop
      }
      sFormat++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e007      	b.n	8004408 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80043f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fc94 	bl	8003d30 <_StoreChar>
    }
  } while (*sFormat);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae4d 	bne.w	80040ac <_VPrintTarget+0x38>
 8004412:	e000      	b.n	8004416 <_VPrintTarget+0x3a2>
      break;
 8004414:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d041      	beq.n	80044a0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	e00b      	b.n	8004446 <_VPrintTarget+0x3d2>
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	b2da      	uxtb	r2, r3
 8004432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b7f      	cmp	r3, #127	@ 0x7f
 800444a:	d8f0      	bhi.n	800442e <_VPrintTarget+0x3ba>
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	2300      	movs	r3, #0
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30
 8004464:	e00b      	b.n	800447e <_VPrintTarget+0x40a>
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	b2da      	uxtb	r2, r3
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	1c59      	adds	r1, r3, #1
 800446e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004470:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	09db      	lsrs	r3, r3, #7
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	2b7f      	cmp	r3, #127	@ 0x7f
 8004482:	d8f0      	bhi.n	8004466 <_VPrintTarget+0x3f2>
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	637a      	str	r2, [r7, #52]	@ 0x34
 800448a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	221a      	movs	r2, #26
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fada 	bl	8003a54 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80044a6:	bf00      	nop
 80044a8:	3758      	adds	r7, #88	@ 0x58
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	08007554 	.word	0x08007554

080044b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044c2:	2300      	movs	r3, #0
 80044c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044c8:	4917      	ldr	r1, [pc, #92]	@ (8004528 <SEGGER_SYSVIEW_Init+0x74>)
 80044ca:	4818      	ldr	r0, [pc, #96]	@ (800452c <SEGGER_SYSVIEW_Init+0x78>)
 80044cc:	f7ff f8d6 	bl	800367c <SEGGER_RTT_AllocUpBuffer>
 80044d0:	4603      	mov	r3, r0
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b16      	ldr	r3, [pc, #88]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 80044d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044d8:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 80044da:	785a      	ldrb	r2, [r3, #1]
 80044dc:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 80044de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044e0:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e2:	7e1b      	ldrb	r3, [r3, #24]
 80044e4:	4618      	mov	r0, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2308      	movs	r3, #8
 80044ec:	4a11      	ldr	r2, [pc, #68]	@ (8004534 <SEGGER_SYSVIEW_Init+0x80>)
 80044ee:	490f      	ldr	r1, [pc, #60]	@ (800452c <SEGGER_SYSVIEW_Init+0x78>)
 80044f0:	f7ff f948 	bl	8003784 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80044f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <SEGGER_SYSVIEW_Init+0x84>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 8004500:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004502:	4a0b      	ldr	r2, [pc, #44]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004508:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800450e:	4a08      	ldr	r2, [pc, #32]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004514:	4a06      	ldr	r2, [pc, #24]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800451a:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <SEGGER_SYSVIEW_Init+0x7c>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20013338 	.word	0x20013338
 800452c:	0800755c 	.word	0x0800755c
 8004530:	20014340 	.word	0x20014340
 8004534:	20014338 	.word	0x20014338
 8004538:	e0001004 	.word	0xe0001004

0800453c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004544:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6113      	str	r3, [r2, #16]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20014340 	.word	0x20014340

0800455c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004564:	f3ef 8311 	mrs	r3, BASEPRI
 8004568:	f04f 0120 	mov.w	r1, #32
 800456c:	f381 8811 	msr	BASEPRI, r1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4808      	ldr	r0, [pc, #32]	@ (8004594 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004574:	f7ff f982 	bl	800387c <_PreparePacket>
 8004578:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7ff fa68 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f383 8811 	msr	BASEPRI, r3
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20014370 	.word	0x20014370

08004598 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045a2:	f3ef 8311 	mrs	r3, BASEPRI
 80045a6:	f04f 0120 	mov.w	r1, #32
 80045aa:	f381 8811 	msr	BASEPRI, r1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	4816      	ldr	r0, [pc, #88]	@ (800460c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80045b2:	f7ff f963 	bl	800387c <_PreparePacket>
 80045b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e00b      	b.n	80045de <SEGGER_SYSVIEW_RecordU32+0x46>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	61f9      	str	r1, [r7, #28]
 80045d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045e2:	d8f0      	bhi.n	80045c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	61fa      	str	r2, [r7, #28]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	6938      	ldr	r0, [r7, #16]
 80045fa:	f7ff fa2b 	bl	8003a54 <_SendPacket>
  RECORD_END();
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f383 8811 	msr	BASEPRI, r3
}
 8004604:	bf00      	nop
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20014370 	.word	0x20014370

08004610 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	@ 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800461c:	f3ef 8311 	mrs	r3, BASEPRI
 8004620:	f04f 0120 	mov.w	r1, #32
 8004624:	f381 8811 	msr	BASEPRI, r1
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	4825      	ldr	r0, [pc, #148]	@ (80046c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800462c:	f7ff f926 	bl	800387c <_PreparePacket>
 8004630:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463e:	e00b      	b.n	8004658 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	b2da      	uxtb	r2, r3
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800464a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	09db      	lsrs	r3, r3, #7
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	2b7f      	cmp	r3, #127	@ 0x7f
 800465c:	d8f0      	bhi.n	8004640 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e00b      	b.n	8004690 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	6279      	str	r1, [r7, #36]	@ 0x24
 8004682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	09db      	lsrs	r3, r3, #7
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b7f      	cmp	r3, #127	@ 0x7f
 8004694:	d8f0      	bhi.n	8004678 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	627a      	str	r2, [r7, #36]	@ 0x24
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6979      	ldr	r1, [r7, #20]
 80046aa:	69b8      	ldr	r0, [r7, #24]
 80046ac:	f7ff f9d2 	bl	8003a54 <_SendPacket>
  RECORD_END();
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f383 8811 	msr	BASEPRI, r3
}
 80046b6:	bf00      	nop
 80046b8:	3730      	adds	r7, #48	@ 0x30
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20014370 	.word	0x20014370

080046c4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	@ 0x30
 80046c8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046ca:	4b58      	ldr	r3, [pc, #352]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046d0:	f3ef 8311 	mrs	r3, BASEPRI
 80046d4:	f04f 0120 	mov.w	r1, #32
 80046d8:	f381 8811 	msr	BASEPRI, r1
 80046dc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046de:	4b53      	ldr	r3, [pc, #332]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	220a      	movs	r2, #10
 80046e4:	4952      	ldr	r1, [pc, #328]	@ (8004830 <SEGGER_SYSVIEW_Start+0x16c>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb fd92 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046f2:	200a      	movs	r0, #10
 80046f4:	f7ff ff32 	bl	800455c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046f8:	f3ef 8311 	mrs	r3, BASEPRI
 80046fc:	f04f 0120 	mov.w	r1, #32
 8004700:	f381 8811 	msr	BASEPRI, r1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	484b      	ldr	r0, [pc, #300]	@ (8004834 <SEGGER_SYSVIEW_Start+0x170>)
 8004708:	f7ff f8b8 	bl	800387c <_PreparePacket>
 800470c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004716:	4b45      	ldr	r3, [pc, #276]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471c:	e00b      	b.n	8004736 <SEGGER_SYSVIEW_Start+0x72>
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004728:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2b7f      	cmp	r3, #127	@ 0x7f
 800473a:	d8f0      	bhi.n	800471e <SEGGER_SYSVIEW_Start+0x5a>
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004750:	4b36      	ldr	r3, [pc, #216]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e00b      	b.n	8004770 <SEGGER_SYSVIEW_Start+0xac>
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	6279      	str	r1, [r7, #36]	@ 0x24
 8004762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b7f      	cmp	r3, #127	@ 0x7f
 8004774:	d8f0      	bhi.n	8004758 <SEGGER_SYSVIEW_Start+0x94>
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	627a      	str	r2, [r7, #36]	@ 0x24
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	4b28      	ldr	r3, [pc, #160]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e00b      	b.n	80047aa <SEGGER_SYSVIEW_Start+0xe6>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	61f9      	str	r1, [r7, #28]
 800479c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80047ae:	d8f0      	bhi.n	8004792 <SEGGER_SYSVIEW_Start+0xce>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e00b      	b.n	80047e2 <SEGGER_SYSVIEW_Start+0x11e>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1c59      	adds	r1, r3, #1
 80047d2:	6179      	str	r1, [r7, #20]
 80047d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	09db      	lsrs	r3, r3, #7
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80047e6:	d8f0      	bhi.n	80047ca <SEGGER_SYSVIEW_Start+0x106>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	617a      	str	r2, [r7, #20]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047f8:	2218      	movs	r2, #24
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff f929 	bl	8003a54 <_SendPacket>
      RECORD_END();
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004808:	4b08      	ldr	r3, [pc, #32]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <SEGGER_SYSVIEW_Start+0x168>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004816:	f000 f9eb 	bl	8004bf0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800481a:	f000 f9b1 	bl	8004b80 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800481e:	f000 fd21 	bl	8005264 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004822:	bf00      	nop
 8004824:	3730      	adds	r7, #48	@ 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20014340 	.word	0x20014340
 8004830:	080075d4 	.word	0x080075d4
 8004834:	20014370 	.word	0x20014370

08004838 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	f04f 0120 	mov.w	r1, #32
 8004846:	f381 8811 	msr	BASEPRI, r1
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	480b      	ldr	r0, [pc, #44]	@ (800487c <SEGGER_SYSVIEW_Stop+0x44>)
 800484e:	f7ff f815 	bl	800387c <_PreparePacket>
 8004852:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <SEGGER_SYSVIEW_Stop+0x48>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800485c:	220b      	movs	r2, #11
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f7ff f8f7 	bl	8003a54 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <SEGGER_SYSVIEW_Stop+0x48>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f383 8811 	msr	BASEPRI, r3
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20014370 	.word	0x20014370
 8004880:	20014340 	.word	0x20014340

08004884 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	@ 0x30
 8004888:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800488a:	f3ef 8311 	mrs	r3, BASEPRI
 800488e:	f04f 0120 	mov.w	r1, #32
 8004892:	f381 8811 	msr	BASEPRI, r1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4845      	ldr	r0, [pc, #276]	@ (80049b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800489a:	f7fe ffef 	bl	800387c <_PreparePacket>
 800489e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a8:	4b42      	ldr	r3, [pc, #264]	@ (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ae:	e00b      	b.n	80048c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80048ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	09db      	lsrs	r3, r3, #7
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80048cc:	d8f0      	bhi.n	80048b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e2:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	e00b      	b.n	8004902 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80048f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	09db      	lsrs	r3, r3, #7
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2b7f      	cmp	r3, #127	@ 0x7f
 8004906:	d8f0      	bhi.n	80048ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	627a      	str	r2, [r7, #36]	@ 0x24
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	4b25      	ldr	r3, [pc, #148]	@ (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e00b      	b.n	800493c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	61f9      	str	r1, [r7, #28]
 800492e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004940:	d8f0      	bhi.n	8004924 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e00b      	b.n	8004974 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	6179      	str	r1, [r7, #20]
 8004966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b7f      	cmp	r3, #127	@ 0x7f
 8004978:	d8f0      	bhi.n	800495c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	617a      	str	r2, [r7, #20]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800498a:	2218      	movs	r2, #24
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f7ff f860 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049a2:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	4798      	blx	r3
  }
}
 80049a8:	bf00      	nop
 80049aa:	3730      	adds	r7, #48	@ 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20014370 	.word	0x20014370
 80049b4:	20014340 	.word	0x20014340

080049b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b092      	sub	sp, #72	@ 0x48
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049c0:	f3ef 8311 	mrs	r3, BASEPRI
 80049c4:	f04f 0120 	mov.w	r1, #32
 80049c8:	f381 8811 	msr	BASEPRI, r1
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	486a      	ldr	r0, [pc, #424]	@ (8004b78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049d0:	f7fe ff54 	bl	800387c <_PreparePacket>
 80049d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ea:	e00b      	b.n	8004a04 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	6479      	str	r1, [r7, #68]	@ 0x44
 80049f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a08:	d8f0      	bhi.n	80049ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a24:	e00b      	b.n	8004a3e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a42:	d8f0      	bhi.n	8004a26 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fe fedd 	bl	800381c <_EncodeStr>
 8004a62:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a64:	2209      	movs	r2, #9
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6938      	ldr	r0, [r7, #16]
 8004a6a:	f7fe fff3 	bl	8003a54 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b40      	ldr	r3, [pc, #256]	@ (8004b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a82:	e00b      	b.n	8004a9c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	6379      	str	r1, [r7, #52]	@ 0x34
 8004a8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	09db      	lsrs	r3, r3, #7
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aa0:	d8f0      	bhi.n	8004a84 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	637a      	str	r2, [r7, #52]	@ 0x34
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004abc:	e00b      	b.n	8004ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ac8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ada:	d8f0      	bhi.n	8004abe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	e00b      	b.n	8004b10 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	09db      	lsrs	r3, r3, #7
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b14:	d8f0      	bhi.n	8004af8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	e00b      	b.n	8004b4a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1c59      	adds	r1, r3, #1
 8004b3a:	61f9      	str	r1, [r7, #28]
 8004b3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	09db      	lsrs	r3, r3, #7
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b4e:	d8f0      	bhi.n	8004b32 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b60:	2215      	movs	r2, #21
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6938      	ldr	r0, [r7, #16]
 8004b66:	f7fe ff75 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f383 8811 	msr	BASEPRI, r3
}
 8004b70:	bf00      	nop
 8004b72:	3748      	adds	r7, #72	@ 0x48
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20014370 	.word	0x20014370
 8004b7c:	20014340 	.word	0x20014340

08004b80 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b96:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4798      	blx	r3
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20014340 	.word	0x20014340

08004ba8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb4:	f04f 0120 	mov.w	r1, #32
 8004bb8:	f381 8811 	msr	BASEPRI, r1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	480b      	ldr	r0, [pc, #44]	@ (8004bec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bc0:	f7fe fe5c 	bl	800387c <_PreparePacket>
 8004bc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bc6:	2280      	movs	r2, #128	@ 0x80
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	6938      	ldr	r0, [r7, #16]
 8004bcc:	f7fe fe26 	bl	800381c <_EncodeStr>
 8004bd0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bd2:	220e      	movs	r2, #14
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f7fe ff3c 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f383 8811 	msr	BASEPRI, r3
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20014370 	.word	0x20014370

08004bf0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004bf6:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01a      	beq.n	8004c34 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004bfe:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4798      	blx	r3
 8004c10:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c14:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	000a      	movs	r2, r1
 8004c24:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c26:	4613      	mov	r3, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	200d      	movs	r0, #13
 8004c2e:	f7ff fcef 	bl	8004610 <SEGGER_SYSVIEW_RecordU32x2>
 8004c32:	e006      	b.n	8004c42 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	200c      	movs	r0, #12
 8004c3c:	f7ff fcac 	bl	8004598 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20014340 	.word	0x20014340
 8004c50:	e0001004 	.word	0xe0001004

08004c54 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5e:	f04f 0120 	mov.w	r1, #32
 8004c62:	f381 8811 	msr	BASEPRI, r1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	4819      	ldr	r0, [pc, #100]	@ (8004cd0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c6a:	f7fe fe07 	bl	800387c <_PreparePacket>
 8004c6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e00b      	b.n	8004ca0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	6179      	str	r1, [r7, #20]
 8004c92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	09db      	lsrs	r3, r3, #7
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ca4:	d8f0      	bhi.n	8004c88 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	617a      	str	r2, [r7, #20]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68b8      	ldr	r0, [r7, #8]
 8004cbc:	f7fe feca 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f383 8811 	msr	BASEPRI, r3
}
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20014370 	.word	0x20014370
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cde:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce2:	f04f 0120 	mov.w	r1, #32
 8004ce6:	f381 8811 	msr	BASEPRI, r1
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	4807      	ldr	r0, [pc, #28]	@ (8004d0c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cee:	f7fe fdc5 	bl	800387c <_PreparePacket>
 8004cf2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f7fe feab 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f383 8811 	msr	BASEPRI, r3
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20014370 	.word	0x20014370

08004d10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	4807      	ldr	r0, [pc, #28]	@ (8004d44 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d26:	f7fe fda9 	bl	800387c <_PreparePacket>
 8004d2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d2c:	2212      	movs	r2, #18
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f7fe fe8f 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20014370 	.word	0x20014370

08004d48 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d50:	f3ef 8311 	mrs	r3, BASEPRI
 8004d54:	f04f 0120 	mov.w	r1, #32
 8004d58:	f381 8811 	msr	BASEPRI, r1
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	4817      	ldr	r0, [pc, #92]	@ (8004dbc <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8004d60:	f7fe fd8c 	bl	800387c <_PreparePacket>
 8004d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	e00b      	b.n	8004d8c <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	61f9      	str	r1, [r7, #28]
 8004d7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	09db      	lsrs	r3, r3, #7
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d90:	d8f0      	bhi.n	8004d74 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	61fa      	str	r2, [r7, #28]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004da2:	221c      	movs	r2, #28
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	6938      	ldr	r0, [r7, #16]
 8004da8:	f7fe fe54 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f383 8811 	msr	BASEPRI, r3
}
 8004db2:	bf00      	nop
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20014370 	.word	0x20014370

08004dc0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	@ 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dca:	f3ef 8311 	mrs	r3, BASEPRI
 8004dce:	f04f 0120 	mov.w	r1, #32
 8004dd2:	f381 8811 	msr	BASEPRI, r1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	4824      	ldr	r0, [pc, #144]	@ (8004e6c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8004dda:	f7fe fd4f 	bl	800387c <_PreparePacket>
 8004dde:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	e00b      	b.n	8004e06 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	1c59      	adds	r1, r3, #1
 8004df6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004df8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	09db      	lsrs	r3, r3, #7
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e0a:	d8f0      	bhi.n	8004dee <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e00b      	b.n	8004e3e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	1c59      	adds	r1, r3, #1
 8004e2e:	61f9      	str	r1, [r7, #28]
 8004e30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	09db      	lsrs	r3, r3, #7
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e42:	d8f0      	bhi.n	8004e26 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	61fa      	str	r2, [r7, #28]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004e54:	221c      	movs	r2, #28
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	6938      	ldr	r0, [r7, #16]
 8004e5a:	f7fe fdfb 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f383 8811 	msr	BASEPRI, r3
}
 8004e64:	bf00      	nop
 8004e66:	3728      	adds	r7, #40	@ 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20014370 	.word	0x20014370

08004e70 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e76:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7a:	f04f 0120 	mov.w	r1, #32
 8004e7e:	f381 8811 	msr	BASEPRI, r1
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	4807      	ldr	r0, [pc, #28]	@ (8004ea4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e86:	f7fe fcf9 	bl	800387c <_PreparePacket>
 8004e8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e8c:	2211      	movs	r2, #17
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6838      	ldr	r0, [r7, #0]
 8004e92:	f7fe fddf 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f383 8811 	msr	BASEPRI, r3
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20014370 	.word	0x20014370

08004ea8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb4:	f04f 0120 	mov.w	r1, #32
 8004eb8:	f381 8811 	msr	BASEPRI, r1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	4819      	ldr	r0, [pc, #100]	@ (8004f24 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ec0:	f7fe fcdc 	bl	800387c <_PreparePacket>
 8004ec4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eca:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e00b      	b.n	8004ef6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	61f9      	str	r1, [r7, #28]
 8004ee8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	09db      	lsrs	r3, r3, #7
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efa:	d8f0      	bhi.n	8004ede <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	61fa      	str	r2, [r7, #28]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	6938      	ldr	r0, [r7, #16]
 8004f12:	f7fe fd9f 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f383 8811 	msr	BASEPRI, r3
}
 8004f1c:	bf00      	nop
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20014370 	.word	0x20014370
 8004f28:	20014340 	.word	0x20014340

08004f2c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f34:	f3ef 8311 	mrs	r3, BASEPRI
 8004f38:	f04f 0120 	mov.w	r1, #32
 8004f3c:	f381 8811 	msr	BASEPRI, r1
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	4819      	ldr	r0, [pc, #100]	@ (8004fa8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004f44:	f7fe fc9a 	bl	800387c <_PreparePacket>
 8004f48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f4e:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e00b      	b.n	8004f7a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1c59      	adds	r1, r3, #1
 8004f6a:	61f9      	str	r1, [r7, #28]
 8004f6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	09db      	lsrs	r3, r3, #7
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7e:	d8f0      	bhi.n	8004f62 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	61fa      	str	r2, [r7, #28]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f90:	2204      	movs	r2, #4
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	6938      	ldr	r0, [r7, #16]
 8004f96:	f7fe fd5d 	bl	8003a54 <_SendPacket>
  RECORD_END();
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f383 8811 	msr	BASEPRI, r3
}
 8004fa0:	bf00      	nop
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20014370 	.word	0x20014370
 8004fac:	20014340 	.word	0x20014340

08004fb0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fbc:	f04f 0120 	mov.w	r1, #32
 8004fc0:	f381 8811 	msr	BASEPRI, r1
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	4819      	ldr	r0, [pc, #100]	@ (800502c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004fc8:	f7fe fc58 	bl	800387c <_PreparePacket>
 8004fcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fd2:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e00b      	b.n	8004ffe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	61f9      	str	r1, [r7, #28]
 8004ff0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b7f      	cmp	r3, #127	@ 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	61fa      	str	r2, [r7, #28]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005014:	2206      	movs	r2, #6
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	6938      	ldr	r0, [r7, #16]
 800501a:	f7fe fd1b 	bl	8003a54 <_SendPacket>
  RECORD_END();
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f383 8811 	msr	BASEPRI, r3
}
 8005024:	bf00      	nop
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20014370 	.word	0x20014370
 8005030:	20014340 	.word	0x20014340

08005034 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800503e:	f3ef 8311 	mrs	r3, BASEPRI
 8005042:	f04f 0120 	mov.w	r1, #32
 8005046:	f381 8811 	msr	BASEPRI, r1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	4827      	ldr	r0, [pc, #156]	@ (80050ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800504e:	f7fe fc15 	bl	800387c <_PreparePacket>
 8005052:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	e00b      	b.n	8005084 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	6279      	str	r1, [r7, #36]	@ 0x24
 8005076:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2b7f      	cmp	r3, #127	@ 0x7f
 8005088:	d8f0      	bhi.n	800506c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e00b      	b.n	80050bc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	61f9      	str	r1, [r7, #28]
 80050ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	09db      	lsrs	r3, r3, #7
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c0:	d8f0      	bhi.n	80050a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	61fa      	str	r2, [r7, #28]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80050d2:	2207      	movs	r2, #7
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7fe fcbc 	bl	8003a54 <_SendPacket>
  RECORD_END();
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f383 8811 	msr	BASEPRI, r3
}
 80050e2:	bf00      	nop
 80050e4:	3728      	adds	r7, #40	@ 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20014370 	.word	0x20014370
 80050f0:	20014340 	.word	0x20014340

080050f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80050fc:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20014340 	.word	0x20014340

08005114 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	@ 0x30
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800511e:	4b40      	ldr	r3, [pc, #256]	@ (8005220 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d077      	beq.n	8005216 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005126:	4b3e      	ldr	r3, [pc, #248]	@ (8005220 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800512c:	2300      	movs	r3, #0
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005130:	e008      	b.n	8005144 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	3301      	adds	r3, #1
 8005142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005148:	429a      	cmp	r2, r3
 800514a:	d3f2      	bcc.n	8005132 <SEGGER_SYSVIEW_SendModule+0x1e>
 800514c:	e000      	b.n	8005150 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800514e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d055      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005156:	f3ef 8311 	mrs	r3, BASEPRI
 800515a:	f04f 0120 	mov.w	r1, #32
 800515e:	f381 8811 	msr	BASEPRI, r1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	482f      	ldr	r0, [pc, #188]	@ (8005224 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005166:	f7fe fb89 	bl	800387c <_PreparePacket>
 800516a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	623b      	str	r3, [r7, #32]
 8005178:	e00b      	b.n	8005192 <SEGGER_SYSVIEW_SendModule+0x7e>
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	1c59      	adds	r1, r3, #1
 8005182:	6279      	str	r1, [r7, #36]	@ 0x24
 8005184:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	09db      	lsrs	r3, r3, #7
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b7f      	cmp	r3, #127	@ 0x7f
 8005196:	d8f0      	bhi.n	800517a <SEGGER_SYSVIEW_SendModule+0x66>
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	627a      	str	r2, [r7, #36]	@ 0x24
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e00b      	b.n	80051cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	61f9      	str	r1, [r7, #28]
 80051be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d0:	d8f0      	bhi.n	80051b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	61fa      	str	r2, [r7, #28]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	4619      	mov	r1, r3
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7fe fb16 	bl	800381c <_EncodeStr>
 80051f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80051f2:	2216      	movs	r2, #22
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	6938      	ldr	r0, [r7, #16]
 80051f8:	f7fe fc2c 	bl	8003a54 <_SendPacket>
      RECORD_END();
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <SEGGER_SYSVIEW_SendModule+0x102>
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4798      	blx	r3
    }
  }
}
 8005216:	bf00      	nop
 8005218:	3730      	adds	r7, #48	@ 0x30
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20014368 	.word	0x20014368
 8005224:	20014370 	.word	0x20014370

08005228 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00f      	beq.n	8005256 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f2      	bne.n	800523c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20014368 	.word	0x20014368

08005264 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800526a:	f3ef 8311 	mrs	r3, BASEPRI
 800526e:	f04f 0120 	mov.w	r1, #32
 8005272:	f381 8811 	msr	BASEPRI, r1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	4817      	ldr	r0, [pc, #92]	@ (80052d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800527a:	f7fe faff 	bl	800387c <_PreparePacket>
 800527e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	4b14      	ldr	r3, [pc, #80]	@ (80052dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	e00b      	b.n	80052a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	6179      	str	r1, [r7, #20]
 800529a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	09db      	lsrs	r3, r3, #7
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ac:	d8f0      	bhi.n	8005290 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	617a      	str	r2, [r7, #20]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80052be:	221b      	movs	r2, #27
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	f7fe fbc6 	bl	8003a54 <_SendPacket>
  RECORD_END();
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20014370 	.word	0x20014370
 80052dc:	2001436c 	.word	0x2001436c

080052e0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80052e0:	b40f      	push	{r0, r1, r2, r3}
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	461a      	mov	r2, r3
 80052f2:	2100      	movs	r1, #0
 80052f4:	6938      	ldr	r0, [r7, #16]
 80052f6:	f7fe febd 	bl	8004074 <_VPrintTarget>
  va_end(ParamList);
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr

08005308 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	@ 0x28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005310:	f3ef 8311 	mrs	r3, BASEPRI
 8005314:	f04f 0120 	mov.w	r1, #32
 8005318:	f381 8811 	msr	BASEPRI, r1
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	4827      	ldr	r0, [pc, #156]	@ (80053bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005320:	f7fe faac 	bl	800387c <_PreparePacket>
 8005324:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005326:	2280      	movs	r2, #128	@ 0x80
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	6938      	ldr	r0, [r7, #16]
 800532c:	f7fe fa76 	bl	800381c <_EncodeStr>
 8005330:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
 8005336:	2301      	movs	r3, #1
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	e00b      	b.n	8005354 <SEGGER_SYSVIEW_Warn+0x4c>
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	6279      	str	r1, [r7, #36]	@ 0x24
 8005346:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b7f      	cmp	r3, #127	@ 0x7f
 8005358:	d8f0      	bhi.n	800533c <SEGGER_SYSVIEW_Warn+0x34>
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e00b      	b.n	800538c <SEGGER_SYSVIEW_Warn+0x84>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	61f9      	str	r1, [r7, #28]
 800537e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005390:	d8f0      	bhi.n	8005374 <SEGGER_SYSVIEW_Warn+0x6c>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	61fa      	str	r2, [r7, #28]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053a2:	221a      	movs	r2, #26
 80053a4:	68f9      	ldr	r1, [r7, #12]
 80053a6:	6938      	ldr	r0, [r7, #16]
 80053a8:	f7fe fb54 	bl	8003a54 <_SendPacket>
  RECORD_END();
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f383 8811 	msr	BASEPRI, r3
}
 80053b2:	bf00      	nop
 80053b4:	3728      	adds	r7, #40	@ 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20014370 	.word	0x20014370

080053c0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053c4:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053c6:	7e1b      	ldrb	r3, [r3, #24]
 80053c8:	4619      	mov	r1, r3
 80053ca:	4a13      	ldr	r2, [pc, #76]	@ (8005418 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80053cc:	460b      	mov	r3, r1
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	440b      	add	r3, r1
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	336c      	adds	r3, #108	@ 0x6c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053dc:	7e1b      	ldrb	r3, [r3, #24]
 80053de:	4618      	mov	r0, r3
 80053e0:	490d      	ldr	r1, [pc, #52]	@ (8005418 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80053e2:	4603      	mov	r3, r0
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4403      	add	r3, r0
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	3370      	adds	r3, #112	@ 0x70
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d00b      	beq.n	800540c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053f6:	789b      	ldrb	r3, [r3, #2]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053fc:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053fe:	2201      	movs	r2, #1
 8005400:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005402:	f7fe fa47 	bl	8003894 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005406:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005408:	2200      	movs	r2, #0
 800540a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800540c:	4b01      	ldr	r3, [pc, #4]	@ (8005414 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800540e:	781b      	ldrb	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20014340 	.word	0x20014340
 8005418:	20012e80 	.word	0x20012e80

0800541c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	db0b      	blt.n	8005446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f003 021f 	and.w	r2, r3, #31
 8005434:	4907      	ldr	r1, [pc, #28]	@ (8005454 <__NVIC_EnableIRQ+0x38>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2001      	movs	r0, #1
 800543e:	fa00 f202 	lsl.w	r2, r0, r2
 8005442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000e100 	.word	0xe000e100

08005458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	6039      	str	r1, [r7, #0]
 8005462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db0a      	blt.n	8005482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	490c      	ldr	r1, [pc, #48]	@ (80054a4 <__NVIC_SetPriority+0x4c>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	440b      	add	r3, r1
 800547c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005480:	e00a      	b.n	8005498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4908      	ldr	r1, [pc, #32]	@ (80054a8 <__NVIC_SetPriority+0x50>)
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	3b04      	subs	r3, #4
 8005490:	0112      	lsls	r2, r2, #4
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	440b      	add	r3, r1
 8005496:	761a      	strb	r2, [r3, #24]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	e000e100 	.word	0xe000e100
 80054a8:	e000ed00 	.word	0xe000ed00

080054ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80054b2:	f7ff ff85 	bl	80053c0 <SEGGER_SYSVIEW_IsStarted>
 80054b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80054be:	f7ff f901 	bl	80046c4 <SEGGER_SYSVIEW_Start>
  }
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80054d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <_cbOnUARTRx+0x3c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d806      	bhi.n	80054ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80054de:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <_cbOnUARTRx+0x3c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b08      	ldr	r3, [pc, #32]	@ (8005508 <_cbOnUARTRx+0x3c>)
 80054e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80054ea:	e009      	b.n	8005500 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80054ec:	f7ff ffde 	bl	80054ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80054f0:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <_cbOnUARTRx+0x3c>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	1dfb      	adds	r3, r7, #7
 80054f8:	2201      	movs	r2, #1
 80054fa:	4619      	mov	r1, r3
 80054fc:	f7fe f898 	bl	8003630 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005500:	bf00      	nop
}
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000008 	.word	0x20000008

0800550c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005514:	4b14      	ldr	r3, [pc, #80]	@ (8005568 <_cbOnUARTTx+0x5c>)
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d80f      	bhi.n	800553c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800551c:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <_cbOnUARTTx+0x5c>)
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	461a      	mov	r2, r3
 8005522:	4b12      	ldr	r3, [pc, #72]	@ (800556c <_cbOnUARTTx+0x60>)
 8005524:	5c9a      	ldrb	r2, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800552a:	4b0f      	ldr	r3, [pc, #60]	@ (8005568 <_cbOnUARTTx+0x5c>)
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	3301      	adds	r3, #1
 8005530:	b2da      	uxtb	r2, r3
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <_cbOnUARTTx+0x5c>)
 8005534:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
    goto Done;
 800553a:	e00f      	b.n	800555c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <_cbOnUARTTx+0x5c>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fd ff17 	bl	8003378 <SEGGER_RTT_ReadUpBufferNoLock>
 800554a:	4603      	mov	r3, r0
 800554c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da02      	bge.n	800555a <_cbOnUARTTx+0x4e>
    r = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e000      	b.n	800555c <_cbOnUARTTx+0x50>
  }
Done:
 800555a:	bf00      	nop
  return r;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000008 	.word	0x20000008
 800556c:	080075f0 	.word	0x080075f0

08005570 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005578:	4a04      	ldr	r2, [pc, #16]	@ (800558c <SEGGER_UART_init+0x1c>)
 800557a:	4905      	ldr	r1, [pc, #20]	@ (8005590 <SEGGER_UART_init+0x20>)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f853 	bl	8005628 <HIF_UART_Init>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	080054cd 	.word	0x080054cd
 8005590:	0800550d 	.word	0x0800550d

08005594 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800559a:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <USART2_IRQHandler+0x80>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d011      	beq.n	80055ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80055aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <USART2_IRQHandler+0x84>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 030b 	and.w	r3, r3, #11
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80055bc:	4b17      	ldr	r3, [pc, #92]	@ (800561c <USART2_IRQHandler+0x88>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80055c4:	4b15      	ldr	r3, [pc, #84]	@ (800561c <USART2_IRQHandler+0x88>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	4610      	mov	r0, r2
 80055cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80055d8:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <USART2_IRQHandler+0x8c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80055e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <USART2_IRQHandler+0x8c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	1dfa      	adds	r2, r7, #7
 80055e6:	4610      	mov	r0, r2
 80055e8:	4798      	blx	r3
 80055ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80055f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <USART2_IRQHandler+0x90>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005624 <USART2_IRQHandler+0x90>)
 80055f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e006      	b.n	800560e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005600:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <USART2_IRQHandler+0x80>)
 8005602:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005604:	79fa      	ldrb	r2, [r7, #7]
 8005606:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <USART2_IRQHandler+0x84>)
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e000      	b.n	800560e <USART2_IRQHandler+0x7a>
      return;
 800560c:	bf00      	nop
    }
  }
}
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40004400 	.word	0x40004400
 8005618:	40004404 	.word	0x40004404
 800561c:	20014454 	.word	0x20014454
 8005620:	20014458 	.word	0x20014458
 8005624:	4000440c 	.word	0x4000440c

08005628 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005634:	4b2e      	ldr	r3, [pc, #184]	@ (80056f0 <HIF_UART_Init+0xc8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2d      	ldr	r2, [pc, #180]	@ (80056f0 <HIF_UART_Init+0xc8>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005640:	4b2c      	ldr	r3, [pc, #176]	@ (80056f4 <HIF_UART_Init+0xcc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2b      	ldr	r2, [pc, #172]	@ (80056f4 <HIF_UART_Init+0xcc>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800564c:	4b2a      	ldr	r3, [pc, #168]	@ (80056f8 <HIF_UART_Init+0xd0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005658:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005660:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005662:	4a25      	ldr	r2, [pc, #148]	@ (80056f8 <HIF_UART_Init+0xd0>)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005668:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HIF_UART_Init+0xd4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005674:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800567c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800567e:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <HIF_UART_Init+0xd4>)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005684:	4b1e      	ldr	r3, [pc, #120]	@ (8005700 <HIF_UART_Init+0xd8>)
 8005686:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800568a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800568c:	4b1d      	ldr	r3, [pc, #116]	@ (8005704 <HIF_UART_Init+0xdc>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005692:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <HIF_UART_Init+0xe0>)
 8005694:	2280      	movs	r2, #128	@ 0x80
 8005696:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800569e:	4a1b      	ldr	r2, [pc, #108]	@ (800570c <HIF_UART_Init+0xe4>)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	3301      	adds	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b6:	d302      	bcc.n	80056be <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80056b8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80056bc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4a11      	ldr	r2, [pc, #68]	@ (8005710 <HIF_UART_Init+0xe8>)
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80056ce:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <HIF_UART_Init+0xec>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80056d4:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <HIF_UART_Init+0xf0>)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80056da:	2106      	movs	r1, #6
 80056dc:	2026      	movs	r0, #38	@ 0x26
 80056de:	f7ff febb 	bl	8005458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80056e2:	2026      	movs	r0, #38	@ 0x26
 80056e4:	f7ff fe9a 	bl	800541c <__NVIC_EnableIRQ>
}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023840 	.word	0x40023840
 80056f4:	40023830 	.word	0x40023830
 80056f8:	40020020 	.word	0x40020020
 80056fc:	40020000 	.word	0x40020000
 8005700:	4000440c 	.word	0x4000440c
 8005704:	40004410 	.word	0x40004410
 8005708:	40004414 	.word	0x40004414
 800570c:	0501bd00 	.word	0x0501bd00
 8005710:	40004408 	.word	0x40004408
 8005714:	20014454 	.word	0x20014454
 8005718:	20014458 	.word	0x20014458

0800571c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	@ 0x28
 8005720:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	TaskHandle_t task1_handle = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
	TaskHandle_t task2_handle = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task3_handle = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800572e:	f000 fabd 	bl	8005cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005732:	f000 f871 	bl	8005818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005736:	f000 f8db 	bl	80058f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  SEGGER_UART_init(500000);
 800573a:	482f      	ldr	r0, [pc, #188]	@ (80057f8 <main+0xdc>)
 800573c:	f7ff ff18 	bl	8005570 <SEGGER_UART_init>

  //Enable the CYCCNT (Cyclic Clock Counter)
  DWT_CTRL |= (1 << 0);
 8005740:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <main+0xe0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2d      	ldr	r2, [pc, #180]	@ (80057fc <main+0xe0>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800574c:	f7fd fbc6 	bl	8002edc <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start(); // this is initialized in SEGGER_UART_Init();

  status = xTaskCreate(LED1_task, "LED_1_Task", 200, NULL, 2, &task1_handle);
 8005750:	f107 030c 	add.w	r3, r7, #12
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	2302      	movs	r3, #2
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	22c8      	movs	r2, #200	@ 0xc8
 800575e:	4928      	ldr	r1, [pc, #160]	@ (8005800 <main+0xe4>)
 8005760:	4828      	ldr	r0, [pc, #160]	@ (8005804 <main+0xe8>)
 8005762:	f7fb fb04 	bl	8000d6e <xTaskCreate>
 8005766:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d00b      	beq.n	8005786 <main+0x6a>
    __asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	61bb      	str	r3, [r7, #24]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <main+0x66>

  status = xTaskCreate(LED2_task, "LED_2_Task", 200, NULL, 2, &task2_handle);
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	2302      	movs	r3, #2
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	22c8      	movs	r2, #200	@ 0xc8
 8005794:	491c      	ldr	r1, [pc, #112]	@ (8005808 <main+0xec>)
 8005796:	481d      	ldr	r0, [pc, #116]	@ (800580c <main+0xf0>)
 8005798:	f7fb fae9 	bl	8000d6e <xTaskCreate>
 800579c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d00b      	beq.n	80057bc <main+0xa0>
    __asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	617b      	str	r3, [r7, #20]
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <main+0x9c>

  status = xTaskCreate(LED3_task, "LED_3_Task", 200, NULL, 2, &task3_handle);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	2302      	movs	r3, #2
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	22c8      	movs	r2, #200	@ 0xc8
 80057c8:	4911      	ldr	r1, [pc, #68]	@ (8005810 <main+0xf4>)
 80057ca:	4812      	ldr	r0, [pc, #72]	@ (8005814 <main+0xf8>)
 80057cc:	f7fb facf 	bl	8000d6e <xTaskCreate>
 80057d0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d00b      	beq.n	80057f0 <main+0xd4>
    __asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <main+0xd0>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80057f0:	f7fb fcae 	bl	8001150 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <main+0xd8>
 80057f8:	0007a120 	.word	0x0007a120
 80057fc:	e0001000 	.word	0xe0001000
 8005800:	08007564 	.word	0x08007564
 8005804:	080059ed 	.word	0x080059ed
 8005808:	08007570 	.word	0x08007570
 800580c:	08005a19 	.word	0x08005a19
 8005810:	0800757c 	.word	0x0800757c
 8005814:	08005a45 	.word	0x08005a45

08005818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b094      	sub	sp, #80	@ 0x50
 800581c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800581e:	f107 031c 	add.w	r3, r7, #28
 8005822:	2234      	movs	r2, #52	@ 0x34
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fde4 	bl	80073f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800583c:	2300      	movs	r3, #0
 800583e:	607b      	str	r3, [r7, #4]
 8005840:	4b29      	ldr	r3, [pc, #164]	@ (80058e8 <SystemClock_Config+0xd0>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	4a28      	ldr	r2, [pc, #160]	@ (80058e8 <SystemClock_Config+0xd0>)
 8005846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584a:	6413      	str	r3, [r2, #64]	@ 0x40
 800584c:	4b26      	ldr	r3, [pc, #152]	@ (80058e8 <SystemClock_Config+0xd0>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005858:	2300      	movs	r3, #0
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4b23      	ldr	r3, [pc, #140]	@ (80058ec <SystemClock_Config+0xd4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <SystemClock_Config+0xd4>)
 8005862:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b20      	ldr	r3, [pc, #128]	@ (80058ec <SystemClock_Config+0xd4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005874:	2302      	movs	r3, #2
 8005876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005878:	2301      	movs	r3, #1
 800587a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800587c:	2310      	movs	r3, #16
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005880:	2302      	movs	r3, #2
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005884:	2300      	movs	r3, #0
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005888:	2310      	movs	r3, #16
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800588c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005890:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005892:	2302      	movs	r3, #2
 8005894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005896:	2302      	movs	r3, #2
 8005898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800589a:	2302      	movs	r3, #2
 800589c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800589e:	f107 031c 	add.w	r3, r7, #28
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f856 	bl	8006954 <HAL_RCC_OscConfig>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80058ae:	f000 f8f1 	bl	8005a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058b2:	230f      	movs	r3, #15
 80058b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058b6:	2302      	movs	r3, #2
 80058b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80058c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	2105      	movs	r1, #5
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fcd7 	bl	8006284 <HAL_RCC_ClockConfig>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80058dc:	f000 f8da 	bl	8005a94 <Error_Handler>
  }
}
 80058e0:	bf00      	nop
 80058e2:	3750      	adds	r7, #80	@ 0x50
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000

080058f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	@ 0x28
 80058f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f6:	f107 0314 	add.w	r3, r7, #20
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	4b35      	ldr	r3, [pc, #212]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	4a34      	ldr	r2, [pc, #208]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	6313      	str	r3, [r2, #48]	@ 0x30
 8005916:	4b32      	ldr	r3, [pc, #200]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b2e      	ldr	r3, [pc, #184]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 800592c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005930:	6313      	str	r3, [r2, #48]	@ 0x30
 8005932:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6313      	str	r3, [r2, #48]	@ 0x30
 800594e:	4b24      	ldr	r3, [pc, #144]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005962:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	6313      	str	r3, [r2, #48]	@ 0x30
 800596a:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <MX_GPIO_Init+0xf0>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005976:	2200      	movs	r2, #0
 8005978:	2123      	movs	r1, #35	@ 0x23
 800597a:	481a      	ldr	r0, [pc, #104]	@ (80059e4 <MX_GPIO_Init+0xf4>)
 800597c:	f000 fc4e 	bl	800621c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005986:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800598a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005990:	f107 0314 	add.w	r3, r7, #20
 8005994:	4619      	mov	r1, r3
 8005996:	4814      	ldr	r0, [pc, #80]	@ (80059e8 <MX_GPIO_Init+0xf8>)
 8005998:	f000 faac 	bl	8005ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ext_LED_1_Pin Ext_LED_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin;
 800599c:	2323      	movs	r3, #35	@ 0x23
 800599e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059a0:	2301      	movs	r3, #1
 80059a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a8:	2300      	movs	r3, #0
 80059aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ac:	f107 0314 	add.w	r3, r7, #20
 80059b0:	4619      	mov	r1, r3
 80059b2:	480c      	ldr	r0, [pc, #48]	@ (80059e4 <MX_GPIO_Init+0xf4>)
 80059b4:	f000 fa9e 	bl	8005ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80059b8:	230c      	movs	r3, #12
 80059ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059bc:	2302      	movs	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059c4:	2303      	movs	r3, #3
 80059c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059c8:	2307      	movs	r3, #7
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	4619      	mov	r1, r3
 80059d2:	4804      	ldr	r0, [pc, #16]	@ (80059e4 <MX_GPIO_Init+0xf4>)
 80059d4:	f000 fa8e 	bl	8005ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80059d8:	bf00      	nop
 80059da:	3728      	adds	r7, #40	@ 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	40020000 	.word	0x40020000
 80059e8:	40020800 	.word	0x40020800

080059ec <LED1_task>:

/* USER CODE BEGIN 4 */

void LED1_task(void *)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED_1_Toggling");
 80059f4:	4806      	ldr	r0, [pc, #24]	@ (8005a10 <LED1_task+0x24>)
 80059f6:	f7ff fc73 	bl	80052e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80059fa:	2101      	movs	r1, #1
 80059fc:	4805      	ldr	r0, [pc, #20]	@ (8005a14 <LED1_task+0x28>)
 80059fe:	f000 fc26 	bl	800624e <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		//taskYIELD();

		/*By using vTaskDelay() function we can make CPU to sleep when all the tasks are entered into blocked state*/
		vTaskDelay(pdMS_TO_TICKS(1000));
 8005a02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a06:	f7fb fb21 	bl	800104c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("LED_1_Toggling");
 8005a0a:	bf00      	nop
 8005a0c:	e7f2      	b.n	80059f4 <LED1_task+0x8>
 8005a0e:	bf00      	nop
 8005a10:	08007588 	.word	0x08007588
 8005a14:	40020000 	.word	0x40020000

08005a18 <LED2_task>:
	}
}
void LED2_task(void *)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED_2_Toggling");
 8005a20:	4806      	ldr	r0, [pc, #24]	@ (8005a3c <LED2_task+0x24>)
 8005a22:	f7ff fc5d 	bl	80052e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8005a26:	2102      	movs	r1, #2
 8005a28:	4805      	ldr	r0, [pc, #20]	@ (8005a40 <LED2_task+0x28>)
 8005a2a:	f000 fc10 	bl	800624e <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		//taskYIELD();
		vTaskDelay(pdMS_TO_TICKS(800));
 8005a2e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8005a32:	f7fb fb0b 	bl	800104c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("LED_2_Toggling");
 8005a36:	bf00      	nop
 8005a38:	e7f2      	b.n	8005a20 <LED2_task+0x8>
 8005a3a:	bf00      	nop
 8005a3c:	08007598 	.word	0x08007598
 8005a40:	40020000 	.word	0x40020000

08005a44 <LED3_task>:
	}
}
void LED3_task(void *)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED_3_Toggling");
 8005a4c:	4806      	ldr	r0, [pc, #24]	@ (8005a68 <LED3_task+0x24>)
 8005a4e:	f7ff fc47 	bl	80052e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8005a52:	2120      	movs	r1, #32
 8005a54:	4805      	ldr	r0, [pc, #20]	@ (8005a6c <LED3_task+0x28>)
 8005a56:	f000 fbfa 	bl	800624e <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		//taskYIELD();
		vTaskDelay(pdMS_TO_TICKS(400));
 8005a5a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8005a5e:	f7fb faf5 	bl	800104c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("LED_3_Toggling");
 8005a62:	bf00      	nop
 8005a64:	e7f2      	b.n	8005a4c <LED3_task+0x8>
 8005a66:	bf00      	nop
 8005a68:	080075a8 	.word	0x080075a8
 8005a6c:	40020000 	.word	0x40020000

08005a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005a82:	f000 f935 	bl	8005cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40001000 	.word	0x40001000

08005a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a98:	b672      	cpsid	i
}
 8005a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <Error_Handler+0x8>

08005aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	4b10      	ldr	r3, [pc, #64]	@ (8005aec <HAL_MspInit+0x4c>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	4a0f      	ldr	r2, [pc, #60]	@ (8005aec <HAL_MspInit+0x4c>)
 8005ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <HAL_MspInit+0x4c>)
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <HAL_MspInit+0x4c>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <HAL_MspInit+0x4c>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <HAL_MspInit+0x4c>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8005ade:	f7fc fdc1 	bl	8002664 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800

08005af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	@ 0x38
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <HAL_InitTick+0xe4>)
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	4a32      	ldr	r2, [pc, #200]	@ (8005bd4 <HAL_InitTick+0xe4>)
 8005b0a:	f043 0310 	orr.w	r3, r3, #16
 8005b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b10:	4b30      	ldr	r3, [pc, #192]	@ (8005bd4 <HAL_InitTick+0xe4>)
 8005b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b1c:	f107 0210 	add.w	r2, r7, #16
 8005b20:	f107 0314 	add.w	r3, r7, #20
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fcb2 	bl	8006490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005b36:	f000 fc97 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 8005b3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005b3c:	e004      	b.n	8005b48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005b3e:	f000 fc93 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 8005b42:	4603      	mov	r3, r0
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	4a23      	ldr	r2, [pc, #140]	@ (8005bd8 <HAL_InitTick+0xe8>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0c9b      	lsrs	r3, r3, #18
 8005b52:	3b01      	subs	r3, #1
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005b56:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b58:	4a21      	ldr	r2, [pc, #132]	@ (8005be0 <HAL_InitTick+0xf0>)
 8005b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005b64:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b70:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b76:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005b7c:	4817      	ldr	r0, [pc, #92]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b7e:	f001 f987 	bl	8006e90 <HAL_TIM_Base_Init>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005b90:	4812      	ldr	r0, [pc, #72]	@ (8005bdc <HAL_InitTick+0xec>)
 8005b92:	f001 f9d7 	bl	8006f44 <HAL_TIM_Base_Start_IT>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d111      	bne.n	8005bc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005ba4:	2036      	movs	r0, #54	@ 0x36
 8005ba6:	f000 f997 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d808      	bhi.n	8005bc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	2036      	movs	r0, #54	@ 0x36
 8005bb6:	f000 f973 	bl	8005ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005bba:	4a0a      	ldr	r2, [pc, #40]	@ (8005be4 <HAL_InitTick+0xf4>)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e002      	b.n	8005bc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3738      	adds	r7, #56	@ 0x38
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	431bde83 	.word	0x431bde83
 8005bdc:	2001445c 	.word	0x2001445c
 8005be0:	40001000 	.word	0x40001000
 8005be4:	20000014 	.word	0x20000014

08005be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <NMI_Handler+0x4>

08005bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <HardFault_Handler+0x4>

08005bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <MemManage_Handler+0x4>

08005c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <BusFault_Handler+0x4>

08005c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <UsageFault_Handler+0x4>

08005c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005c24:	4802      	ldr	r0, [pc, #8]	@ (8005c30 <TIM6_DAC_IRQHandler+0x10>)
 8005c26:	f001 f9fd 	bl	8007024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	2001445c 	.word	0x2001445c

08005c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <SystemInit+0x20>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	4a05      	ldr	r2, [pc, #20]	@ (8005c54 <SystemInit+0x20>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005c5c:	f7ff ffea 	bl	8005c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c60:	480c      	ldr	r0, [pc, #48]	@ (8005c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c62:	490d      	ldr	r1, [pc, #52]	@ (8005c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c64:	4a0d      	ldr	r2, [pc, #52]	@ (8005c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c68:	e002      	b.n	8005c70 <LoopCopyDataInit>

08005c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c6e:	3304      	adds	r3, #4

08005c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c74:	d3f9      	bcc.n	8005c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c78:	4c0a      	ldr	r4, [pc, #40]	@ (8005ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c7c:	e001      	b.n	8005c82 <LoopFillZerobss>

08005c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c80:	3204      	adds	r2, #4

08005c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c84:	d3fb      	bcc.n	8005c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005c86:	f001 fbbd 	bl	8007404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c8a:	f7ff fd47 	bl	800571c <main>
  bx  lr    
 8005c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c98:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005c9c:	0800761c 	.word	0x0800761c
  ldr r2, =_sbss
 8005ca0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8005ca4:	200144a8 	.word	0x200144a8

08005ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ca8:	e7fe      	b.n	8005ca8 <ADC_IRQHandler>
	...

08005cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cec <HAL_Init+0x40>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <HAL_Init+0x40>)
 8005cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <HAL_Init+0x40>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cec <HAL_Init+0x40>)
 8005cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_Init+0x40>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <HAL_Init+0x40>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	f000 f8d8 	bl	8005e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7ff ff08 	bl	8005af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ce0:	f7ff fede 	bl	8005aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40023c00 	.word	0x40023c00

08005cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cf4:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_IncTick+0x20>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_IncTick+0x24>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <HAL_IncTick+0x24>)
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000018 	.word	0x20000018
 8005d14:	200144a4 	.word	0x200144a4

08005d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <HAL_GetTick+0x14>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	200144a4 	.word	0x200144a4

08005d30 <__NVIC_SetPriorityGrouping>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d62:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	60d3      	str	r3, [r2, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <__NVIC_GetPriorityGrouping>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d7c:	4b04      	ldr	r3, [pc, #16]	@ (8005d90 <__NVIC_GetPriorityGrouping+0x18>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 0307 	and.w	r3, r3, #7
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <__NVIC_EnableIRQ>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db0b      	blt.n	8005dbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f003 021f 	and.w	r2, r3, #31
 8005dac:	4907      	ldr	r1, [pc, #28]	@ (8005dcc <__NVIC_EnableIRQ+0x38>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2001      	movs	r0, #1
 8005db6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000e100 	.word	0xe000e100

08005dd0 <__NVIC_SetPriority>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db0a      	blt.n	8005dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	490c      	ldr	r1, [pc, #48]	@ (8005e1c <__NVIC_SetPriority+0x4c>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005df8:	e00a      	b.n	8005e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4908      	ldr	r1, [pc, #32]	@ (8005e20 <__NVIC_SetPriority+0x50>)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3b04      	subs	r3, #4
 8005e08:	0112      	lsls	r2, r2, #4
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	761a      	strb	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e100 	.word	0xe000e100
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	@ 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf28      	it	cs
 8005e42:	2304      	movcs	r3, #4
 8005e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d902      	bls.n	8005e54 <NVIC_EncodePriority+0x30>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3b03      	subs	r3, #3
 8005e52:	e000      	b.n	8005e56 <NVIC_EncodePriority+0x32>
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	4313      	orrs	r3, r2
         );
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	@ 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff4c 	bl	8005d30 <__NVIC_SetPriorityGrouping>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb2:	f7ff ff61 	bl	8005d78 <__NVIC_GetPriorityGrouping>
 8005eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f7ff ffb1 	bl	8005e24 <NVIC_EncodePriority>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ff80 	bl	8005dd0 <__NVIC_SetPriority>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ff54 	bl	8005d94 <__NVIC_EnableIRQ>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	@ 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	e165      	b.n	80061dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f10:	2201      	movs	r2, #1
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4013      	ands	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	f040 8154 	bne.w	80061d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d005      	beq.n	8005f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d130      	bne.n	8005fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	2203      	movs	r2, #3
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 0201 	and.w	r2, r3, #1
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d017      	beq.n	8005fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d123      	bne.n	8006038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	08da      	lsrs	r2, r3, #3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3208      	adds	r2, #8
 8005ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	220f      	movs	r2, #15
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	08da      	lsrs	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3208      	adds	r2, #8
 8006032:	69b9      	ldr	r1, [r7, #24]
 8006034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	2203      	movs	r2, #3
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 0203 	and.w	r2, r3, #3
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80ae 	beq.w	80061d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	4b5d      	ldr	r3, [pc, #372]	@ (80061f4 <HAL_GPIO_Init+0x300>)
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	4a5c      	ldr	r2, [pc, #368]	@ (80061f4 <HAL_GPIO_Init+0x300>)
 8006084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006088:	6453      	str	r3, [r2, #68]	@ 0x44
 800608a:	4b5a      	ldr	r3, [pc, #360]	@ (80061f4 <HAL_GPIO_Init+0x300>)
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006096:	4a58      	ldr	r2, [pc, #352]	@ (80061f8 <HAL_GPIO_Init+0x304>)
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	089b      	lsrs	r3, r3, #2
 800609c:	3302      	adds	r3, #2
 800609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	220f      	movs	r2, #15
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a4f      	ldr	r2, [pc, #316]	@ (80061fc <HAL_GPIO_Init+0x308>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d025      	beq.n	800610e <HAL_GPIO_Init+0x21a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4e      	ldr	r2, [pc, #312]	@ (8006200 <HAL_GPIO_Init+0x30c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01f      	beq.n	800610a <HAL_GPIO_Init+0x216>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4d      	ldr	r2, [pc, #308]	@ (8006204 <HAL_GPIO_Init+0x310>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d019      	beq.n	8006106 <HAL_GPIO_Init+0x212>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006208 <HAL_GPIO_Init+0x314>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_GPIO_Init+0x20e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a4b      	ldr	r2, [pc, #300]	@ (800620c <HAL_GPIO_Init+0x318>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00d      	beq.n	80060fe <HAL_GPIO_Init+0x20a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006210 <HAL_GPIO_Init+0x31c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <HAL_GPIO_Init+0x206>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a49      	ldr	r2, [pc, #292]	@ (8006214 <HAL_GPIO_Init+0x320>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_GPIO_Init+0x202>
 80060f2:	2306      	movs	r3, #6
 80060f4:	e00c      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 80060f6:	2307      	movs	r3, #7
 80060f8:	e00a      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 80060fa:	2305      	movs	r3, #5
 80060fc:	e008      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 80060fe:	2304      	movs	r3, #4
 8006100:	e006      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 8006102:	2303      	movs	r3, #3
 8006104:	e004      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 8006106:	2302      	movs	r3, #2
 8006108:	e002      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <HAL_GPIO_Init+0x21c>
 800610e:	2300      	movs	r3, #0
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	f002 0203 	and.w	r2, r2, #3
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	4093      	lsls	r3, r2
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006120:	4935      	ldr	r1, [pc, #212]	@ (80061f8 <HAL_GPIO_Init+0x304>)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	089b      	lsrs	r3, r3, #2
 8006126:	3302      	adds	r3, #2
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800612e:	4b3a      	ldr	r3, [pc, #232]	@ (8006218 <HAL_GPIO_Init+0x324>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006152:	4a31      	ldr	r2, [pc, #196]	@ (8006218 <HAL_GPIO_Init+0x324>)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006158:	4b2f      	ldr	r3, [pc, #188]	@ (8006218 <HAL_GPIO_Init+0x324>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800617c:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <HAL_GPIO_Init+0x324>)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006182:	4b25      	ldr	r3, [pc, #148]	@ (8006218 <HAL_GPIO_Init+0x324>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <HAL_GPIO_Init+0x324>)
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006218 <HAL_GPIO_Init+0x324>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061d0:	4a11      	ldr	r2, [pc, #68]	@ (8006218 <HAL_GPIO_Init+0x324>)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3301      	adds	r3, #1
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b0f      	cmp	r3, #15
 80061e0:	f67f ae96 	bls.w	8005f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3724      	adds	r7, #36	@ 0x24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800
 80061f8:	40013800 	.word	0x40013800
 80061fc:	40020000 	.word	0x40020000
 8006200:	40020400 	.word	0x40020400
 8006204:	40020800 	.word	0x40020800
 8006208:	40020c00 	.word	0x40020c00
 800620c:	40021000 	.word	0x40021000
 8006210:	40021400 	.word	0x40021400
 8006214:	40021800 	.word	0x40021800
 8006218:	40013c00 	.word	0x40013c00

0800621c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	807b      	strh	r3, [r7, #2]
 8006228:	4613      	mov	r3, r2
 800622a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800622c:	787b      	ldrb	r3, [r7, #1]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006238:	e003      	b.n	8006242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800623a:	887b      	ldrh	r3, [r7, #2]
 800623c:	041a      	lsls	r2, r3, #16
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	619a      	str	r2, [r3, #24]
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4013      	ands	r3, r2
 8006266:	041a      	lsls	r2, r3, #16
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	43d9      	mvns	r1, r3
 800626c:	887b      	ldrh	r3, [r7, #2]
 800626e:	400b      	ands	r3, r1
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	619a      	str	r2, [r3, #24]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0cc      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006298:	4b68      	ldr	r3, [pc, #416]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d90c      	bls.n	80062c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b65      	ldr	r3, [pc, #404]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ae:	4b63      	ldr	r3, [pc, #396]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0b8      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d8:	4b59      	ldr	r3, [pc, #356]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4a58      	ldr	r2, [pc, #352]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062f0:	4b53      	ldr	r3, [pc, #332]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4a52      	ldr	r2, [pc, #328]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062fc:	4b50      	ldr	r3, [pc, #320]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	494d      	ldr	r1, [pc, #308]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d044      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d107      	bne.n	8006332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	4b47      	ldr	r3, [pc, #284]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d119      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e07f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d003      	beq.n	8006342 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633e:	2b03      	cmp	r3, #3
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006342:	4b3f      	ldr	r3, [pc, #252]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e06f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006352:	4b3b      	ldr	r3, [pc, #236]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e067      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006362:	4b37      	ldr	r3, [pc, #220]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4934      	ldr	r1, [pc, #208]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006374:	f7ff fcd0 	bl	8005d18 <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637a:	e00a      	b.n	8006392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637c:	f7ff fccc 	bl	8005d18 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e04f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	4b2b      	ldr	r3, [pc, #172]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 020c 	and.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d1eb      	bne.n	800637c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063a4:	4b25      	ldr	r3, [pc, #148]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d20c      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	4b22      	ldr	r3, [pc, #136]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	4b20      	ldr	r3, [pc, #128]	@ (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e032      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d8:	4b19      	ldr	r3, [pc, #100]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4916      	ldr	r1, [pc, #88]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f6:	4b12      	ldr	r3, [pc, #72]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	490e      	ldr	r1, [pc, #56]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800640a:	f000 f873 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 800640e:	4602      	mov	r2, r0
 8006410:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	490a      	ldr	r1, [pc, #40]	@ (8006444 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	5ccb      	ldrb	r3, [r1, r3]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <HAL_RCC_ClockConfig+0x1c4>)
 8006424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <HAL_RCC_ClockConfig+0x1c8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fb60 	bl	8005af0 <HAL_InitTick>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40023c00 	.word	0x40023c00
 8006440:	40023800 	.word	0x40023800
 8006444:	080075f4 	.word	0x080075f4
 8006448:	20000010 	.word	0x20000010
 800644c:	20000014 	.word	0x20000014

08006450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006454:	4b03      	ldr	r3, [pc, #12]	@ (8006464 <HAL_RCC_GetHCLKFreq+0x14>)
 8006456:	681b      	ldr	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000010 	.word	0x20000010

08006468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800646c:	f7ff fff0 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	0a9b      	lsrs	r3, r3, #10
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4903      	ldr	r1, [pc, #12]	@ (800648c <HAL_RCC_GetPCLK1Freq+0x24>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40023800 	.word	0x40023800
 800648c:	08007604 	.word	0x08007604

08006490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	220f      	movs	r2, #15
 800649e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064a0:	4b12      	ldr	r3, [pc, #72]	@ (80064ec <HAL_RCC_GetClockConfig+0x5c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0203 	and.w	r2, r3, #3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064ac:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <HAL_RCC_GetClockConfig+0x5c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064b8:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <HAL_RCC_GetClockConfig+0x5c>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064c4:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <HAL_RCC_GetClockConfig+0x5c>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	08db      	lsrs	r3, r3, #3
 80064ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064d2:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <HAL_RCC_GetClockConfig+0x60>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 020f 	and.w	r2, r3, #15
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800
 80064f0:	40023c00 	.word	0x40023c00

080064f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b0ae      	sub	sp, #184	@ 0xb8
 80064fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800651a:	4bcb      	ldr	r3, [pc, #812]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	2b0c      	cmp	r3, #12
 8006524:	f200 8206 	bhi.w	8006934 <HAL_RCC_GetSysClockFreq+0x440>
 8006528:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006565 	.word	0x08006565
 8006534:	08006935 	.word	0x08006935
 8006538:	08006935 	.word	0x08006935
 800653c:	08006935 	.word	0x08006935
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006935 	.word	0x08006935
 8006548:	08006935 	.word	0x08006935
 800654c:	08006935 	.word	0x08006935
 8006550:	08006575 	.word	0x08006575
 8006554:	08006935 	.word	0x08006935
 8006558:	08006935 	.word	0x08006935
 800655c:	08006935 	.word	0x08006935
 8006560:	08006765 	.word	0x08006765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006564:	4bb9      	ldr	r3, [pc, #740]	@ (800684c <HAL_RCC_GetSysClockFreq+0x358>)
 8006566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800656a:	e1e7      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800656c:	4bb8      	ldr	r3, [pc, #736]	@ (8006850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800656e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006572:	e1e3      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006574:	4bb4      	ldr	r3, [pc, #720]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800657c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006580:	4bb1      	ldr	r3, [pc, #708]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d071      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658c:	4bae      	ldr	r3, [pc, #696]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	099b      	lsrs	r3, r3, #6
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006598:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800659c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	f04f 0000 	mov.w	r0, #0
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	0159      	lsls	r1, r3, #5
 80065c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065c4:	0150      	lsls	r0, r2, #5
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4621      	mov	r1, r4
 80065cc:	1a51      	subs	r1, r2, r1
 80065ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80065d0:	4629      	mov	r1, r5
 80065d2:	eb63 0301 	sbc.w	r3, r3, r1
 80065d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80065e4:	4649      	mov	r1, r9
 80065e6:	018b      	lsls	r3, r1, #6
 80065e8:	4641      	mov	r1, r8
 80065ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065ee:	4641      	mov	r1, r8
 80065f0:	018a      	lsls	r2, r1, #6
 80065f2:	4641      	mov	r1, r8
 80065f4:	1a51      	subs	r1, r2, r1
 80065f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065f8:	4649      	mov	r1, r9
 80065fa:	eb63 0301 	sbc.w	r3, r3, r1
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800660c:	4649      	mov	r1, r9
 800660e:	00cb      	lsls	r3, r1, #3
 8006610:	4641      	mov	r1, r8
 8006612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006616:	4641      	mov	r1, r8
 8006618:	00ca      	lsls	r2, r1, #3
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	4603      	mov	r3, r0
 8006620:	4622      	mov	r2, r4
 8006622:	189b      	adds	r3, r3, r2
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
 8006626:	462b      	mov	r3, r5
 8006628:	460a      	mov	r2, r1
 800662a:	eb42 0303 	adc.w	r3, r2, r3
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800663c:	4629      	mov	r1, r5
 800663e:	024b      	lsls	r3, r1, #9
 8006640:	4621      	mov	r1, r4
 8006642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006646:	4621      	mov	r1, r4
 8006648:	024a      	lsls	r2, r1, #9
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800665c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006660:	f7f9 fe20 	bl	80002a4 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800666e:	e067      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006670:	4b75      	ldr	r3, [pc, #468]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	099b      	lsrs	r3, r3, #6
 8006676:	2200      	movs	r2, #0
 8006678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800667c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800668a:	2300      	movs	r3, #0
 800668c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800668e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006692:	4622      	mov	r2, r4
 8006694:	462b      	mov	r3, r5
 8006696:	f04f 0000 	mov.w	r0, #0
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	0159      	lsls	r1, r3, #5
 80066a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a4:	0150      	lsls	r0, r2, #5
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4621      	mov	r1, r4
 80066ac:	1a51      	subs	r1, r2, r1
 80066ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066b0:	4629      	mov	r1, r5
 80066b2:	eb63 0301 	sbc.w	r3, r3, r1
 80066b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80066c4:	4649      	mov	r1, r9
 80066c6:	018b      	lsls	r3, r1, #6
 80066c8:	4641      	mov	r1, r8
 80066ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ce:	4641      	mov	r1, r8
 80066d0:	018a      	lsls	r2, r1, #6
 80066d2:	4641      	mov	r1, r8
 80066d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80066d8:	4649      	mov	r1, r9
 80066da:	eb63 0b01 	sbc.w	fp, r3, r1
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f2:	4692      	mov	sl, r2
 80066f4:	469b      	mov	fp, r3
 80066f6:	4623      	mov	r3, r4
 80066f8:	eb1a 0303 	adds.w	r3, sl, r3
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	462b      	mov	r3, r5
 8006700:	eb4b 0303 	adc.w	r3, fp, r3
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006712:	4629      	mov	r1, r5
 8006714:	028b      	lsls	r3, r1, #10
 8006716:	4621      	mov	r1, r4
 8006718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800671c:	4621      	mov	r1, r4
 800671e:	028a      	lsls	r2, r1, #10
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006728:	2200      	movs	r2, #0
 800672a:	673b      	str	r3, [r7, #112]	@ 0x70
 800672c:	677a      	str	r2, [r7, #116]	@ 0x74
 800672e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006732:	f7f9 fdb7 	bl	80002a4 <__aeabi_uldivmod>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4613      	mov	r3, r2
 800673c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006740:	4b41      	ldr	r3, [pc, #260]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	3301      	adds	r3, #1
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006762:	e0eb      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006764:	4b38      	ldr	r3, [pc, #224]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006770:	4b35      	ldr	r3, [pc, #212]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d06b      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677c:	4b32      	ldr	r3, [pc, #200]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x354>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	099b      	lsrs	r3, r3, #6
 8006782:	2200      	movs	r2, #0
 8006784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006790:	2300      	movs	r3, #0
 8006792:	667b      	str	r3, [r7, #100]	@ 0x64
 8006794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006798:	4622      	mov	r2, r4
 800679a:	462b      	mov	r3, r5
 800679c:	f04f 0000 	mov.w	r0, #0
 80067a0:	f04f 0100 	mov.w	r1, #0
 80067a4:	0159      	lsls	r1, r3, #5
 80067a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067aa:	0150      	lsls	r0, r2, #5
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4621      	mov	r1, r4
 80067b2:	1a51      	subs	r1, r2, r1
 80067b4:	61b9      	str	r1, [r7, #24]
 80067b6:	4629      	mov	r1, r5
 80067b8:	eb63 0301 	sbc.w	r3, r3, r1
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80067ca:	4659      	mov	r1, fp
 80067cc:	018b      	lsls	r3, r1, #6
 80067ce:	4651      	mov	r1, sl
 80067d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067d4:	4651      	mov	r1, sl
 80067d6:	018a      	lsls	r2, r1, #6
 80067d8:	4651      	mov	r1, sl
 80067da:	ebb2 0801 	subs.w	r8, r2, r1
 80067de:	4659      	mov	r1, fp
 80067e0:	eb63 0901 	sbc.w	r9, r3, r1
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067f8:	4690      	mov	r8, r2
 80067fa:	4699      	mov	r9, r3
 80067fc:	4623      	mov	r3, r4
 80067fe:	eb18 0303 	adds.w	r3, r8, r3
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	462b      	mov	r3, r5
 8006806:	eb49 0303 	adc.w	r3, r9, r3
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006818:	4629      	mov	r1, r5
 800681a:	024b      	lsls	r3, r1, #9
 800681c:	4621      	mov	r1, r4
 800681e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006822:	4621      	mov	r1, r4
 8006824:	024a      	lsls	r2, r1, #9
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800682e:	2200      	movs	r2, #0
 8006830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006832:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006838:	f7f9 fd34 	bl	80002a4 <__aeabi_uldivmod>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4613      	mov	r3, r2
 8006842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006846:	e065      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0x420>
 8006848:	40023800 	.word	0x40023800
 800684c:	00f42400 	.word	0x00f42400
 8006850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006854:	4b3d      	ldr	r3, [pc, #244]	@ (800694c <HAL_RCC_GetSysClockFreq+0x458>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	099b      	lsrs	r3, r3, #6
 800685a:	2200      	movs	r2, #0
 800685c:	4618      	mov	r0, r3
 800685e:	4611      	mov	r1, r2
 8006860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006864:	653b      	str	r3, [r7, #80]	@ 0x50
 8006866:	2300      	movs	r3, #0
 8006868:	657b      	str	r3, [r7, #84]	@ 0x54
 800686a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f04f 0100 	mov.w	r1, #0
 800687a:	0159      	lsls	r1, r3, #5
 800687c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006880:	0150      	lsls	r0, r2, #5
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4641      	mov	r1, r8
 8006888:	1a51      	subs	r1, r2, r1
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4649      	mov	r1, r9
 800688e:	eb63 0301 	sbc.w	r3, r3, r1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80068a0:	4659      	mov	r1, fp
 80068a2:	018b      	lsls	r3, r1, #6
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068aa:	4651      	mov	r1, sl
 80068ac:	018a      	lsls	r2, r1, #6
 80068ae:	4651      	mov	r1, sl
 80068b0:	1a54      	subs	r4, r2, r1
 80068b2:	4659      	mov	r1, fp
 80068b4:	eb63 0501 	sbc.w	r5, r3, r1
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	00eb      	lsls	r3, r5, #3
 80068c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068c6:	00e2      	lsls	r2, r4, #3
 80068c8:	4614      	mov	r4, r2
 80068ca:	461d      	mov	r5, r3
 80068cc:	4643      	mov	r3, r8
 80068ce:	18e3      	adds	r3, r4, r3
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	464b      	mov	r3, r9
 80068d4:	eb45 0303 	adc.w	r3, r5, r3
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068e6:	4629      	mov	r1, r5
 80068e8:	028b      	lsls	r3, r1, #10
 80068ea:	4621      	mov	r1, r4
 80068ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f0:	4621      	mov	r1, r4
 80068f2:	028a      	lsls	r2, r1, #10
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068fc:	2200      	movs	r2, #0
 80068fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006900:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006906:	f7f9 fccd 	bl	80002a4 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4613      	mov	r3, r2
 8006910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006914:	4b0d      	ldr	r3, [pc, #52]	@ (800694c <HAL_RCC_GetSysClockFreq+0x458>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	0f1b      	lsrs	r3, r3, #28
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006932:	e003      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006934:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800693a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800693c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006940:	4618      	mov	r0, r3
 8006942:	37b8      	adds	r7, #184	@ 0xb8
 8006944:	46bd      	mov	sp, r7
 8006946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694a:	bf00      	nop
 800694c:	40023800 	.word	0x40023800
 8006950:	00f42400 	.word	0x00f42400

08006954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e28d      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8083 	beq.w	8006a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006974:	4b94      	ldr	r3, [pc, #592]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b04      	cmp	r3, #4
 800697e:	d019      	beq.n	80069b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006980:	4b91      	ldr	r3, [pc, #580]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
        || \
 8006988:	2b08      	cmp	r3, #8
 800698a:	d106      	bne.n	800699a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800698c:	4b8e      	ldr	r3, [pc, #568]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006998:	d00c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800699a:	4b8b      	ldr	r3, [pc, #556]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d112      	bne.n	80069cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a6:	4b88      	ldr	r3, [pc, #544]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b2:	d10b      	bne.n	80069cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b4:	4b84      	ldr	r3, [pc, #528]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05b      	beq.n	8006a78 <HAL_RCC_OscConfig+0x124>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d157      	bne.n	8006a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e25a      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d4:	d106      	bne.n	80069e4 <HAL_RCC_OscConfig+0x90>
 80069d6:	4b7c      	ldr	r3, [pc, #496]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a7b      	ldr	r2, [pc, #492]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e01d      	b.n	8006a20 <HAL_RCC_OscConfig+0xcc>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0xb4>
 80069ee:	4b76      	ldr	r3, [pc, #472]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a75      	ldr	r2, [pc, #468]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b73      	ldr	r3, [pc, #460]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a72      	ldr	r2, [pc, #456]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0xcc>
 8006a08:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b6c      	ldr	r3, [pc, #432]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6b      	ldr	r2, [pc, #428]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d013      	beq.n	8006a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7ff f976 	bl	8005d18 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a30:	f7ff f972 	bl	8005d18 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	@ 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e21f      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0xdc>
 8006a4e:	e014      	b.n	8006a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7ff f962 	bl	8005d18 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a58:	f7ff f95e 	bl	8005d18 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	@ 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e20b      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	4b57      	ldr	r3, [pc, #348]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x104>
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d06f      	beq.n	8006b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a86:	4b50      	ldr	r3, [pc, #320]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d017      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006a92:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
        || \
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d105      	bne.n	8006aaa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aaa:	4b47      	ldr	r3, [pc, #284]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006ab2:	2b0c      	cmp	r3, #12
 8006ab4:	d11c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab6:	4b44      	ldr	r3, [pc, #272]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d116      	bne.n	8006af0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ac2:	4b41      	ldr	r3, [pc, #260]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_RCC_OscConfig+0x186>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e1d3      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ada:	4b3b      	ldr	r3, [pc, #236]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4937      	ldr	r1, [pc, #220]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aee:	e03a      	b.n	8006b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d020      	beq.n	8006b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af8:	4b34      	ldr	r3, [pc, #208]	@ (8006bcc <HAL_RCC_OscConfig+0x278>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7ff f90b 	bl	8005d18 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7ff f907 	bl	8005d18 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e1b4      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b18:	4b2b      	ldr	r3, [pc, #172]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b28      	ldr	r3, [pc, #160]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4925      	ldr	r1, [pc, #148]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
 8006b38:	e015      	b.n	8006b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3a:	4b24      	ldr	r3, [pc, #144]	@ (8006bcc <HAL_RCC_OscConfig+0x278>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7ff f8ea 	bl	8005d18 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b48:	f7ff f8e6 	bl	8005d18 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e193      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d036      	beq.n	8006be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d016      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b7a:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <HAL_RCC_OscConfig+0x27c>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7ff f8ca 	bl	8005d18 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b88:	f7ff f8c6 	bl	8005d18 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e173      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0x234>
 8006ba6:	e01b      	b.n	8006be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba8:	4b09      	ldr	r3, [pc, #36]	@ (8006bd0 <HAL_RCC_OscConfig+0x27c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bae:	f7ff f8b3 	bl	8005d18 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb4:	e00e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb6:	f7ff f8af 	bl	8005d18 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d907      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e15c      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	42470000 	.word	0x42470000
 8006bd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1ea      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8097 	beq.w	8006d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf2:	4b83      	ldr	r3, [pc, #524]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	4b7f      	ldr	r3, [pc, #508]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	4a7e      	ldr	r2, [pc, #504]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1e:	4b79      	ldr	r3, [pc, #484]	@ (8006e04 <HAL_RCC_OscConfig+0x4b0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d118      	bne.n	8006c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2a:	4b76      	ldr	r3, [pc, #472]	@ (8006e04 <HAL_RCC_OscConfig+0x4b0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a75      	ldr	r2, [pc, #468]	@ (8006e04 <HAL_RCC_OscConfig+0x4b0>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c36:	f7ff f86f 	bl	8005d18 <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7ff f86b 	bl	8005d18 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e118      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c50:	4b6c      	ldr	r3, [pc, #432]	@ (8006e04 <HAL_RCC_OscConfig+0x4b0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d106      	bne.n	8006c72 <HAL_RCC_OscConfig+0x31e>
 8006c64:	4b66      	ldr	r3, [pc, #408]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c68:	4a65      	ldr	r2, [pc, #404]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c70:	e01c      	b.n	8006cac <HAL_RCC_OscConfig+0x358>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b05      	cmp	r3, #5
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x340>
 8006c7a:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c7e:	4a60      	ldr	r2, [pc, #384]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c80:	f043 0304 	orr.w	r3, r3, #4
 8006c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c86:	4b5e      	ldr	r3, [pc, #376]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c92:	e00b      	b.n	8006cac <HAL_RCC_OscConfig+0x358>
 8006c94:	4b5a      	ldr	r3, [pc, #360]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c98:	4a59      	ldr	r2, [pc, #356]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca0:	4b57      	ldr	r3, [pc, #348]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca4:	4a56      	ldr	r2, [pc, #344]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006ca6:	f023 0304 	bic.w	r3, r3, #4
 8006caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d015      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7ff f830 	bl	8005d18 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbc:	f7ff f82c 	bl	8005d18 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0d7      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ee      	beq.n	8006cbc <HAL_RCC_OscConfig+0x368>
 8006cde:	e014      	b.n	8006d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce0:	f7ff f81a 	bl	8005d18 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce8:	f7ff f816 	bl	8005d18 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e0c1      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfe:	4b40      	ldr	r3, [pc, #256]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1ee      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d10:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	4a3a      	ldr	r2, [pc, #232]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80ad 	beq.w	8006e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d26:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d060      	beq.n	8006df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d145      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3a:	4b33      	ldr	r3, [pc, #204]	@ (8006e08 <HAL_RCC_OscConfig+0x4b4>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fe ffea 	bl	8005d18 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d48:	f7fe ffe6 	bl	8005d18 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e093      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5a:	4b29      	ldr	r3, [pc, #164]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	061b      	lsls	r3, r3, #24
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d90:	071b      	lsls	r3, r3, #28
 8006d92:	491b      	ldr	r1, [pc, #108]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d98:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <HAL_RCC_OscConfig+0x4b4>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9e:	f7fe ffbb 	bl	8005d18 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da6:	f7fe ffb7 	bl	8005d18 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e064      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db8:	4b11      	ldr	r3, [pc, #68]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0x452>
 8006dc4:	e05c      	b.n	8006e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc6:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <HAL_RCC_OscConfig+0x4b4>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fe ffa4 	bl	8005d18 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd4:	f7fe ffa0 	bl	8005d18 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e04d      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <HAL_RCC_OscConfig+0x4ac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x480>
 8006df2:	e045      	b.n	8006e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e040      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40007000 	.word	0x40007000
 8006e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006e8c <HAL_RCC_OscConfig+0x538>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d030      	beq.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d129      	bne.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d122      	bne.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d119      	bne.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	3b01      	subs	r3, #1
 8006e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d10f      	bne.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40023800 	.word	0x40023800

08006e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e041      	b.n	8006f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f839 	bl	8006f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 f9c0 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e04e      	b.n	8006ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a23      	ldr	r2, [pc, #140]	@ (8007008 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d022      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f86:	d01d      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800700c <HAL_TIM_Base_Start_IT+0xc8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d018      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1e      	ldr	r2, [pc, #120]	@ (8007010 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d013      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8007014 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d009      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a19      	ldr	r2, [pc, #100]	@ (800701c <HAL_TIM_Base_Start_IT+0xd8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x80>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a18      	ldr	r2, [pc, #96]	@ (8007020 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d111      	bne.n	8006fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b06      	cmp	r3, #6
 8006fd4:	d010      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	e007      	b.n	8006ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40010400 	.word	0x40010400
 800701c:	40014000 	.word	0x40014000
 8007020:	40001800 	.word	0x40001800

08007024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d020      	beq.n	8007088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01b      	beq.n	8007088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0202 	mvn.w	r2, #2
 8007058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8d2 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8007074:	e005      	b.n	8007082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8c4 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f8d5 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d020      	beq.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01b      	beq.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0204 	mvn.w	r2, #4
 80070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8ac 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 80070c0:	e005      	b.n	80070ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f89e 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8af 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d020      	beq.n	8007120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01b      	beq.n	8007120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0208 	mvn.w	r2, #8
 80070f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2204      	movs	r2, #4
 80070f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f886 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 800710c:	e005      	b.n	800711a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f878 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f889 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b00      	cmp	r3, #0
 8007128:	d020      	beq.n	800716c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01b      	beq.n	800716c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0210 	mvn.w	r2, #16
 800713c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2208      	movs	r2, #8
 8007142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f860 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8007158:	e005      	b.n	8007166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f852 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f863 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0201 	mvn.w	r2, #1
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fe fc70 	bl	8005a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f906 	bl	80073c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f834 	bl	8007240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0220 	mvn.w	r2, #32
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8d8 	bl	80073ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a46      	ldr	r2, [pc, #280]	@ (8007380 <TIM_Base_SetConfig+0x12c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007272:	d00f      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a43      	ldr	r2, [pc, #268]	@ (8007384 <TIM_Base_SetConfig+0x130>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a42      	ldr	r2, [pc, #264]	@ (8007388 <TIM_Base_SetConfig+0x134>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a41      	ldr	r2, [pc, #260]	@ (800738c <TIM_Base_SetConfig+0x138>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a40      	ldr	r2, [pc, #256]	@ (8007390 <TIM_Base_SetConfig+0x13c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a35      	ldr	r2, [pc, #212]	@ (8007380 <TIM_Base_SetConfig+0x12c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d02b      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b4:	d027      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a32      	ldr	r2, [pc, #200]	@ (8007384 <TIM_Base_SetConfig+0x130>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d023      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a31      	ldr	r2, [pc, #196]	@ (8007388 <TIM_Base_SetConfig+0x134>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01f      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a30      	ldr	r2, [pc, #192]	@ (800738c <TIM_Base_SetConfig+0x138>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01b      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007390 <TIM_Base_SetConfig+0x13c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d017      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007394 <TIM_Base_SetConfig+0x140>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007398 <TIM_Base_SetConfig+0x144>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00f      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	@ (800739c <TIM_Base_SetConfig+0x148>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00b      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a2b      	ldr	r2, [pc, #172]	@ (80073a0 <TIM_Base_SetConfig+0x14c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d007      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2a      	ldr	r2, [pc, #168]	@ (80073a4 <TIM_Base_SetConfig+0x150>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a29      	ldr	r2, [pc, #164]	@ (80073a8 <TIM_Base_SetConfig+0x154>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d108      	bne.n	8007318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800730c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <TIM_Base_SetConfig+0x12c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a12      	ldr	r2, [pc, #72]	@ (8007390 <TIM_Base_SetConfig+0x13c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d103      	bne.n	8007354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b01      	cmp	r3, #1
 8007364:	d105      	bne.n	8007372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	611a      	str	r2, [r3, #16]
  }
}
 8007372:	bf00      	nop
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40010000 	.word	0x40010000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40010400 	.word	0x40010400
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800
 80073a0:	40001800 	.word	0x40001800
 80073a4:	40001c00 	.word	0x40001c00
 80073a8:	40002000 	.word	0x40002000

080073ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <memcmp>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	3901      	subs	r1, #1
 80073d8:	4402      	add	r2, r0
 80073da:	4290      	cmp	r0, r2
 80073dc:	d101      	bne.n	80073e2 <memcmp+0xe>
 80073de:	2000      	movs	r0, #0
 80073e0:	e005      	b.n	80073ee <memcmp+0x1a>
 80073e2:	7803      	ldrb	r3, [r0, #0]
 80073e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d001      	beq.n	80073f0 <memcmp+0x1c>
 80073ec:	1b18      	subs	r0, r3, r4
 80073ee:	bd10      	pop	{r4, pc}
 80073f0:	3001      	adds	r0, #1
 80073f2:	e7f2      	b.n	80073da <memcmp+0x6>

080073f4 <memset>:
 80073f4:	4402      	add	r2, r0
 80073f6:	4603      	mov	r3, r0
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d100      	bne.n	80073fe <memset+0xa>
 80073fc:	4770      	bx	lr
 80073fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007402:	e7f9      	b.n	80073f8 <memset+0x4>

08007404 <__libc_init_array>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4d0d      	ldr	r5, [pc, #52]	@ (800743c <__libc_init_array+0x38>)
 8007408:	4c0d      	ldr	r4, [pc, #52]	@ (8007440 <__libc_init_array+0x3c>)
 800740a:	1b64      	subs	r4, r4, r5
 800740c:	10a4      	asrs	r4, r4, #2
 800740e:	2600      	movs	r6, #0
 8007410:	42a6      	cmp	r6, r4
 8007412:	d109      	bne.n	8007428 <__libc_init_array+0x24>
 8007414:	4d0b      	ldr	r5, [pc, #44]	@ (8007444 <__libc_init_array+0x40>)
 8007416:	4c0c      	ldr	r4, [pc, #48]	@ (8007448 <__libc_init_array+0x44>)
 8007418:	f000 f826 	bl	8007468 <_init>
 800741c:	1b64      	subs	r4, r4, r5
 800741e:	10a4      	asrs	r4, r4, #2
 8007420:	2600      	movs	r6, #0
 8007422:	42a6      	cmp	r6, r4
 8007424:	d105      	bne.n	8007432 <__libc_init_array+0x2e>
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	f855 3b04 	ldr.w	r3, [r5], #4
 800742c:	4798      	blx	r3
 800742e:	3601      	adds	r6, #1
 8007430:	e7ee      	b.n	8007410 <__libc_init_array+0xc>
 8007432:	f855 3b04 	ldr.w	r3, [r5], #4
 8007436:	4798      	blx	r3
 8007438:	3601      	adds	r6, #1
 800743a:	e7f2      	b.n	8007422 <__libc_init_array+0x1e>
 800743c:	08007614 	.word	0x08007614
 8007440:	08007614 	.word	0x08007614
 8007444:	08007614 	.word	0x08007614
 8007448:	08007618 	.word	0x08007618

0800744c <memcpy>:
 800744c:	440a      	add	r2, r1
 800744e:	4291      	cmp	r1, r2
 8007450:	f100 33ff 	add.w	r3, r0, #4294967295
 8007454:	d100      	bne.n	8007458 <memcpy+0xc>
 8007456:	4770      	bx	lr
 8007458:	b510      	push	{r4, lr}
 800745a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800745e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007462:	4291      	cmp	r1, r2
 8007464:	d1f9      	bne.n	800745a <memcpy+0xe>
 8007466:	bd10      	pop	{r4, pc}

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
