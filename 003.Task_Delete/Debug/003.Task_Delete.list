
003.Task_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007c44  08007c44  00008c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ddc  08007ddc  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ddc  08007ddc  00008ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de4  08007de4  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007de8  08007de8  00008de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007dec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  2000001c  08007e08  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144c0  08007e08  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bb6  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  0001ec02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fef  00000000  00000000  000233e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002211e  00000000  00000000  000243d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018780  00000000  00000000  000464f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef393  00000000  00000000  0005ec75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  0014e04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f1  00000000  00000000  0015367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c2c 	.word	0x08007c2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007c2c 	.word	0x08007c2c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e80 	.word	0x20012e80

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 0208 	add.w	r2, r3, #8
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80005c8:	f240 1019 	movw	r0, #281	@ 0x119
 80005cc:	f004 feac 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80005e6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80005ea:	f004 fe9d 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8000632:	f240 101b 	movw	r0, #283	@ 0x11b
 8000636:	f004 fe77 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d103      	bne.n	8000662 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00c      	b.n	800067c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3308      	adds	r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e002      	b.n	8000670 <vListInsert+0x2e>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	429a      	cmp	r2, r3
 800067a:	d2f6      	bcs.n	800066a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80006a8:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80006ac:	f004 fe3c 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6892      	ldr	r2, [r2, #8]
 80006ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d103      	bne.n	80006ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f240 101d 	movw	r0, #285	@ 0x11d
 8000706:	f004 fe4b 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10b      	bne.n	8000748 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d05d      	beq.n	800080a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000752:	2b00      	cmp	r3, #0
 8000754:	d059      	beq.n	800080a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800075e:	2100      	movs	r1, #0
 8000760:	fba3 2302 	umull	r2, r3, r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	d000      	beq.n	800076a <xQueueGenericReset+0x52>
 8000768:	2101      	movs	r1, #1
 800076a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800076c:	2b00      	cmp	r3, #0
 800076e:	d14c      	bne.n	800080a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000770:	f002 fae8 	bl	8002d44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077c:	6939      	ldr	r1, [r7, #16]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	2200      	movs	r2, #0
 800078e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007a0:	3b01      	subs	r3, #1
 80007a2:	6939      	ldr	r1, [r7, #16]
 80007a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80007a6:	fb01 f303 	mul.w	r3, r1, r3
 80007aa:	441a      	add	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	22ff      	movs	r2, #255	@ 0xff
 80007b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	22ff      	movs	r2, #255	@ 0xff
 80007bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d114      	bne.n	80007f0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01a      	beq.n	8000804 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3310      	adds	r3, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fa00 	bl	8001bd8 <xTaskRemoveFromEventList>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d012      	beq.n	8000804 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <xQueueGenericReset+0x128>)
 80007e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	e009      	b.n	8000804 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	3310      	adds	r3, #16
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fecd 	bl	8000594 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3324      	adds	r3, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fec8 	bl	8000594 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000804:	f002 fad0 	bl	8002da8 <vPortExitCritical>
 8000808:	e001      	b.n	800080e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10b      	bne.n	800082c <xQueueGenericReset+0x114>
    __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	60bb      	str	r3, [r7, #8]
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4619      	mov	r1, r3
 8000830:	2096      	movs	r0, #150	@ 0x96
 8000832:	f004 fdb5 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8000836:	697b      	ldr	r3, [r7, #20]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	e000ed04 	.word	0xe000ed04

08000844 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d02e      	beq.n	80008ba <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800085c:	2100      	movs	r1, #0
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	fba3 2302 	umull	r2, r3, r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <xQueueGenericCreate+0x28>
 800086a:	2101      	movs	r1, #1
 800086c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800086e:	2b00      	cmp	r3, #0
 8000870:	d123      	bne.n	80008ba <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800087a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800087e:	d81c      	bhi.n	80008ba <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3350      	adds	r3, #80	@ 0x50
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fb86 	bl	8002fa0 <pvPortMalloc>
 8000894:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d01d      	beq.n	80008d8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3350      	adds	r3, #80	@ 0x50
 80008a4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f81e 	bl	80008f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80008b8:	e00e      	b.n	80008d8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10b      	bne.n	80008d8 <xQueueGenericCreate+0x94>
    __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	613b      	str	r3, [r7, #16]
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fefa 	bl	80056d4 <SEGGER_SYSVIEW_ShrinkId>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4619      	mov	r1, r3
 80008e4:	2098      	movs	r0, #152	@ 0x98
 80008e6:	f004 fd5b 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80008ea:	69fb      	ldr	r3, [r7, #28]
    }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000922:	2101      	movs	r1, #1
 8000924:	69b8      	ldr	r0, [r7, #24]
 8000926:	f7ff fef7 	bl	8000718 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10b      	bne.n	800096e <xQueueReceive+0x32>
    __asm volatile
 8000956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800095a:	f383 8811 	msr	BASEPRI, r3
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	623b      	str	r3, [r7, #32]
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d103      	bne.n	800097c <xQueueReceive+0x40>
 8000974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <xQueueReceive+0x44>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <xQueueReceive+0x46>
 8000980:	2300      	movs	r3, #0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10b      	bne.n	800099e <xQueueReceive+0x62>
    __asm volatile
 8000986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	61fb      	str	r3, [r7, #28]
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800099e:	f001 fb3d 	bl	800201c <xTaskGetSchedulerState>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <xQueueReceive+0x72>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <xQueueReceive+0x76>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <xQueueReceive+0x78>
 80009b2:	2300      	movs	r3, #0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10b      	bne.n	80009d0 <xQueueReceive+0x94>
    __asm volatile
 80009b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	61bb      	str	r3, [r7, #24]
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009d0:	f002 f9b8 	bl	8002d44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d023      	beq.n	8000a28 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009e4:	f000 f898 	bl	8000b18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00f      	beq.n	8000a18 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fa:	3310      	adds	r3, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f8eb 	bl	8001bd8 <xTaskRemoveFromEventList>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a08:	4b42      	ldr	r3, [pc, #264]	@ (8000b14 <xQueueReceive+0x1d8>)
 8000a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a18:	f002 f9c6 	bl	8002da8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	20a4      	movs	r0, #164	@ 0xa4
 8000a20:	f004 fcbe 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e071      	b.n	8000b0c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d107      	bne.n	8000a3e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a2e:	f002 f9bb 	bl	8002da8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8000a32:	2100      	movs	r1, #0
 8000a34:	20a4      	movs	r0, #164	@ 0xa4
 8000a36:	f004 fcb3 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e066      	b.n	8000b0c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d106      	bne.n	8000a52 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f9a5 	bl	8001d98 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a52:	f002 f9a9 	bl	8002da8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a56:	f000 fd77 	bl	8001548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a5a:	f002 f973 	bl	8002d44 <vPortEnterCritical>
 8000a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6a:	d103      	bne.n	8000a74 <xQueueReceive+0x138>
 8000a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d103      	bne.n	8000a8a <xQueueReceive+0x14e>
 8000a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a8a:	f002 f98d 	bl	8002da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a8e:	1d3a      	adds	r2, r7, #4
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f996 	bl	8001dc8 <xTaskCheckForTimeOut>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d123      	bne.n	8000aea <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aa4:	f000 f8b0 	bl	8000c08 <prvIsQueueEmpty>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d017      	beq.n	8000ade <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab0:	3324      	adds	r3, #36	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f81c 	bl	8001af4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000abc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000abe:	f000 f851 	bl	8000b64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ac2:	f000 fd4f 	bl	8001564 <xTaskResumeAll>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d181      	bne.n	80009d0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <xQueueReceive+0x1d8>)
 8000ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	f3bf 8f6f 	isb	sy
 8000adc:	e778      	b.n	80009d0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ae0:	f000 f840 	bl	8000b64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ae4:	f000 fd3e 	bl	8001564 <xTaskResumeAll>
 8000ae8:	e772      	b.n	80009d0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aec:	f000 f83a 	bl	8000b64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000af0:	f000 fd38 	bl	8001564 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000af6:	f000 f887 	bl	8000c08 <prvIsQueueEmpty>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f43f af67 	beq.w	80009d0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8000b02:	2100      	movs	r1, #0
 8000b04:	20a4      	movs	r0, #164	@ 0xa4
 8000b06:	f004 fc4b 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8000b0a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3730      	adds	r7, #48	@ 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e000ed04 	.word	0xe000ed04

08000b18 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d018      	beq.n	8000b5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	441a      	add	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d303      	bcc.n	8000b4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68d9      	ldr	r1, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	461a      	mov	r2, r3
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f007 f85a 	bl	8007c10 <memcpy>
    }
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b6c:	f002 f8ea 	bl	8002d44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b78:	e011      	b.n	8000b9e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d012      	beq.n	8000ba8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3324      	adds	r3, #36	@ 0x24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f826 	bl	8001bd8 <xTaskRemoveFromEventList>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b92:	f001 f985 	bl	8001ea0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dce9      	bgt.n	8000b7a <prvUnlockQueue+0x16>
 8000ba6:	e000      	b.n	8000baa <prvUnlockQueue+0x46>
                    break;
 8000ba8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	22ff      	movs	r2, #255	@ 0xff
 8000bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000bb2:	f002 f8f9 	bl	8002da8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bb6:	f002 f8c5 	bl	8002d44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000bc0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bc2:	e011      	b.n	8000be8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3310      	adds	r3, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f801 	bl	8001bd8 <xTaskRemoveFromEventList>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bdc:	f001 f960 	bl	8001ea0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dce9      	bgt.n	8000bc4 <prvUnlockQueue+0x60>
 8000bf0:	e000      	b.n	8000bf4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bf2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	22ff      	movs	r2, #255	@ 0xff
 8000bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000bfc:	f002 f8d4 	bl	8002da8 <vPortExitCritical>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c10:	f002 f898 	bl	8002d44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e001      	b.n	8000c26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c26:	f002 f8bf 	bl	8002da8 <vPortExitCritical>

    return xReturn;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10b      	bne.n	8000c60 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	60fb      	str	r3, [r7, #12]
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d024      	beq.n	8000cb0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e01e      	b.n	8000caa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c6c:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d105      	bne.n	8000c88 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c82:	4413      	add	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
                    break;
 8000c86:	e013      	b.n	8000cb0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <vQueueAddToRegistry+0x70>
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d104      	bne.n	8000ca4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d9dd      	bls.n	8000c6c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8000cc2:	20b6      	movs	r0, #182	@ 0xb6
 8000cc4:	f004 fb30 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000038 	.word	0x20000038

08000cd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ce4:	f002 f82e 	bl	8002d44 <vPortEnterCritical>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d103      	bne.n	8000cfe <vQueueWaitForMessageRestricted+0x2a>
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d103      	bne.n	8000d14 <vQueueWaitForMessageRestricted+0x40>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d14:	f002 f848 	bl	8002da8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d106      	bne.n	8000d2e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3324      	adds	r3, #36	@ 0x24
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 ff0b 	bl	8001b44 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff18 	bl	8000b64 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8000d34:	20b9      	movs	r0, #185	@ 0xb9
 8000d36:	f004 faf7 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b08a      	sub	sp, #40	@ 0x28
 8000d46:	af04      	add	r7, sp, #16
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f923 	bl	8002fa0 <pvPortMalloc>
 8000d5a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000d62:	2058      	movs	r0, #88	@ 0x58
 8000d64:	f002 f91c 	bl	8002fa0 <pvPortMalloc>
 8000d68:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d70:	2258      	movs	r2, #88	@ 0x58
 8000d72:	2100      	movs	r1, #0
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f006 ff1f 	bl	8007bb8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d80:	e005      	b.n	8000d8e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d82:	6938      	ldr	r0, [r7, #16]
 8000d84:	f002 fa3e 	bl	8003204 <vPortFree>
 8000d88:	e001      	b.n	8000d8e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00d      	beq.n	8000db0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d94:	2300      	movs	r3, #0
 8000d96:	9303      	str	r3, [sp, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f82d 	bl	8000e0a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000db0:	697b      	ldr	r3, [r7, #20]
    }
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b088      	sub	sp, #32
 8000dbe:	af02      	add	r7, sp, #8
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff ffb3 	bl	8000d42 <prvCreateTask>
 8000ddc:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000de4:	6938      	ldr	r0, [r7, #16]
 8000de6:	f000 f8a1 	bl	8000f2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e002      	b.n	8000df6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	20c2      	movs	r0, #194	@ 0xc2
 8000dfc:	f004 fad0 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8000e00:	697b      	ldr	r3, [r7, #20]
    }
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b088      	sub	sp, #32
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	461a      	mov	r2, r3
 8000e22:	21a5      	movs	r1, #165	@ 0xa5
 8000e24:	f006 fec8 	bl	8007bb8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e32:	3b01      	subs	r3, #1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f023 0307 	bic.w	r3, r3, #7
 8000e40:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	617b      	str	r3, [r7, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01e      	beq.n	8000ea8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e012      	b.n	8000e96 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	4413      	add	r3, r2
 8000e76:	7819      	ldrb	r1, [r3, #0]
 8000e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3334      	adds	r3, #52	@ 0x34
 8000e80:	460a      	mov	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	d9e9      	bls.n	8000e70 <prvInitialiseNewTask+0x66>
 8000e9c:	e000      	b.n	8000ea0 <prvInitialiseNewTask+0x96>
            {
                break;
 8000e9e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d90b      	bls.n	8000ec6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	613b      	str	r3, [r7, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d901      	bls.n	8000ed0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eda:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ede:	3304      	adds	r3, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb79 	bl	80005d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee8:	3318      	adds	r3, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb74 	bl	80005d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ef4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef8:	f1c3 0205 	rsb	r2, r3, #5
 8000efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000efe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	69b8      	ldr	r0, [r7, #24]
 8000f0c:	f001 fd9a 	bl	8002a44 <pxPortInitialiseStack>
 8000f10:	4602      	mov	r2, r0
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000f34:	f001 ff06 	bl	8002d44 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000f38:	4b50      	ldr	r3, [pc, #320]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f40:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000f42:	4b4f      	ldr	r3, [pc, #316]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d110      	bne.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000f58:	f000 ffc6 	bl	8001ee8 <prvInitialiseTaskLists>
 8000f5c:	e00d      	b.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <prvAddNewTaskToReadyList+0x158>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f66:	4b46      	ldr	r3, [pc, #280]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d802      	bhi.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000f74:	4a42      	ldr	r2, [pc, #264]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000f7a:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a41      	ldr	r2, [pc, #260]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f82:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d016      	beq.n	8000fc0 <prvAddNewTaskToReadyList+0x94>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fa77 	bl	8005488 <SEGGER_SYSVIEW_OnTaskCreate>
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	461d      	mov	r5, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	1ae3      	subs	r3, r4, r3
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	462b      	mov	r3, r5
 8000fbc:	f002 fb20 	bl	8003600 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fae4 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <prvAddNewTaskToReadyList+0x160>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <prvAddNewTaskToReadyList+0x160>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fde:	492c      	ldr	r1, [pc, #176]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3204      	adds	r2, #4
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1d1a      	adds	r2, r3, #4
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800101e:	441a      	add	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001028:	4919      	ldr	r1, [pc, #100]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800103a:	1c59      	adds	r1, r3, #1
 800103c:	4814      	ldr	r0, [pc, #80]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4403      	add	r3, r0
 8001048:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800104a:	f001 fead 	bl	8002da8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <prvAddNewTaskToReadyList+0x158>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <prvAddNewTaskToReadyList+0x148>
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <prvAddNewTaskToReadyList+0x168>)
 8001066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	20000150 	.word	0x20000150
 8001080:	20000078 	.word	0x20000078
 8001084:	2000015c 	.word	0x2000015c
 8001088:	2000016c 	.word	0x2000016c
 800108c:	20000158 	.word	0x20000158
 8001090:	2000007c 	.word	0x2000007c
 8001094:	e000ed04 	.word	0xe000ed04

08001098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d018      	beq.n	80010dc <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80010aa:	f000 fa4d 	bl	8001548 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <vTaskDelay+0x68>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d00b      	beq.n	80010ce <vTaskDelay+0x36>
    __asm volatile
 80010b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	60bb      	str	r3, [r7, #8]
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	e7fd      	b.n	80010ca <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 f991 	bl	80023f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80010d6:	f000 fa45 	bl	8001564 <xTaskResumeAll>
 80010da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <vTaskDelay+0x6c>)
 80010e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	f3bf 8f4f 	dsb	sy
 80010ee:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80010f2:	20c5      	movs	r0, #197	@ 0xc5
 80010f4:	f004 f918 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000178 	.word	0x20000178
 8001104:	e000ed04 	.word	0xe000ed04

08001108 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 8001110:	f001 fe18 	bl	8002d44 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <vTaskSuspend+0x18>
 800111a:	4b46      	ldr	r3, [pc, #280]	@ (8001234 <vTaskSuspend+0x12c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	e000      	b.n	8001122 <vTaskSuspend+0x1a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	3304      	adds	r3, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fac5 	bl	80006b8 <uxListRemove>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d115      	bne.n	8001160 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001138:	493f      	ldr	r1, [pc, #252]	@ (8001238 <vTaskSuspend+0x130>)
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <vTaskSuspend+0x58>
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	2201      	movs	r2, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43da      	mvns	r2, r3
 8001156:	4b39      	ldr	r3, [pc, #228]	@ (800123c <vTaskSuspend+0x134>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4013      	ands	r3, r2
 800115c:	4a37      	ldr	r2, [pc, #220]	@ (800123c <vTaskSuspend+0x134>)
 800115e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3318      	adds	r3, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff faa3 	bl	80006b8 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3304      	adds	r3, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4831      	ldr	r0, [pc, #196]	@ (8001240 <vTaskSuspend+0x138>)
 800117a:	f7ff fa3c 	bl	80005f6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e010      	b.n	80011a6 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	4413      	add	r3, r2
 800118a:	3354      	adds	r3, #84	@ 0x54
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4413      	add	r3, r2
 800119a:	3354      	adds	r3, #84	@ 0x54
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	ddeb      	ble.n	8001184 <vTaskSuspend+0x7c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 80011ac:	f001 fdfc 	bl	8002da8 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <vTaskSuspend+0x13c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <vTaskSuspend+0xbc>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 80011b8:	f001 fdc4 	bl	8002d44 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 80011bc:	f000 ff12 	bl	8001fe4 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 80011c0:	f001 fdf2 	bl	8002da8 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <vTaskSuspend+0x12c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d12a      	bne.n	8001224 <vTaskSuspend+0x11c>
            {
                if( xSchedulerRunning != pdFALSE )
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <vTaskSuspend+0x13c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d018      	beq.n	8001208 <vTaskSuspend+0x100>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <vTaskSuspend+0x140>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <vTaskSuspend+0xee>
    __asm volatile
 80011de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	60bb      	str	r3, [r7, #8]
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <vTaskSuspend+0xea>
                    portYIELD_WITHIN_API();
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <vTaskSuspend+0x144>)
 80011f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	e00d      	b.n	8001224 <vTaskSuspend+0x11c>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <vTaskSuspend+0x138>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <vTaskSuspend+0x148>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d103      	bne.n	8001220 <vTaskSuspend+0x118>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <vTaskSuspend+0x12c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e001      	b.n	8001224 <vTaskSuspend+0x11c>
                    }
                    else
                    {
                        vTaskSwitchContext();
 8001220:	f000 fbfc 	bl	8001a1c <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 8001224:	20ca      	movs	r0, #202	@ 0xca
 8001226:	f004 f87f 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000078 	.word	0x20000078
 8001238:	2000007c 	.word	0x2000007c
 800123c:	20000158 	.word	0x20000158
 8001240:	2000013c 	.word	0x2000013c
 8001244:	2000015c 	.word	0x2000015c
 8001248:	20000178 	.word	0x20000178
 800124c:	e000ed04 	.word	0xe000ed04
 8001250:	20000150 	.word	0x20000150

08001254 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10b      	bne.n	8001282 <prvTaskIsTaskSuspended+0x2e>
    __asm volatile
 800126a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	60bb      	str	r3, [r7, #8]
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	e7fd      	b.n	800127e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <prvTaskIsTaskSuspended+0x84>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11e      	bne.n	80012ca <prvTaskIsTaskSuspended+0x76>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <prvTaskIsTaskSuspended+0x88>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <prvTaskIsTaskSuspended+0x76>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <prvTaskIsTaskSuspended+0x76>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	e00d      	b.n	80012c4 <prvTaskIsTaskSuspended+0x70>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4413      	add	r3, r2
 80012ae:	3354      	adds	r3, #84	@ 0x54
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <prvTaskIsTaskSuspended+0x6a>
                            {
                                xReturn = pdFALSE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
                                break;
 80012bc:	e005      	b.n	80012ca <prvTaskIsTaskSuspended+0x76>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	3301      	adds	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	ddee      	ble.n	80012a8 <prvTaskIsTaskSuspended+0x54>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80012ca:	697b      	ldr	r3, [r7, #20]
    }
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	2000013c 	.word	0x2000013c
 80012dc:	20000110 	.word	0x20000110

080012e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10b      	bne.n	800130a <vTaskResume+0x2a>
    __asm volatile
 80012f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f6:	f383 8811 	msr	BASEPRI, r3
 80012fa:	f3bf 8f6f 	isb	sy
 80012fe:	f3bf 8f4f 	dsb	sy
 8001302:	60fb      	str	r3, [r7, #12]
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	e7fd      	b.n	8001306 <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800130a:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <vTaskResume+0x110>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	d065      	beq.n	80013e0 <vTaskResume+0x100>
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d062      	beq.n	80013e0 <vTaskResume+0x100>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 800131a:	f001 fd13 	bl	8002d44 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff98 	bl	8001254 <prvTaskIsTaskSuspended>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d058      	beq.n	80013dc <vTaskResume+0xfc>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3304      	adds	r3, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9c2 	bl	80006b8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4618      	mov	r0, r3
 8001338:	f004 f92a 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	2201      	movs	r2, #1
 8001342:	409a      	lsls	r2, r3
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <vTaskResume+0x114>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4313      	orrs	r3, r2
 800134a:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <vTaskResume+0x114>)
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001352:	4929      	ldr	r1, [pc, #164]	@ (80013f8 <vTaskResume+0x118>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3304      	adds	r3, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	3204      	adds	r2, #4
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1d1a      	adds	r2, r3, #4
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <vTaskResume+0x118>)
 8001392:	441a      	add	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139c:	4916      	ldr	r1, [pc, #88]	@ (80013f8 <vTaskResume+0x118>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013ae:	1c59      	adds	r1, r3, #1
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <vTaskResume+0x118>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4403      	add	r3, r0
 80013bc:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <vTaskResume+0x110>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <vTaskResume+0xfc>
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <vTaskResume+0x11c>)
 80013ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f3bf 8f4f 	dsb	sy
 80013d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80013dc:	f001 fce4 	bl	8002da8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
 80013e0:	20cb      	movs	r0, #203	@ 0xcb
 80013e2:	f003 ffa1 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000078 	.word	0x20000078
 80013f4:	20000158 	.word	0x20000158
 80013f8:	2000007c 	.word	0x2000007c
 80013fc:	e000ed04 	.word	0xe000ed04

08001400 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001406:	2301      	movs	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e011      	b.n	8001438 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001414:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <prvCreateIdleTasks+0x88>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	4413      	add	r3, r2
 800141a:	7819      	ldrb	r1, [r3, #0]
 800141c:	1d3a      	adds	r2, r7, #4
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4413      	add	r3, r2
 8001422:	460a      	mov	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001426:	1d3a      	adds	r2, r7, #4
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b09      	cmp	r3, #9
 800143c:	ddea      	ble.n	8001414 <prvCreateIdleTasks+0x14>
 800143e:	e000      	b.n	8001442 <prvCreateIdleTasks+0x42>
        {
            break;
 8001440:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e015      	b.n	8001474 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <prvCreateIdleTasks+0x8c>)
 800144a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <prvCreateIdleTasks+0x90>)
 8001452:	4413      	add	r3, r2
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	2282      	movs	r2, #130	@ 0x82
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff fcaa 	bl	8000dba <xTaskCreate>
 8001466:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3301      	adds	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	dde6      	ble.n	8001448 <prvCreateIdleTasks+0x48>
 800147a:	e000      	b.n	800147e <prvCreateIdleTasks+0x7e>
        {
            break;
 800147c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800147e:	69fb      	ldr	r3, [r7, #28]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	08007c44 	.word	0x08007c44
 800148c:	08001eb9 	.word	0x08001eb9
 8001490:	20000174 	.word	0x20000174

08001494 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800149a:	f7ff ffb1 	bl	8001400 <prvCreateIdleTasks>
 800149e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80014a6:	f001 f835 	bl	8002514 <xTimerCreateTimerTask>
 80014aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d124      	bne.n	80014fc <vTaskStartScheduler+0x68>
    __asm volatile
 80014b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	60bb      	str	r3, [r7, #8]
}
 80014c4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <vTaskStartScheduler+0x9c>)
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <vTaskStartScheduler+0xa0>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014d4:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <vTaskStartScheduler+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <vTaskStartScheduler+0xa8>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <vTaskStartScheduler+0xac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d102      	bne.n	80014ec <vTaskStartScheduler+0x58>
 80014e6:	f003 ffb3 	bl	8005450 <SEGGER_SYSVIEW_OnIdle>
 80014ea:	e004      	b.n	80014f6 <vTaskStartScheduler+0x62>
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <vTaskStartScheduler+0xac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 f80b 	bl	800550c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80014f6:	f001 fb35 	bl	8002b64 <xPortStartScheduler>
 80014fa:	e00f      	b.n	800151c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001502:	d10b      	bne.n	800151c <vTaskStartScheduler+0x88>
    __asm volatile
 8001504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	607b      	str	r3, [r7, #4]
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <vTaskStartScheduler+0xb0>)
 800151e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8001520:	20cd      	movs	r0, #205	@ 0xcd
 8001522:	f003 ff01 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000170 	.word	0x20000170
 8001534:	2000015c 	.word	0x2000015c
 8001538:	20000154 	.word	0x20000154
 800153c:	20000174 	.word	0x20000174
 8001540:	20000078 	.word	0x20000078
 8001544:	20000000 	.word	0x20000000

08001548 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <vTaskSuspendAll+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a03      	ldr	r2, [pc, #12]	@ (8001560 <vTaskSuspendAll+0x18>)
 8001554:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8001556:	20cf      	movs	r0, #207	@ 0xcf
 8001558:	f003 fee6 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000178 	.word	0x20000178

08001564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001572:	f001 fbe7 	bl	8002d44 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800157a:	4b7a      	ldr	r3, [pc, #488]	@ (8001764 <xTaskResumeAll+0x200>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <xTaskResumeAll+0x36>
    __asm volatile
 8001582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001586:	f383 8811 	msr	BASEPRI, r3
 800158a:	f3bf 8f6f 	isb	sy
 800158e:	f3bf 8f4f 	dsb	sy
 8001592:	603b      	str	r3, [r7, #0]
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	e7fd      	b.n	8001596 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800159a:	4b72      	ldr	r3, [pc, #456]	@ (8001764 <xTaskResumeAll+0x200>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3b01      	subs	r3, #1
 80015a0:	4a70      	ldr	r2, [pc, #448]	@ (8001764 <xTaskResumeAll+0x200>)
 80015a2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80015a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001764 <xTaskResumeAll+0x200>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 80ce 	bne.w	800174a <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001768 <xTaskResumeAll+0x204>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80c9 	beq.w	800174a <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015b8:	e092      	b.n	80016e0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80015ba:	4b6c      	ldr	r3, [pc, #432]	@ (800176c <xTaskResumeAll+0x208>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	6a12      	ldr	r2, [r2, #32]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	69d2      	ldr	r2, [r2, #28]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3318      	adds	r3, #24
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d103      	bne.n	80015f0 <xTaskResumeAll+0x8c>
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	68d2      	ldr	r2, [r2, #12]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	6892      	ldr	r2, [r2, #8]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	429a      	cmp	r2, r3
 8001624:	d103      	bne.n	800162e <xTaskResumeAll+0xca>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4618      	mov	r0, r3
 8001642:	f003 ffa5 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164a:	2201      	movs	r2, #1
 800164c:	409a      	lsls	r2, r3
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <xTaskResumeAll+0x20c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	4a46      	ldr	r2, [pc, #280]	@ (8001770 <xTaskResumeAll+0x20c>)
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165c:	4945      	ldr	r1, [pc, #276]	@ (8001774 <xTaskResumeAll+0x210>)
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3304      	adds	r3, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	3204      	adds	r2, #4
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	1d1a      	adds	r2, r3, #4
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4a36      	ldr	r2, [pc, #216]	@ (8001774 <xTaskResumeAll+0x210>)
 800169c:	441a      	add	r2, r3
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a6:	4933      	ldr	r1, [pc, #204]	@ (8001774 <xTaskResumeAll+0x210>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016b8:	1c59      	adds	r1, r3, #1
 80016ba:	482e      	ldr	r0, [pc, #184]	@ (8001774 <xTaskResumeAll+0x210>)
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4403      	add	r3, r0
 80016c6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <xTaskResumeAll+0x214>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d904      	bls.n	80016e0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80016d6:	4a29      	ldr	r2, [pc, #164]	@ (800177c <xTaskResumeAll+0x218>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2101      	movs	r1, #1
 80016dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <xTaskResumeAll+0x208>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f af68 	bne.w	80015ba <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80016f0:	f000 fc78 	bl	8001fe4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <xTaskResumeAll+0x21c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001700:	f000 f86a 	bl	80017d8 <xTaskIncrementTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <xTaskResumeAll+0x218>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2101      	movs	r1, #1
 8001710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3b01      	subs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ef      	bne.n	8001700 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <xTaskResumeAll+0x21c>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001726:	4a15      	ldr	r2, [pc, #84]	@ (800177c <xTaskResumeAll+0x218>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <xTaskResumeAll+0x214>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <xTaskResumeAll+0x220>)
 800173c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800174a:	f001 fb2d 	bl	8002da8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4619      	mov	r1, r3
 8001752:	20d0      	movs	r0, #208	@ 0xd0
 8001754:	f003 fe24 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8001758:	69bb      	ldr	r3, [r7, #24]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000178 	.word	0x20000178
 8001768:	20000150 	.word	0x20000150
 800176c:	20000110 	.word	0x20000110
 8001770:	20000158 	.word	0x20000158
 8001774:	2000007c 	.word	0x2000007c
 8001778:	20000078 	.word	0x20000078
 800177c:	20000164 	.word	0x20000164
 8001780:	20000160 	.word	0x20000160
 8001784:	e000ed04 	.word	0xe000ed04

08001788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <xTaskGetTickCount+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	20d1      	movs	r0, #209	@ 0xd1
 8001798:	f003 fe02 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000154 	.word	0x20000154

080017ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80017b2:	f001 fbb3 	bl	8002f1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <xTaskGetTickCountFromISR+0x28>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	20d2      	movs	r0, #210	@ 0xd2
 80017c4:	f003 fdec 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80017c8:	683b      	ldr	r3, [r7, #0]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000154 	.word	0x20000154

080017d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80017e2:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <xTaskIncrementTick+0x218>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80f3 	bne.w	80019d2 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017ec:	4b81      	ldr	r3, [pc, #516]	@ (80019f4 <xTaskIncrementTick+0x21c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80017f4:	4a7f      	ldr	r2, [pc, #508]	@ (80019f4 <xTaskIncrementTick+0x21c>)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d121      	bne.n	8001844 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001800:	4b7d      	ldr	r3, [pc, #500]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <xTaskIncrementTick+0x4a>
    __asm volatile
 800180a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	607b      	str	r3, [r7, #4]
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	e7fd      	b.n	800181e <xTaskIncrementTick+0x46>
 8001822:	4b75      	ldr	r3, [pc, #468]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	4b74      	ldr	r3, [pc, #464]	@ (80019fc <xTaskIncrementTick+0x224>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a72      	ldr	r2, [pc, #456]	@ (80019f8 <xTaskIncrementTick+0x220>)
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4a72      	ldr	r2, [pc, #456]	@ (80019fc <xTaskIncrementTick+0x224>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b72      	ldr	r3, [pc, #456]	@ (8001a00 <xTaskIncrementTick+0x228>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a70      	ldr	r2, [pc, #448]	@ (8001a00 <xTaskIncrementTick+0x228>)
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	f000 fbd0 	bl	8001fe4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001844:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <xTaskIncrementTick+0x22c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	429a      	cmp	r2, r3
 800184c:	f0c0 80ac 	bcc.w	80019a8 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001850:	4b69      	ldr	r3, [pc, #420]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d104      	bne.n	8001864 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <xTaskIncrementTick+0x22c>)
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	601a      	str	r2, [r3, #0]
                    break;
 8001862:	e0a1      	b.n	80019a8 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001864:	4b64      	ldr	r3, [pc, #400]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001874:	6a3a      	ldr	r2, [r7, #32]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	d203      	bcs.n	8001884 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800187c:	4a61      	ldr	r2, [pc, #388]	@ (8001a04 <xTaskIncrementTick+0x22c>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	6013      	str	r3, [r2, #0]
                        break;
 8001882:	e091      	b.n	80019a8 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	6892      	ldr	r2, [r2, #8]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3304      	adds	r3, #4
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d103      	bne.n	80018b2 <xTaskIncrementTick+0xda>
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01e      	beq.n	8001908 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	6a12      	ldr	r2, [r2, #32]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	69d2      	ldr	r2, [r2, #28]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3318      	adds	r3, #24
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d103      	bne.n	80018f8 <xTaskIncrementTick+0x120>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6a1a      	ldr	r2, [r3, #32]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fe40 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	2201      	movs	r2, #1
 8001916:	409a      	lsls	r2, r3
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <xTaskIncrementTick+0x230>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4313      	orrs	r3, r2
 800191e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001926:	4939      	ldr	r1, [pc, #228]	@ (8001a0c <xTaskIncrementTick+0x234>)
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3304      	adds	r3, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	3204      	adds	r2, #4
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4a29      	ldr	r2, [pc, #164]	@ (8001a0c <xTaskIncrementTick+0x234>)
 8001966:	441a      	add	r2, r3
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001970:	4926      	ldr	r1, [pc, #152]	@ (8001a0c <xTaskIncrementTick+0x234>)
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001982:	1c59      	adds	r1, r3, #1
 8001984:	4821      	ldr	r0, [pc, #132]	@ (8001a0c <xTaskIncrementTick+0x234>)
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4403      	add	r3, r0
 8001990:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <xTaskIncrementTick+0x238>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	429a      	cmp	r2, r3
 800199e:	f67f af57 	bls.w	8001850 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019a6:	e753      	b.n	8001850 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <xTaskIncrementTick+0x238>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ae:	4917      	ldr	r1, [pc, #92]	@ (8001a0c <xTaskIncrementTick+0x234>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d901      	bls.n	80019c4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <xTaskIncrementTick+0x23c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	e004      	b.n	80019dc <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <xTaskIncrementTick+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <xTaskIncrementTick+0x240>)
 80019da:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	20db      	movs	r0, #219	@ 0xdb
 80019e2:	f003 fcdd 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000178 	.word	0x20000178
 80019f4:	20000154 	.word	0x20000154
 80019f8:	20000108 	.word	0x20000108
 80019fc:	2000010c 	.word	0x2000010c
 8001a00:	20000168 	.word	0x20000168
 8001a04:	20000170 	.word	0x20000170
 8001a08:	20000158 	.word	0x20000158
 8001a0c:	2000007c 	.word	0x2000007c
 8001a10:	20000078 	.word	0x20000078
 8001a14:	20000164 	.word	0x20000164
 8001a18:	20000160 	.word	0x20000160

08001a1c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <vTaskSwitchContext+0xc0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <vTaskSwitchContext+0xc4>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001a30:	e04f      	b.n	8001ad2 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8001a32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <vTaskSwitchContext+0xc4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <vTaskSwitchContext+0xc8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	f1c3 031f 	rsb	r3, r3, #31
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4926      	ldr	r1, [pc, #152]	@ (8001ae8 <vTaskSwitchContext+0xcc>)
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10b      	bne.n	8001a7a <vTaskSwitchContext+0x5e>
    __asm volatile
 8001a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a66:	f383 8811 	msr	BASEPRI, r3
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	607b      	str	r3, [r7, #4]
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <vTaskSwitchContext+0x5a>
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <vTaskSwitchContext+0xcc>)
 8001a86:	4413      	add	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d103      	bne.n	8001aa8 <vTaskSwitchContext+0x8c>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <vTaskSwitchContext+0xd0>)
 8001ab0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <vTaskSwitchContext+0xd4>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <vTaskSwitchContext+0xd0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d102      	bne.n	8001ac4 <vTaskSwitchContext+0xa8>
 8001abe:	f003 fcc7 	bl	8005450 <SEGGER_SYSVIEW_OnIdle>
 8001ac2:	e004      	b.n	8001ace <vTaskSwitchContext+0xb2>
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <vTaskSwitchContext+0xd0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 fd1f 	bl	800550c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <vTaskSwitchContext+0xd0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
    }
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000178 	.word	0x20000178
 8001ae0:	20000164 	.word	0x20000164
 8001ae4:	20000158 	.word	0x20000158
 8001ae8:	2000007c 	.word	0x2000007c
 8001aec:	20000078 	.word	0x20000078
 8001af0:	20000174 	.word	0x20000174

08001af4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	f3bf 8f6f 	isb	sy
 8001b10:	f3bf 8f4f 	dsb	sy
 8001b14:	60fb      	str	r3, [r7, #12]
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <vTaskPlaceOnEventList+0x4c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3318      	adds	r3, #24
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7fe fd8c 	bl	8000642 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f000 fc63 	bl	80023f8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8001b32:	20e1      	movs	r0, #225	@ 0xe1
 8001b34:	f003 fbf8 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000078 	.word	0x20000078

08001b44 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	613b      	str	r3, [r7, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	e7fd      	b.n	8001b6a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <vTaskPlaceOnEventListRestricted+0x90>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	61da      	str	r2, [r3, #28]
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <vTaskPlaceOnEventListRestricted+0x90>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6892      	ldr	r2, [r2, #8]
 8001b84:	621a      	str	r2, [r3, #32]
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <vTaskPlaceOnEventListRestricted+0x90>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	3218      	adds	r2, #24
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <vTaskPlaceOnEventListRestricted+0x90>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f103 0218 	add.w	r2, r3, #24
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <vTaskPlaceOnEventListRestricted+0x90>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	f000 fc1a 	bl	80023f8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8001bc4:	20e3      	movs	r0, #227	@ 0xe3
 8001bc6:	f003 fbaf 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000078 	.word	0x20000078

08001bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	60fb      	str	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	6a12      	ldr	r2, [r2, #32]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	69d2      	ldr	r2, [r2, #28]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3318      	adds	r3, #24
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d103      	bne.n	8001c34 <xTaskRemoveFromEventList+0x5c>
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001c44:	4b4e      	ldr	r3, [pc, #312]	@ (8001d80 <xTaskRemoveFromEventList+0x1a8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d164      	bne.n	8001d16 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	6a3a      	ldr	r2, [r7, #32]
 8001c62:	6892      	ldr	r2, [r2, #8]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d103      	bne.n	8001c7a <xTaskRemoveFromEventList+0xa2>
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fc7f 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <xTaskRemoveFromEventList+0x1ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <xTaskRemoveFromEventList+0x1ac>)
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca8:	4937      	ldr	r1, [pc, #220]	@ (8001d88 <xTaskRemoveFromEventList+0x1b0>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	3204      	adds	r2, #4
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	1d1a      	adds	r2, r3, #4
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <xTaskRemoveFromEventList+0x1b0>)
 8001ce8:	441a      	add	r2, r3
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf2:	4925      	ldr	r1, [pc, #148]	@ (8001d88 <xTaskRemoveFromEventList+0x1b0>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	4820      	ldr	r0, [pc, #128]	@ (8001d88 <xTaskRemoveFromEventList+0x1b0>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4403      	add	r3, r0
 8001d12:	6019      	str	r1, [r3, #0]
 8001d14:	e01b      	b.n	8001d4e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <xTaskRemoveFromEventList+0x1b4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	61da      	str	r2, [r3, #28]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	6a3a      	ldr	r2, [r7, #32]
 8001d30:	3218      	adds	r2, #24
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f103 0218 	add.w	r2, r3, #24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <xTaskRemoveFromEventList+0x1b4>)
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <xTaskRemoveFromEventList+0x1b4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a10      	ldr	r2, [pc, #64]	@ (8001d8c <xTaskRemoveFromEventList+0x1b4>)
 8001d4c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <xTaskRemoveFromEventList+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d905      	bls.n	8001d68 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <xTaskRemoveFromEventList+0x1bc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e001      	b.n	8001d6c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	20e4      	movs	r0, #228	@ 0xe4
 8001d72:	f003 fb15 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3728      	adds	r7, #40	@ 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000178 	.word	0x20000178
 8001d84:	20000158 	.word	0x20000158
 8001d88:	2000007c 	.word	0x2000007c
 8001d8c:	20000110 	.word	0x20000110
 8001d90:	20000078 	.word	0x20000078
 8001d94:	20000164 	.word	0x20000164

08001d98 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <vTaskInternalSetTimeOutState+0x28>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <vTaskInternalSetTimeOutState+0x2c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8001db0:	20e7      	movs	r0, #231	@ 0xe7
 8001db2:	f003 fab9 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000168 	.word	0x20000168
 8001dc4:	20000154 	.word	0x20000154

08001dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	613b      	str	r3, [r7, #16]
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	60fb      	str	r3, [r7, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	e7fd      	b.n	8001e0a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001e0e:	f000 ff99 	bl	8002d44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001e12:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <xTaskCheckForTimeOut+0xd0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d102      	bne.n	8001e32 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e026      	b.n	8001e80 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <xTaskCheckForTimeOut+0xd4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d00a      	beq.n	8001e54 <xTaskCheckForTimeOut+0x8c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d305      	bcc.n	8001e54 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e015      	b.n	8001e80 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20b      	bcs.n	8001e76 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff94 	bl	8001d98 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e004      	b.n	8001e80 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001e80:	f000 ff92 	bl	8002da8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4619      	mov	r1, r3
 8001e88:	20e8      	movs	r0, #232	@ 0xe8
 8001e8a:	f003 fa89 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000154 	.word	0x20000154
 8001e9c:	20000168 	.word	0x20000168

08001ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <vTaskMissedYield+0x14>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8001eaa:	20e9      	movs	r0, #233	@ 0xe9
 8001eac:	f003 fa3c 	bl	8005328 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000164 	.word	0x20000164

08001eb8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001ec0:	f000 f852 	bl	8001f68 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <prvIdleTask+0x28>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d9f9      	bls.n	8001ec0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <prvIdleTask+0x2c>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001edc:	e7f0      	b.n	8001ec0 <prvIdleTask+0x8>
 8001ede:	bf00      	nop
 8001ee0:	2000007c 	.word	0x2000007c
 8001ee4:	e000ed04 	.word	0xe000ed04

08001ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	e00c      	b.n	8001f0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <prvInitialiseTaskLists+0x60>)
 8001f00:	4413      	add	r3, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb46 	bl	8000594 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d9ef      	bls.n	8001ef4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001f14:	480d      	ldr	r0, [pc, #52]	@ (8001f4c <prvInitialiseTaskLists+0x64>)
 8001f16:	f7fe fb3d 	bl	8000594 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <prvInitialiseTaskLists+0x68>)
 8001f1c:	f7fe fb3a 	bl	8000594 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <prvInitialiseTaskLists+0x6c>)
 8001f22:	f7fe fb37 	bl	8000594 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001f26:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <prvInitialiseTaskLists+0x70>)
 8001f28:	f7fe fb34 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001f2c:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <prvInitialiseTaskLists+0x74>)
 8001f2e:	f7fe fb31 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <prvInitialiseTaskLists+0x78>)
 8001f34:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <prvInitialiseTaskLists+0x64>)
 8001f36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <prvInitialiseTaskLists+0x7c>)
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <prvInitialiseTaskLists+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000007c 	.word	0x2000007c
 8001f4c:	200000e0 	.word	0x200000e0
 8001f50:	200000f4 	.word	0x200000f4
 8001f54:	20000110 	.word	0x20000110
 8001f58:	20000124 	.word	0x20000124
 8001f5c:	2000013c 	.word	0x2000013c
 8001f60:	20000108 	.word	0x20000108
 8001f64:	2000010c 	.word	0x2000010c

08001f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f6e:	e019      	b.n	8001fa4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001f70:	f000 fee8 	bl	8002d44 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <prvCheckTasksWaitingTermination+0x50>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fb99 	bl	80006b8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <prvCheckTasksWaitingTermination+0x54>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <prvCheckTasksWaitingTermination+0x54>)
 8001f8e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <prvCheckTasksWaitingTermination+0x58>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <prvCheckTasksWaitingTermination+0x58>)
 8001f98:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001f9a:	f000 ff05 	bl	8002da8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f810 	bl	8001fc4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <prvCheckTasksWaitingTermination+0x58>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e1      	bne.n	8001f70 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000124 	.word	0x20000124
 8001fbc:	20000150 	.word	0x20000150
 8001fc0:	20000138 	.word	0x20000138

08001fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 f917 	bl	8003204 <vPortFree>
            vPortFree( pxTCB );
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 f914 	bl	8003204 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <prvResetNextTaskUnblockTime+0x30>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d104      	bne.n	8001ffc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <prvResetNextTaskUnblockTime+0x34>)
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ffa:	e005      	b.n	8002008 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <prvResetNextTaskUnblockTime+0x30>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <prvResetNextTaskUnblockTime+0x34>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000108 	.word	0x20000108
 8002018:	20000170 	.word	0x20000170

0800201c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <xTaskGetSchedulerState+0x3c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800202a:	2301      	movs	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	e008      	b.n	8002042 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <xTaskGetSchedulerState+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002038:	2302      	movs	r3, #2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4619      	mov	r1, r3
 8002046:	20f5      	movs	r0, #245	@ 0xf5
 8002048:	f003 f9aa 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800204c:	687b      	ldr	r3, [r7, #4]
    }
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000015c 	.word	0x2000015c
 800205c:	20000178 	.word	0x20000178

08002060 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	613b      	str	r3, [r7, #16]
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8002090:	f7ff fa5a 	bl	8001548 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8002094:	f000 fe56 	bl	8002d44 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	3354      	adds	r3, #84	@ 0x54
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d018      	beq.n	80020dc <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80020aa:	4b37      	ldr	r3, [pc, #220]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	3214      	adds	r2, #20
 80020b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	43d2      	mvns	r2, r2
 80020ba:	4011      	ands	r1, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	3214      	adds	r2, #20
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80020c4:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	3354      	adds	r3, #84	@ 0x54
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80020dc:	f000 fe64 	bl	8002da8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d103      	bne.n	80020ee <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020e6:	2101      	movs	r1, #1
 80020e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020ea:	f000 f985 	bl	80023f8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80020ee:	f7ff fa39 	bl	8001564 <xTaskResumeAll>
 80020f2:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10a      	bne.n	8002110 <xTaskGenericNotifyWait+0xb0>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <xTaskGenericNotifyWait+0x12c>)
 8002102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002110:	f000 fe18 	bl	8002d44 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	3214      	adds	r2, #20
 8002122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	3354      	adds	r3, #84	@ 0x54
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d002      	beq.n	8002142 <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	e00e      	b.n	8002160 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	3214      	adds	r2, #20
 800214a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	43d2      	mvns	r2, r2
 8002152:	4011      	ands	r1, r2
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	3214      	adds	r2, #20
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800215c:	2301      	movs	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <xTaskGenericNotifyWait+0x128>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	3354      	adds	r3, #84	@ 0x54
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800216e:	f000 fe1b 	bl	8002da8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800217a:	f003 f911 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800217e:	69fb      	ldr	r3, [r7, #28]
    }
 8002180:	4618      	mov	r0, r3
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000078 	.word	0x20000078
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	@ 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800219e:	2301      	movs	r3, #1
 80021a0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <xTaskGenericNotify+0x30>
    __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	623b      	str	r3, [r7, #32]
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <xTaskGenericNotify+0x4e>
    __asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	61fb      	str	r3, [r7, #28]
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80021e2:	f000 fdaf 	bl	8002d44 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80021e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80021ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	3214      	adds	r2, #20
 80021f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80021fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4413      	add	r3, r2
 8002200:	3354      	adds	r3, #84	@ 0x54
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	3354      	adds	r3, #84	@ 0x54
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d83b      	bhi.n	8002292 <xTaskGenericNotify+0x102>
 800221a:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <xTaskGenericNotify+0x90>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	080022b3 	.word	0x080022b3
 8002224:	08002235 	.word	0x08002235
 8002228:	08002251 	.word	0x08002251
 800222c:	08002269 	.word	0x08002269
 8002230:	08002277 	.word	0x08002277
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	3214      	adds	r2, #20
 800223a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	ea42 0103 	orr.w	r1, r2, r3
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	3214      	adds	r2, #20
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800224e:	e033      	b.n	80022b8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	3214      	adds	r2, #20
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	3214      	adds	r2, #20
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002266:	e027      	b.n	80022b8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	3214      	adds	r2, #20
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002274:	e020      	b.n	80022b8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800227a:	2b02      	cmp	r3, #2
 800227c:	d006      	beq.n	800228c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	3214      	adds	r2, #20
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800228a:	e015      	b.n	80022b8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8002290:	e012      	b.n	80022b8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002292:	4b54      	ldr	r3, [pc, #336]	@ (80023e4 <xTaskGenericNotify+0x254>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <xTaskGenericNotify+0x126>
    __asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	61bb      	str	r3, [r7, #24]
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	e7fd      	b.n	80022ae <xTaskGenericNotify+0x11e>
                    break;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <xTaskGenericNotify+0x128>

                    break;
 80022b6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80022b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 8083 	bne.w	80023c8 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ce:	68d2      	ldr	r2, [r2, #12]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	3304      	adds	r3, #4
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d103      	bne.n	80022f0 <xTaskGenericNotify+0x160>
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	4618      	mov	r0, r3
 8002304:	f003 f944 	bl	8005590 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <xTaskGenericNotify+0x258>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <xTaskGenericNotify+0x258>)
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231e:	4933      	ldr	r1, [pc, #204]	@ (80023ec <xTaskGenericNotify+0x25c>)
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3304      	adds	r3, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	3204      	adds	r2, #4
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <xTaskGenericNotify+0x25c>)
 800235e:	441a      	add	r2, r3
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002368:	4920      	ldr	r1, [pc, #128]	@ (80023ec <xTaskGenericNotify+0x25c>)
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002378:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800237a:	1c59      	adds	r1, r3, #1
 800237c:	481b      	ldr	r0, [pc, #108]	@ (80023ec <xTaskGenericNotify+0x25c>)
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4403      	add	r3, r0
 8002388:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <xTaskGenericNotify+0x21a>
    __asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	617b      	str	r3, [r7, #20]
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <xTaskGenericNotify+0x260>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <xTaskGenericNotify+0x238>
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <xTaskGenericNotify+0x264>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80023c8:	f000 fcee 	bl	8002da8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	4619      	mov	r1, r3
 80023d0:	f240 1001 	movw	r0, #257	@ 0x101
 80023d4:	f002 ffe4 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80023da:	4618      	mov	r0, r3
 80023dc:	3738      	adds	r7, #56	@ 0x38
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000154 	.word	0x20000154
 80023e8:	20000158 	.word	0x20000158
 80023ec:	2000007c 	.word	0x2000007c
 80023f0:	20000078 	.word	0x20000078
 80023f4:	e000ed04 	.word	0xe000ed04

080023f8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0x100>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002408:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <prvAddCurrentTaskToDelayedList+0x104>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800240e:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <prvAddCurrentTaskToDelayedList+0x108>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3304      	adds	r3, #4
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f94c 	bl	80006b8 <uxListRemove>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	2201      	movs	r2, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <prvAddCurrentTaskToDelayedList+0x110>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4013      	ands	r3, r2
 800243a:	4a33      	ldr	r2, [pc, #204]	@ (8002508 <prvAddCurrentTaskToDelayedList+0x110>)
 800243c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d124      	bne.n	8002490 <prvAddCurrentTaskToDelayedList+0x98>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d021      	beq.n	8002490 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800244c:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <prvAddCurrentTaskToDelayedList+0x114>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	3204      	adds	r2, #4
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1d1a      	adds	r2, r3, #4
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <prvAddCurrentTaskToDelayedList+0x114>)
 8002480:	615a      	str	r2, [r3, #20]
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <prvAddCurrentTaskToDelayedList+0x114>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a20      	ldr	r2, [pc, #128]	@ (800250c <prvAddCurrentTaskToDelayedList+0x114>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800248e:	e02e      	b.n	80024ee <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d20d      	bcs.n	80024c4 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2104      	movs	r1, #4
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 f8b0 	bl	8005614 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3304      	adds	r3, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	6978      	ldr	r0, [r7, #20]
 80024be:	f7fe f8c0 	bl	8000642 <vListInsert>
}
 80024c2:	e014      	b.n	80024ee <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2104      	movs	r1, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f8a2 	bl	8005614 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <prvAddCurrentTaskToDelayedList+0x10c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	69b8      	ldr	r0, [r7, #24]
 80024da:	f7fe f8b2 	bl	8000642 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80024de:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <prvAddCurrentTaskToDelayedList+0x118>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d202      	bcs.n	80024ee <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80024e8:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <prvAddCurrentTaskToDelayedList+0x118>)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000154 	.word	0x20000154
 80024fc:	20000108 	.word	0x20000108
 8002500:	2000010c 	.word	0x2000010c
 8002504:	20000078 	.word	0x20000078
 8002508:	20000158 	.word	0x20000158
 800250c:	2000013c 	.word	0x2000013c
 8002510:	20000170 	.word	0x20000170

08002514 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800251e:	f000 fa5b 	bl	80029d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <xTimerCreateTimerTask+0x64>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <xTimerCreateTimerTask+0x68>)
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2302      	movs	r3, #2
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002538:	4911      	ldr	r1, [pc, #68]	@ (8002580 <xTimerCreateTimerTask+0x6c>)
 800253a:	4812      	ldr	r0, [pc, #72]	@ (8002584 <xTimerCreateTimerTask+0x70>)
 800253c:	f7fe fc3d 	bl	8000dba <xTaskCreate>
 8002540:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	603b      	str	r3, [r7, #0]
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4619      	mov	r1, r3
 8002564:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8002568:	f002 ff1a 	bl	80053a0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800256c:	687b      	ldr	r3, [r7, #4]
    }
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001ac 	.word	0x200001ac
 800257c:	200001b0 	.word	0x200001b0
 8002580:	08007c4c 	.word	0x08007c4c
 8002584:	0800262d 	.word	0x0800262d

08002588 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002594:	e008      	b.n	80025a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	18d1      	adds	r1, r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f8df 	bl	8002778 <prvInsertTimerInActiveList>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <prvReloadTimer+0xe>
        }
    }
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <prvProcessExpiredTimer+0x5c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe f867 	bl	80006b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ffc3 	bl	8002588 <prvReloadTimer>
 8002602:	e008      	b.n	8002616 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	4798      	blx	r3
    }
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200001a4 	.word	0x200001a4

0800262c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f859 	bl	80026f0 <prvGetNextExpireTime>
 800263e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4619      	mov	r1, r3
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f805 	bl	8002654 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800264a:	f000 f8d7 	bl	80027fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800264e:	bf00      	nop
 8002650:	e7f0      	b.n	8002634 <prvTimerTask+0x8>
	...

08002654 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800265e:	f7fe ff73 	bl	8001548 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f866 	bl	8002738 <prvSampleTimeNow>
 800266c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d130      	bne.n	80026d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <prvProcessTimerOrBlockTask+0x3c>
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	429a      	cmp	r2, r3
 8002680:	d806      	bhi.n	8002690 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002682:	f7fe ff6f 	bl	8001564 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff9f 	bl	80025cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800268e:	e024      	b.n	80026da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <prvProcessTimerOrBlockTask+0x90>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <prvProcessTimerOrBlockTask+0x50>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <prvProcessTimerOrBlockTask+0x52>
 80026a4:	2300      	movs	r3, #0
 80026a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <prvProcessTimerOrBlockTask+0x94>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fb0d 	bl	8000cd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80026ba:	f7fe ff53 	bl	8001564 <xTaskResumeAll>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80026c4:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <prvProcessTimerOrBlockTask+0x98>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
    }
 80026d4:	e001      	b.n	80026da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80026d6:	f7fe ff45 	bl	8001564 <xTaskResumeAll>
    }
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200001a8 	.word	0x200001a8
 80026e8:	200001ac 	.word	0x200001ac
 80026ec:	e000ed04 	.word	0xe000ed04

080026f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <prvGetNextExpireTime+0x44>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <prvGetNextExpireTime+0x16>
 8002702:	2201      	movs	r2, #1
 8002704:	e000      	b.n	8002708 <prvGetNextExpireTime+0x18>
 8002706:	2200      	movs	r2, #0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <prvGetNextExpireTime+0x44>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e001      	b.n	8002724 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002724:	68fb      	ldr	r3, [r7, #12]
    }
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200001a4 	.word	0x200001a4

08002738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002740:	f7ff f822 	bl	8001788 <xTaskGetTickCount>
 8002744:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <prvSampleTimeNow+0x3c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d205      	bcs.n	800275c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002750:	f000 f91c 	bl	800298c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e002      	b.n	8002762 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <prvSampleTimeNow+0x3c>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002768:	68fb      	ldr	r3, [r7, #12]
    }
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200001b4 	.word	0x200001b4

08002778 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d812      	bhi.n	80027c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e01b      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <prvInsertTimerInActiveList+0x7c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7fd ff40 	bl	8000642 <vListInsert>
 80027c2:	e012      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d206      	bcs.n	80027da <prvInsertTimerInActiveList+0x62>
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e007      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <prvInsertTimerInActiveList+0x80>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fd ff2c 	bl	8000642 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80027ea:	697b      	ldr	r3, [r7, #20]
    }
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200001a8 	.word	0x200001a8
 80027f8:	200001a4 	.word	0x200001a4

080027fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800280e:	e0a9      	b.n	8002964 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f2c0 80a6 	blt.w	8002964 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3304      	adds	r3, #4
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd ff45 	bl	80006b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff81 	bl	8002738 <prvSampleTimeNow>
 8002836:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3b01      	subs	r3, #1
 800283c:	2b08      	cmp	r3, #8
 800283e:	f200 808e 	bhi.w	800295e <prvProcessReceivedCommands+0x162>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <prvProcessReceivedCommands+0x4c>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	0800286d 	.word	0x0800286d
 800284c:	0800286d 	.word	0x0800286d
 8002850:	080028d5 	.word	0x080028d5
 8002854:	080028e9 	.word	0x080028e9
 8002858:	08002935 	.word	0x08002935
 800285c:	0800286d 	.word	0x0800286d
 8002860:	0800286d 	.word	0x0800286d
 8002864:	080028d5 	.word	0x080028d5
 8002868:	080028e9 	.word	0x080028e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	18d1      	adds	r1, r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	69f8      	ldr	r0, [r7, #28]
 800288c:	f7ff ff74 	bl	8002778 <prvInsertTimerInActiveList>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d065      	beq.n	8002962 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4619      	mov	r1, r3
 80028b0:	69f8      	ldr	r0, [r7, #28]
 80028b2:	f7ff fe69 	bl	8002588 <prvReloadTimer>
 80028b6:	e008      	b.n	80028ca <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	69f8      	ldr	r0, [r7, #28]
 80028d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80028d2:	e046      	b.n	8002962 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80028e6:	e03d      	b.n	8002964 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	617b      	str	r3, [r7, #20]
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	18d1      	adds	r1, r2, r3
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	69f8      	ldr	r0, [r7, #28]
 800292e:	f7ff ff23 	bl	8002778 <prvInsertTimerInActiveList>
                        break;
 8002932:	e017      	b.n	8002964 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002942:	69f8      	ldr	r0, [r7, #28]
 8002944:	f000 fc5e 	bl	8003204 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002948:	e00c      	b.n	8002964 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800295c:	e002      	b.n	8002964 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <prvProcessReceivedCommands+0x168>
                        break;
 8002962:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002964:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <prvProcessReceivedCommands+0x18c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f107 0108 	add.w	r1, r7, #8
 800296c:	2200      	movs	r2, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd ffe4 	bl	800093c <xQueueReceive>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f af4a 	bne.w	8002810 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200001ac 	.word	0x200001ac

0800298c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002992:	e009      	b.n	80029a8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <prvSwitchTimerLists+0x44>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800299e:	f04f 31ff 	mov.w	r1, #4294967295
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f7ff fe12 	bl	80025cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <prvSwitchTimerLists+0x44>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <prvSwitchTimerLists+0x44>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <prvSwitchTimerLists+0x48>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <prvSwitchTimerLists+0x44>)
 80029be:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <prvSwitchTimerLists+0x48>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
    }
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200001a4 	.word	0x200001a4
 80029d4:	200001a8 	.word	0x200001a8

080029d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029dc:	f000 f9b2 	bl	8002d44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <prvCheckForValidListAndQueue+0x54>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11d      	bne.n	8002a24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80029e8:	4811      	ldr	r0, [pc, #68]	@ (8002a30 <prvCheckForValidListAndQueue+0x58>)
 80029ea:	f7fd fdd3 	bl	8000594 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029ee:	4811      	ldr	r0, [pc, #68]	@ (8002a34 <prvCheckForValidListAndQueue+0x5c>)
 80029f0:	f7fd fdd0 	bl	8000594 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029f4:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <prvCheckForValidListAndQueue+0x60>)
 80029f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <prvCheckForValidListAndQueue+0x58>)
 80029f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <prvCheckForValidListAndQueue+0x64>)
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <prvCheckForValidListAndQueue+0x5c>)
 80029fe:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002a00:	2200      	movs	r2, #0
 8002a02:	210c      	movs	r1, #12
 8002a04:	200a      	movs	r0, #10
 8002a06:	f7fd ff1d 	bl	8000844 <xQueueGenericCreate>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a07      	ldr	r2, [pc, #28]	@ (8002a2c <prvCheckForValidListAndQueue+0x54>)
 8002a0e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <prvCheckForValidListAndQueue+0x54>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a18:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <prvCheckForValidListAndQueue+0x54>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4908      	ldr	r1, [pc, #32]	@ (8002a40 <prvCheckForValidListAndQueue+0x68>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f908 	bl	8000c34 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a24:	f000 f9c0 	bl	8002da8 <vPortExitCritical>
    }
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200001ac 	.word	0x200001ac
 8002a30:	2000017c 	.word	0x2000017c
 8002a34:	20000190 	.word	0x20000190
 8002a38:	200001a4 	.word	0x200001a4
 8002a3c:	200001a8 	.word	0x200001a8
 8002a40:	08007c54 	.word	0x08007c54

08002a44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b04      	subs	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3b04      	subs	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b04      	subs	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a74:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <pxPortInitialiseStack+0x64>)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b14      	subs	r3, #20
 8002a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3b04      	subs	r3, #4
 8002a8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f06f 0202 	mvn.w	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3b20      	subs	r3, #32
 8002a98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	08002aad 	.word	0x08002aad

08002aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <prvTaskExitError+0x58>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d00b      	beq.n	8002ad8 <prvTaskExitError+0x2c>
    __asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60fb      	str	r3, [r7, #12]
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <prvTaskExitError+0x28>
    __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	60bb      	str	r3, [r7, #8]
}
 8002aea:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002aec:	bf00      	nop
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0fc      	beq.n	8002aee <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000004 	.word	0x20000004
	...

08002b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <pxCurrentTCBConst2>)
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	6808      	ldr	r0, [r1, #0]
 8002b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1a:	f380 8809 	msr	PSP, r0
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f04f 0000 	mov.w	r0, #0
 8002b26:	f380 8811 	msr	BASEPRI, r0
 8002b2a:	4770      	bx	lr
 8002b2c:	f3af 8000 	nop.w

08002b30 <pxCurrentTCBConst2>:
 8002b30:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop

08002b38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b38:	4808      	ldr	r0, [pc, #32]	@ (8002b5c <prvPortStartFirstTask+0x24>)
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	6800      	ldr	r0, [r0, #0]
 8002b3e:	f380 8808 	msr	MSP, r0
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f380 8814 	msr	CONTROL, r0
 8002b4a:	b662      	cpsie	i
 8002b4c:	b661      	cpsie	f
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	df00      	svc	0
 8002b58:	bf00      	nop
 8002b5a:	0000      	.short	0x0000
 8002b5c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop

08002b64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	@ 0x30
 8002b68:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b6a:	4b69      	ldr	r3, [pc, #420]	@ (8002d10 <xPortStartScheduler+0x1ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <xPortStartScheduler+0x1b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10b      	bne.n	8002b8c <xPortStartScheduler+0x28>
    __asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b8c:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <xPortStartScheduler+0x1ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a61      	ldr	r2, [pc, #388]	@ (8002d18 <xPortStartScheduler+0x1b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10b      	bne.n	8002bae <xPortStartScheduler+0x4a>
    __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	623b      	str	r3, [r7, #32]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002bae:	4b5b      	ldr	r3, [pc, #364]	@ (8002d1c <xPortStartScheduler+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb6:	332c      	adds	r3, #44	@ 0x2c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a59      	ldr	r2, [pc, #356]	@ (8002d20 <xPortStartScheduler+0x1bc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <xPortStartScheduler+0x74>
    __asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61fb      	str	r3, [r7, #28]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bda:	3338      	adds	r3, #56	@ 0x38
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a51      	ldr	r2, [pc, #324]	@ (8002d24 <xPortStartScheduler+0x1c0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <xPortStartScheduler+0x98>
    __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	61bb      	str	r3, [r7, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c00:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <xPortStartScheduler+0x1c4>)
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0e:	22ff      	movs	r2, #255	@ 0xff
 8002c10:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b41      	ldr	r3, [pc, #260]	@ (8002d2c <xPortStartScheduler+0x1c8>)
 8002c26:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002c28:	4b40      	ldr	r3, [pc, #256]	@ (8002d2c <xPortStartScheduler+0x1c8>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <xPortStartScheduler+0xe4>
    __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	617b      	str	r3, [r7, #20]
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d013      	beq.n	8002c7e <xPortStartScheduler+0x11a>
    __asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	613b      	str	r3, [r7, #16]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c86:	2b80      	cmp	r3, #128	@ 0x80
 8002c88:	d0f1      	beq.n	8002c6e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d103      	bne.n	8002c98 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002c90:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e004      	b.n	8002ca2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002ca0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ca2:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002caa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <xPortStartScheduler+0x1cc>)
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <xPortStartScheduler+0x1d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d34 <xPortStartScheduler+0x1d0>)
 8002cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <xPortStartScheduler+0x1d0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <xPortStartScheduler+0x1d0>)
 8002cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cd6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <xPortStartScheduler+0x1d4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002cde:	f000 f8ed 	bl	8002ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <xPortStartScheduler+0x1d8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ce8:	f000 f90c 	bl	8002f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <xPortStartScheduler+0x1dc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <xPortStartScheduler+0x1dc>)
 8002cf2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002cf8:	f7ff ff1e 	bl	8002b38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002cfc:	f7fe fe8e 	bl	8001a1c <vTaskSwitchContext>
    prvTaskExitError();
 8002d00:	f7ff fed4 	bl	8002aac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	@ 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00
 8002d14:	410fc271 	.word	0x410fc271
 8002d18:	410fc270 	.word	0x410fc270
 8002d1c:	e000ed08 	.word	0xe000ed08
 8002d20:	08002b11 	.word	0x08002b11
 8002d24:	08002e01 	.word	0x08002e01
 8002d28:	e000e400 	.word	0xe000e400
 8002d2c:	200001b8 	.word	0x200001b8
 8002d30:	200001bc 	.word	0x200001bc
 8002d34:	e000ed20 	.word	0xe000ed20
 8002d38:	e000ed1c 	.word	0xe000ed1c
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	e000ef34 	.word	0xe000ef34

08002d44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
    __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
}
 8002d5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <vPortEnterCritical+0x5c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <vPortEnterCritical+0x5c>)
 8002d66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d68:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <vPortEnterCritical+0x5c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d110      	bne.n	8002d92 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <vPortEnterCritical+0x60>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <vPortEnterCritical+0x4e>
    __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <vPortEnterCritical+0x4a>
    }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000004 	.word	0x20000004
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <vPortExitCritical+0x50>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <vPortExitCritical+0x26>
    __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	607b      	str	r3, [r7, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dce:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <vPortExitCritical+0x50>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <vPortExitCritical+0x50>)
 8002dd6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <vPortExitCritical+0x50>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <vPortExitCritical+0x44>
 8002de0:	2300      	movs	r3, #0
 8002de2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002dea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	00000000 	.word	0x00000000

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f01e 0f10 	tst.w	lr, #16
 8002e10:	bf08      	it	eq
 8002e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e24:	f380 8811 	msr	BASEPRI, r0
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f7fe fdf4 	bl	8001a1c <vTaskSwitchContext>
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f380 8811 	msr	BASEPRI, r0
 8002e3c:	bc09      	pop	{r0, r3}
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e46:	f01e 0f10 	tst.w	lr, #16
 8002e4a:	bf08      	it	eq
 8002e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e50:	f380 8809 	msr	PSP, r0
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w

08002e60 <pxCurrentTCBConst>:
 8002e60:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
    __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
}
 8002e80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002e82:	f002 f9d7 	bl	8005234 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e86:	f7fe fca7 	bl	80017d8 <xTaskIncrementTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8002e90:	f002 fa2e 	bl	80052f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <SysTick_Handler+0x50>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e001      	b.n	8002ea2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8002e9e:	f002 fa0b 	bl	80052b8 <SEGGER_SYSVIEW_RecordExitISR>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
}
 8002eac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <vPortSetupTimerInterrupt+0x38>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <vPortSetupTimerInterrupt+0x3c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <vPortSetupTimerInterrupt+0x40>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	4a09      	ldr	r2, [pc, #36]	@ (8002f00 <vPortSetupTimerInterrupt+0x44>)
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ede:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e010 	.word	0xe000e010
 8002ef4:	e000e018 	.word	0xe000e018
 8002ef8:	20000010 	.word	0x20000010
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	e000e014 	.word	0xe000e014

08002f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002f14 <vPortEnableVFP+0x10>
 8002f08:	6801      	ldr	r1, [r0, #0]
 8002f0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002f0e:	6001      	str	r1, [r0, #0]
 8002f10:	4770      	bx	lr
 8002f12:	0000      	.short	0x0000
 8002f14:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop

08002f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f22:	f3ef 8305 	mrs	r3, IPSR
 8002f26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d915      	bls.n	8002f5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f2e:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <vPortValidateInterruptPriority+0x74>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <vPortValidateInterruptPriority+0x78>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	7afa      	ldrb	r2, [r7, #11]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20b      	bcs.n	8002f5a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	607b      	str	r3, [r7, #4]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <vPortValidateInterruptPriority+0x7c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <vPortValidateInterruptPriority+0x80>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90b      	bls.n	8002f82 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	603b      	str	r3, [r7, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	e7fd      	b.n	8002f7e <vPortValidateInterruptPriority+0x62>
    }
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e3f0 	.word	0xe000e3f0
 8002f94:	200001b8 	.word	0x200001b8
 8002f98:	e000ed0c 	.word	0xe000ed0c
 8002f9c:	200001bc 	.word	0x200001bc

08002fa0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	@ 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d022      	beq.n	8002ff8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d81b      	bhi.n	8002ff4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d014      	beq.n	8002ff8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	f1c3 0308 	rsb	r3, r3, #8
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d804      	bhi.n	8002fee <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	4413      	add	r3, r2
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	e004      	b.n	8002ff8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	e001      	b.n	8002ff8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002ff8:	f7fe faa6 	bl	8001548 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80031e8 <pvPortMalloc+0x248>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003004:	f000 f978 	bl	80032f8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f2c0 80d3 	blt.w	80031b6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80cf 	beq.w	80031b6 <pvPortMalloc+0x216>
 8003018:	4b74      	ldr	r3, [pc, #464]	@ (80031ec <pvPortMalloc+0x24c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	f200 80c9 	bhi.w	80031b6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003024:	4b72      	ldr	r3, [pc, #456]	@ (80031f0 <pvPortMalloc+0x250>)
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003028:	4b71      	ldr	r3, [pc, #452]	@ (80031f0 <pvPortMalloc+0x250>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003030:	4a70      	ldr	r2, [pc, #448]	@ (80031f4 <pvPortMalloc+0x254>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d305      	bcc.n	8003042 <pvPortMalloc+0xa2>
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003038:	4a6f      	ldr	r2, [pc, #444]	@ (80031f8 <pvPortMalloc+0x258>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d801      	bhi.n	8003042 <pvPortMalloc+0xa2>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <pvPortMalloc+0xa4>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d129      	bne.n	800309c <pvPortMalloc+0xfc>
    __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	623b      	str	r3, [r7, #32]
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800306a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306c:	4a61      	ldr	r2, [pc, #388]	@ (80031f4 <pvPortMalloc+0x254>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d305      	bcc.n	800307e <pvPortMalloc+0xde>
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	4a60      	ldr	r2, [pc, #384]	@ (80031f8 <pvPortMalloc+0x258>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d801      	bhi.n	800307e <pvPortMalloc+0xde>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <pvPortMalloc+0xe0>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <pvPortMalloc+0xfc>
    __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fb      	str	r3, [r7, #28]
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d903      	bls.n	80030ae <pvPortMalloc+0x10e>
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1d8      	bne.n	8003060 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80030ae:	4b4e      	ldr	r3, [pc, #312]	@ (80031e8 <pvPortMalloc+0x248>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d07e      	beq.n	80031b6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2208      	movs	r2, #8
 80030be:	4413      	add	r3, r2
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	4a4b      	ldr	r2, [pc, #300]	@ (80031f4 <pvPortMalloc+0x254>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d305      	bcc.n	80030d6 <pvPortMalloc+0x136>
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	4a4a      	ldr	r2, [pc, #296]	@ (80031f8 <pvPortMalloc+0x258>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d801      	bhi.n	80030d6 <pvPortMalloc+0x136>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <pvPortMalloc+0x138>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <pvPortMalloc+0x154>
    __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61bb      	str	r3, [r7, #24]
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d90b      	bls.n	800311e <pvPortMalloc+0x17e>
    __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	617b      	str	r3, [r7, #20]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad2      	subs	r2, r2, r3
 8003126:	2308      	movs	r3, #8
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	429a      	cmp	r2, r3
 800312c:	d924      	bls.n	8003178 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800312e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <pvPortMalloc+0x1b8>
    __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	613b      	str	r3, [r7, #16]
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003176:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003178:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <pvPortMalloc+0x24c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <pvPortMalloc+0x24c>)
 8003184:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003186:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <pvPortMalloc+0x24c>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <pvPortMalloc+0x25c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d203      	bcs.n	800319a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003192:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <pvPortMalloc+0x24c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <pvPortMalloc+0x25c>)
 8003198:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <pvPortMalloc+0x260>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <pvPortMalloc+0x260>)
 80031b4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031b6:	f7fe f9d5 	bl	8001564 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <pvPortMalloc+0x23c>
    __asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	60fb      	str	r3, [r7, #12]
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <pvPortMalloc+0x238>
    return pvReturn;
 80031dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3738      	adds	r7, #56	@ 0x38
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20012dc8 	.word	0x20012dc8
 80031ec:	20012dcc 	.word	0x20012dcc
 80031f0:	20012dc0 	.word	0x20012dc0
 80031f4:	200001c0 	.word	0x200001c0
 80031f8:	20012dbf 	.word	0x20012dbf
 80031fc:	20012dd0 	.word	0x20012dd0
 8003200:	20012dd4 	.word	0x20012dd4

08003204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d064      	beq.n	80032e0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003216:	2308      	movs	r3, #8
 8003218:	425b      	negs	r3, r3
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4a30      	ldr	r2, [pc, #192]	@ (80032e8 <vPortFree+0xe4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d305      	bcc.n	8003238 <vPortFree+0x34>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4a2f      	ldr	r2, [pc, #188]	@ (80032ec <vPortFree+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d801      	bhi.n	8003238 <vPortFree+0x34>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <vPortFree+0x36>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <vPortFree+0x52>
    __asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	617b      	str	r3, [r7, #20]
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <vPortFree+0x72>
    __asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	613b      	str	r3, [r7, #16]
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	e7fd      	b.n	8003272 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <vPortFree+0x92>
    __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60fb      	str	r3, [r7, #12]
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	0fdb      	lsrs	r3, r3, #31
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01c      	beq.n	80032e0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80032ba:	f7fe f945 	bl	8001548 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <vPortFree+0xec>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <vPortFree+0xec>)
 80032ca:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032cc:	69b8      	ldr	r0, [r7, #24]
 80032ce:	f000 f86d 	bl	80033ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <vPortFree+0xf0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a06      	ldr	r2, [pc, #24]	@ (80032f4 <vPortFree+0xf0>)
 80032da:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80032dc:	f7fe f942 	bl	8001564 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80032e0:	bf00      	nop
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200001c0 	.word	0x200001c0
 80032ec:	20012dbf 	.word	0x20012dbf
 80032f0:	20012dcc 	.word	0x20012dcc
 80032f4:	20012dd8 	.word	0x20012dd8

080032f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032fe:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003302:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003304:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <prvHeapInit+0xa0>)
 8003306:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3307      	adds	r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <prvHeapInit+0xa0>)
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <prvHeapInit+0xa4>)
 8003330:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <prvHeapInit+0xa4>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003340:	2208      	movs	r2, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a13      	ldr	r2, [pc, #76]	@ (80033a0 <prvHeapInit+0xa8>)
 8003354:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <prvHeapInit+0xa8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <prvHeapInit+0xa8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003374:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <prvHeapInit+0xa8>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a08      	ldr	r2, [pc, #32]	@ (80033a4 <prvHeapInit+0xac>)
 8003382:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <prvHeapInit+0xb0>)
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	200001c0 	.word	0x200001c0
 800339c:	20012dc0 	.word	0x20012dc0
 80033a0:	20012dc8 	.word	0x20012dc8
 80033a4:	20012dd0 	.word	0x20012dd0
 80033a8:	20012dcc 	.word	0x20012dcc

080033ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <prvInsertBlockIntoFreeList+0xe4>)
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e002      	b.n	80033c0 <prvInsertBlockIntoFreeList+0x14>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d8f7      	bhi.n	80033ba <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4a30      	ldr	r2, [pc, #192]	@ (8003490 <prvInsertBlockIntoFreeList+0xe4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003494 <prvInsertBlockIntoFreeList+0xe8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d305      	bcc.n	80033e6 <prvInsertBlockIntoFreeList+0x3a>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003498 <prvInsertBlockIntoFreeList+0xec>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d801      	bhi.n	80033e6 <prvInsertBlockIntoFreeList+0x3a>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <prvInsertBlockIntoFreeList+0x3c>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	60fb      	str	r3, [r7, #12]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d108      	bne.n	8003428 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	441a      	add	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	441a      	add	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d118      	bne.n	800346e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b16      	ldr	r3, [pc, #88]	@ (800349c <prvInsertBlockIntoFreeList+0xf0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d00d      	beq.n	8003464 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e008      	b.n	8003476 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003464:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <prvInsertBlockIntoFreeList+0xf0>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e003      	b.n	8003476 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d002      	beq.n	8003484 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20012dc0 	.word	0x20012dc0
 8003494:	200001c0 	.word	0x200001c0
 8003498:	20012dbf 	.word	0x20012dbf
 800349c:	20012dc8 	.word	0x20012dc8

080034a0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034a4:	4803      	ldr	r0, [pc, #12]	@ (80034b4 <_cbSendSystemDesc+0x14>)
 80034a6:	f001 fe6f 	bl	8005188 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034aa:	4803      	ldr	r0, [pc, #12]	@ (80034b8 <_cbSendSystemDesc+0x18>)
 80034ac:	f001 fe6c 	bl	8005188 <SEGGER_SYSVIEW_SendSysDesc>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	08007c5c 	.word	0x08007c5c
 80034b8:	08007ca4 	.word	0x08007ca4

080034bc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <SEGGER_SYSVIEW_Conf+0x20>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <SEGGER_SYSVIEW_Conf+0x20>)
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <SEGGER_SYSVIEW_Conf+0x24>)
 80034ca:	4a06      	ldr	r2, [pc, #24]	@ (80034e4 <SEGGER_SYSVIEW_Conf+0x28>)
 80034cc:	f001 fae2 	bl	8004a94 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80034d0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80034d4:	f001 fb22 	bl	8004b1c <SEGGER_SYSVIEW_SetRAMBase>
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000010 	.word	0x20000010
 80034e0:	080034a1 	.word	0x080034a1
 80034e4:	08007d88 	.word	0x08007d88

080034e8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e033      	b.n	800355c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80034f4:	491e      	ldr	r1, [pc, #120]	@ (8003570 <_cbSendTaskList+0x88>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	491a      	ldr	r1, [pc, #104]	@ (8003570 <_cbSendTaskList+0x88>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3304      	adds	r3, #4
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	4c16      	ldr	r4, [pc, #88]	@ (8003570 <_cbSendTaskList+0x88>)
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4423      	add	r3, r4
 8003524:	3308      	adds	r3, #8
 8003526:	681c      	ldr	r4, [r3, #0]
 8003528:	4d11      	ldr	r5, [pc, #68]	@ (8003570 <_cbSendTaskList+0x88>)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	442b      	add	r3, r5
 8003536:	330c      	adds	r3, #12
 8003538:	681d      	ldr	r5, [r3, #0]
 800353a:	4e0d      	ldr	r6, [pc, #52]	@ (8003570 <_cbSendTaskList+0x88>)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4433      	add	r3, r6
 8003548:	3310      	adds	r3, #16
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	462b      	mov	r3, r5
 8003550:	4622      	mov	r2, r4
 8003552:	f000 f8bd 	bl	80036d0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3301      	adds	r3, #1
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <_cbSendTaskList+0x8c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3c6      	bcc.n	80034f4 <_cbSendTaskList+0xc>
  }
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003570:	20012ddc 	.word	0x20012ddc
 8003574:	20012e7c 	.word	0x20012e7c

08003578 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003580:	f7fe f914 	bl	80017ac <xTaskGetTickCountFromISR>
 8003584:	4603      	mov	r3, r0
 8003586:	2200      	movs	r2, #0
 8003588:	469a      	mov	sl, r3
 800358a:	4693      	mov	fp, r2
 800358c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	f04f 0a00 	mov.w	sl, #0
 800359c:	f04f 0b00 	mov.w	fp, #0
 80035a0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035a4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035a8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80035ac:	4652      	mov	r2, sl
 80035ae:	465b      	mov	r3, fp
 80035b0:	1a14      	subs	r4, r2, r0
 80035b2:	eb63 0501 	sbc.w	r5, r3, r1
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	00ab      	lsls	r3, r5, #2
 80035c0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80035c4:	00a2      	lsls	r2, r4, #2
 80035c6:	4614      	mov	r4, r2
 80035c8:	461d      	mov	r5, r3
 80035ca:	eb14 0800 	adds.w	r8, r4, r0
 80035ce:	eb45 0901 	adc.w	r9, r5, r1
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e6:	4690      	mov	r8, r2
 80035e8:	4699      	mov	r9, r3
 80035ea:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80035ee:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003600 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800360e:	2205      	movs	r2, #5
 8003610:	492b      	ldr	r1, [pc, #172]	@ (80036c0 <SYSVIEW_AddTask+0xc0>)
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f004 fac0 	bl	8007b98 <memcmp>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d04b      	beq.n	80036b6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800361e:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b07      	cmp	r3, #7
 8003624:	d903      	bls.n	800362e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003626:	4828      	ldr	r0, [pc, #160]	@ (80036c8 <SYSVIEW_AddTask+0xc8>)
 8003628:	f002 f95e 	bl	80058e8 <SEGGER_SYSVIEW_Warn>
    return;
 800362c:	e044      	b.n	80036b8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800362e:	4b25      	ldr	r3, [pc, #148]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4926      	ldr	r1, [pc, #152]	@ (80036cc <SYSVIEW_AddTask+0xcc>)
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4921      	ldr	r1, [pc, #132]	@ (80036cc <SYSVIEW_AddTask+0xcc>)
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3304      	adds	r3, #4
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003658:	4b1a      	ldr	r3, [pc, #104]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	491b      	ldr	r1, [pc, #108]	@ (80036cc <SYSVIEW_AddTask+0xcc>)
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3308      	adds	r3, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4916      	ldr	r1, [pc, #88]	@ (80036cc <SYSVIEW_AddTask+0xcc>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	330c      	adds	r3, #12
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4910      	ldr	r1, [pc, #64]	@ (80036cc <SYSVIEW_AddTask+0xcc>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3310      	adds	r3, #16
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800369a:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	4a08      	ldr	r2, [pc, #32]	@ (80036c4 <SYSVIEW_AddTask+0xc4>)
 80036a2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f80e 	bl	80036d0 <SYSVIEW_SendTaskInfo>
 80036b4:	e000      	b.n	80036b8 <SYSVIEW_AddTask+0xb8>
    return;
 80036b6:	bf00      	nop

}
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	08007cb4 	.word	0x08007cb4
 80036c4:	20012e7c 	.word	0x20012e7c
 80036c8:	08007cbc 	.word	0x08007cbc
 80036cc:	20012ddc 	.word	0x20012ddc

080036d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036de:	f107 0310 	add.w	r3, r7, #16
 80036e2:	2218      	movs	r2, #24
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fa66 	bl	8007bb8 <memset>
  TaskInfo.TaskID     = TaskID;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003700:	f107 0310 	add.w	r3, r7, #16
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fc47 	bl	8004f98 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	@ 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <_DoInit+0xa0>)
 800371c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800371e:	22a8      	movs	r2, #168	@ 0xa8
 8003720:	2100      	movs	r1, #0
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f004 fa48 	bl	8007bb8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2203      	movs	r2, #3
 800372c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2203      	movs	r2, #3
 8003732:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <_DoInit+0xa4>)
 8003738:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <_DoInit+0xa8>)
 800373e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003746:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <_DoInit+0xa4>)
 800375e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <_DoInit+0xac>)
 8003764:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2210      	movs	r2, #16
 800376a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800377e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	e00c      	b.n	80037a2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1c3 030f 	rsb	r3, r3, #15
 800378e:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <_DoInit+0xb0>)
 8003790:	5cd1      	ldrb	r1, [r2, r3]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	460a      	mov	r2, r1
 800379a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3301      	adds	r3, #1
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d9ef      	bls.n	8003788 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80037a8:	f3bf 8f5f 	dmb	sy
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20012e80 	.word	0x20012e80
 80037b8:	08007d0c 	.word	0x08007d0c
 80037bc:	20012f28 	.word	0x20012f28
 80037c0:	20013328 	.word	0x20013328
 80037c4:	08007d90 	.word	0x08007d90

080037c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80037d4:	2300      	movs	r3, #0
 80037d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d905      	bls.n	80037f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f6:	e007      	b.n	8003808 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1acb      	subs	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3b01      	subs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003812:	4293      	cmp	r3, r2
 8003814:	bf28      	it	cs
 8003816:	4613      	movcs	r3, r2
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4293      	cmp	r3, r2
 8003820:	bf28      	it	cs
 8003822:	4613      	movcs	r3, r2
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f004 f9eb 	bl	8007c10 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	4413      	add	r3, r2
 8003840:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	4413      	add	r3, r2
 8003848:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	4413      	add	r3, r2
 8003858:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d101      	bne.n	8003868 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003868:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1b2      	bne.n	80037de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003878:	6a3b      	ldr	r3, [r7, #32]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d911      	bls.n	80038ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	6938      	ldr	r0, [r7, #16]
 80038b6:	f004 f9ab 	bl	8007c10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80038c8:	e01f      	b.n	800390a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f004 f997 	bl	8007c10 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4619      	mov	r1, r3
 80038fa:	6938      	ldr	r0, [r7, #16]
 80038fc:	f004 f988 	bl	8007c10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003900:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	60da      	str	r2, [r3, #12]
}
 800390a:	bf00      	nop
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	429a      	cmp	r2, r3
 800392c:	d808      	bhi.n	8003940 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad2      	subs	r2, r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	3b01      	subs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e004      	b.n	800394a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
  }
  return r;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	@ 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003964:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b53      	cmp	r3, #83	@ 0x53
 8003970:	d001      	beq.n	8003976 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003972:	f7ff fecf 	bl	8003714 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4a37      	ldr	r2, [pc, #220]	@ (8003a60 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003984:	4413      	add	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800399c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d92b      	bls.n	80039fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bf28      	it	cs
 80039b6:	4613      	movcs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	4413      	add	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ca:	f004 f921 	bl	8007c10 <memcpy>
    NumBytesRead += NumBytesRem;
 80039ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d101      	bne.n	80039fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bf28      	it	cs
 8003a0c:	4613      	movcs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d019      	beq.n	8003a4a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	4413      	add	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	6939      	ldr	r1, [r7, #16]
 8003a24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a26:	f004 f8f3 	bl	8007c10 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4413      	add	r3, r2
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3730      	adds	r7, #48	@ 0x30
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20012e80 	.word	0x20012e80

08003a64 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	@ 0x30
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a70:	4b3e      	ldr	r3, [pc, #248]	@ (8003b6c <SEGGER_RTT_ReadNoLock+0x108>)
 8003a72:	623b      	str	r3, [r7, #32]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b53      	cmp	r3, #83	@ 0x53
 8003a7c:	d001      	beq.n	8003a82 <SEGGER_RTT_ReadNoLock+0x1e>
 8003a7e:	f7ff fe49 	bl	8003714 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	3360      	adds	r3, #96	@ 0x60
 8003a8e:	4a37      	ldr	r2, [pc, #220]	@ (8003b6c <SEGGER_RTT_ReadNoLock+0x108>)
 8003a90:	4413      	add	r3, r2
 8003a92:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d92b      	bls.n	8003b08 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	bf28      	it	cs
 8003ac2:	4613      	movcs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	4413      	add	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6939      	ldr	r1, [r7, #16]
 8003ad4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ad6:	f004 f89b 	bl	8007c10 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4413      	add	r3, r2
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d101      	bne.n	8003b08 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf28      	it	cs
 8003b18:	4613      	movcs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	4413      	add	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6939      	ldr	r1, [r7, #16]
 8003b30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b32:	f004 f86d 	bl	8007c10 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b60:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3730      	adds	r7, #48	@ 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20012e80 	.word	0x20012e80

08003b70 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	3360      	adds	r3, #96	@ 0x60
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d029      	beq.n	8003bee <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d82e      	bhi.n	8003bfc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d013      	beq.n	8003bce <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003ba6:	e029      	b.n	8003bfc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f7ff feb2 	bl	8003912 <_GetAvailWriteSpace>
 8003bae:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d202      	bcs.n	8003bbe <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003bbc:	e021      	b.n	8003c02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff fe5b 	bl	8003882 <_WriteNoCheck>
    break;
 8003bcc:	e019      	b.n	8003c02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff fe9f 	bl	8003912 <_GetAvailWriteSpace>
 8003bd4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf28      	it	cs
 8003bde:	4613      	movcs	r3, r2
 8003be0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff fe4b 	bl	8003882 <_WriteNoCheck>
    break;
 8003bec:	e009      	b.n	8003c02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff fde8 	bl	80037c8 <_WriteBlocking>
 8003bf8:	61f8      	str	r0, [r7, #28]
    break;
 8003bfa:	e002      	b.n	8003c02 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
    break;
 8003c00:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c02:	69fb      	ldr	r3, [r7, #28]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20012e80 	.word	0x20012e80

08003c10 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b53      	cmp	r3, #83	@ 0x53
 8003c28:	d001      	beq.n	8003c2e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003c2a:	f7ff fd73 	bl	8003714 <_DoInit>
  SEGGER_RTT_LOCK();
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	f04f 0120 	mov.w	r1, #32
 8003c36:	f381 8811 	msr	BASEPRI, r1
 8003c3a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff ff95 	bl	8003b70 <SEGGER_RTT_WriteDownBufferNoLock>
 8003c46:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c4e:	697b      	ldr	r3, [r7, #20]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20012e80 	.word	0x20012e80

08003c5c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b53      	cmp	r3, #83	@ 0x53
 8003c76:	d001      	beq.n	8003c7c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c78:	f7ff fd4c 	bl	8003714 <_DoInit>
  SEGGER_RTT_LOCK();
 8003c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c80:	f04f 0120 	mov.w	r1, #32
 8003c84:	f381 8811 	msr	BASEPRI, r1
 8003c88:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c8a:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c8c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	dbeb      	blt.n	8003c92 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003cba:	e000      	b.n	8003cbe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003cbc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	da3f      	bge.n	8003d48 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	3304      	adds	r3, #4
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003cf2:	6939      	ldr	r1, [r7, #16]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	440b      	add	r3, r1
 8003d00:	3320      	adds	r3, #32
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	3328      	adds	r3, #40	@ 0x28
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d1a:	6939      	ldr	r1, [r7, #16]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	3324      	adds	r3, #36	@ 0x24
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	332c      	adds	r3, #44	@ 0x2c
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d42:	f3bf 8f5f 	dmb	sy
 8003d46:	e002      	b.n	8003d4e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d54:	69fb      	ldr	r3, [r7, #28]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20012e80 	.word	0x20012e80

08003d64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003d72:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b53      	cmp	r3, #83	@ 0x53
 8003d7e:	d001      	beq.n	8003d84 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d80:	f7ff fcc8 	bl	8003714 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d84:	4b1c      	ldr	r3, [pc, #112]	@ (8003df8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d86:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d82c      	bhi.n	8003de8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d92:	f04f 0120 	mov.w	r1, #32
 8003d96:	f381 8811 	msr	BASEPRI, r1
 8003d9a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	3360      	adds	r3, #96	@ 0x60
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dd8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de6:	e002      	b.n	8003dee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3728      	adds	r7, #40	@ 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20012e80 	.word	0x20012e80

08003dfc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	60fa      	str	r2, [r7, #12]
 8003e12:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b80      	cmp	r3, #128	@ 0x80
 8003e18:	d90a      	bls.n	8003e30 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e1e:	e007      	b.n	8003e30 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	1c53      	adds	r3, r2, #1
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	60f9      	str	r1, [r7, #12]
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1e5a      	subs	r2, r3, #1
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <_EncodeStr+0x46>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ee      	bne.n	8003e20 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3307      	adds	r3, #7
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e7a:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <_HandleIncomingPacket+0xd8>)
 8003e7c:	7e1b      	ldrb	r3, [r3, #24]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	1cfb      	adds	r3, r7, #3
 8003e82:	2201      	movs	r2, #1
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7ff fded 	bl	8003a64 <SEGGER_RTT_ReadNoLock>
 8003e8a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d057      	beq.n	8003f42 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	2b80      	cmp	r3, #128	@ 0x80
 8003e96:	d031      	beq.n	8003efc <_HandleIncomingPacket+0x88>
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	dc40      	bgt.n	8003f1e <_HandleIncomingPacket+0xaa>
 8003e9c:	2b07      	cmp	r3, #7
 8003e9e:	dc15      	bgt.n	8003ecc <_HandleIncomingPacket+0x58>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dd3c      	ble.n	8003f1e <_HandleIncomingPacket+0xaa>
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d839      	bhi.n	8003f1e <_HandleIncomingPacket+0xaa>
 8003eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <_HandleIncomingPacket+0x3c>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ed3 	.word	0x08003ed3
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003edf 	.word	0x08003edf
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003eeb 	.word	0x08003eeb
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ece:	d033      	beq.n	8003f38 <_HandleIncomingPacket+0xc4>
 8003ed0:	e025      	b.n	8003f1e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ed2:	f000 fee7 	bl	8004ca4 <SEGGER_SYSVIEW_Start>
      break;
 8003ed6:	e034      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ed8:	f000 ff9e 	bl	8004e18 <SEGGER_SYSVIEW_Stop>
      break;
 8003edc:	e031      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ede:	f001 f977 	bl	80051d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ee2:	e02e      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ee4:	f001 f93c 	bl	8005160 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ee8:	e02b      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003eea:	f000 ffbb 	bl	8004e64 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003eee:	e028      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ef0:	f001 fca8 	bl	8005844 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ef4:	e025      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ef6:	f001 fc87 	bl	8005808 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003efa:	e022      	b.n	8003f42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <_HandleIncomingPacket+0xd8>)
 8003efe:	7e1b      	ldrb	r3, [r3, #24]
 8003f00:	4618      	mov	r0, r3
 8003f02:	1cfb      	adds	r3, r7, #3
 8003f04:	2201      	movs	r2, #1
 8003f06:	4619      	mov	r1, r3
 8003f08:	f7ff fdac 	bl	8003a64 <SEGGER_RTT_ReadNoLock>
 8003f0c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fbec 	bl	80056f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f1c:	e00e      	b.n	8003f3c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da0c      	bge.n	8003f40 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f26:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <_HandleIncomingPacket+0xd8>)
 8003f28:	7e1b      	ldrb	r3, [r3, #24]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	1cfb      	adds	r3, r7, #3
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7ff fd97 	bl	8003a64 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f36:	e003      	b.n	8003f40 <_HandleIncomingPacket+0xcc>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <_HandleIncomingPacket+0xce>
      break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <_HandleIncomingPacket+0xce>
      break;
 8003f40:	bf00      	nop
    }
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20014340 	.word	0x20014340

08003f50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	@ 0x30
 8003f54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f56:	2301      	movs	r3, #1
 8003f58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f64:	4b31      	ldr	r3, [pc, #196]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f6a:	e00b      	b.n	8003f84 <_TrySendOverflowPacket+0x34>
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	09db      	lsrs	r3, r3, #7
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f88:	d8f0      	bhi.n	8003f6c <_TrySendOverflowPacket+0x1c>
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f9a:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <_TrySendOverflowPacket+0xe0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003fa0:	4b22      	ldr	r3, [pc, #136]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	e00b      	b.n	8003fcc <_TrySendOverflowPacket+0x7c>
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	6279      	str	r1, [r7, #36]	@ 0x24
 8003fbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	09db      	lsrs	r3, r3, #7
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fd0:	d8f0      	bhi.n	8003fb4 <_TrySendOverflowPacket+0x64>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fd8:	6a3a      	ldr	r2, [r7, #32]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc f90c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b06      	ldr	r3, [pc, #24]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e004      	b.n	8004020 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004016:	4b05      	ldr	r3, [pc, #20]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	4a03      	ldr	r2, [pc, #12]	@ (800402c <_TrySendOverflowPacket+0xdc>)
 800401e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004020:	693b      	ldr	r3, [r7, #16]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3730      	adds	r7, #48	@ 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20014340 	.word	0x20014340
 8004030:	e0001004 	.word	0xe0001004

08004034 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	@ 0x28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004040:	4b98      	ldr	r3, [pc, #608]	@ (80042a4 <_SendPacket+0x270>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d010      	beq.n	800406a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004048:	4b96      	ldr	r3, [pc, #600]	@ (80042a4 <_SendPacket+0x270>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 812d 	beq.w	80042ac <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004052:	4b94      	ldr	r3, [pc, #592]	@ (80042a4 <_SendPacket+0x270>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d109      	bne.n	800406e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800405a:	f7ff ff79 	bl	8003f50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800405e:	4b91      	ldr	r3, [pc, #580]	@ (80042a4 <_SendPacket+0x270>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	f040 8124 	bne.w	80042b0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004068:	e001      	b.n	800406e <_SendPacket+0x3a>
    goto Send;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <_SendPacket+0x3c>
Send:
 800406e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b1f      	cmp	r3, #31
 8004074:	d809      	bhi.n	800408a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004076:	4b8b      	ldr	r3, [pc, #556]	@ (80042a4 <_SendPacket+0x270>)
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 8115 	bne.w	80042b4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b17      	cmp	r3, #23
 800408e:	d807      	bhi.n	80040a0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e0c4      	b.n	800422a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80040ac:	d912      	bls.n	80040d4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	09da      	lsrs	r2, r3, #7
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	3a01      	subs	r2, #1
 80040c6:	60fa      	str	r2, [r7, #12]
 80040c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e006      	b.n	80040e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80040e6:	d807      	bhi.n	80040f8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e098      	b.n	800422a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040fe:	d212      	bcs.n	8004126 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	09da      	lsrs	r2, r3, #7
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	3a01      	subs	r2, #1
 8004118:	60fa      	str	r2, [r7, #12]
 800411a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e081      	b.n	800422a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800412c:	d21d      	bcs.n	800416a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0b9a      	lsrs	r2, r3, #14
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	b2db      	uxtb	r3, r3
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	3a01      	subs	r2, #1
 8004148:	60fa      	str	r2, [r7, #12]
 800414a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	3a01      	subs	r2, #1
 800415c:	60fa      	str	r2, [r7, #12]
 800415e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e05f      	b.n	800422a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004170:	d228      	bcs.n	80041c4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0d5a      	lsrs	r2, r3, #21
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b01      	subs	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0b9b      	lsrs	r3, r3, #14
 8004186:	b2db      	uxtb	r3, r3
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	3a01      	subs	r2, #1
 800418c:	60fa      	str	r2, [r7, #12]
 800418e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	b2db      	uxtb	r3, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	3a01      	subs	r2, #1
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	3a01      	subs	r2, #1
 80041b6:	60fa      	str	r2, [r7, #12]
 80041b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e032      	b.n	800422a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0f1a      	lsrs	r2, r3, #28
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	0d5b      	lsrs	r3, r3, #21
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	3a01      	subs	r2, #1
 80041de:	60fa      	str	r2, [r7, #12]
 80041e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0b9b      	lsrs	r3, r3, #14
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	3a01      	subs	r2, #1
 80041f4:	60fa      	str	r2, [r7, #12]
 80041f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	09db      	lsrs	r3, r3, #7
 8004204:	b2db      	uxtb	r3, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	3a01      	subs	r2, #1
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	3a01      	subs	r2, #1
 800421e:	60fa      	str	r2, [r7, #12]
 8004220:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800422a:	4b1f      	ldr	r3, [pc, #124]	@ (80042a8 <_SendPacket+0x274>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <_SendPacket+0x270>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	e00b      	b.n	800425c <_SendPacket+0x228>
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	6279      	str	r1, [r7, #36]	@ 0x24
 800424e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004260:	d8f0      	bhi.n	8004244 <_SendPacket+0x210>
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	627a      	str	r2, [r7, #36]	@ 0x24
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004272:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <_SendPacket+0x270>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	4618      	mov	r0, r3
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	461a      	mov	r2, r3
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	f7fb ffc5 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004286:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800428e:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <_SendPacket+0x270>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	60d3      	str	r3, [r2, #12]
 8004294:	e00f      	b.n	80042b6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004296:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <_SendPacket+0x270>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b01      	ldr	r3, [pc, #4]	@ (80042a4 <_SendPacket+0x270>)
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e008      	b.n	80042b6 <_SendPacket+0x282>
 80042a4:	20014340 	.word	0x20014340
 80042a8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <_SendPacket+0x282>
      goto SendDone;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <_SendPacket+0x282>
      goto SendDone;
 80042b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80042b6:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <_SendPacket+0x2d4>)
 80042b8:	7e1b      	ldrb	r3, [r3, #24]
 80042ba:	4619      	mov	r1, r3
 80042bc:	4a13      	ldr	r2, [pc, #76]	@ (800430c <_SendPacket+0x2d8>)
 80042be:	460b      	mov	r3, r1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	440b      	add	r3, r1
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	336c      	adds	r3, #108	@ 0x6c
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <_SendPacket+0x2d4>)
 80042ce:	7e1b      	ldrb	r3, [r3, #24]
 80042d0:	4618      	mov	r0, r3
 80042d2:	490e      	ldr	r1, [pc, #56]	@ (800430c <_SendPacket+0x2d8>)
 80042d4:	4603      	mov	r3, r0
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4403      	add	r3, r0
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3370      	adds	r3, #112	@ 0x70
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d00b      	beq.n	80042fe <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <_SendPacket+0x2d4>)
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <_SendPacket+0x2d4>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80042f4:	f7ff fdbe 	bl	8003e74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <_SendPacket+0x2d4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	@ 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20014340 	.word	0x20014340
 800430c:	20012e80 	.word	0x20012e80

08004310 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3301      	adds	r3, #1
 8004326:	2b80      	cmp	r3, #128	@ 0x80
 8004328:	d80a      	bhi.n	8004340 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6051      	str	r1, [r2, #4]
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b80      	cmp	r3, #128	@ 0x80
 8004346:	d15a      	bne.n	80043fe <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	e00b      	b.n	8004382 <_StoreChar+0x72>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	1c59      	adds	r1, r3, #1
 8004372:	6279      	str	r1, [r7, #36]	@ 0x24
 8004374:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	09db      	lsrs	r3, r3, #7
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b7f      	cmp	r3, #127	@ 0x7f
 8004386:	d8f0      	bhi.n	800436a <_StoreChar+0x5a>
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	627a      	str	r2, [r7, #36]	@ 0x24
 800438e:	6a3a      	ldr	r2, [r7, #32]
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e00b      	b.n	80043ba <_StoreChar+0xaa>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	61f9      	str	r1, [r7, #28]
 80043ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80043be:	d8f0      	bhi.n	80043a2 <_StoreChar+0x92>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	61fa      	str	r2, [r7, #28]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	221a      	movs	r2, #26
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fe2b 	bl	8004034 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fd3a 	bl	8003e5c <_PreparePacket>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]
  }
}
 80043fe:	bf00      	nop
 8004400:	3728      	adds	r7, #40	@ 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800441a:	2301      	movs	r3, #1
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004422:	e007      	b.n	8004434 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	623b      	str	r3, [r7, #32]
    Width++;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3301      	adds	r3, #1
 8004432:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d2f3      	bcs.n	8004424 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	429a      	cmp	r2, r3
 8004442:	d901      	bls.n	8004448 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d000      	beq.n	8004454 <_PrintUnsigned+0x4c>
 8004452:	e01f      	b.n	8004494 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01c      	beq.n	8004494 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <_PrintUnsigned+0x68>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <_PrintUnsigned+0x68>
        c = '0';
 800446a:	2330      	movs	r3, #48	@ 0x30
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e001      	b.n	8004474 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004470:	2320      	movs	r3, #32
 8004472:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004474:	e007      	b.n	8004486 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	3b01      	subs	r3, #1
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800447c:	7efb      	ldrb	r3, [r7, #27]
 800447e:	4619      	mov	r1, r3
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff45 	bl	8004310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <_PrintUnsigned+0x8c>
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	429a      	cmp	r2, r3
 8004492:	d3f0      	bcc.n	8004476 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d903      	bls.n	80044a2 <_PrintUnsigned+0x9a>
      NumDigits--;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	e009      	b.n	80044b6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d200      	bcs.n	80044b6 <_PrintUnsigned+0xae>
        break;
 80044b4:	e005      	b.n	80044c2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044c0:	e7e8      	b.n	8004494 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80044da:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <_PrintUnsigned+0x128>)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ff13 	bl	8004310 <_StoreChar>
    Digit /= Base;
 80044ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80044fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d011      	beq.n	8004528 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800450a:	e006      	b.n	800451a <_PrintUnsigned+0x112>
        FieldWidth--;
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	3b01      	subs	r3, #1
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8004512:	2120      	movs	r1, #32
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff fefb 	bl	8004310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <_PrintUnsigned+0x120>
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	429a      	cmp	r2, r3
 8004526:	d3f1      	bcc.n	800450c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004528:	bf00      	nop
 800452a:	3728      	adds	r7, #40	@ 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08007db0 	.word	0x08007db0

08004534 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	bfb8      	it	lt
 8004548:	425b      	neglt	r3, r3
 800454a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004550:	e007      	b.n	8004562 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	fb92 f3f3 	sdiv	r3, r2, r3
 800455a:	613b      	str	r3, [r7, #16]
    Width++;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	3301      	adds	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	429a      	cmp	r2, r3
 8004568:	daf3      	bge.n	8004552 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	429a      	cmp	r2, r3
 8004570:	d901      	bls.n	8004576 <_PrintInt+0x42>
    Width = NumDigits;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <_PrintInt+0x5e>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db04      	blt.n	800458c <_PrintInt+0x58>
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <_PrintInt+0x5e>
    FieldWidth--;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	3b01      	subs	r3, #1
 8004590:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <_PrintInt+0x6e>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <_PrintInt+0x9c>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045b2:	e006      	b.n	80045c2 <_PrintInt+0x8e>
        FieldWidth--;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80045ba:	2120      	movs	r1, #32
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fea7 	bl	8004310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <_PrintInt+0x9c>
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3f1      	bcc.n	80045b4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da07      	bge.n	80045e6 <_PrintInt+0xb2>
    v = -v;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	425b      	negs	r3, r3
 80045da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80045dc:	212d      	movs	r1, #45	@ 0x2d
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fe96 	bl	8004310 <_StoreChar>
 80045e4:	e008      	b.n	80045f8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80045f0:	212b      	movs	r1, #43	@ 0x2b
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fe8c 	bl	8004310 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d019      	beq.n	8004636 <_PrintInt+0x102>
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d114      	bne.n	8004636 <_PrintInt+0x102>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d111      	bne.n	8004636 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004618:	e006      	b.n	8004628 <_PrintInt+0xf4>
        FieldWidth--;
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	3b01      	subs	r3, #1
 800461e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004620:	2130      	movs	r1, #48	@ 0x30
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fe74 	bl	8004310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <_PrintInt+0x102>
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3f1      	bcc.n	800461a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fedf 	bl	8004408 <_PrintUnsigned>
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b098      	sub	sp, #96	@ 0x60
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004660:	f3ef 8311 	mrs	r3, BASEPRI
 8004664:	f04f 0120 	mov.w	r1, #32
 8004668:	f381 8811 	msr	BASEPRI, r1
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466e:	48b7      	ldr	r0, [pc, #732]	@ (800494c <_VPrintTarget+0x2f8>)
 8004670:	f7ff fbf4 	bl	8003e5c <_PreparePacket>
 8004674:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004676:	4bb5      	ldr	r3, [pc, #724]	@ (800494c <_VPrintTarget+0x2f8>)
 8004678:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800469a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 81a8 	beq.w	80049f4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80046a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046a8:	2b25      	cmp	r3, #37	@ 0x25
 80046aa:	f040 8195 	bne.w	80049d8 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80046ae:	2300      	movs	r3, #0
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80046be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046c2:	3b23      	subs	r3, #35	@ 0x23
 80046c4:	2b0d      	cmp	r3, #13
 80046c6:	d83f      	bhi.n	8004748 <_VPrintTarget+0xf4>
 80046c8:	a201      	add	r2, pc, #4	@ (adr r2, 80046d0 <_VPrintTarget+0x7c>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	08004739 	.word	0x08004739
 80046d4:	08004749 	.word	0x08004749
 80046d8:	08004749 	.word	0x08004749
 80046dc:	08004749 	.word	0x08004749
 80046e0:	08004749 	.word	0x08004749
 80046e4:	08004749 	.word	0x08004749
 80046e8:	08004749 	.word	0x08004749
 80046ec:	08004749 	.word	0x08004749
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004749 	.word	0x08004749
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004749 	.word	0x08004749
 8004700:	08004749 	.word	0x08004749
 8004704:	08004719 	.word	0x08004719
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e01a      	b.n	800474e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800471a:	f043 0302 	orr.w	r3, r3, #2
 800471e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e012      	b.n	800474e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e00a      	b.n	800474e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473a:	f043 0308 	orr.w	r3, r3, #8
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004748:	2300      	movs	r3, #0
 800474a:	653b      	str	r3, [r7, #80]	@ 0x50
 800474c:	bf00      	nop
        }
      } while (v);
 800474e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1b0      	bne.n	80046b6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004754:	2300      	movs	r3, #0
 8004756:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004764:	2b2f      	cmp	r3, #47	@ 0x2f
 8004766:	d912      	bls.n	800478e <_VPrintTarget+0x13a>
 8004768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800476c:	2b39      	cmp	r3, #57	@ 0x39
 800476e:	d80e      	bhi.n	800478e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	461a      	mov	r2, r3
 8004782:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004786:	4413      	add	r3, r2
 8004788:	3b30      	subs	r3, #48	@ 0x30
 800478a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800478c:	e7e4      	b.n	8004758 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800478e:	2300      	movs	r3, #0
 8004790:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800479a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800479e:	2b2e      	cmp	r3, #46	@ 0x2e
 80047a0:	d11d      	bne.n	80047de <_VPrintTarget+0x18a>
        sFormat++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80047b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80047b6:	d912      	bls.n	80047de <_VPrintTarget+0x18a>
 80047b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047bc:	2b39      	cmp	r3, #57	@ 0x39
 80047be:	d80e      	bhi.n	80047de <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80047c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	461a      	mov	r2, r3
 80047d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047d6:	4413      	add	r3, r2
 80047d8:	3b30      	subs	r3, #48	@ 0x30
 80047da:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80047dc:	e7e4      	b.n	80047a8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80047e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80047ec:	d003      	beq.n	80047f6 <_VPrintTarget+0x1a2>
 80047ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047f2:	2b68      	cmp	r3, #104	@ 0x68
 80047f4:	d107      	bne.n	8004806 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3301      	adds	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004804:	e7ef      	b.n	80047e6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800480a:	2b25      	cmp	r3, #37	@ 0x25
 800480c:	f000 80d8 	beq.w	80049c0 <_VPrintTarget+0x36c>
 8004810:	2b25      	cmp	r3, #37	@ 0x25
 8004812:	f2c0 80dc 	blt.w	80049ce <_VPrintTarget+0x37a>
 8004816:	2b78      	cmp	r3, #120	@ 0x78
 8004818:	f300 80d9 	bgt.w	80049ce <_VPrintTarget+0x37a>
 800481c:	2b58      	cmp	r3, #88	@ 0x58
 800481e:	f2c0 80d6 	blt.w	80049ce <_VPrintTarget+0x37a>
 8004822:	3b58      	subs	r3, #88	@ 0x58
 8004824:	2b20      	cmp	r3, #32
 8004826:	f200 80d2 	bhi.w	80049ce <_VPrintTarget+0x37a>
 800482a:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <_VPrintTarget+0x1dc>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004927 	.word	0x08004927
 8004834:	080049cf 	.word	0x080049cf
 8004838:	080049cf 	.word	0x080049cf
 800483c:	080049cf 	.word	0x080049cf
 8004840:	080049cf 	.word	0x080049cf
 8004844:	080049cf 	.word	0x080049cf
 8004848:	080049cf 	.word	0x080049cf
 800484c:	080049cf 	.word	0x080049cf
 8004850:	080049cf 	.word	0x080049cf
 8004854:	080049cf 	.word	0x080049cf
 8004858:	080049cf 	.word	0x080049cf
 800485c:	080048b5 	.word	0x080048b5
 8004860:	080048db 	.word	0x080048db
 8004864:	080049cf 	.word	0x080049cf
 8004868:	080049cf 	.word	0x080049cf
 800486c:	080049cf 	.word	0x080049cf
 8004870:	080049cf 	.word	0x080049cf
 8004874:	080049cf 	.word	0x080049cf
 8004878:	080049cf 	.word	0x080049cf
 800487c:	080049cf 	.word	0x080049cf
 8004880:	080049cf 	.word	0x080049cf
 8004884:	080049cf 	.word	0x080049cf
 8004888:	080049cf 	.word	0x080049cf
 800488c:	080049cf 	.word	0x080049cf
 8004890:	0800499b 	.word	0x0800499b
 8004894:	080049cf 	.word	0x080049cf
 8004898:	080049cf 	.word	0x080049cf
 800489c:	08004951 	.word	0x08004951
 80048a0:	080049cf 	.word	0x080049cf
 80048a4:	08004901 	.word	0x08004901
 80048a8:	080049cf 	.word	0x080049cf
 80048ac:	080049cf 	.word	0x080049cf
 80048b0:	08004927 	.word	0x08004927
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80048c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80048c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fd1c 	bl	8004310 <_StoreChar>
        break;
 80048d8:	e07a      	b.n	80049d0 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	1d19      	adds	r1, r3, #4
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6011      	str	r1, [r2, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80048e8:	f107 0010 	add.w	r0, r7, #16
 80048ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f6:	220a      	movs	r2, #10
 80048f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048fa:	f7ff fe1b 	bl	8004534 <_PrintInt>
        break;
 80048fe:	e067      	b.n	80049d0 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1d19      	adds	r1, r3, #4
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6011      	str	r1, [r2, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800490e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004910:	f107 0010 	add.w	r0, r7, #16
 8004914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491e:	220a      	movs	r2, #10
 8004920:	f7ff fd72 	bl	8004408 <_PrintUnsigned>
        break;
 8004924:	e054      	b.n	80049d0 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1d19      	adds	r1, r3, #4
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6011      	str	r1, [r2, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004934:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004936:	f107 0010 	add.w	r0, r7, #16
 800493a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004944:	2210      	movs	r2, #16
 8004946:	f7ff fd5f 	bl	8004408 <_PrintUnsigned>
        break;
 800494a:	e041      	b.n	80049d0 <_VPrintTarget+0x37c>
 800494c:	20014370 	.word	0x20014370
      case 's':
        s = va_arg(*pParamList, const char*);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	1d19      	adds	r1, r3, #4
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800495e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <_VPrintTarget+0x314>
          s = "(null)";
 8004964:	4b4a      	ldr	r3, [pc, #296]	@ (8004a90 <_VPrintTarget+0x43c>)
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004972:	3301      	adds	r3, #1
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004976:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800497e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	4611      	mov	r1, r2
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fcc1 	bl	8004310 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b7f      	cmp	r3, #127	@ 0x7f
 8004992:	d9e9      	bls.n	8004968 <_VPrintTarget+0x314>
        break;
 8004994:	e01c      	b.n	80049d0 <_VPrintTarget+0x37c>
            break;
 8004996:	bf00      	nop
        break;
 8004998:	e01a      	b.n	80049d0 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1d19      	adds	r1, r3, #4
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6011      	str	r1, [r2, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80049a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049aa:	f107 0010 	add.w	r0, r7, #16
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	2308      	movs	r3, #8
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2308      	movs	r3, #8
 80049b8:	2210      	movs	r2, #16
 80049ba:	f7ff fd25 	bl	8004408 <_PrintUnsigned>
        break;
 80049be:	e007      	b.n	80049d0 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	2125      	movs	r1, #37	@ 0x25
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fca2 	bl	8004310 <_StoreChar>
        break;
 80049cc:	e000      	b.n	80049d0 <_VPrintTarget+0x37c>
      default:
        break;
 80049ce:	bf00      	nop
      }
      sFormat++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e007      	b.n	80049e8 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80049d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fc94 	bl	8004310 <_StoreChar>
    }
  } while (*sFormat);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f ae4d 	bne.w	800468c <_VPrintTarget+0x38>
 80049f2:	e000      	b.n	80049f6 <_VPrintTarget+0x3a2>
      break;
 80049f4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d041      	beq.n	8004a80 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a0c:	e00b      	b.n	8004a26 <_VPrintTarget+0x3d2>
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a14:	1c59      	adds	r1, r3, #1
 8004a16:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004a18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	09db      	lsrs	r3, r3, #7
 8004a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a2a:	d8f0      	bhi.n	8004a0e <_VPrintTarget+0x3ba>
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a40:	2300      	movs	r3, #0
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a44:	e00b      	b.n	8004a5e <_VPrintTarget+0x40a>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004a50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a62:	d8f0      	bhi.n	8004a46 <_VPrintTarget+0x3f2>
 8004a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a72:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6979      	ldr	r1, [r7, #20]
 8004a78:	221a      	movs	r2, #26
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fada 	bl	8004034 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a82:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004a86:	bf00      	nop
 8004a88:	3758      	adds	r7, #88	@ 0x58
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	08007d18 	.word	0x08007d18

08004a94 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004aa8:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x74>)
 8004aaa:	4818      	ldr	r0, [pc, #96]	@ (8004b0c <SEGGER_SYSVIEW_Init+0x78>)
 8004aac:	f7ff f8d6 	bl	8003c5c <SEGGER_RTT_AllocUpBuffer>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ab6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ab8:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aba:	785a      	ldrb	r2, [r3, #1]
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004abe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ac2:	7e1b      	ldrb	r3, [r3, #24]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2308      	movs	r3, #8
 8004acc:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <SEGGER_SYSVIEW_Init+0x80>)
 8004ace:	490f      	ldr	r1, [pc, #60]	@ (8004b0c <SEGGER_SYSVIEW_Init+0x78>)
 8004ad0:	f7ff f948 	bl	8003d64 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ada:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <SEGGER_SYSVIEW_Init+0x84>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ae0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ae8:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004aee:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004af4:	4a06      	ldr	r2, [pc, #24]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x7c>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20013338 	.word	0x20013338
 8004b0c:	08007d20 	.word	0x08007d20
 8004b10:	20014340 	.word	0x20014340
 8004b14:	20014338 	.word	0x20014338
 8004b18:	e0001004 	.word	0xe0001004

08004b1c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b24:	4a04      	ldr	r2, [pc, #16]	@ (8004b38 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6113      	str	r3, [r2, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20014340 	.word	0x20014340

08004b3c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b44:	f3ef 8311 	mrs	r3, BASEPRI
 8004b48:	f04f 0120 	mov.w	r1, #32
 8004b4c:	f381 8811 	msr	BASEPRI, r1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4808      	ldr	r0, [pc, #32]	@ (8004b74 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b54:	f7ff f982 	bl	8003e5c <_PreparePacket>
 8004b58:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	68b8      	ldr	r0, [r7, #8]
 8004b60:	f7ff fa68 	bl	8004034 <_SendPacket>
  RECORD_END();
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f383 8811 	msr	BASEPRI, r3
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20014370 	.word	0x20014370

08004b78 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	f04f 0120 	mov.w	r1, #32
 8004b8a:	f381 8811 	msr	BASEPRI, r1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	4816      	ldr	r0, [pc, #88]	@ (8004bec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b92:	f7ff f963 	bl	8003e5c <_PreparePacket>
 8004b96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e00b      	b.n	8004bbe <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	61f9      	str	r1, [r7, #28]
 8004bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	09db      	lsrs	r3, r3, #7
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc2:	d8f0      	bhi.n	8004ba6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6938      	ldr	r0, [r7, #16]
 8004bda:	f7ff fa2b 	bl	8004034 <_SendPacket>
  RECORD_END();
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f383 8811 	msr	BASEPRI, r3
}
 8004be4:	bf00      	nop
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20014370 	.word	0x20014370

08004bf0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	@ 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004c00:	f04f 0120 	mov.w	r1, #32
 8004c04:	f381 8811 	msr	BASEPRI, r1
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	4825      	ldr	r0, [pc, #148]	@ (8004ca0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c0c:	f7ff f926 	bl	8003e5c <_PreparePacket>
 8004c10:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c1e:	e00b      	b.n	8004c38 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	09db      	lsrs	r3, r3, #7
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c3c:	d8f0      	bhi.n	8004c20 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	623b      	str	r3, [r7, #32]
 8004c56:	e00b      	b.n	8004c70 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	09db      	lsrs	r3, r3, #7
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c74:	d8f0      	bhi.n	8004c58 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	6979      	ldr	r1, [r7, #20]
 8004c8a:	69b8      	ldr	r0, [r7, #24]
 8004c8c:	f7ff f9d2 	bl	8004034 <_SendPacket>
  RECORD_END();
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f383 8811 	msr	BASEPRI, r3
}
 8004c96:	bf00      	nop
 8004c98:	3730      	adds	r7, #48	@ 0x30
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20014370 	.word	0x20014370

08004ca4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	@ 0x30
 8004ca8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004caa:	4b58      	ldr	r3, [pc, #352]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb4:	f04f 0120 	mov.w	r1, #32
 8004cb8:	f381 8811 	msr	BASEPRI, r1
 8004cbc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004cbe:	4b53      	ldr	r3, [pc, #332]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	220a      	movs	r2, #10
 8004cc4:	4952      	ldr	r1, [pc, #328]	@ (8004e10 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fb faa2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004cd2:	200a      	movs	r0, #10
 8004cd4:	f7ff ff32 	bl	8004b3c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cdc:	f04f 0120 	mov.w	r1, #32
 8004ce0:	f381 8811 	msr	BASEPRI, r1
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	484b      	ldr	r0, [pc, #300]	@ (8004e14 <SEGGER_SYSVIEW_Start+0x170>)
 8004ce8:	f7ff f8b8 	bl	8003e5c <_PreparePacket>
 8004cec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf6:	4b45      	ldr	r3, [pc, #276]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cfc:	e00b      	b.n	8004d16 <SEGGER_SYSVIEW_Start+0x72>
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d1a:	d8f0      	bhi.n	8004cfe <SEGGER_SYSVIEW_Start+0x5a>
 8004d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d30:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	e00b      	b.n	8004d50 <SEGGER_SYSVIEW_Start+0xac>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	09db      	lsrs	r3, r3, #7
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d54:	d8f0      	bhi.n	8004d38 <SEGGER_SYSVIEW_Start+0x94>
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	4b28      	ldr	r3, [pc, #160]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e00b      	b.n	8004d8a <SEGGER_SYSVIEW_Start+0xe6>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	1c59      	adds	r1, r3, #1
 8004d7a:	61f9      	str	r1, [r7, #28]
 8004d7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	09db      	lsrs	r3, r3, #7
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d8e:	d8f0      	bhi.n	8004d72 <SEGGER_SYSVIEW_Start+0xce>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	61fa      	str	r2, [r7, #28]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e00b      	b.n	8004dc2 <SEGGER_SYSVIEW_Start+0x11e>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1c59      	adds	r1, r3, #1
 8004db2:	6179      	str	r1, [r7, #20]
 8004db4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	09db      	lsrs	r3, r3, #7
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dc6:	d8f0      	bhi.n	8004daa <SEGGER_SYSVIEW_Start+0x106>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	617a      	str	r2, [r7, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004dd8:	2218      	movs	r2, #24
 8004dda:	6839      	ldr	r1, [r7, #0]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff f929 	bl	8004034 <_SendPacket>
      RECORD_END();
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004de8:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x168>)
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004df6:	f000 f9eb 	bl	80051d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004dfa:	f000 f9b1 	bl	8005160 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004dfe:	f000 fd21 	bl	8005844 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004e02:	bf00      	nop
 8004e04:	3730      	adds	r7, #48	@ 0x30
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20014340 	.word	0x20014340
 8004e10:	08007da4 	.word	0x08007da4
 8004e14:	20014370 	.word	0x20014370

08004e18 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e22:	f04f 0120 	mov.w	r1, #32
 8004e26:	f381 8811 	msr	BASEPRI, r1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	480b      	ldr	r0, [pc, #44]	@ (8004e5c <SEGGER_SYSVIEW_Stop+0x44>)
 8004e2e:	f7ff f815 	bl	8003e5c <_PreparePacket>
 8004e32:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e34:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e3c:	220b      	movs	r2, #11
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6838      	ldr	r0, [r7, #0]
 8004e42:	f7ff f8f7 	bl	8004034 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20014370 	.word	0x20014370
 8004e60:	20014340 	.word	0x20014340

08004e64 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08c      	sub	sp, #48	@ 0x30
 8004e68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e6e:	f04f 0120 	mov.w	r1, #32
 8004e72:	f381 8811 	msr	BASEPRI, r1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	4845      	ldr	r0, [pc, #276]	@ (8004f90 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e7a:	f7fe ffef 	bl	8003e5c <_PreparePacket>
 8004e7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e88:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	e00b      	b.n	8004ea8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	09db      	lsrs	r3, r3, #7
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eac:	d8f0      	bhi.n	8004e90 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec2:	4b34      	ldr	r3, [pc, #208]	@ (8004f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	e00b      	b.n	8004ee2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ed4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	09db      	lsrs	r3, r3, #7
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ee6:	d8f0      	bhi.n	8004eca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e00b      	b.n	8004f1c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	61f9      	str	r1, [r7, #28]
 8004f0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	09db      	lsrs	r3, r3, #7
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f20:	d8f0      	bhi.n	8004f04 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	61fa      	str	r2, [r7, #28]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e00b      	b.n	8004f54 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	6179      	str	r1, [r7, #20]
 8004f46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	09db      	lsrs	r3, r3, #7
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f58:	d8f0      	bhi.n	8004f3c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	617a      	str	r2, [r7, #20]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f6a:	2218      	movs	r2, #24
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f7ff f860 	bl	8004034 <_SendPacket>
  RECORD_END();
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f7a:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f82:	4b04      	ldr	r3, [pc, #16]	@ (8004f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	4798      	blx	r3
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3730      	adds	r7, #48	@ 0x30
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20014370 	.word	0x20014370
 8004f94:	20014340 	.word	0x20014340

08004f98 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b092      	sub	sp, #72	@ 0x48
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa4:	f04f 0120 	mov.w	r1, #32
 8004fa8:	f381 8811 	msr	BASEPRI, r1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	486a      	ldr	r0, [pc, #424]	@ (8005158 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004fb0:	f7fe ff54 	bl	8003e5c <_PreparePacket>
 8004fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b66      	ldr	r3, [pc, #408]	@ (800515c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fca:	e00b      	b.n	8004fe4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	6479      	str	r1, [r7, #68]	@ 0x44
 8004fd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe8:	d8f0      	bhi.n	8004fcc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005004:	e00b      	b.n	800501e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	b2da      	uxtb	r2, r3
 800500a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	09db      	lsrs	r3, r3, #7
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	2b7f      	cmp	r3, #127	@ 0x7f
 8005022:	d8f0      	bhi.n	8005006 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800502a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005032:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	4619      	mov	r1, r3
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7fe fedd 	bl	8003dfc <_EncodeStr>
 8005042:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005044:	2209      	movs	r2, #9
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	6938      	ldr	r0, [r7, #16]
 800504a:	f7fe fff3 	bl	8004034 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
 8005062:	e00b      	b.n	800507c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	6379      	str	r1, [r7, #52]	@ 0x34
 800506e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	09db      	lsrs	r3, r3, #7
 800507a:	633b      	str	r3, [r7, #48]	@ 0x30
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005080:	d8f0      	bhi.n	8005064 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	637a      	str	r2, [r7, #52]	@ 0x34
 8005088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509c:	e00b      	b.n	80050b6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	1c59      	adds	r1, r3, #1
 80050a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80050a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	09db      	lsrs	r3, r3, #7
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ba:	d8f0      	bhi.n	800509e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80050bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	e00b      	b.n	80050f0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80050e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	09db      	lsrs	r3, r3, #7
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050f4:	d8f0      	bhi.n	80050d8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80050fc:	6a3a      	ldr	r2, [r7, #32]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e00b      	b.n	800512a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	61f9      	str	r1, [r7, #28]
 800511c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b7f      	cmp	r3, #127	@ 0x7f
 800512e:	d8f0      	bhi.n	8005112 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	61fa      	str	r2, [r7, #28]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005140:	2215      	movs	r2, #21
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	6938      	ldr	r0, [r7, #16]
 8005146:	f7fe ff75 	bl	8004034 <_SendPacket>
  RECORD_END();
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f383 8811 	msr	BASEPRI, r3
}
 8005150:	bf00      	nop
 8005152:	3748      	adds	r7, #72	@ 0x48
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20014370 	.word	0x20014370
 800515c:	20014340 	.word	0x20014340

08005160 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005176:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4798      	blx	r3
  }
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20014340 	.word	0x20014340

08005188 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005190:	f3ef 8311 	mrs	r3, BASEPRI
 8005194:	f04f 0120 	mov.w	r1, #32
 8005198:	f381 8811 	msr	BASEPRI, r1
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	480b      	ldr	r0, [pc, #44]	@ (80051cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80051a0:	f7fe fe5c 	bl	8003e5c <_PreparePacket>
 80051a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f7fe fe26 	bl	8003dfc <_EncodeStr>
 80051b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80051b2:	220e      	movs	r2, #14
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f7fe ff3c 	bl	8004034 <_SendPacket>
  RECORD_END();
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f383 8811 	msr	BASEPRI, r3
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20014370 	.word	0x20014370

080051d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80051d6:	4b15      	ldr	r3, [pc, #84]	@ (800522c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01a      	beq.n	8005214 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80051de:	4b13      	ldr	r3, [pc, #76]	@ (800522c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80051e8:	4b10      	ldr	r3, [pc, #64]	@ (800522c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4798      	blx	r3
 80051f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80051f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	000a      	movs	r2, r1
 8005204:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005206:	4613      	mov	r3, r2
 8005208:	461a      	mov	r2, r3
 800520a:	4621      	mov	r1, r4
 800520c:	200d      	movs	r0, #13
 800520e:	f7ff fcef 	bl	8004bf0 <SEGGER_SYSVIEW_RecordU32x2>
 8005212:	e006      	b.n	8005222 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	200c      	movs	r0, #12
 800521c:	f7ff fcac 	bl	8004b78 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}
 800522a:	bf00      	nop
 800522c:	20014340 	.word	0x20014340
 8005230:	e0001004 	.word	0xe0001004

08005234 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800523a:	f3ef 8311 	mrs	r3, BASEPRI
 800523e:	f04f 0120 	mov.w	r1, #32
 8005242:	f381 8811 	msr	BASEPRI, r1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4819      	ldr	r0, [pc, #100]	@ (80052b0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800524a:	f7fe fe07 	bl	8003e5c <_PreparePacket>
 800524e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005254:	4b17      	ldr	r3, [pc, #92]	@ (80052b4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	6179      	str	r1, [r7, #20]
 8005272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b7f      	cmp	r3, #127	@ 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	617a      	str	r2, [r7, #20]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005296:	2202      	movs	r2, #2
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	68b8      	ldr	r0, [r7, #8]
 800529c:	f7fe feca 	bl	8004034 <_SendPacket>
  RECORD_END();
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f383 8811 	msr	BASEPRI, r3
}
 80052a6:	bf00      	nop
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20014370 	.word	0x20014370
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052be:	f3ef 8311 	mrs	r3, BASEPRI
 80052c2:	f04f 0120 	mov.w	r1, #32
 80052c6:	f381 8811 	msr	BASEPRI, r1
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	4807      	ldr	r0, [pc, #28]	@ (80052ec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80052ce:	f7fe fdc5 	bl	8003e5c <_PreparePacket>
 80052d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80052d4:	2203      	movs	r2, #3
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6838      	ldr	r0, [r7, #0]
 80052da:	f7fe feab 	bl	8004034 <_SendPacket>
  RECORD_END();
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f383 8811 	msr	BASEPRI, r3
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20014370 	.word	0x20014370

080052f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052f6:	f3ef 8311 	mrs	r3, BASEPRI
 80052fa:	f04f 0120 	mov.w	r1, #32
 80052fe:	f381 8811 	msr	BASEPRI, r1
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	4807      	ldr	r0, [pc, #28]	@ (8005324 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005306:	f7fe fda9 	bl	8003e5c <_PreparePacket>
 800530a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800530c:	2212      	movs	r2, #18
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	6838      	ldr	r0, [r7, #0]
 8005312:	f7fe fe8f 	bl	8004034 <_SendPacket>
  RECORD_END();
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f383 8811 	msr	BASEPRI, r3
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20014370 	.word	0x20014370

08005328 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	f04f 0120 	mov.w	r1, #32
 8005338:	f381 8811 	msr	BASEPRI, r1
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	4817      	ldr	r0, [pc, #92]	@ (800539c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005340:	f7fe fd8c 	bl	8003e5c <_PreparePacket>
 8005344:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e00b      	b.n	800536c <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	61f9      	str	r1, [r7, #28]
 800535e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	09db      	lsrs	r3, r3, #7
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005370:	d8f0      	bhi.n	8005354 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	61fa      	str	r2, [r7, #28]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005382:	221c      	movs	r2, #28
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f7fe fe54 	bl	8004034 <_SendPacket>
  RECORD_END();
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f383 8811 	msr	BASEPRI, r3
}
 8005392:	bf00      	nop
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20014370 	.word	0x20014370

080053a0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	@ 0x28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053aa:	f3ef 8311 	mrs	r3, BASEPRI
 80053ae:	f04f 0120 	mov.w	r1, #32
 80053b2:	f381 8811 	msr	BASEPRI, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	4824      	ldr	r0, [pc, #144]	@ (800544c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80053ba:	f7fe fd4f 	bl	8003e5c <_PreparePacket>
 80053be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	e00b      	b.n	80053e6 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80053d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ea:	d8f0      	bhi.n	80053ce <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80053f2:	6a3a      	ldr	r2, [r7, #32]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e00b      	b.n	800541e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	61f9      	str	r1, [r7, #28]
 8005410:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b7f      	cmp	r3, #127	@ 0x7f
 8005422:	d8f0      	bhi.n	8005406 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	61fa      	str	r2, [r7, #28]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005434:	221c      	movs	r2, #28
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	6938      	ldr	r0, [r7, #16]
 800543a:	f7fe fdfb 	bl	8004034 <_SendPacket>
  RECORD_END();
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f383 8811 	msr	BASEPRI, r3
}
 8005444:	bf00      	nop
 8005446:	3728      	adds	r7, #40	@ 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20014370 	.word	0x20014370

08005450 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005456:	f3ef 8311 	mrs	r3, BASEPRI
 800545a:	f04f 0120 	mov.w	r1, #32
 800545e:	f381 8811 	msr	BASEPRI, r1
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	4807      	ldr	r0, [pc, #28]	@ (8005484 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005466:	f7fe fcf9 	bl	8003e5c <_PreparePacket>
 800546a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800546c:	2211      	movs	r2, #17
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6838      	ldr	r0, [r7, #0]
 8005472:	f7fe fddf 	bl	8004034 <_SendPacket>
  RECORD_END();
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f383 8811 	msr	BASEPRI, r3
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20014370 	.word	0x20014370

08005488 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005490:	f3ef 8311 	mrs	r3, BASEPRI
 8005494:	f04f 0120 	mov.w	r1, #32
 8005498:	f381 8811 	msr	BASEPRI, r1
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	4819      	ldr	r0, [pc, #100]	@ (8005504 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054a0:	f7fe fcdc 	bl	8003e5c <_PreparePacket>
 80054a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e00b      	b.n	80054d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	61f9      	str	r1, [r7, #28]
 80054c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	09db      	lsrs	r3, r3, #7
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054da:	d8f0      	bhi.n	80054be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	61fa      	str	r2, [r7, #28]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80054ec:	2208      	movs	r2, #8
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	6938      	ldr	r0, [r7, #16]
 80054f2:	f7fe fd9f 	bl	8004034 <_SendPacket>
  RECORD_END();
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f383 8811 	msr	BASEPRI, r3
}
 80054fc:	bf00      	nop
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20014370 	.word	0x20014370
 8005508:	20014340 	.word	0x20014340

0800550c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005514:	f3ef 8311 	mrs	r3, BASEPRI
 8005518:	f04f 0120 	mov.w	r1, #32
 800551c:	f381 8811 	msr	BASEPRI, r1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	4819      	ldr	r0, [pc, #100]	@ (8005588 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005524:	f7fe fc9a 	bl	8003e5c <_PreparePacket>
 8005528:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800552e:	4b17      	ldr	r3, [pc, #92]	@ (800558c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e00b      	b.n	800555a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	1c59      	adds	r1, r3, #1
 800554a:	61f9      	str	r1, [r7, #28]
 800554c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	09db      	lsrs	r3, r3, #7
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b7f      	cmp	r3, #127	@ 0x7f
 800555e:	d8f0      	bhi.n	8005542 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	61fa      	str	r2, [r7, #28]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005570:	2204      	movs	r2, #4
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	6938      	ldr	r0, [r7, #16]
 8005576:	f7fe fd5d 	bl	8004034 <_SendPacket>
  RECORD_END();
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f383 8811 	msr	BASEPRI, r3
}
 8005580:	bf00      	nop
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20014370 	.word	0x20014370
 800558c:	20014340 	.word	0x20014340

08005590 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005598:	f3ef 8311 	mrs	r3, BASEPRI
 800559c:	f04f 0120 	mov.w	r1, #32
 80055a0:	f381 8811 	msr	BASEPRI, r1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	4819      	ldr	r0, [pc, #100]	@ (800560c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055a8:	f7fe fc58 	bl	8003e5c <_PreparePacket>
 80055ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055b2:	4b17      	ldr	r3, [pc, #92]	@ (8005610 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	e00b      	b.n	80055de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	61f9      	str	r1, [r7, #28]
 80055d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	09db      	lsrs	r3, r3, #7
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e2:	d8f0      	bhi.n	80055c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	61fa      	str	r2, [r7, #28]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80055f4:	2206      	movs	r2, #6
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	6938      	ldr	r0, [r7, #16]
 80055fa:	f7fe fd1b 	bl	8004034 <_SendPacket>
  RECORD_END();
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20014370 	.word	0x20014370
 8005610:	20014340 	.word	0x20014340

08005614 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	@ 0x28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800561e:	f3ef 8311 	mrs	r3, BASEPRI
 8005622:	f04f 0120 	mov.w	r1, #32
 8005626:	f381 8811 	msr	BASEPRI, r1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	4827      	ldr	r0, [pc, #156]	@ (80056cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800562e:	f7fe fc15 	bl	8003e5c <_PreparePacket>
 8005632:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005638:	4b25      	ldr	r3, [pc, #148]	@ (80056d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	e00b      	b.n	8005664 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	6279      	str	r1, [r7, #36]	@ 0x24
 8005656:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	09db      	lsrs	r3, r3, #7
 8005662:	623b      	str	r3, [r7, #32]
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b7f      	cmp	r3, #127	@ 0x7f
 8005668:	d8f0      	bhi.n	800564c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e00b      	b.n	800569c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	61f9      	str	r1, [r7, #28]
 800568e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	09db      	lsrs	r3, r3, #7
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a0:	d8f0      	bhi.n	8005684 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	61fa      	str	r2, [r7, #28]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80056b2:	2207      	movs	r2, #7
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f7fe fcbc 	bl	8004034 <_SendPacket>
  RECORD_END();
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f383 8811 	msr	BASEPRI, r3
}
 80056c2:	bf00      	nop
 80056c4:	3728      	adds	r7, #40	@ 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20014370 	.word	0x20014370
 80056d0:	20014340 	.word	0x20014340

080056d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	1ad3      	subs	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20014340 	.word	0x20014340

080056f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08c      	sub	sp, #48	@ 0x30
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80056fe:	4b40      	ldr	r3, [pc, #256]	@ (8005800 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d077      	beq.n	80057f6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005706:	4b3e      	ldr	r3, [pc, #248]	@ (8005800 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800570c:	2300      	movs	r3, #0
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005710:	e008      	b.n	8005724 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	3301      	adds	r3, #1
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005728:	429a      	cmp	r2, r3
 800572a:	d3f2      	bcc.n	8005712 <SEGGER_SYSVIEW_SendModule+0x1e>
 800572c:	e000      	b.n	8005730 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800572e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d055      	beq.n	80057e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005736:	f3ef 8311 	mrs	r3, BASEPRI
 800573a:	f04f 0120 	mov.w	r1, #32
 800573e:	f381 8811 	msr	BASEPRI, r1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	482f      	ldr	r0, [pc, #188]	@ (8005804 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005746:	f7fe fb89 	bl	8003e5c <_PreparePacket>
 800574a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_SendModule+0x7e>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	6279      	str	r1, [r7, #36]	@ 0x24
 8005764:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2b7f      	cmp	r3, #127	@ 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_SendModule+0x66>
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	627a      	str	r2, [r7, #36]	@ 0x24
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	e00b      	b.n	80057ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	61f9      	str	r1, [r7, #28]
 800579e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	09db      	lsrs	r3, r3, #7
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b0:	d8f0      	bhi.n	8005794 <SEGGER_SYSVIEW_SendModule+0xa0>
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2280      	movs	r2, #128	@ 0x80
 80057c8:	4619      	mov	r1, r3
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7fe fb16 	bl	8003dfc <_EncodeStr>
 80057d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80057d2:	2216      	movs	r2, #22
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	6938      	ldr	r0, [r7, #16]
 80057d8:	f7fe fc2c 	bl	8004034 <_SendPacket>
      RECORD_END();
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d006      	beq.n	80057f6 <SEGGER_SYSVIEW_SendModule+0x102>
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80057f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4798      	blx	r3
    }
  }
}
 80057f6:	bf00      	nop
 80057f8:	3730      	adds	r7, #48	@ 0x30
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20014368 	.word	0x20014368
 8005804:	20014370 	.word	0x20014370

08005808 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f2      	bne.n	800581c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20014368 	.word	0x20014368

08005844 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800584a:	f3ef 8311 	mrs	r3, BASEPRI
 800584e:	f04f 0120 	mov.w	r1, #32
 8005852:	f381 8811 	msr	BASEPRI, r1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4817      	ldr	r0, [pc, #92]	@ (80058b8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800585a:	f7fe faff 	bl	8003e5c <_PreparePacket>
 800585e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	e00b      	b.n	8005888 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	6179      	str	r1, [r7, #20]
 800587a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	09db      	lsrs	r3, r3, #7
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b7f      	cmp	r3, #127	@ 0x7f
 800588c:	d8f0      	bhi.n	8005870 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	617a      	str	r2, [r7, #20]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800589e:	221b      	movs	r2, #27
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f7fe fbc6 	bl	8004034 <_SendPacket>
  RECORD_END();
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f383 8811 	msr	BASEPRI, r3
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20014370 	.word	0x20014370
 80058bc:	2001436c 	.word	0x2001436c

080058c0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80058c0:	b40f      	push	{r0, r1, r2, r3}
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	461a      	mov	r2, r3
 80058d2:	2100      	movs	r1, #0
 80058d4:	6938      	ldr	r0, [r7, #16]
 80058d6:	f7fe febd 	bl	8004654 <_VPrintTarget>
  va_end(ParamList);
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e4:	b004      	add	sp, #16
 80058e6:	4770      	bx	lr

080058e8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	@ 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058f0:	f3ef 8311 	mrs	r3, BASEPRI
 80058f4:	f04f 0120 	mov.w	r1, #32
 80058f8:	f381 8811 	msr	BASEPRI, r1
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	4827      	ldr	r0, [pc, #156]	@ (800599c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005900:	f7fe faac 	bl	8003e5c <_PreparePacket>
 8005904:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005906:	2280      	movs	r2, #128	@ 0x80
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f7fe fa76 	bl	8003dfc <_EncodeStr>
 8005910:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	2301      	movs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e00b      	b.n	8005934 <SEGGER_SYSVIEW_Warn+0x4c>
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	6279      	str	r1, [r7, #36]	@ 0x24
 8005926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	09db      	lsrs	r3, r3, #7
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b7f      	cmp	r3, #127	@ 0x7f
 8005938:	d8f0      	bhi.n	800591c <SEGGER_SYSVIEW_Warn+0x34>
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e00b      	b.n	800596c <SEGGER_SYSVIEW_Warn+0x84>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	61f9      	str	r1, [r7, #28]
 800595e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	09db      	lsrs	r3, r3, #7
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005970:	d8f0      	bhi.n	8005954 <SEGGER_SYSVIEW_Warn+0x6c>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	61fa      	str	r2, [r7, #28]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005982:	221a      	movs	r2, #26
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f7fe fb54 	bl	8004034 <_SendPacket>
  RECORD_END();
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f383 8811 	msr	BASEPRI, r3
}
 8005992:	bf00      	nop
 8005994:	3728      	adds	r7, #40	@ 0x28
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20014370 	.word	0x20014370

080059a0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059a4:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059a6:	7e1b      	ldrb	r3, [r3, #24]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80059ac:	460b      	mov	r3, r1
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	336c      	adds	r3, #108	@ 0x6c
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059bc:	7e1b      	ldrb	r3, [r3, #24]
 80059be:	4618      	mov	r0, r3
 80059c0:	490d      	ldr	r1, [pc, #52]	@ (80059f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80059c2:	4603      	mov	r3, r0
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	4403      	add	r3, r0
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	3370      	adds	r3, #112	@ 0x70
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d00b      	beq.n	80059ec <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059d4:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059d6:	789b      	ldrb	r3, [r3, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059de:	2201      	movs	r2, #1
 80059e0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059e2:	f7fe fa47 	bl	8003e74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059e6:	4b03      	ldr	r3, [pc, #12]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80059ec:	4b01      	ldr	r3, [pc, #4]	@ (80059f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20014340 	.word	0x20014340
 80059f8:	20012e80 	.word	0x20012e80

080059fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db0b      	blt.n	8005a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	f003 021f 	and.w	r2, r3, #31
 8005a14:	4907      	ldr	r1, [pc, #28]	@ (8005a34 <__NVIC_EnableIRQ+0x38>)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	e000e100 	.word	0xe000e100

08005a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db0a      	blt.n	8005a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	490c      	ldr	r1, [pc, #48]	@ (8005a84 <__NVIC_SetPriority+0x4c>)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	0112      	lsls	r2, r2, #4
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a60:	e00a      	b.n	8005a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4908      	ldr	r1, [pc, #32]	@ (8005a88 <__NVIC_SetPriority+0x50>)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3b04      	subs	r3, #4
 8005a70:	0112      	lsls	r2, r2, #4
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	440b      	add	r3, r1
 8005a76:	761a      	strb	r2, [r3, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000e100 	.word	0xe000e100
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005a92:	f7ff ff85 	bl	80059a0 <SEGGER_SYSVIEW_IsStarted>
 8005a96:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005a9e:	f7ff f901 	bl	8004ca4 <SEGGER_SYSVIEW_Start>
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <_cbOnUARTRx+0x3c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d806      	bhi.n	8005acc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <_cbOnUARTRx+0x3c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <_cbOnUARTRx+0x3c>)
 8005ac8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005aca:	e009      	b.n	8005ae0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005acc:	f7ff ffde 	bl	8005a8c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005ad0:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <_cbOnUARTRx+0x3c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4619      	mov	r1, r3
 8005adc:	f7fe f898 	bl	8003c10 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005ae0:	bf00      	nop
}
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000008 	.word	0x20000008

08005aec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005af4:	4b14      	ldr	r3, [pc, #80]	@ (8005b48 <_cbOnUARTTx+0x5c>)
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d80f      	bhi.n	8005b1c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005afc:	4b12      	ldr	r3, [pc, #72]	@ (8005b48 <_cbOnUARTTx+0x5c>)
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <_cbOnUARTTx+0x60>)
 8005b04:	5c9a      	ldrb	r2, [r3, r2]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b48 <_cbOnUARTTx+0x5c>)
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <_cbOnUARTTx+0x5c>)
 8005b14:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005b1a:	e00f      	b.n	8005b3c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <_cbOnUARTTx+0x5c>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fd ff17 	bl	8003958 <SEGGER_RTT_ReadUpBufferNoLock>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da02      	bge.n	8005b3a <_cbOnUARTTx+0x4e>
    r = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e000      	b.n	8005b3c <_cbOnUARTTx+0x50>
  }
Done:
 8005b3a:	bf00      	nop
  return r;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000008 	.word	0x20000008
 8005b4c:	08007dc0 	.word	0x08007dc0

08005b50 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005b58:	4a04      	ldr	r2, [pc, #16]	@ (8005b6c <SEGGER_UART_init+0x1c>)
 8005b5a:	4905      	ldr	r1, [pc, #20]	@ (8005b70 <SEGGER_UART_init+0x20>)
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f853 	bl	8005c08 <HIF_UART_Init>
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08005aad 	.word	0x08005aad
 8005b70:	08005aed 	.word	0x08005aed

08005b74 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf4 <USART2_IRQHandler+0x80>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <USART2_IRQHandler+0x84>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 030b 	and.w	r3, r3, #11
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005b9c:	4b17      	ldr	r3, [pc, #92]	@ (8005bfc <USART2_IRQHandler+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005ba4:	4b15      	ldr	r3, [pc, #84]	@ (8005bfc <USART2_IRQHandler+0x88>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	4610      	mov	r0, r2
 8005bac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01a      	beq.n	8005bee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <USART2_IRQHandler+0x8c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <USART2_IRQHandler+0x8c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	1dfa      	adds	r2, r7, #7
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4798      	blx	r3
 8005bca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <USART2_IRQHandler+0x90>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005c04 <USART2_IRQHandler+0x90>)
 8005bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e006      	b.n	8005bee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005be0:	4b04      	ldr	r3, [pc, #16]	@ (8005bf4 <USART2_IRQHandler+0x80>)
 8005be2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005be4:	79fa      	ldrb	r2, [r7, #7]
 8005be6:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <USART2_IRQHandler+0x84>)
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e000      	b.n	8005bee <USART2_IRQHandler+0x7a>
      return;
 8005bec:	bf00      	nop
    }
  }
}
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	40004404 	.word	0x40004404
 8005bfc:	20014454 	.word	0x20014454
 8005c00:	20014458 	.word	0x20014458
 8005c04:	4000440c 	.word	0x4000440c

08005c08 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005c14:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd0 <HIF_UART_Init+0xc8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd0 <HIF_UART_Init+0xc8>)
 8005c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005c20:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd4 <HIF_UART_Init+0xcc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <HIF_UART_Init+0xcc>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <HIF_UART_Init+0xd0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c38:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005c40:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005c42:	4a25      	ldr	r2, [pc, #148]	@ (8005cd8 <HIF_UART_Init+0xd0>)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005c48:	4b24      	ldr	r3, [pc, #144]	@ (8005cdc <HIF_UART_Init+0xd4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c54:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005c5c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cdc <HIF_UART_Init+0xd4>)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005c64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce0 <HIF_UART_Init+0xd8>)
 8005c66:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005c6a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <HIF_UART_Init+0xdc>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005c72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <HIF_UART_Init+0xe0>)
 8005c74:	2280      	movs	r2, #128	@ 0x80
 8005c76:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <HIF_UART_Init+0xe4>)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	3301      	adds	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c96:	d302      	bcc.n	8005c9e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005c98:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005c9c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	4a11      	ldr	r2, [pc, #68]	@ (8005cf0 <HIF_UART_Init+0xe8>)
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005cae:	4a11      	ldr	r2, [pc, #68]	@ (8005cf4 <HIF_UART_Init+0xec>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005cb4:	4a10      	ldr	r2, [pc, #64]	@ (8005cf8 <HIF_UART_Init+0xf0>)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005cba:	2106      	movs	r1, #6
 8005cbc:	2026      	movs	r0, #38	@ 0x26
 8005cbe:	f7ff febb 	bl	8005a38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005cc2:	2026      	movs	r0, #38	@ 0x26
 8005cc4:	f7ff fe9a 	bl	80059fc <__NVIC_EnableIRQ>
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023840 	.word	0x40023840
 8005cd4:	40023830 	.word	0x40023830
 8005cd8:	40020020 	.word	0x40020020
 8005cdc:	40020000 	.word	0x40020000
 8005ce0:	4000440c 	.word	0x4000440c
 8005ce4:	40004410 	.word	0x40004410
 8005ce8:	40004414 	.word	0x40004414
 8005cec:	0501bd00 	.word	0x0501bd00
 8005cf0:	40004408 	.word	0x40004408
 8005cf4:	20014454 	.word	0x20014454
 8005cf8:	20014458 	.word	0x20014458

08005cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d02:	f000 fb9d 	bl	8006440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d06:	f000 f89b 	bl	8005e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d0a:	f000 f907 	bl	8005f1c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8005d0e:	483d      	ldr	r0, [pc, #244]	@ (8005e04 <main+0x108>)
 8005d10:	f7ff ff1e 	bl	8005b50 <SEGGER_UART_init>

  //Enable the CYCCNT (Cyclic Clock Counter)
  DWT_CTRL |= (1 << 0);
 8005d14:	4b3c      	ldr	r3, [pc, #240]	@ (8005e08 <main+0x10c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <main+0x10c>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8005d20:	f7fd fbcc 	bl	80034bc <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); // this is initialized in SEGGER_UART_Init();

  status = xTaskCreate(Ext_LED1_task, "LED1_Task", 200, NULL, 1, &Led1_task);
 8005d24:	4b39      	ldr	r3, [pc, #228]	@ (8005e0c <main+0x110>)
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	22c8      	movs	r2, #200	@ 0xc8
 8005d30:	4937      	ldr	r1, [pc, #220]	@ (8005e10 <main+0x114>)
 8005d32:	4838      	ldr	r0, [pc, #224]	@ (8005e14 <main+0x118>)
 8005d34:	f7fb f841 	bl	8000dba <xTaskCreate>
 8005d38:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d00b      	beq.n	8005d58 <main+0x5c>
    __asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	613b      	str	r3, [r7, #16]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <main+0x58>

  next_task_handle = Led1_task;
 8005d58:	4b2c      	ldr	r3, [pc, #176]	@ (8005e0c <main+0x110>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e18 <main+0x11c>)
 8005d5e:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(Ext_LED2_task, "LED2_Task", 200, NULL, 2, &Led2_task);
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <main+0x120>)
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	2302      	movs	r3, #2
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	22c8      	movs	r2, #200	@ 0xc8
 8005d6c:	492c      	ldr	r1, [pc, #176]	@ (8005e20 <main+0x124>)
 8005d6e:	482d      	ldr	r0, [pc, #180]	@ (8005e24 <main+0x128>)
 8005d70:	f7fb f823 	bl	8000dba <xTaskCreate>
 8005d74:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00b      	beq.n	8005d94 <main+0x98>
    __asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <main+0x94>

  status = xTaskCreate(Ext_LED3_task, "LED3_Task", 200, NULL, 3, &Led3_task);
 8005d94:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <main+0x12c>)
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	2303      	movs	r3, #3
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	22c8      	movs	r2, #200	@ 0xc8
 8005da0:	4922      	ldr	r1, [pc, #136]	@ (8005e2c <main+0x130>)
 8005da2:	4823      	ldr	r0, [pc, #140]	@ (8005e30 <main+0x134>)
 8005da4:	f7fb f809 	bl	8000dba <xTaskCreate>
 8005da8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d00b      	beq.n	8005dc8 <main+0xcc>
    __asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60bb      	str	r3, [r7, #8]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <main+0xc8>

  status = xTaskCreate(Button_task, "Button_Task", 200, NULL, 4, &Btn_task);
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <main+0x138>)
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	2304      	movs	r3, #4
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	22c8      	movs	r2, #200	@ 0xc8
 8005dd4:	4918      	ldr	r1, [pc, #96]	@ (8005e38 <main+0x13c>)
 8005dd6:	4819      	ldr	r0, [pc, #100]	@ (8005e3c <main+0x140>)
 8005dd8:	f7fa ffef 	bl	8000dba <xTaskCreate>
 8005ddc:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d00b      	beq.n	8005dfc <main+0x100>
    __asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	607b      	str	r3, [r7, #4]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <main+0xfc>


  vTaskStartScheduler();
 8005dfc:	f7fb fb4a 	bl	8001494 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <main+0x104>
 8005e04:	0007a120 	.word	0x0007a120
 8005e08:	e0001000 	.word	0xe0001000
 8005e0c:	20014460 	.word	0x20014460
 8005e10:	08007d28 	.word	0x08007d28
 8005e14:	08006019 	.word	0x08006019
 8005e18:	20014470 	.word	0x20014470
 8005e1c:	20014464 	.word	0x20014464
 8005e20:	08007d34 	.word	0x08007d34
 8005e24:	08006085 	.word	0x08006085
 8005e28:	20014468 	.word	0x20014468
 8005e2c:	08007d40 	.word	0x08007d40
 8005e30:	080060f1 	.word	0x080060f1
 8005e34:	2001446c 	.word	0x2001446c
 8005e38:	08007d4c 	.word	0x08007d4c
 8005e3c:	08006155 	.word	0x08006155

08005e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b094      	sub	sp, #80	@ 0x50
 8005e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e46:	f107 031c 	add.w	r3, r7, #28
 8005e4a:	2234      	movs	r2, #52	@ 0x34
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 feb2 	bl	8007bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e64:	2300      	movs	r3, #0
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <SystemClock_Config+0xd4>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	4a29      	ldr	r2, [pc, #164]	@ (8005f14 <SystemClock_Config+0xd4>)
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e74:	4b27      	ldr	r3, [pc, #156]	@ (8005f14 <SystemClock_Config+0xd4>)
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005e80:	2300      	movs	r3, #0
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4b24      	ldr	r3, [pc, #144]	@ (8005f18 <SystemClock_Config+0xd8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e8c:	4a22      	ldr	r2, [pc, #136]	@ (8005f18 <SystemClock_Config+0xd8>)
 8005e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4b20      	ldr	r3, [pc, #128]	@ (8005f18 <SystemClock_Config+0xd8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005eac:	2302      	movs	r3, #2
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005eb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eca:	f107 031c 	add.w	r3, r7, #28
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f922 	bl	8007118 <HAL_RCC_OscConfig>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005eda:	f000 f9a5 	bl	8006228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ede:	230f      	movs	r3, #15
 8005ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ef4:	f107 0308 	add.w	r3, r7, #8
 8005ef8:	2102      	movs	r1, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fda4 	bl	8006a48 <HAL_RCC_ClockConfig>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005f06:	f000 f98f 	bl	8006228 <Error_Handler>
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3750      	adds	r7, #80	@ 0x50
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40007000 	.word	0x40007000

08005f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f22:	f107 0314 	add.w	r3, r7, #20
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	4b35      	ldr	r3, [pc, #212]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	4a34      	ldr	r2, [pc, #208]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f42:	4b32      	ldr	r3, [pc, #200]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	4b2e      	ldr	r3, [pc, #184]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	4a2d      	ldr	r2, [pc, #180]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	4b27      	ldr	r3, [pc, #156]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4a26      	ldr	r2, [pc, #152]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f7a:	4b24      	ldr	r3, [pc, #144]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]
 8005f8a:	4b20      	ldr	r3, [pc, #128]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f96:	4b1d      	ldr	r3, [pc, #116]	@ (800600c <MX_GPIO_Init+0xf0>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2123      	movs	r1, #35	@ 0x23
 8005fa6:	481a      	ldr	r0, [pc, #104]	@ (8006010 <MX_GPIO_Init+0xf4>)
 8005fa8:	f000 fd1a 	bl	80069e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005fb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4814      	ldr	r0, [pc, #80]	@ (8006014 <MX_GPIO_Init+0xf8>)
 8005fc4:	f000 fb60 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ext_LED_1_Pin Ext_LED_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin;
 8005fc8:	2323      	movs	r3, #35	@ 0x23
 8005fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4619      	mov	r1, r3
 8005fde:	480c      	ldr	r0, [pc, #48]	@ (8006010 <MX_GPIO_Init+0xf4>)
 8005fe0:	f000 fb52 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ff4:	2307      	movs	r3, #7
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4804      	ldr	r0, [pc, #16]	@ (8006010 <MX_GPIO_Init+0xf4>)
 8006000:	f000 fb42 	bl	8006688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006004:	bf00      	nop
 8006006:	3728      	adds	r7, #40	@ 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40023800 	.word	0x40023800
 8006010:	40020000 	.word	0x40020000
 8006014:	40020800 	.word	0x40020800

08006018 <Ext_LED1_task>:

/* USER CODE BEGIN 4 */

static void Ext_LED1_task(void *parameter)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1)
	{
	SEGGER_SYSVIEW_PrintfTarget("LED1_Toggling");
 8006020:	4813      	ldr	r0, [pc, #76]	@ (8006070 <Ext_LED1_task+0x58>)
 8006022:	f7ff fc4d 	bl	80058c0 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8006026:	2101      	movs	r1, #1
 8006028:	4812      	ldr	r0, [pc, #72]	@ (8006074 <Ext_LED1_task+0x5c>)
 800602a:	f000 fcf2 	bl	8006a12 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800602e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	2000      	movs	r0, #0
 800603c:	f7fc f810 	bl	8002060 <xTaskGenericNotifyWait>
 8006040:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d1eb      	bne.n	8006020 <Ext_LED1_task+0x8>
		{
			vTaskSuspendAll();
 8006048:	f7fb fa7e 	bl	8001548 <vTaskSuspendAll>
			next_task_handle = Led2_task;
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <Ext_LED1_task+0x60>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <Ext_LED1_task+0x64>)
 8006052:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8006054:	f7fb fa86 	bl	8001564 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8006058:	2201      	movs	r2, #1
 800605a:	2101      	movs	r1, #1
 800605c:	4805      	ldr	r0, [pc, #20]	@ (8006074 <Ext_LED1_task+0x5c>)
 800605e:	f000 fcbf 	bl	80069e0 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL); // if we want delete task running task parameter should be NULL
			vTaskSuspend(Led1_task);
 8006062:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <Ext_LED1_task+0x68>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fb f84e 	bl	8001108 <vTaskSuspend>
	SEGGER_SYSVIEW_PrintfTarget("LED1_Toggling");
 800606c:	e7d8      	b.n	8006020 <Ext_LED1_task+0x8>
 800606e:	bf00      	nop
 8006070:	08007d58 	.word	0x08007d58
 8006074:	40020000 	.word	0x40020000
 8006078:	20014464 	.word	0x20014464
 800607c:	20014470 	.word	0x20014470
 8006080:	20014460 	.word	0x20014460

08006084 <Ext_LED2_task>:

		}
	}
}
static void Ext_LED2_task(void *parameter)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
	SEGGER_SYSVIEW_PrintfTarget("LED2_Toggling");
 800608c:	4813      	ldr	r0, [pc, #76]	@ (80060dc <Ext_LED2_task+0x58>)
 800608e:	f7ff fc17 	bl	80058c0 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8006092:	2102      	movs	r1, #2
 8006094:	4812      	ldr	r0, [pc, #72]	@ (80060e0 <Ext_LED2_task+0x5c>)
 8006096:	f000 fcbc 	bl	8006a12 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 800609a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	2300      	movs	r3, #0
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fb ffda 	bl	8002060 <xTaskGenericNotifyWait>
 80060ac:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d1eb      	bne.n	800608c <Ext_LED2_task+0x8>
		{
			vTaskSuspendAll();
 80060b4:	f7fb fa48 	bl	8001548 <vTaskSuspendAll>
			next_task_handle = Led3_task;
 80060b8:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <Ext_LED2_task+0x60>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0a      	ldr	r2, [pc, #40]	@ (80060e8 <Ext_LED2_task+0x64>)
 80060be:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80060c0:	f7fb fa50 	bl	8001564 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80060c4:	2201      	movs	r2, #1
 80060c6:	2102      	movs	r1, #2
 80060c8:	4805      	ldr	r0, [pc, #20]	@ (80060e0 <Ext_LED2_task+0x5c>)
 80060ca:	f000 fc89 	bl	80069e0 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL); // if we want delete task running task parameter should be NULL
			vTaskSuspend(Led2_task);
 80060ce:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <Ext_LED2_task+0x68>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fb f818 	bl	8001108 <vTaskSuspend>
	SEGGER_SYSVIEW_PrintfTarget("LED2_Toggling");
 80060d8:	e7d8      	b.n	800608c <Ext_LED2_task+0x8>
 80060da:	bf00      	nop
 80060dc:	08007d68 	.word	0x08007d68
 80060e0:	40020000 	.word	0x40020000
 80060e4:	20014468 	.word	0x20014468
 80060e8:	20014470 	.word	0x20014470
 80060ec:	20014464 	.word	0x20014464

080060f0 <Ext_LED3_task>:
		}
	}
}
static void Ext_LED3_task(void *parameter)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
	SEGGER_SYSVIEW_PrintfTarget("LED3_Toggling");
 80060f8:	4812      	ldr	r0, [pc, #72]	@ (8006144 <Ext_LED3_task+0x54>)
 80060fa:	f7ff fbe1 	bl	80058c0 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80060fe:	2120      	movs	r1, #32
 8006100:	4811      	ldr	r0, [pc, #68]	@ (8006148 <Ext_LED3_task+0x58>)
 8006102:	f000 fc86 	bl	8006a12 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8006106:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	2000      	movs	r0, #0
 8006114:	f7fb ffa4 	bl	8002060 <xTaskGenericNotifyWait>
 8006118:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d1eb      	bne.n	80060f8 <Ext_LED3_task+0x8>
		{
			vTaskSuspendAll();
 8006120:	f7fb fa12 	bl	8001548 <vTaskSuspendAll>
			next_task_handle = NULL;
 8006124:	4b09      	ldr	r3, [pc, #36]	@ (800614c <Ext_LED3_task+0x5c>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 800612a:	f7fb fa1b 	bl	8001564 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800612e:	2201      	movs	r2, #1
 8006130:	2120      	movs	r1, #32
 8006132:	4805      	ldr	r0, [pc, #20]	@ (8006148 <Ext_LED3_task+0x58>)
 8006134:	f000 fc54 	bl	80069e0 <HAL_GPIO_WritePin>
			//vTaskDelete(Btn_task);
			//vTaskDelete(NULL); // if we want delete task running task parameter should be NULL
			vTaskSuspend(Led3_task);
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <Ext_LED3_task+0x60>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa ffe3 	bl	8001108 <vTaskSuspend>
	SEGGER_SYSVIEW_PrintfTarget("LED3_Toggling");
 8006142:	e7d9      	b.n	80060f8 <Ext_LED3_task+0x8>
 8006144:	08007d78 	.word	0x08007d78
 8006148:	40020000 	.word	0x40020000
 800614c:	20014470 	.word	0x20014470
 8006150:	20014468 	.word	0x20014468

08006154 <Button_task>:
		}
	}
}

static void Button_task(void *parameter)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 1;
 800615c:	2301      	movs	r3, #1
 800615e:	73bb      	strb	r3, [r7, #14]
	uint8_t btn_prev = 1;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8006164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006168:	4820      	ldr	r0, [pc, #128]	@ (80061ec <Button_task+0x98>)
 800616a:	f000 fc21 	bl	80069b0 <HAL_GPIO_ReadPin>
 800616e:	4603      	mov	r3, r0
 8006170:	73bb      	strb	r3, [r7, #14]

		if(!btn_read)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d132      	bne.n	80061de <Button_task+0x8a>
		{
			if(btn_prev)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02f      	beq.n	80061de <Button_task+0x8a>
			{
				task_count++;
 800617e:	4b1c      	ldr	r3, [pc, #112]	@ (80061f0 <Button_task+0x9c>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	3301      	adds	r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	4b19      	ldr	r3, [pc, #100]	@ (80061f0 <Button_task+0x9c>)
 800618a:	701a      	strb	r2, [r3, #0]
				if(task_count <4)
 800618c:	4b18      	ldr	r3, [pc, #96]	@ (80061f0 <Button_task+0x9c>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b03      	cmp	r3, #3
 8006194:	d809      	bhi.n	80061aa <Button_task+0x56>
				{
					xTaskNotify(next_task_handle,0,eNoAction);
 8006196:	4b17      	ldr	r3, [pc, #92]	@ (80061f4 <Button_task+0xa0>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	2100      	movs	r1, #0
 80061a4:	f7fb fff4 	bl	8002190 <xTaskGenericNotify>
 80061a8:	e019      	b.n	80061de <Button_task+0x8a>

				}
				else
				{
					vTaskResume(Led1_task);
 80061aa:	4b13      	ldr	r3, [pc, #76]	@ (80061f8 <Button_task+0xa4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fb f896 	bl	80012e0 <vTaskResume>
					vTaskResume(Led2_task);
 80061b4:	4b11      	ldr	r3, [pc, #68]	@ (80061fc <Button_task+0xa8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fb f891 	bl	80012e0 <vTaskResume>
					vTaskResume(Led3_task);
 80061be:	4b10      	ldr	r3, [pc, #64]	@ (8006200 <Button_task+0xac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fb f88c 	bl	80012e0 <vTaskResume>
					vTaskSuspendAll();
 80061c8:	f7fb f9be 	bl	8001548 <vTaskSuspendAll>
					next_task_handle = Led1_task;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <Button_task+0xa4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a08      	ldr	r2, [pc, #32]	@ (80061f4 <Button_task+0xa0>)
 80061d2:	6013      	str	r3, [r2, #0]
					xTaskResumeAll();
 80061d4:	f7fb f9c6 	bl	8001564 <xTaskResumeAll>
					task_count = 0;
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <Button_task+0x9c>)
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
				}


			}
		}
		btn_prev = btn_read;
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80061e2:	200a      	movs	r0, #10
 80061e4:	f7fa ff58 	bl	8001098 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80061e8:	e7bc      	b.n	8006164 <Button_task+0x10>
 80061ea:	bf00      	nop
 80061ec:	40020800 	.word	0x40020800
 80061f0:	2001445c 	.word	0x2001445c
 80061f4:	20014470 	.word	0x20014470
 80061f8:	20014460 	.word	0x20014460
 80061fc:	20014464 	.word	0x20014464
 8006200:	20014468 	.word	0x20014468

08006204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d101      	bne.n	800621a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006216:	f000 f935 	bl	8006484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40001000 	.word	0x40001000

08006228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800622c:	b672      	cpsid	i
}
 800622e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <Error_Handler+0x8>

08006234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	607b      	str	r3, [r7, #4]
 800623e:	4b10      	ldr	r3, [pc, #64]	@ (8006280 <HAL_MspInit+0x4c>)
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	4a0f      	ldr	r2, [pc, #60]	@ (8006280 <HAL_MspInit+0x4c>)
 8006244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006248:	6453      	str	r3, [r2, #68]	@ 0x44
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <HAL_MspInit+0x4c>)
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <HAL_MspInit+0x4c>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <HAL_MspInit+0x4c>)
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006264:	6413      	str	r3, [r2, #64]	@ 0x40
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_MspInit+0x4c>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40023800 	.word	0x40023800

08006284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	@ 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	4b33      	ldr	r3, [pc, #204]	@ (8006368 <HAL_InitTick+0xe4>)
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	4a32      	ldr	r2, [pc, #200]	@ (8006368 <HAL_InitTick+0xe4>)
 800629e:	f043 0310 	orr.w	r3, r3, #16
 80062a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80062a4:	4b30      	ldr	r3, [pc, #192]	@ (8006368 <HAL_InitTick+0xe4>)
 80062a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062b0:	f107 0210 	add.w	r2, r7, #16
 80062b4:	f107 0314 	add.w	r3, r7, #20
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fcca 	bl	8006c54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80062ca:	f000 fcaf 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80062ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80062d0:	e004      	b.n	80062dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80062d2:	f000 fcab 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80062d6:	4603      	mov	r3, r0
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80062dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062de:	4a23      	ldr	r2, [pc, #140]	@ (800636c <HAL_InitTick+0xe8>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	0c9b      	lsrs	r3, r3, #18
 80062e6:	3b01      	subs	r3, #1
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80062ea:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <HAL_InitTick+0xec>)
 80062ec:	4a21      	ldr	r2, [pc, #132]	@ (8006374 <HAL_InitTick+0xf0>)
 80062ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80062f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006370 <HAL_InitTick+0xec>)
 80062f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80062f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80062f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <HAL_InitTick+0xec>)
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80062fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006370 <HAL_InitTick+0xec>)
 8006300:	2200      	movs	r2, #0
 8006302:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006304:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <HAL_InitTick+0xec>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800630a:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <HAL_InitTick+0xec>)
 800630c:	2200      	movs	r2, #0
 800630e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006310:	4817      	ldr	r0, [pc, #92]	@ (8006370 <HAL_InitTick+0xec>)
 8006312:	f001 f99f 	bl	8007654 <HAL_TIM_Base_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800631c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11b      	bne.n	800635c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006324:	4812      	ldr	r0, [pc, #72]	@ (8006370 <HAL_InitTick+0xec>)
 8006326:	f001 f9ef 	bl	8007708 <HAL_TIM_Base_Start_IT>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006334:	2b00      	cmp	r3, #0
 8006336:	d111      	bne.n	800635c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006338:	2036      	movs	r0, #54	@ 0x36
 800633a:	f000 f997 	bl	800666c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b0f      	cmp	r3, #15
 8006342:	d808      	bhi.n	8006356 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006344:	2200      	movs	r2, #0
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	2036      	movs	r0, #54	@ 0x36
 800634a:	f000 f973 	bl	8006634 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800634e:	4a0a      	ldr	r2, [pc, #40]	@ (8006378 <HAL_InitTick+0xf4>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e002      	b.n	800635c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800635c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006360:	4618      	mov	r0, r3
 8006362:	3738      	adds	r7, #56	@ 0x38
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40023800 	.word	0x40023800
 800636c:	431bde83 	.word	0x431bde83
 8006370:	20014474 	.word	0x20014474
 8006374:	40001000 	.word	0x40001000
 8006378:	20000014 	.word	0x20000014

0800637c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <NMI_Handler+0x4>

08006384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <HardFault_Handler+0x4>

0800638c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <MemManage_Handler+0x4>

08006394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <BusFault_Handler+0x4>

0800639c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <UsageFault_Handler+0x4>

080063a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80063b8:	4802      	ldr	r0, [pc, #8]	@ (80063c4 <TIM6_DAC_IRQHandler+0x10>)
 80063ba:	f001 fa15 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20014474 	.word	0x20014474

080063c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <SystemInit+0x20>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	4a05      	ldr	r2, [pc, #20]	@ (80063e8 <SystemInit+0x20>)
 80063d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006424 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80063f0:	f7ff ffea 	bl	80063c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063f4:	480c      	ldr	r0, [pc, #48]	@ (8006428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80063f6:	490d      	ldr	r1, [pc, #52]	@ (800642c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80063f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80063fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063fc:	e002      	b.n	8006404 <LoopCopyDataInit>

080063fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006402:	3304      	adds	r3, #4

08006404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006408:	d3f9      	bcc.n	80063fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800640a:	4a0a      	ldr	r2, [pc, #40]	@ (8006434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800640c:	4c0a      	ldr	r4, [pc, #40]	@ (8006438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800640e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006410:	e001      	b.n	8006416 <LoopFillZerobss>

08006412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006414:	3204      	adds	r2, #4

08006416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006418:	d3fb      	bcc.n	8006412 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800641a:	f001 fbd5 	bl	8007bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800641e:	f7ff fc6d 	bl	8005cfc <main>
  bx  lr    
 8006422:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800642c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8006430:	08007dec 	.word	0x08007dec
  ldr r2, =_sbss
 8006434:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8006438:	200144c0 	.word	0x200144c0

0800643c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800643c:	e7fe      	b.n	800643c <ADC_IRQHandler>
	...

08006440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006444:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <HAL_Init+0x40>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a0d      	ldr	r2, [pc, #52]	@ (8006480 <HAL_Init+0x40>)
 800644a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800644e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_Init+0x40>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0a      	ldr	r2, [pc, #40]	@ (8006480 <HAL_Init+0x40>)
 8006456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800645a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800645c:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <HAL_Init+0x40>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a07      	ldr	r2, [pc, #28]	@ (8006480 <HAL_Init+0x40>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006468:	2003      	movs	r0, #3
 800646a:	f000 f8d8 	bl	800661e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800646e:	2000      	movs	r0, #0
 8006470:	f7ff ff08 	bl	8006284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006474:	f7ff fede 	bl	8006234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023c00 	.word	0x40023c00

08006484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <HAL_IncTick+0x20>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <HAL_IncTick+0x24>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4413      	add	r3, r2
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <HAL_IncTick+0x24>)
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000018 	.word	0x20000018
 80064a8:	200144bc 	.word	0x200144bc

080064ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return uwTick;
 80064b0:	4b03      	ldr	r3, [pc, #12]	@ (80064c0 <HAL_GetTick+0x14>)
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	200144bc 	.word	0x200144bc

080064c4 <__NVIC_SetPriorityGrouping>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064e0:	4013      	ands	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064f6:	4a04      	ldr	r2, [pc, #16]	@ (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	60d3      	str	r3, [r2, #12]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <__NVIC_GetPriorityGrouping>:
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006510:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <__NVIC_GetPriorityGrouping+0x18>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0307 	and.w	r3, r3, #7
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	e000ed00 	.word	0xe000ed00

08006528 <__NVIC_EnableIRQ>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db0b      	blt.n	8006552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	f003 021f 	and.w	r2, r3, #31
 8006540:	4907      	ldr	r1, [pc, #28]	@ (8006560 <__NVIC_EnableIRQ+0x38>)
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2001      	movs	r0, #1
 800654a:	fa00 f202 	lsl.w	r2, r0, r2
 800654e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	e000e100 	.word	0xe000e100

08006564 <__NVIC_SetPriority>:
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006574:	2b00      	cmp	r3, #0
 8006576:	db0a      	blt.n	800658e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	490c      	ldr	r1, [pc, #48]	@ (80065b0 <__NVIC_SetPriority+0x4c>)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	0112      	lsls	r2, r2, #4
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	440b      	add	r3, r1
 8006588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800658c:	e00a      	b.n	80065a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	4908      	ldr	r1, [pc, #32]	@ (80065b4 <__NVIC_SetPriority+0x50>)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	3b04      	subs	r3, #4
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	440b      	add	r3, r1
 80065a2:	761a      	strb	r2, [r3, #24]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	e000e100 	.word	0xe000e100
 80065b4:	e000ed00 	.word	0xe000ed00

080065b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b089      	sub	sp, #36	@ 0x24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f1c3 0307 	rsb	r3, r3, #7
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	bf28      	it	cs
 80065d6:	2304      	movcs	r3, #4
 80065d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3304      	adds	r3, #4
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d902      	bls.n	80065e8 <NVIC_EncodePriority+0x30>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3b03      	subs	r3, #3
 80065e6:	e000      	b.n	80065ea <NVIC_EncodePriority+0x32>
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43da      	mvns	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	401a      	ands	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006600:	f04f 31ff 	mov.w	r1, #4294967295
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	43d9      	mvns	r1, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006610:	4313      	orrs	r3, r2
         );
}
 8006612:	4618      	mov	r0, r3
 8006614:	3724      	adds	r7, #36	@ 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ff4c 	bl	80064c4 <__NVIC_SetPriorityGrouping>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006646:	f7ff ff61 	bl	800650c <__NVIC_GetPriorityGrouping>
 800664a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6978      	ldr	r0, [r7, #20]
 8006652:	f7ff ffb1 	bl	80065b8 <NVIC_EncodePriority>
 8006656:	4602      	mov	r2, r0
 8006658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800665c:	4611      	mov	r1, r2
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff ff80 	bl	8006564 <__NVIC_SetPriority>
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff ff54 	bl	8006528 <__NVIC_EnableIRQ>
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	e165      	b.n	8006970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066a4:	2201      	movs	r2, #1
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4013      	ands	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	429a      	cmp	r2, r3
 80066be:	f040 8154 	bne.w	800696a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d005      	beq.n	80066da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d130      	bne.n	800673c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	2203      	movs	r2, #3
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006710:	2201      	movs	r2, #1
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 0201 	and.w	r2, r3, #1
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4313      	orrs	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d017      	beq.n	8006778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	2203      	movs	r2, #3
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4013      	ands	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4313      	orrs	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d123      	bne.n	80067cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	08da      	lsrs	r2, r3, #3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3208      	adds	r2, #8
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	220f      	movs	r2, #15
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	43db      	mvns	r3, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4013      	ands	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	08da      	lsrs	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3208      	adds	r2, #8
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	2203      	movs	r2, #3
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 0203 	and.w	r2, r3, #3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80ae 	beq.w	800696a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4b5d      	ldr	r3, [pc, #372]	@ (8006988 <HAL_GPIO_Init+0x300>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	4a5c      	ldr	r2, [pc, #368]	@ (8006988 <HAL_GPIO_Init+0x300>)
 8006818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800681c:	6453      	str	r3, [r2, #68]	@ 0x44
 800681e:	4b5a      	ldr	r3, [pc, #360]	@ (8006988 <HAL_GPIO_Init+0x300>)
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800682a:	4a58      	ldr	r2, [pc, #352]	@ (800698c <HAL_GPIO_Init+0x304>)
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	3302      	adds	r3, #2
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	220f      	movs	r2, #15
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4f      	ldr	r2, [pc, #316]	@ (8006990 <HAL_GPIO_Init+0x308>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d025      	beq.n	80068a2 <HAL_GPIO_Init+0x21a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4e      	ldr	r2, [pc, #312]	@ (8006994 <HAL_GPIO_Init+0x30c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01f      	beq.n	800689e <HAL_GPIO_Init+0x216>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a4d      	ldr	r2, [pc, #308]	@ (8006998 <HAL_GPIO_Init+0x310>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d019      	beq.n	800689a <HAL_GPIO_Init+0x212>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a4c      	ldr	r2, [pc, #304]	@ (800699c <HAL_GPIO_Init+0x314>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_GPIO_Init+0x20e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4b      	ldr	r2, [pc, #300]	@ (80069a0 <HAL_GPIO_Init+0x318>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00d      	beq.n	8006892 <HAL_GPIO_Init+0x20a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4a      	ldr	r2, [pc, #296]	@ (80069a4 <HAL_GPIO_Init+0x31c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d007      	beq.n	800688e <HAL_GPIO_Init+0x206>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a49      	ldr	r2, [pc, #292]	@ (80069a8 <HAL_GPIO_Init+0x320>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <HAL_GPIO_Init+0x202>
 8006886:	2306      	movs	r3, #6
 8006888:	e00c      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 800688a:	2307      	movs	r3, #7
 800688c:	e00a      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 800688e:	2305      	movs	r3, #5
 8006890:	e008      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 8006892:	2304      	movs	r3, #4
 8006894:	e006      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 8006896:	2303      	movs	r3, #3
 8006898:	e004      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 800689a:	2302      	movs	r3, #2
 800689c:	e002      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_GPIO_Init+0x21c>
 80068a2:	2300      	movs	r3, #0
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	f002 0203 	and.w	r2, r2, #3
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	4093      	lsls	r3, r2
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068b4:	4935      	ldr	r1, [pc, #212]	@ (800698c <HAL_GPIO_Init+0x304>)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	3302      	adds	r3, #2
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068c2:	4b3a      	ldr	r3, [pc, #232]	@ (80069ac <HAL_GPIO_Init+0x324>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068e6:	4a31      	ldr	r2, [pc, #196]	@ (80069ac <HAL_GPIO_Init+0x324>)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068ec:	4b2f      	ldr	r3, [pc, #188]	@ (80069ac <HAL_GPIO_Init+0x324>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006910:	4a26      	ldr	r2, [pc, #152]	@ (80069ac <HAL_GPIO_Init+0x324>)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006916:	4b25      	ldr	r3, [pc, #148]	@ (80069ac <HAL_GPIO_Init+0x324>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	43db      	mvns	r3, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4013      	ands	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800693a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <HAL_GPIO_Init+0x324>)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006940:	4b1a      	ldr	r3, [pc, #104]	@ (80069ac <HAL_GPIO_Init+0x324>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	43db      	mvns	r3, r3
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006964:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <HAL_GPIO_Init+0x324>)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	f67f ae96 	bls.w	80066a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	3724      	adds	r7, #36	@ 0x24
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40023800 	.word	0x40023800
 800698c:	40013800 	.word	0x40013800
 8006990:	40020000 	.word	0x40020000
 8006994:	40020400 	.word	0x40020400
 8006998:	40020800 	.word	0x40020800
 800699c:	40020c00 	.word	0x40020c00
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40021400 	.word	0x40021400
 80069a8:	40021800 	.word	0x40021800
 80069ac:	40013c00 	.word	0x40013c00

080069b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	e001      	b.n	80069d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	807b      	strh	r3, [r7, #2]
 80069ec:	4613      	mov	r3, r2
 80069ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069f0:	787b      	ldrb	r3, [r7, #1]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069f6:	887a      	ldrh	r2, [r7, #2]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069fc:	e003      	b.n	8006a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	041a      	lsls	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	619a      	str	r2, [r3, #24]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a24:	887a      	ldrh	r2, [r7, #2]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	041a      	lsls	r2, r3, #16
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	43d9      	mvns	r1, r3
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	400b      	ands	r3, r1
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0cc      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b68      	ldr	r3, [pc, #416]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d90c      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b65      	ldr	r3, [pc, #404]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b63      	ldr	r3, [pc, #396]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0b8      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b59      	ldr	r3, [pc, #356]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a58      	ldr	r2, [pc, #352]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ab4:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a52      	ldr	r2, [pc, #328]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac0:	4b50      	ldr	r3, [pc, #320]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	494d      	ldr	r1, [pc, #308]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d044      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d119      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e07f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d107      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b06:	4b3f      	ldr	r3, [pc, #252]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e06f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b16:	4b3b      	ldr	r3, [pc, #236]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e067      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b26:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4934      	ldr	r1, [pc, #208]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b38:	f7ff fcb8 	bl	80064ac <HAL_GetTick>
 8006b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b40:	f7ff fcb4 	bl	80064ac <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e04f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 020c 	and.w	r2, r3, #12
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1eb      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b68:	4b25      	ldr	r3, [pc, #148]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d20c      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	4b22      	ldr	r3, [pc, #136]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e032      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9c:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4916      	ldr	r1, [pc, #88]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	490e      	ldr	r1, [pc, #56]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bce:	f000 f873 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	490a      	ldr	r1, [pc, #40]	@ (8006c08 <HAL_RCC_ClockConfig+0x1c0>)
 8006be0:	5ccb      	ldrb	r3, [r1, r3]
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	4a09      	ldr	r2, [pc, #36]	@ (8006c0c <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_RCC_ClockConfig+0x1c8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fb48 	bl	8006284 <HAL_InitTick>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023c00 	.word	0x40023c00
 8006c04:	40023800 	.word	0x40023800
 8006c08:	08007dc4 	.word	0x08007dc4
 8006c0c:	20000010 	.word	0x20000010
 8006c10:	20000014 	.word	0x20000014

08006c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c18:	4b03      	ldr	r3, [pc, #12]	@ (8006c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000010 	.word	0x20000010

08006c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c30:	f7ff fff0 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	0a9b      	lsrs	r3, r3, #10
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	@ (8006c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	08007dd4 	.word	0x08007dd4

08006c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	220f      	movs	r2, #15
 8006c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c64:	4b12      	ldr	r3, [pc, #72]	@ (8006cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0203 	and.w	r2, r3, #3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c70:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c88:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c96:	4b07      	ldr	r3, [pc, #28]	@ (8006cb4 <HAL_RCC_GetClockConfig+0x60>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40023c00 	.word	0x40023c00

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cbc:	b0ae      	sub	sp, #184	@ 0xb8
 8006cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cde:	4bcb      	ldr	r3, [pc, #812]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 030c 	and.w	r3, r3, #12
 8006ce6:	2b0c      	cmp	r3, #12
 8006ce8:	f200 8206 	bhi.w	80070f8 <HAL_RCC_GetSysClockFreq+0x440>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	080070f9 	.word	0x080070f9
 8006cfc:	080070f9 	.word	0x080070f9
 8006d00:	080070f9 	.word	0x080070f9
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	080070f9 	.word	0x080070f9
 8006d0c:	080070f9 	.word	0x080070f9
 8006d10:	080070f9 	.word	0x080070f9
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	080070f9 	.word	0x080070f9
 8006d1c:	080070f9 	.word	0x080070f9
 8006d20:	080070f9 	.word	0x080070f9
 8006d24:	08006f29 	.word	0x08006f29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d28:	4bb9      	ldr	r3, [pc, #740]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d2e:	e1e7      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d30:	4bb8      	ldr	r3, [pc, #736]	@ (8007014 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d36:	e1e3      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d38:	4bb4      	ldr	r3, [pc, #720]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d44:	4bb1      	ldr	r3, [pc, #708]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d071      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d50:	4bae      	ldr	r3, [pc, #696]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	099b      	lsrs	r3, r3, #6
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d76:	4622      	mov	r2, r4
 8006d78:	462b      	mov	r3, r5
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	0159      	lsls	r1, r3, #5
 8006d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d88:	0150      	lsls	r0, r2, #5
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4621      	mov	r1, r4
 8006d90:	1a51      	subs	r1, r2, r1
 8006d92:	6439      	str	r1, [r7, #64]	@ 0x40
 8006d94:	4629      	mov	r1, r5
 8006d96:	eb63 0301 	sbc.w	r3, r3, r1
 8006d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006da8:	4649      	mov	r1, r9
 8006daa:	018b      	lsls	r3, r1, #6
 8006dac:	4641      	mov	r1, r8
 8006dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006db2:	4641      	mov	r1, r8
 8006db4:	018a      	lsls	r2, r1, #6
 8006db6:	4641      	mov	r1, r8
 8006db8:	1a51      	subs	r1, r2, r1
 8006dba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	00cb      	lsls	r3, r1, #3
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dda:	4641      	mov	r1, r8
 8006ddc:	00ca      	lsls	r2, r1, #3
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	4622      	mov	r2, r4
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dea:	462b      	mov	r3, r5
 8006dec:	460a      	mov	r2, r1
 8006dee:	eb42 0303 	adc.w	r3, r2, r3
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e00:	4629      	mov	r1, r5
 8006e02:	024b      	lsls	r3, r1, #9
 8006e04:	4621      	mov	r1, r4
 8006e06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	024a      	lsls	r2, r1, #9
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006e24:	f7f9 fa3e 	bl	80002a4 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e32:	e067      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e34:	4b75      	ldr	r3, [pc, #468]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	099b      	lsrs	r3, r3, #6
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e4e:	2300      	movs	r3, #0
 8006e50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f04f 0000 	mov.w	r0, #0
 8006e5e:	f04f 0100 	mov.w	r1, #0
 8006e62:	0159      	lsls	r1, r3, #5
 8006e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e68:	0150      	lsls	r0, r2, #5
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4621      	mov	r1, r4
 8006e70:	1a51      	subs	r1, r2, r1
 8006e72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e74:	4629      	mov	r1, r5
 8006e76:	eb63 0301 	sbc.w	r3, r3, r1
 8006e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006e88:	4649      	mov	r1, r9
 8006e8a:	018b      	lsls	r3, r1, #6
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e92:	4641      	mov	r1, r8
 8006e94:	018a      	lsls	r2, r1, #6
 8006e96:	4641      	mov	r1, r8
 8006e98:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006eae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eb6:	4692      	mov	sl, r2
 8006eb8:	469b      	mov	fp, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	eb1a 0303 	adds.w	r3, sl, r3
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	028b      	lsls	r3, r1, #10
 8006eda:	4621      	mov	r1, r4
 8006edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	028a      	lsls	r2, r1, #10
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eec:	2200      	movs	r2, #0
 8006eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ef0:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ef2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006ef6:	f7f9 f9d5 	bl	80002a4 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4613      	mov	r3, r2
 8006f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f04:	4b41      	ldr	r3, [pc, #260]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	3301      	adds	r3, #1
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f26:	e0eb      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f28:	4b38      	ldr	r3, [pc, #224]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f34:	4b35      	ldr	r3, [pc, #212]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d06b      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f40:	4b32      	ldr	r3, [pc, #200]	@ (800700c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	099b      	lsrs	r3, r3, #6
 8006f46:	2200      	movs	r2, #0
 8006f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f54:	2300      	movs	r3, #0
 8006f56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	462b      	mov	r3, r5
 8006f60:	f04f 0000 	mov.w	r0, #0
 8006f64:	f04f 0100 	mov.w	r1, #0
 8006f68:	0159      	lsls	r1, r3, #5
 8006f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f6e:	0150      	lsls	r0, r2, #5
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4621      	mov	r1, r4
 8006f76:	1a51      	subs	r1, r2, r1
 8006f78:	61b9      	str	r1, [r7, #24]
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006f8e:	4659      	mov	r1, fp
 8006f90:	018b      	lsls	r3, r1, #6
 8006f92:	4651      	mov	r1, sl
 8006f94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f98:	4651      	mov	r1, sl
 8006f9a:	018a      	lsls	r2, r1, #6
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	ebb2 0801 	subs.w	r8, r2, r1
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	eb63 0901 	sbc.w	r9, r3, r1
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	4699      	mov	r9, r3
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	eb18 0303 	adds.w	r3, r8, r3
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	462b      	mov	r3, r5
 8006fca:	eb49 0303 	adc.w	r3, r9, r3
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006fdc:	4629      	mov	r1, r5
 8006fde:	024b      	lsls	r3, r1, #9
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	024a      	lsls	r2, r1, #9
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ffc:	f7f9 f952 	bl	80002a4 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4613      	mov	r3, r2
 8007006:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800700a:	e065      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x420>
 800700c:	40023800 	.word	0x40023800
 8007010:	00f42400 	.word	0x00f42400
 8007014:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007018:	4b3d      	ldr	r3, [pc, #244]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x458>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	099b      	lsrs	r3, r3, #6
 800701e:	2200      	movs	r2, #0
 8007020:	4618      	mov	r0, r3
 8007022:	4611      	mov	r1, r2
 8007024:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007028:	653b      	str	r3, [r7, #80]	@ 0x50
 800702a:	2300      	movs	r3, #0
 800702c:	657b      	str	r3, [r7, #84]	@ 0x54
 800702e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	f04f 0000 	mov.w	r0, #0
 800703a:	f04f 0100 	mov.w	r1, #0
 800703e:	0159      	lsls	r1, r3, #5
 8007040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007044:	0150      	lsls	r0, r2, #5
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4641      	mov	r1, r8
 800704c:	1a51      	subs	r1, r2, r1
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	4649      	mov	r1, r9
 8007052:	eb63 0301 	sbc.w	r3, r3, r1
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007064:	4659      	mov	r1, fp
 8007066:	018b      	lsls	r3, r1, #6
 8007068:	4651      	mov	r1, sl
 800706a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800706e:	4651      	mov	r1, sl
 8007070:	018a      	lsls	r2, r1, #6
 8007072:	4651      	mov	r1, sl
 8007074:	1a54      	subs	r4, r2, r1
 8007076:	4659      	mov	r1, fp
 8007078:	eb63 0501 	sbc.w	r5, r3, r1
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	00eb      	lsls	r3, r5, #3
 8007086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708a:	00e2      	lsls	r2, r4, #3
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	4643      	mov	r3, r8
 8007092:	18e3      	adds	r3, r4, r3
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	464b      	mov	r3, r9
 8007098:	eb45 0303 	adc.w	r3, r5, r3
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070aa:	4629      	mov	r1, r5
 80070ac:	028b      	lsls	r3, r1, #10
 80070ae:	4621      	mov	r1, r4
 80070b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070b4:	4621      	mov	r1, r4
 80070b6:	028a      	lsls	r2, r1, #10
 80070b8:	4610      	mov	r0, r2
 80070ba:	4619      	mov	r1, r3
 80070bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070c0:	2200      	movs	r2, #0
 80070c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070ca:	f7f9 f8eb 	bl	80002a4 <__aeabi_uldivmod>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4613      	mov	r3, r2
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x458>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	0f1b      	lsrs	r3, r3, #28
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80070e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070f6:	e003      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070f8:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x45c>)
 80070fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007104:	4618      	mov	r0, r3
 8007106:	37b8      	adds	r7, #184	@ 0xb8
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710e:	bf00      	nop
 8007110:	40023800 	.word	0x40023800
 8007114:	00f42400 	.word	0x00f42400

08007118 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e28d      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8083 	beq.w	800723e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007138:	4b94      	ldr	r3, [pc, #592]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b04      	cmp	r3, #4
 8007142:	d019      	beq.n	8007178 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007144:	4b91      	ldr	r3, [pc, #580]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 030c 	and.w	r3, r3, #12
        || \
 800714c:	2b08      	cmp	r3, #8
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007150:	4b8e      	ldr	r3, [pc, #568]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800715c:	d00c      	beq.n	8007178 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715e:	4b8b      	ldr	r3, [pc, #556]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007166:	2b0c      	cmp	r3, #12
 8007168:	d112      	bne.n	8007190 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800716a:	4b88      	ldr	r3, [pc, #544]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007176:	d10b      	bne.n	8007190 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	4b84      	ldr	r3, [pc, #528]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d05b      	beq.n	800723c <HAL_RCC_OscConfig+0x124>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d157      	bne.n	800723c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e25a      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x90>
 800719a:	4b7c      	ldr	r3, [pc, #496]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a7b      	ldr	r2, [pc, #492]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e01d      	b.n	80071e4 <HAL_RCC_OscConfig+0xcc>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071b0:	d10c      	bne.n	80071cc <HAL_RCC_OscConfig+0xb4>
 80071b2:	4b76      	ldr	r3, [pc, #472]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a75      	ldr	r2, [pc, #468]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b73      	ldr	r3, [pc, #460]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a72      	ldr	r2, [pc, #456]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e00b      	b.n	80071e4 <HAL_RCC_OscConfig+0xcc>
 80071cc:	4b6f      	ldr	r3, [pc, #444]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a6e      	ldr	r2, [pc, #440]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4b6c      	ldr	r3, [pc, #432]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6b      	ldr	r2, [pc, #428]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80071de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d013      	beq.n	8007214 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7ff f95e 	bl	80064ac <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071f4:	f7ff f95a 	bl	80064ac <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	@ 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e21f      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007206:	4b61      	ldr	r3, [pc, #388]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0xdc>
 8007212:	e014      	b.n	800723e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7ff f94a 	bl	80064ac <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800721c:	f7ff f946 	bl	80064ac <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	@ 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e20b      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722e:	4b57      	ldr	r3, [pc, #348]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x104>
 800723a:	e000      	b.n	800723e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800723c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d06f      	beq.n	800732a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800724a:	4b50      	ldr	r3, [pc, #320]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b00      	cmp	r3, #0
 8007254:	d017      	beq.n	8007286 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007256:	4b4d      	ldr	r3, [pc, #308]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
        || \
 800725e:	2b08      	cmp	r3, #8
 8007260:	d105      	bne.n	800726e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007262:	4b4a      	ldr	r3, [pc, #296]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800726e:	4b47      	ldr	r3, [pc, #284]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007276:	2b0c      	cmp	r3, #12
 8007278:	d11c      	bne.n	80072b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800727a:	4b44      	ldr	r3, [pc, #272]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d116      	bne.n	80072b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007286:	4b41      	ldr	r3, [pc, #260]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_RCC_OscConfig+0x186>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d001      	beq.n	800729e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e1d3      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729e:	4b3b      	ldr	r3, [pc, #236]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4937      	ldr	r1, [pc, #220]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072b2:	e03a      	b.n	800732a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d020      	beq.n	80072fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072bc:	4b34      	ldr	r3, [pc, #208]	@ (8007390 <HAL_RCC_OscConfig+0x278>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c2:	f7ff f8f3 	bl	80064ac <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ca:	f7ff f8ef 	bl	80064ac <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e1b4      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072dc:	4b2b      	ldr	r3, [pc, #172]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e8:	4b28      	ldr	r3, [pc, #160]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	4925      	ldr	r1, [pc, #148]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	600b      	str	r3, [r1, #0]
 80072fc:	e015      	b.n	800732a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <HAL_RCC_OscConfig+0x278>)
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7ff f8d2 	bl	80064ac <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800730c:	f7ff f8ce 	bl	80064ac <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e193      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800731e:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d036      	beq.n	80073a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <HAL_RCC_OscConfig+0x27c>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7ff f8b2 	bl	80064ac <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800734c:	f7ff f8ae 	bl	80064ac <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e173      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <HAL_RCC_OscConfig+0x274>)
 8007360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0x234>
 800736a:	e01b      	b.n	80073a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800736c:	4b09      	ldr	r3, [pc, #36]	@ (8007394 <HAL_RCC_OscConfig+0x27c>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007372:	f7ff f89b 	bl	80064ac <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007378:	e00e      	b.n	8007398 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800737a:	f7ff f897 	bl	80064ac <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d907      	bls.n	8007398 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e15c      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
 800738c:	40023800 	.word	0x40023800
 8007390:	42470000 	.word	0x42470000
 8007394:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007398:	4b8a      	ldr	r3, [pc, #552]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800739a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ea      	bne.n	800737a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8097 	beq.w	80074e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073b6:	4b83      	ldr	r3, [pc, #524]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10f      	bne.n	80073e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	4b7f      	ldr	r3, [pc, #508]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	4a7e      	ldr	r2, [pc, #504]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80073d2:	4b7c      	ldr	r3, [pc, #496]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e2:	4b79      	ldr	r3, [pc, #484]	@ (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d118      	bne.n	8007420 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ee:	4b76      	ldr	r3, [pc, #472]	@ (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a75      	ldr	r2, [pc, #468]	@ (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073fa:	f7ff f857 	bl	80064ac <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007402:	f7ff f853 	bl	80064ac <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e118      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007414:	4b6c      	ldr	r3, [pc, #432]	@ (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d106      	bne.n	8007436 <HAL_RCC_OscConfig+0x31e>
 8007428:	4b66      	ldr	r3, [pc, #408]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	4a65      	ldr	r2, [pc, #404]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	6713      	str	r3, [r2, #112]	@ 0x70
 8007434:	e01c      	b.n	8007470 <HAL_RCC_OscConfig+0x358>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d10c      	bne.n	8007458 <HAL_RCC_OscConfig+0x340>
 800743e:	4b61      	ldr	r3, [pc, #388]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007442:	4a60      	ldr	r2, [pc, #384]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007444:	f043 0304 	orr.w	r3, r3, #4
 8007448:	6713      	str	r3, [r2, #112]	@ 0x70
 800744a:	4b5e      	ldr	r3, [pc, #376]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744e:	4a5d      	ldr	r2, [pc, #372]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6713      	str	r3, [r2, #112]	@ 0x70
 8007456:	e00b      	b.n	8007470 <HAL_RCC_OscConfig+0x358>
 8007458:	4b5a      	ldr	r3, [pc, #360]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745c:	4a59      	ldr	r2, [pc, #356]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	6713      	str	r3, [r2, #112]	@ 0x70
 8007464:	4b57      	ldr	r3, [pc, #348]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007468:	4a56      	ldr	r2, [pc, #344]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800746a:	f023 0304 	bic.w	r3, r3, #4
 800746e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d015      	beq.n	80074a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007478:	f7ff f818 	bl	80064ac <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747e:	e00a      	b.n	8007496 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007480:	f7ff f814 	bl	80064ac <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e0d7      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	4b4b      	ldr	r3, [pc, #300]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0ee      	beq.n	8007480 <HAL_RCC_OscConfig+0x368>
 80074a2:	e014      	b.n	80074ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7ff f802 	bl	80064ac <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ac:	f7fe fffe 	bl	80064ac <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e0c1      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c2:	4b40      	ldr	r3, [pc, #256]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ee      	bne.n	80074ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d105      	bne.n	80074e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074d4:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	4a3a      	ldr	r2, [pc, #232]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80ad 	beq.w	8007644 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074ea:	4b36      	ldr	r3, [pc, #216]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d060      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d145      	bne.n	800758a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fe:	4b33      	ldr	r3, [pc, #204]	@ (80075cc <HAL_RCC_OscConfig+0x4b4>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fe ffd2 	bl	80064ac <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7fe ffce 	bl	80064ac <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e093      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751e:	4b29      	ldr	r3, [pc, #164]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	061b      	lsls	r3, r3, #24
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	491b      	ldr	r1, [pc, #108]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007558:	4313      	orrs	r3, r2
 800755a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800755c:	4b1b      	ldr	r3, [pc, #108]	@ (80075cc <HAL_RCC_OscConfig+0x4b4>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007562:	f7fe ffa3 	bl	80064ac <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756a:	f7fe ff9f 	bl	80064ac <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e064      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800757c:	4b11      	ldr	r3, [pc, #68]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f0      	beq.n	800756a <HAL_RCC_OscConfig+0x452>
 8007588:	e05c      	b.n	8007644 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800758a:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <HAL_RCC_OscConfig+0x4b4>)
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fe ff8c 	bl	80064ac <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007598:	f7fe ff88 	bl	80064ac <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e04d      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x480>
 80075b6:	e045      	b.n	8007644 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d107      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e040      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
 80075c4:	40023800 	.word	0x40023800
 80075c8:	40007000 	.word	0x40007000
 80075cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007650 <HAL_RCC_OscConfig+0x538>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d030      	beq.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d129      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d122      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007608:	4293      	cmp	r3, r2
 800760a:	d119      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	3b01      	subs	r3, #1
 800761a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d10f      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d107      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800

08007654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e041      	b.n	80076ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f839 	bl	80076f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f000 f9c0 	bl	8007a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d001      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e04e      	b.n	80077be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a23      	ldr	r2, [pc, #140]	@ (80077cc <HAL_TIM_Base_Start_IT+0xc4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774a:	d01d      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1f      	ldr	r2, [pc, #124]	@ (80077d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1e      	ldr	r2, [pc, #120]	@ (80077d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1c      	ldr	r2, [pc, #112]	@ (80077d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	@ (80077dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	@ (80077e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a18      	ldr	r2, [pc, #96]	@ (80077e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d111      	bne.n	80077ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d010      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	e007      	b.n	80077bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40001800 	.word	0x40001800

080077e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d020      	beq.n	800784c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01b      	beq.n	800784c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0202 	mvn.w	r2, #2
 800781c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8d2 	bl	80079dc <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f8c4 	bl	80079c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8d5 	bl	80079f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d020      	beq.n	8007898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01b      	beq.n	8007898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0204 	mvn.w	r2, #4
 8007868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8ac 	bl	80079dc <HAL_TIM_IC_CaptureCallback>
 8007884:	e005      	b.n	8007892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f89e 	bl	80079c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8af 	bl	80079f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d020      	beq.n	80078e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01b      	beq.n	80078e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0208 	mvn.w	r2, #8
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f886 	bl	80079dc <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f878 	bl	80079c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f889 	bl	80079f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d020      	beq.n	8007930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0210 	mvn.w	r2, #16
 8007900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2208      	movs	r2, #8
 8007906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f860 	bl	80079dc <HAL_TIM_IC_CaptureCallback>
 800791c:	e005      	b.n	800792a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f852 	bl	80079c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f863 	bl	80079f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00c      	beq.n	8007954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0201 	mvn.w	r2, #1
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fe fc58 	bl	8006204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f906 	bl	8007b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00c      	beq.n	800799c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f834 	bl	8007a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0220 	mvn.w	r2, #32
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8d8 	bl	8007b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a46      	ldr	r2, [pc, #280]	@ (8007b44 <TIM_Base_SetConfig+0x12c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a36:	d00f      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a43      	ldr	r2, [pc, #268]	@ (8007b48 <TIM_Base_SetConfig+0x130>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a42      	ldr	r2, [pc, #264]	@ (8007b4c <TIM_Base_SetConfig+0x134>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a41      	ldr	r2, [pc, #260]	@ (8007b50 <TIM_Base_SetConfig+0x138>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a40      	ldr	r2, [pc, #256]	@ (8007b54 <TIM_Base_SetConfig+0x13c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d108      	bne.n	8007a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a35      	ldr	r2, [pc, #212]	@ (8007b44 <TIM_Base_SetConfig+0x12c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d02b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a78:	d027      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a32      	ldr	r2, [pc, #200]	@ (8007b48 <TIM_Base_SetConfig+0x130>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d023      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a31      	ldr	r2, [pc, #196]	@ (8007b4c <TIM_Base_SetConfig+0x134>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a30      	ldr	r2, [pc, #192]	@ (8007b50 <TIM_Base_SetConfig+0x138>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a2f      	ldr	r2, [pc, #188]	@ (8007b54 <TIM_Base_SetConfig+0x13c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007b58 <TIM_Base_SetConfig+0x140>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <TIM_Base_SetConfig+0x144>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	@ (8007b60 <TIM_Base_SetConfig+0x148>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b64 <TIM_Base_SetConfig+0x14c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b68 <TIM_Base_SetConfig+0x150>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a29      	ldr	r2, [pc, #164]	@ (8007b6c <TIM_Base_SetConfig+0x154>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a10      	ldr	r2, [pc, #64]	@ (8007b44 <TIM_Base_SetConfig+0x12c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_Base_SetConfig+0xf8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a12      	ldr	r2, [pc, #72]	@ (8007b54 <TIM_Base_SetConfig+0x13c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d103      	bne.n	8007b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d105      	bne.n	8007b36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	611a      	str	r2, [r3, #16]
  }
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40010400 	.word	0x40010400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800
 8007b64:	40001800 	.word	0x40001800
 8007b68:	40001c00 	.word	0x40001c00
 8007b6c:	40002000 	.word	0x40002000

08007b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <memcmp>:
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	3901      	subs	r1, #1
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4290      	cmp	r0, r2
 8007ba0:	d101      	bne.n	8007ba6 <memcmp+0xe>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e005      	b.n	8007bb2 <memcmp+0x1a>
 8007ba6:	7803      	ldrb	r3, [r0, #0]
 8007ba8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d001      	beq.n	8007bb4 <memcmp+0x1c>
 8007bb0:	1b18      	subs	r0, r3, r4
 8007bb2:	bd10      	pop	{r4, pc}
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	e7f2      	b.n	8007b9e <memcmp+0x6>

08007bb8 <memset>:
 8007bb8:	4402      	add	r2, r0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d100      	bne.n	8007bc2 <memset+0xa>
 8007bc0:	4770      	bx	lr
 8007bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc6:	e7f9      	b.n	8007bbc <memset+0x4>

08007bc8 <__libc_init_array>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4d0d      	ldr	r5, [pc, #52]	@ (8007c00 <__libc_init_array+0x38>)
 8007bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8007c04 <__libc_init_array+0x3c>)
 8007bce:	1b64      	subs	r4, r4, r5
 8007bd0:	10a4      	asrs	r4, r4, #2
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	d109      	bne.n	8007bec <__libc_init_array+0x24>
 8007bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007c08 <__libc_init_array+0x40>)
 8007bda:	4c0c      	ldr	r4, [pc, #48]	@ (8007c0c <__libc_init_array+0x44>)
 8007bdc:	f000 f826 	bl	8007c2c <_init>
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	2600      	movs	r6, #0
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	d105      	bne.n	8007bf6 <__libc_init_array+0x2e>
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf0:	4798      	blx	r3
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__libc_init_array+0xc>
 8007bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfa:	4798      	blx	r3
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	e7f2      	b.n	8007be6 <__libc_init_array+0x1e>
 8007c00:	08007de4 	.word	0x08007de4
 8007c04:	08007de4 	.word	0x08007de4
 8007c08:	08007de4 	.word	0x08007de4
 8007c0c:	08007de8 	.word	0x08007de8

08007c10 <memcpy>:
 8007c10:	440a      	add	r2, r1
 8007c12:	4291      	cmp	r1, r2
 8007c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c18:	d100      	bne.n	8007c1c <memcpy+0xc>
 8007c1a:	4770      	bx	lr
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c26:	4291      	cmp	r1, r2
 8007c28:	d1f9      	bne.n	8007c1e <memcpy+0xe>
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <_init>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr

08007c38 <_fini>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr
