
004.Btn_ISR_inrpt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d28  08007d28  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d28  08007d28  00008d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d30  08007d30  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d30  08007d30  00008d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007d38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001449c  2000001c  08007d54  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b8  08007d54  000094b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dfb  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003321  00000000  00000000  0001ee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00022168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  00023628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022124  00000000  00000000  0002461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018758  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef3a7  00000000  00000000  0005ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e23f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  0014e284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  001538d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b84 	.word	0x08007b84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007b84 	.word	0x08007b84

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e80 	.word	0x20012e80

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 0208 	add.w	r2, r3, #8
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80005c8:	f240 1019 	movw	r0, #281	@ 0x119
 80005cc:	f004 fea8 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80005e6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80005ea:	f004 fe99 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8000632:	f240 101b 	movw	r0, #283	@ 0x11b
 8000636:	f004 fe73 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d103      	bne.n	8000662 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00c      	b.n	800067c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3308      	adds	r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e002      	b.n	8000670 <vListInsert+0x2e>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	429a      	cmp	r2, r3
 800067a:	d2f6      	bcs.n	800066a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80006a8:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80006ac:	f004 fe38 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6892      	ldr	r2, [r2, #8]
 80006ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d103      	bne.n	80006ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f240 101d 	movw	r0, #285	@ 0x11d
 8000706:	f004 fe47 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10b      	bne.n	8000748 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d05d      	beq.n	800080a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000752:	2b00      	cmp	r3, #0
 8000754:	d059      	beq.n	800080a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800075e:	2100      	movs	r1, #0
 8000760:	fba3 2302 	umull	r2, r3, r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	d000      	beq.n	800076a <xQueueGenericReset+0x52>
 8000768:	2101      	movs	r1, #1
 800076a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800076c:	2b00      	cmp	r3, #0
 800076e:	d14c      	bne.n	800080a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000770:	f002 fa28 	bl	8002bc4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077c:	6939      	ldr	r1, [r7, #16]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	2200      	movs	r2, #0
 800078e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007a0:	3b01      	subs	r3, #1
 80007a2:	6939      	ldr	r1, [r7, #16]
 80007a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80007a6:	fb01 f303 	mul.w	r3, r1, r3
 80007aa:	441a      	add	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	22ff      	movs	r2, #255	@ 0xff
 80007b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	22ff      	movs	r2, #255	@ 0xff
 80007bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d114      	bne.n	80007f0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01a      	beq.n	8000804 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3310      	adds	r3, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f90c 	bl	80019f0 <xTaskRemoveFromEventList>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d012      	beq.n	8000804 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <xQueueGenericReset+0x128>)
 80007e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	e009      	b.n	8000804 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	3310      	adds	r3, #16
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fecd 	bl	8000594 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3324      	adds	r3, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fec8 	bl	8000594 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000804:	f002 fa10 	bl	8002c28 <vPortExitCritical>
 8000808:	e001      	b.n	800080e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10b      	bne.n	800082c <xQueueGenericReset+0x114>
    __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	60bb      	str	r3, [r7, #8]
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4619      	mov	r1, r3
 8000830:	2096      	movs	r0, #150	@ 0x96
 8000832:	f004 fdb1 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8000836:	697b      	ldr	r3, [r7, #20]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	e000ed04 	.word	0xe000ed04

08000844 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d02e      	beq.n	80008ba <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800085c:	2100      	movs	r1, #0
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	fba3 2302 	umull	r2, r3, r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <xQueueGenericCreate+0x28>
 800086a:	2101      	movs	r1, #1
 800086c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800086e:	2b00      	cmp	r3, #0
 8000870:	d123      	bne.n	80008ba <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800087a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800087e:	d81c      	bhi.n	80008ba <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3350      	adds	r3, #80	@ 0x50
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fac6 	bl	8002e20 <pvPortMalloc>
 8000894:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d01d      	beq.n	80008d8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3350      	adds	r3, #80	@ 0x50
 80008a4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f81e 	bl	80008f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80008b8:	e00e      	b.n	80008d8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10b      	bne.n	80008d8 <xQueueGenericCreate+0x94>
    __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	613b      	str	r3, [r7, #16]
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fef6 	bl	80056cc <SEGGER_SYSVIEW_ShrinkId>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4619      	mov	r1, r3
 80008e4:	2098      	movs	r0, #152	@ 0x98
 80008e6:	f004 fd57 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80008ea:	69fb      	ldr	r3, [r7, #28]
    }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000922:	2101      	movs	r1, #1
 8000924:	69b8      	ldr	r0, [r7, #24]
 8000926:	f7ff fef7 	bl	8000718 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10b      	bne.n	800096e <xQueueReceive+0x32>
    __asm volatile
 8000956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800095a:	f383 8811 	msr	BASEPRI, r3
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	623b      	str	r3, [r7, #32]
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d103      	bne.n	800097c <xQueueReceive+0x40>
 8000974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <xQueueReceive+0x44>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <xQueueReceive+0x46>
 8000980:	2300      	movs	r3, #0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10b      	bne.n	800099e <xQueueReceive+0x62>
    __asm volatile
 8000986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	61fb      	str	r3, [r7, #28]
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800099e:	f001 fa49 	bl	8001e34 <xTaskGetSchedulerState>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <xQueueReceive+0x72>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <xQueueReceive+0x76>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <xQueueReceive+0x78>
 80009b2:	2300      	movs	r3, #0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10b      	bne.n	80009d0 <xQueueReceive+0x94>
    __asm volatile
 80009b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	61bb      	str	r3, [r7, #24]
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009d0:	f002 f8f8 	bl	8002bc4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d023      	beq.n	8000a28 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009e4:	f000 f898 	bl	8000b18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00f      	beq.n	8000a18 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fa:	3310      	adds	r3, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fff7 	bl	80019f0 <xTaskRemoveFromEventList>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a08:	4b42      	ldr	r3, [pc, #264]	@ (8000b14 <xQueueReceive+0x1d8>)
 8000a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a18:	f002 f906 	bl	8002c28 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	20a4      	movs	r0, #164	@ 0xa4
 8000a20:	f004 fcba 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e071      	b.n	8000b0c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d107      	bne.n	8000a3e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a2e:	f002 f8fb 	bl	8002c28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8000a32:	2100      	movs	r1, #0
 8000a34:	20a4      	movs	r0, #164	@ 0xa4
 8000a36:	f004 fcaf 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e066      	b.n	8000b0c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d106      	bne.n	8000a52 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f8b1 	bl	8001bb0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a52:	f002 f8e9 	bl	8002c28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a56:	f000 fc83 	bl	8001360 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a5a:	f002 f8b3 	bl	8002bc4 <vPortEnterCritical>
 8000a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6a:	d103      	bne.n	8000a74 <xQueueReceive+0x138>
 8000a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d103      	bne.n	8000a8a <xQueueReceive+0x14e>
 8000a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a8a:	f002 f8cd 	bl	8002c28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a8e:	1d3a      	adds	r2, r7, #4
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f8a2 	bl	8001be0 <xTaskCheckForTimeOut>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d123      	bne.n	8000aea <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aa4:	f000 f8b0 	bl	8000c08 <prvIsQueueEmpty>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d017      	beq.n	8000ade <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab0:	3324      	adds	r3, #36	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 ff28 	bl	800190c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000abc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000abe:	f000 f851 	bl	8000b64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ac2:	f000 fc5b 	bl	800137c <xTaskResumeAll>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d181      	bne.n	80009d0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <xQueueReceive+0x1d8>)
 8000ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	f3bf 8f6f 	isb	sy
 8000adc:	e778      	b.n	80009d0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ae0:	f000 f840 	bl	8000b64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ae4:	f000 fc4a 	bl	800137c <xTaskResumeAll>
 8000ae8:	e772      	b.n	80009d0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aec:	f000 f83a 	bl	8000b64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000af0:	f000 fc44 	bl	800137c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000af6:	f000 f887 	bl	8000c08 <prvIsQueueEmpty>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f43f af67 	beq.w	80009d0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8000b02:	2100      	movs	r1, #0
 8000b04:	20a4      	movs	r0, #164	@ 0xa4
 8000b06:	f004 fc47 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8000b0a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3730      	adds	r7, #48	@ 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e000ed04 	.word	0xe000ed04

08000b18 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d018      	beq.n	8000b5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	441a      	add	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d303      	bcc.n	8000b4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68d9      	ldr	r1, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	461a      	mov	r2, r3
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f007 f806 	bl	8007b68 <memcpy>
    }
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b6c:	f002 f82a 	bl	8002bc4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b78:	e011      	b.n	8000b9e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d012      	beq.n	8000ba8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3324      	adds	r3, #36	@ 0x24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 ff32 	bl	80019f0 <xTaskRemoveFromEventList>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b92:	f001 f891 	bl	8001cb8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dce9      	bgt.n	8000b7a <prvUnlockQueue+0x16>
 8000ba6:	e000      	b.n	8000baa <prvUnlockQueue+0x46>
                    break;
 8000ba8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	22ff      	movs	r2, #255	@ 0xff
 8000bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000bb2:	f002 f839 	bl	8002c28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bb6:	f002 f805 	bl	8002bc4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000bc0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bc2:	e011      	b.n	8000be8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3310      	adds	r3, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 ff0d 	bl	80019f0 <xTaskRemoveFromEventList>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bdc:	f001 f86c 	bl	8001cb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dce9      	bgt.n	8000bc4 <prvUnlockQueue+0x60>
 8000bf0:	e000      	b.n	8000bf4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bf2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	22ff      	movs	r2, #255	@ 0xff
 8000bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000bfc:	f002 f814 	bl	8002c28 <vPortExitCritical>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c10:	f001 ffd8 	bl	8002bc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e001      	b.n	8000c26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c26:	f001 ffff 	bl	8002c28 <vPortExitCritical>

    return xReturn;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10b      	bne.n	8000c60 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	60fb      	str	r3, [r7, #12]
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d024      	beq.n	8000cb0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e01e      	b.n	8000caa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c6c:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d105      	bne.n	8000c88 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c82:	4413      	add	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
                    break;
 8000c86:	e013      	b.n	8000cb0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <vQueueAddToRegistry+0x70>
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d104      	bne.n	8000ca4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <vQueueAddToRegistry+0x9c>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d9dd      	bls.n	8000c6c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8000cc2:	20b6      	movs	r0, #182	@ 0xb6
 8000cc4:	f004 fb2c 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000038 	.word	0x20000038

08000cd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ce4:	f001 ff6e 	bl	8002bc4 <vPortEnterCritical>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d103      	bne.n	8000cfe <vQueueWaitForMessageRestricted+0x2a>
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d103      	bne.n	8000d14 <vQueueWaitForMessageRestricted+0x40>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d14:	f001 ff88 	bl	8002c28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d106      	bne.n	8000d2e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3324      	adds	r3, #36	@ 0x24
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fe17 	bl	800195c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff18 	bl	8000b64 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8000d34:	20b9      	movs	r0, #185	@ 0xb9
 8000d36:	f004 faf3 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b08a      	sub	sp, #40	@ 0x28
 8000d46:	af04      	add	r7, sp, #16
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f863 	bl	8002e20 <pvPortMalloc>
 8000d5a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000d62:	2058      	movs	r0, #88	@ 0x58
 8000d64:	f002 f85c 	bl	8002e20 <pvPortMalloc>
 8000d68:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d70:	2258      	movs	r2, #88	@ 0x58
 8000d72:	2100      	movs	r1, #0
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f006 fecb 	bl	8007b10 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d80:	e005      	b.n	8000d8e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d82:	6938      	ldr	r0, [r7, #16]
 8000d84:	f002 f97e 	bl	8003084 <vPortFree>
 8000d88:	e001      	b.n	8000d8e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00d      	beq.n	8000db0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d94:	2300      	movs	r3, #0
 8000d96:	9303      	str	r3, [sp, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f82d 	bl	8000e0a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000db0:	697b      	ldr	r3, [r7, #20]
    }
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b088      	sub	sp, #32
 8000dbe:	af02      	add	r7, sp, #8
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff ffb3 	bl	8000d42 <prvCreateTask>
 8000ddc:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000de4:	6938      	ldr	r0, [r7, #16]
 8000de6:	f000 f8a1 	bl	8000f2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e002      	b.n	8000df6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	20c2      	movs	r0, #194	@ 0xc2
 8000dfc:	f004 facc 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8000e00:	697b      	ldr	r3, [r7, #20]
    }
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b088      	sub	sp, #32
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	461a      	mov	r2, r3
 8000e22:	21a5      	movs	r1, #165	@ 0xa5
 8000e24:	f006 fe74 	bl	8007b10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e32:	3b01      	subs	r3, #1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f023 0307 	bic.w	r3, r3, #7
 8000e40:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	617b      	str	r3, [r7, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01e      	beq.n	8000ea8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e012      	b.n	8000e96 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	4413      	add	r3, r2
 8000e76:	7819      	ldrb	r1, [r3, #0]
 8000e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3334      	adds	r3, #52	@ 0x34
 8000e80:	460a      	mov	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	d9e9      	bls.n	8000e70 <prvInitialiseNewTask+0x66>
 8000e9c:	e000      	b.n	8000ea0 <prvInitialiseNewTask+0x96>
            {
                break;
 8000e9e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d90b      	bls.n	8000ec6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	613b      	str	r3, [r7, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d901      	bls.n	8000ed0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eda:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ede:	3304      	adds	r3, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb79 	bl	80005d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee8:	3318      	adds	r3, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb74 	bl	80005d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ef4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef8:	f1c3 0205 	rsb	r2, r3, #5
 8000efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000efe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	69b8      	ldr	r0, [r7, #24]
 8000f0c:	f001 fcde 	bl	80028cc <pxPortInitialiseStack>
 8000f10:	4602      	mov	r2, r0
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000f34:	f001 fe46 	bl	8002bc4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000f38:	4b50      	ldr	r3, [pc, #320]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f40:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000f42:	4b4f      	ldr	r3, [pc, #316]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <prvAddNewTaskToReadyList+0x150>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d110      	bne.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000f58:	f000 fed2 	bl	8001d00 <prvInitialiseTaskLists>
 8000f5c:	e00d      	b.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <prvAddNewTaskToReadyList+0x158>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f66:	4b46      	ldr	r3, [pc, #280]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d802      	bhi.n	8000f7a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000f74:	4a42      	ldr	r2, [pc, #264]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000f7a:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a41      	ldr	r2, [pc, #260]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f82:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <prvAddNewTaskToReadyList+0x15c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d016      	beq.n	8000fc0 <prvAddNewTaskToReadyList+0x94>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fa73 	bl	8005480 <SEGGER_SYSVIEW_OnTaskCreate>
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	461d      	mov	r5, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	1ae3      	subs	r3, r4, r3
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	462b      	mov	r3, r5
 8000fbc:	f002 fa60 	bl	8003480 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fae0 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <prvAddNewTaskToReadyList+0x160>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <prvAddNewTaskToReadyList+0x160>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fde:	492c      	ldr	r1, [pc, #176]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3204      	adds	r2, #4
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1d1a      	adds	r2, r3, #4
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800101e:	441a      	add	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001028:	4919      	ldr	r1, [pc, #100]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800103a:	1c59      	adds	r1, r3, #1
 800103c:	4814      	ldr	r0, [pc, #80]	@ (8001090 <prvAddNewTaskToReadyList+0x164>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4403      	add	r3, r0
 8001048:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800104a:	f001 fded 	bl	8002c28 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <prvAddNewTaskToReadyList+0x158>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <prvAddNewTaskToReadyList+0x154>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <prvAddNewTaskToReadyList+0x148>
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <prvAddNewTaskToReadyList+0x168>)
 8001066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	20000150 	.word	0x20000150
 8001080:	20000078 	.word	0x20000078
 8001084:	2000015c 	.word	0x2000015c
 8001088:	2000016c 	.word	0x2000016c
 800108c:	20000158 	.word	0x20000158
 8001090:	2000007c 	.word	0x2000007c
 8001094:	e000ed04 	.word	0xe000ed04

08001098 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80010a4:	f001 fd8e 	bl	8002bc4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <vTaskDelete+0x1c>
 80010ae:	4b50      	ldr	r3, [pc, #320]	@ (80011f0 <vTaskDelete+0x158>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	e000      	b.n	80010b6 <vTaskDelete+0x1e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3304      	adds	r3, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fafb 	bl	80006b8 <uxListRemove>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d115      	bne.n	80010f4 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010cc:	4949      	ldr	r1, [pc, #292]	@ (80011f4 <vTaskDelete+0x15c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10a      	bne.n	80010f4 <vTaskDelete+0x5c>
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e2:	2201      	movs	r2, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <vTaskDelete+0x160>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <vTaskDelete+0x160>)
 80010f2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3318      	adds	r3, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fad9 	bl	80006b8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8001106:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <vTaskDelete+0x164>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a3b      	ldr	r2, [pc, #236]	@ (80011fc <vTaskDelete+0x164>)
 800110e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8001110:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <vTaskDelete+0x158>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	429a      	cmp	r2, r3
 8001118:	d101      	bne.n	800111e <vTaskDelete+0x86>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <vTaskDelete+0x88>
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <vTaskDelete+0x168>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01d      	beq.n	8001166 <vTaskDelete+0xce>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01a      	beq.n	8001166 <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	3304      	adds	r3, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4833      	ldr	r0, [pc, #204]	@ (8001204 <vTaskDelete+0x16c>)
 8001138:	f7ff fa5d 	bl	80005f6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800113c:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <vTaskDelete+0x170>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a31      	ldr	r2, [pc, #196]	@ (8001208 <vTaskDelete+0x170>)
 8001144:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4618      	mov	r0, r3
 800114a:	f004 fabf 	bl	80056cc <SEGGER_SYSVIEW_ShrinkId>
 800114e:	4603      	mov	r3, r0
 8001150:	4619      	mov	r1, r3
 8001152:	20c3      	movs	r0, #195	@ 0xc3
 8001154:	f003 fd0c 	bl	8004b70 <SEGGER_SYSVIEW_RecordU32>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f9f8 	bl	8003550 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e013      	b.n	800118e <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8001166:	4b29      	ldr	r3, [pc, #164]	@ (800120c <vTaskDelete+0x174>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <vTaskDelete+0x174>)
 800116e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4618      	mov	r0, r3
 8001174:	f004 faaa 	bl	80056cc <SEGGER_SYSVIEW_ShrinkId>
 8001178:	4603      	mov	r3, r0
 800117a:	4619      	mov	r1, r3
 800117c:	20c3      	movs	r0, #195	@ 0xc3
 800117e:	f003 fcf7 	bl	8004b70 <SEGGER_SYSVIEW_RecordU32>
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4618      	mov	r0, r3
 8001186:	f002 f9e3 	bl	8003550 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800118a:	f000 fe37 	bl	8001dfc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800118e:	f001 fd4b 	bl	8002c28 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 8001198:	6938      	ldr	r0, [r7, #16]
 800119a:	f000 fe1f 	bl	8001ddc <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <vTaskDelete+0x168>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01c      	beq.n	80011e0 <vTaskDelete+0x148>
            {
                if( pxTCB == pxCurrentTCB )
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <vTaskDelete+0x158>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d117      	bne.n	80011e0 <vTaskDelete+0x148>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <vTaskDelete+0x178>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <vTaskDelete+0x138>
    __asm volatile
 80011b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	60bb      	str	r3, [r7, #8]
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <vTaskDelete+0x134>
                    taskYIELD_WITHIN_API();
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <vTaskDelete+0x17c>)
 80011d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 80011e0:	20c3      	movs	r0, #195	@ 0xc3
 80011e2:	f004 f89d 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000078 	.word	0x20000078
 80011f4:	2000007c 	.word	0x2000007c
 80011f8:	20000158 	.word	0x20000158
 80011fc:	2000016c 	.word	0x2000016c
 8001200:	2000015c 	.word	0x2000015c
 8001204:	20000124 	.word	0x20000124
 8001208:	20000138 	.word	0x20000138
 800120c:	20000150 	.word	0x20000150
 8001210:	20000178 	.word	0x20000178
 8001214:	e000ed04 	.word	0xe000ed04

08001218 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e011      	b.n	8001250 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800122c:	4a1c      	ldr	r2, [pc, #112]	@ (80012a0 <prvCreateIdleTasks+0x88>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	4413      	add	r3, r2
 8001232:	7819      	ldrb	r1, [r3, #0]
 8001234:	1d3a      	adds	r2, r7, #4
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	460a      	mov	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b09      	cmp	r3, #9
 8001254:	ddea      	ble.n	800122c <prvCreateIdleTasks+0x14>
 8001256:	e000      	b.n	800125a <prvCreateIdleTasks+0x42>
        {
            break;
 8001258:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	e015      	b.n	800128c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <prvCreateIdleTasks+0x8c>)
 8001262:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <prvCreateIdleTasks+0x90>)
 800126a:	4413      	add	r3, r2
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	2282      	movs	r2, #130	@ 0x82
 8001278:	6938      	ldr	r0, [r7, #16]
 800127a:	f7ff fd9e 	bl	8000dba <xTaskCreate>
 800127e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3301      	adds	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dde6      	ble.n	8001260 <prvCreateIdleTasks+0x48>
 8001292:	e000      	b.n	8001296 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001294:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001296:	69fb      	ldr	r3, [r7, #28]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08007b9c 	.word	0x08007b9c
 80012a4:	08001cd1 	.word	0x08001cd1
 80012a8:	20000174 	.word	0x20000174

080012ac <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80012b2:	f7ff ffb1 	bl	8001218 <prvCreateIdleTasks>
 80012b6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80012be:	f001 f86d 	bl	800239c <xTimerCreateTimerTask>
 80012c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d124      	bne.n	8001314 <vTaskStartScheduler+0x68>
    __asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	60bb      	str	r3, [r7, #8]
}
 80012dc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <vTaskStartScheduler+0x9c>)
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <vTaskStartScheduler+0xa0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <vTaskStartScheduler+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <vTaskStartScheduler+0xa8>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <vTaskStartScheduler+0xac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d102      	bne.n	8001304 <vTaskStartScheduler+0x58>
 80012fe:	f004 f8a3 	bl	8005448 <SEGGER_SYSVIEW_OnIdle>
 8001302:	e004      	b.n	800130e <vTaskStartScheduler+0x62>
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <vTaskStartScheduler+0xac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f8fb 	bl	8005504 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800130e:	f001 fb69 	bl	80029e4 <xPortStartScheduler>
 8001312:	e00f      	b.n	8001334 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d10b      	bne.n	8001334 <vTaskStartScheduler+0x88>
    __asm volatile
 800131c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001320:	f383 8811 	msr	BASEPRI, r3
 8001324:	f3bf 8f6f 	isb	sy
 8001328:	f3bf 8f4f 	dsb	sy
 800132c:	607b      	str	r3, [r7, #4]
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <vTaskStartScheduler+0xb0>)
 8001336:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8001338:	20cd      	movs	r0, #205	@ 0xcd
 800133a:	f003 fff1 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000170 	.word	0x20000170
 800134c:	2000015c 	.word	0x2000015c
 8001350:	20000154 	.word	0x20000154
 8001354:	20000174 	.word	0x20000174
 8001358:	20000078 	.word	0x20000078
 800135c:	20000000 	.word	0x20000000

08001360 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <vTaskSuspendAll+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a03      	ldr	r2, [pc, #12]	@ (8001378 <vTaskSuspendAll+0x18>)
 800136c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800136e:	20cf      	movs	r0, #207	@ 0xcf
 8001370:	f003 ffd6 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000178 	.word	0x20000178

0800137c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800138a:	f001 fc1b 	bl	8002bc4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8001392:	4b7a      	ldr	r3, [pc, #488]	@ (800157c <xTaskResumeAll+0x200>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10b      	bne.n	80013b2 <xTaskResumeAll+0x36>
    __asm volatile
 800139a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800139e:	f383 8811 	msr	BASEPRI, r3
 80013a2:	f3bf 8f6f 	isb	sy
 80013a6:	f3bf 8f4f 	dsb	sy
 80013aa:	603b      	str	r3, [r7, #0]
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	e7fd      	b.n	80013ae <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80013b2:	4b72      	ldr	r3, [pc, #456]	@ (800157c <xTaskResumeAll+0x200>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	4a70      	ldr	r2, [pc, #448]	@ (800157c <xTaskResumeAll+0x200>)
 80013ba:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80013bc:	4b6f      	ldr	r3, [pc, #444]	@ (800157c <xTaskResumeAll+0x200>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f040 80ce 	bne.w	8001562 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001580 <xTaskResumeAll+0x204>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80c9 	beq.w	8001562 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013d0:	e092      	b.n	80014f8 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80013d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001584 <xTaskResumeAll+0x208>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	6a12      	ldr	r2, [r2, #32]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	69d2      	ldr	r2, [r2, #28]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3318      	adds	r3, #24
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d103      	bne.n	8001408 <xTaskResumeAll+0x8c>
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	68d2      	ldr	r2, [r2, #12]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	6892      	ldr	r2, [r2, #8]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	429a      	cmp	r2, r3
 800143c:	d103      	bne.n	8001446 <xTaskResumeAll+0xca>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4618      	mov	r0, r3
 800145a:	f004 f895 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartReady>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001462:	2201      	movs	r2, #1
 8001464:	409a      	lsls	r2, r3
 8001466:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <xTaskResumeAll+0x20c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	4a46      	ldr	r2, [pc, #280]	@ (8001588 <xTaskResumeAll+0x20c>)
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001474:	4945      	ldr	r1, [pc, #276]	@ (800158c <xTaskResumeAll+0x210>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	3204      	adds	r2, #4
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	1d1a      	adds	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4a36      	ldr	r2, [pc, #216]	@ (800158c <xTaskResumeAll+0x210>)
 80014b4:	441a      	add	r2, r3
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014be:	4933      	ldr	r1, [pc, #204]	@ (800158c <xTaskResumeAll+0x210>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014d0:	1c59      	adds	r1, r3, #1
 80014d2:	482e      	ldr	r0, [pc, #184]	@ (800158c <xTaskResumeAll+0x210>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4403      	add	r3, r0
 80014de:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <xTaskResumeAll+0x214>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d904      	bls.n	80014f8 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80014ee:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <xTaskResumeAll+0x218>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2101      	movs	r1, #1
 80014f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <xTaskResumeAll+0x208>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f47f af68 	bne.w	80013d2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001508:	f000 fc78 	bl	8001dfc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <xTaskResumeAll+0x21c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d012      	beq.n	800153e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001518:	f000 f86a 	bl	80015f0 <xTaskIncrementTick>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <xTaskResumeAll+0x218>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	2101      	movs	r1, #1
 8001528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3b01      	subs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ef      	bne.n	8001518 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <xTaskResumeAll+0x21c>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <xTaskResumeAll+0x218>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <xTaskResumeAll+0x214>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <xTaskResumeAll+0x220>)
 8001554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f3bf 8f4f 	dsb	sy
 800155e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001562:	f001 fb61 	bl	8002c28 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4619      	mov	r1, r3
 800156a:	20d0      	movs	r0, #208	@ 0xd0
 800156c:	f003 ff14 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8001570:	69bb      	ldr	r3, [r7, #24]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000178 	.word	0x20000178
 8001580:	20000150 	.word	0x20000150
 8001584:	20000110 	.word	0x20000110
 8001588:	20000158 	.word	0x20000158
 800158c:	2000007c 	.word	0x2000007c
 8001590:	20000078 	.word	0x20000078
 8001594:	20000164 	.word	0x20000164
 8001598:	20000160 	.word	0x20000160
 800159c:	e000ed04 	.word	0xe000ed04

080015a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <xTaskGetTickCount+0x20>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	20d1      	movs	r0, #209	@ 0xd1
 80015b0:	f003 fef2 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000154 	.word	0x20000154

080015c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015ca:	f001 fbe7 	bl	8002d9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <xTaskGetTickCountFromISR+0x28>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	20d2      	movs	r0, #210	@ 0xd2
 80015dc:	f003 fedc 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80015e0:	683b      	ldr	r3, [r7, #0]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000154 	.word	0x20000154

080015f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80015fa:	4b83      	ldr	r3, [pc, #524]	@ (8001808 <xTaskIncrementTick+0x218>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80f3 	bne.w	80017ea <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001604:	4b81      	ldr	r3, [pc, #516]	@ (800180c <xTaskIncrementTick+0x21c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800160c:	4a7f      	ldr	r2, [pc, #508]	@ (800180c <xTaskIncrementTick+0x21c>)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d121      	bne.n	800165c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001618:	4b7d      	ldr	r3, [pc, #500]	@ (8001810 <xTaskIncrementTick+0x220>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	607b      	str	r3, [r7, #4]
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	e7fd      	b.n	8001636 <xTaskIncrementTick+0x46>
 800163a:	4b75      	ldr	r3, [pc, #468]	@ (8001810 <xTaskIncrementTick+0x220>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	4b74      	ldr	r3, [pc, #464]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a72      	ldr	r2, [pc, #456]	@ (8001810 <xTaskIncrementTick+0x220>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4a72      	ldr	r2, [pc, #456]	@ (8001814 <xTaskIncrementTick+0x224>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b72      	ldr	r3, [pc, #456]	@ (8001818 <xTaskIncrementTick+0x228>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a70      	ldr	r2, [pc, #448]	@ (8001818 <xTaskIncrementTick+0x228>)
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	f000 fbd0 	bl	8001dfc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800165c:	4b6f      	ldr	r3, [pc, #444]	@ (800181c <xTaskIncrementTick+0x22c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	429a      	cmp	r2, r3
 8001664:	f0c0 80ac 	bcc.w	80017c0 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001668:	4b69      	ldr	r3, [pc, #420]	@ (8001810 <xTaskIncrementTick+0x220>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001672:	4b6a      	ldr	r3, [pc, #424]	@ (800181c <xTaskIncrementTick+0x22c>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	601a      	str	r2, [r3, #0]
                    break;
 800167a:	e0a1      	b.n	80017c0 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <xTaskIncrementTick+0x220>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d203      	bcs.n	800169c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001694:	4a61      	ldr	r2, [pc, #388]	@ (800181c <xTaskIncrementTick+0x22c>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6013      	str	r3, [r2, #0]
                        break;
 800169a:	e091      	b.n	80017c0 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3304      	adds	r3, #4
 80016be:	429a      	cmp	r2, r3
 80016c0:	d103      	bne.n	80016ca <xTaskIncrementTick+0xda>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01e      	beq.n	8001720 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	6a12      	ldr	r2, [r2, #32]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	69d2      	ldr	r2, [r2, #28]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3318      	adds	r3, #24
 8001704:	429a      	cmp	r2, r3
 8001706:	d103      	bne.n	8001710 <xTaskIncrementTick+0x120>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 ff30 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <xTaskIncrementTick+0x230>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4313      	orrs	r3, r2
 8001736:	4a3a      	ldr	r2, [pc, #232]	@ (8001820 <xTaskIncrementTick+0x230>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800173e:	4939      	ldr	r1, [pc, #228]	@ (8001824 <xTaskIncrementTick+0x234>)
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3304      	adds	r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	3204      	adds	r2, #4
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4a29      	ldr	r2, [pc, #164]	@ (8001824 <xTaskIncrementTick+0x234>)
 800177e:	441a      	add	r2, r3
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	4926      	ldr	r1, [pc, #152]	@ (8001824 <xTaskIncrementTick+0x234>)
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	4821      	ldr	r0, [pc, #132]	@ (8001824 <xTaskIncrementTick+0x234>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4403      	add	r3, r0
 80017a8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <xTaskIncrementTick+0x238>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f67f af57 	bls.w	8001668 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017be:	e753      	b.n	8001668 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <xTaskIncrementTick+0x238>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c6:	4917      	ldr	r1, [pc, #92]	@ (8001824 <xTaskIncrementTick+0x234>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d901      	bls.n	80017dc <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80017d8:	2301      	movs	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <xTaskIncrementTick+0x23c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e8:	e004      	b.n	80017f4 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <xTaskIncrementTick+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <xTaskIncrementTick+0x240>)
 80017f2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	20db      	movs	r0, #219	@ 0xdb
 80017fa:	f003 fdcd 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001800:	4618      	mov	r0, r3
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000178 	.word	0x20000178
 800180c:	20000154 	.word	0x20000154
 8001810:	20000108 	.word	0x20000108
 8001814:	2000010c 	.word	0x2000010c
 8001818:	20000168 	.word	0x20000168
 800181c:	20000170 	.word	0x20000170
 8001820:	20000158 	.word	0x20000158
 8001824:	2000007c 	.word	0x2000007c
 8001828:	20000078 	.word	0x20000078
 800182c:	20000164 	.word	0x20000164
 8001830:	20000160 	.word	0x20000160

08001834 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800183a:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <vTaskSwitchContext+0xc0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001842:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <vTaskSwitchContext+0xc4>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001848:	e04f      	b.n	80018ea <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <vTaskSwitchContext+0xc4>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <vTaskSwitchContext+0xc8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	f1c3 031f 	rsb	r3, r3, #31
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	4926      	ldr	r1, [pc, #152]	@ (8001900 <vTaskSwitchContext+0xcc>)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10b      	bne.n	8001892 <vTaskSwitchContext+0x5e>
    __asm volatile
 800187a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	607b      	str	r3, [r7, #4]
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <vTaskSwitchContext+0x5a>
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <vTaskSwitchContext+0xcc>)
 800189e:	4413      	add	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3308      	adds	r3, #8
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d103      	bne.n	80018c0 <vTaskSwitchContext+0x8c>
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <vTaskSwitchContext+0xd0>)
 80018c8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <vTaskSwitchContext+0xd4>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <vTaskSwitchContext+0xd0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d102      	bne.n	80018dc <vTaskSwitchContext+0xa8>
 80018d6:	f003 fdb7 	bl	8005448 <SEGGER_SYSVIEW_OnIdle>
 80018da:	e004      	b.n	80018e6 <vTaskSwitchContext+0xb2>
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <vTaskSwitchContext+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fe0f 	bl	8005504 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <vTaskSwitchContext+0xd0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
    }
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000178 	.word	0x20000178
 80018f8:	20000164 	.word	0x20000164
 80018fc:	20000158 	.word	0x20000158
 8001900:	2000007c 	.word	0x2000007c
 8001904:	20000078 	.word	0x20000078
 8001908:	20000174 	.word	0x20000174

0800190c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	60fb      	str	r3, [r7, #12]
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <vTaskPlaceOnEventList+0x4c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3318      	adds	r3, #24
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7fe fe80 	bl	8000642 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001942:	2101      	movs	r1, #1
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f000 fc9b 	bl	8002280 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800194a:	20e1      	movs	r0, #225	@ 0xe1
 800194c:	f003 fce8 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000078 	.word	0x20000078

0800195c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10b      	bne.n	8001986 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800196e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	613b      	str	r3, [r7, #16]
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	e7fd      	b.n	8001982 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <vTaskPlaceOnEventListRestricted+0x90>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	61da      	str	r2, [r3, #28]
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <vTaskPlaceOnEventListRestricted+0x90>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6892      	ldr	r2, [r2, #8]
 800199c:	621a      	str	r2, [r3, #32]
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <vTaskPlaceOnEventListRestricted+0x90>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	3218      	adds	r2, #24
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <vTaskPlaceOnEventListRestricted+0x90>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f103 0218 	add.w	r2, r3, #24
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <vTaskPlaceOnEventListRestricted+0x90>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f000 fc52 	bl	8002280 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80019dc:	20e3      	movs	r0, #227	@ 0xe3
 80019de:	f003 fc9f 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000078 	.word	0x20000078

080019f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10b      	bne.n	8001a1e <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	60fb      	str	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	e7fd      	b.n	8001a1a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	6a12      	ldr	r2, [r2, #32]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	69d2      	ldr	r2, [r2, #28]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	3318      	adds	r3, #24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d103      	bne.n	8001a4c <xTaskRemoveFromEventList+0x5c>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1e5a      	subs	r2, r3, #1
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b98 <xTaskRemoveFromEventList+0x1a8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d164      	bne.n	8001b2e <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	6a3a      	ldr	r2, [r7, #32]
 8001a70:	68d2      	ldr	r2, [r2, #12]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	6892      	ldr	r2, [r2, #8]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	3304      	adds	r3, #4
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d103      	bne.n	8001a92 <xTaskRemoveFromEventList+0xa2>
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fd6f 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <xTaskRemoveFromEventList+0x1ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	4a38      	ldr	r2, [pc, #224]	@ (8001b9c <xTaskRemoveFromEventList+0x1ac>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac0:	4937      	ldr	r1, [pc, #220]	@ (8001ba0 <xTaskRemoveFromEventList+0x1b0>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	3204      	adds	r2, #4
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	1d1a      	adds	r2, r3, #4
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4a28      	ldr	r2, [pc, #160]	@ (8001ba0 <xTaskRemoveFromEventList+0x1b0>)
 8001b00:	441a      	add	r2, r3
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b0a:	4925      	ldr	r1, [pc, #148]	@ (8001ba0 <xTaskRemoveFromEventList+0x1b0>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b1c:	1c59      	adds	r1, r3, #1
 8001b1e:	4820      	ldr	r0, [pc, #128]	@ (8001ba0 <xTaskRemoveFromEventList+0x1b0>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4403      	add	r3, r0
 8001b2a:	6019      	str	r1, [r3, #0]
 8001b2c:	e01b      	b.n	8001b66 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <xTaskRemoveFromEventList+0x1b4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	61da      	str	r2, [r3, #28]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	621a      	str	r2, [r3, #32]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	3218      	adds	r2, #24
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f103 0218 	add.w	r2, r3, #24
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <xTaskRemoveFromEventList+0x1b4>)
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <xTaskRemoveFromEventList+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <xTaskRemoveFromEventList+0x1b4>)
 8001b64:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <xTaskRemoveFromEventList+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d905      	bls.n	8001b80 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <xTaskRemoveFromEventList+0x1bc>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e001      	b.n	8001b84 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	20e4      	movs	r0, #228	@ 0xe4
 8001b8a:	f003 fc05 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3728      	adds	r7, #40	@ 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000178 	.word	0x20000178
 8001b9c:	20000158 	.word	0x20000158
 8001ba0:	2000007c 	.word	0x2000007c
 8001ba4:	20000110 	.word	0x20000110
 8001ba8:	20000078 	.word	0x20000078
 8001bac:	20000164 	.word	0x20000164

08001bb0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <vTaskInternalSetTimeOutState+0x28>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <vTaskInternalSetTimeOutState+0x2c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8001bc8:	20e7      	movs	r0, #231	@ 0xe7
 8001bca:	f003 fba9 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000168 	.word	0x20000168
 8001bdc:	20000154 	.word	0x20000154

08001be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	613b      	str	r3, [r7, #16]
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10b      	bne.n	8001c26 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	60fb      	str	r3, [r7, #12]
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001c26:	f000 ffcd 	bl	8002bc4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <xTaskCheckForTimeOut+0xd0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d102      	bne.n	8001c4a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	e026      	b.n	8001c98 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <xTaskCheckForTimeOut+0xd4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d00a      	beq.n	8001c6c <xTaskCheckForTimeOut+0x8c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d305      	bcc.n	8001c6c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e015      	b.n	8001c98 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d20b      	bcs.n	8001c8e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	1ad2      	subs	r2, r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff94 	bl	8001bb0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	e004      	b.n	8001c98 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c98:	f000 ffc6 	bl	8002c28 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	20e8      	movs	r0, #232	@ 0xe8
 8001ca2:	f003 fb79 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000154 	.word	0x20000154
 8001cb4:	20000168 	.word	0x20000168

08001cb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <vTaskMissedYield+0x14>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8001cc2:	20e9      	movs	r0, #233	@ 0xe9
 8001cc4:	f003 fb2c 	bl	8005320 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000164 	.word	0x20000164

08001cd0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001cd8:	f000 f852 	bl	8001d80 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <prvIdleTask+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d9f9      	bls.n	8001cd8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <prvIdleTask+0x2c>)
 8001ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f3bf 8f4f 	dsb	sy
 8001cf0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001cf4:	e7f0      	b.n	8001cd8 <prvIdleTask+0x8>
 8001cf6:	bf00      	nop
 8001cf8:	2000007c 	.word	0x2000007c
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	e00c      	b.n	8001d26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <prvInitialiseTaskLists+0x60>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc3a 	bl	8000594 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d9ef      	bls.n	8001d0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d2c:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <prvInitialiseTaskLists+0x64>)
 8001d2e:	f7fe fc31 	bl	8000594 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d32:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <prvInitialiseTaskLists+0x68>)
 8001d34:	f7fe fc2e 	bl	8000594 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d38:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <prvInitialiseTaskLists+0x6c>)
 8001d3a:	f7fe fc2b 	bl	8000594 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001d3e:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <prvInitialiseTaskLists+0x70>)
 8001d40:	f7fe fc28 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001d44:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <prvInitialiseTaskLists+0x74>)
 8001d46:	f7fe fc25 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <prvInitialiseTaskLists+0x78>)
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <prvInitialiseTaskLists+0x64>)
 8001d4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <prvInitialiseTaskLists+0x7c>)
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <prvInitialiseTaskLists+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000007c 	.word	0x2000007c
 8001d64:	200000e0 	.word	0x200000e0
 8001d68:	200000f4 	.word	0x200000f4
 8001d6c:	20000110 	.word	0x20000110
 8001d70:	20000124 	.word	0x20000124
 8001d74:	2000013c 	.word	0x2000013c
 8001d78:	20000108 	.word	0x20000108
 8001d7c:	2000010c 	.word	0x2000010c

08001d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d86:	e019      	b.n	8001dbc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001d88:	f000 ff1c 	bl	8002bc4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d8c:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <prvCheckTasksWaitingTermination+0x50>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fc8d 	bl	80006b8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <prvCheckTasksWaitingTermination+0x54>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <prvCheckTasksWaitingTermination+0x54>)
 8001da6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <prvCheckTasksWaitingTermination+0x58>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <prvCheckTasksWaitingTermination+0x58>)
 8001db0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001db2:	f000 ff39 	bl	8002c28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f810 	bl	8001ddc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <prvCheckTasksWaitingTermination+0x58>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e1      	bne.n	8001d88 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000124 	.word	0x20000124
 8001dd4:	20000150 	.word	0x20000150
 8001dd8:	20000138 	.word	0x20000138

08001ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 f94b 	bl	8003084 <vPortFree>
            vPortFree( pxTCB );
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f001 f948 	bl	8003084 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <prvResetNextTaskUnblockTime+0x30>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d104      	bne.n	8001e14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <prvResetNextTaskUnblockTime+0x34>)
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e12:	e005      	b.n	8001e20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <prvResetNextTaskUnblockTime+0x30>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <prvResetNextTaskUnblockTime+0x34>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000108 	.word	0x20000108
 8001e30:	20000170 	.word	0x20000170

08001e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <xTaskGetSchedulerState+0x3c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e42:	2301      	movs	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	e008      	b.n	8001e5a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <xTaskGetSchedulerState+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001e50:	2302      	movs	r3, #2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	20f5      	movs	r0, #245	@ 0xf5
 8001e60:	f003 fa9a 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001e64:	687b      	ldr	r3, [r7, #4]
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000015c 	.word	0x2000015c
 8001e74:	20000178 	.word	0x20000178

08001e78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	613b      	str	r3, [r7, #16]
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8001ea8:	f7ff fa5a 	bl	8001360 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8001eac:	f000 fe8a 	bl	8002bc4 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3354      	adds	r3, #84	@ 0x54
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d018      	beq.n	8001ef4 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	3214      	adds	r2, #20
 8001eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	4011      	ands	r1, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8001edc:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3354      	adds	r3, #84	@ 0x54
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8001ef4:	f000 fe98 	bl	8002c28 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d103      	bne.n	8001f06 <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001efe:	2101      	movs	r1, #1
 8001f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f02:	f000 f9bd 	bl	8002280 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001f06:	f7ff fa39 	bl	800137c <xTaskResumeAll>
 8001f0a:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10a      	bne.n	8001f28 <xTaskGenericNotifyWait+0xb0>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <xTaskGenericNotifyWait+0x12c>)
 8001f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8001f28:	f000 fe4c 	bl	8002bc4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	3214      	adds	r2, #20
 8001f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8001f42:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3354      	adds	r3, #84	@ 0x54
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d002      	beq.n	8001f5a <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e00e      	b.n	8001f78 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	3214      	adds	r2, #20
 8001f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	43d2      	mvns	r2, r2
 8001f6a:	4011      	ands	r1, r2
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	3214      	adds	r2, #20
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <xTaskGenericNotifyWait+0x128>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3354      	adds	r3, #84	@ 0x54
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001f86:	f000 fe4f 	bl	8002c28 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f92:	f003 fa01 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001f96:	69fb      	ldr	r3, [r7, #28]
    }
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000078 	.word	0x20000078
 8001fa4:	e000ed04 	.word	0xe000ed04

08001fa8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b092      	sub	sp, #72	@ 0x48
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	e7fd      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ff6:	f000 fed1 	bl	8002d9c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	643b      	str	r3, [r7, #64]	@ 0x40

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8001ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8002002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	623a      	str	r2, [r7, #32]
 8002014:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8002016:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800201a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	3214      	adds	r2, #20
 8002026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800202a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800202c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800202e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4413      	add	r3, r2
 8002034:	3354      	adds	r3, #84	@ 0x54
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800203c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	3354      	adds	r3, #84	@ 0x54
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d83b      	bhi.n	80020c6 <xTaskGenericNotifyFromISR+0x11e>
 800204e:	a201      	add	r2, pc, #4	@ (adr r2, 8002054 <xTaskGenericNotifyFromISR+0xac>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	080020e7 	.word	0x080020e7
 8002058:	08002069 	.word	0x08002069
 800205c:	08002085 	.word	0x08002085
 8002060:	0800209d 	.word	0x0800209d
 8002064:	080020ab 	.word	0x080020ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	3214      	adds	r2, #20
 800206e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ea42 0103 	orr.w	r1, r2, r3
 8002078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	3214      	adds	r2, #20
 800207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002082:	e033      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	3214      	adds	r2, #20
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	3214      	adds	r2, #20
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800209a:	e027      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800209c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	3214      	adds	r2, #20
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020a8:	e020      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80020aa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d006      	beq.n	80020c0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	3214      	adds	r2, #20
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80020be:	e015      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 80020c4:	e012      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80020c6:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <xTaskGenericNotifyFromISR+0x2bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <xTaskGenericNotifyFromISR+0x142>
    __asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	61bb      	str	r3, [r7, #24]
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <xTaskGenericNotifyFromISR+0x144>
                    break;
 80020ea:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80020ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f040 80a5 	bne.w	8002240 <xTaskGenericNotifyFromISR+0x298>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <xTaskGenericNotifyFromISR+0x16e>
    __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	617b      	str	r3, [r7, #20]
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	e7fd      	b.n	8002112 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002116:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <xTaskGenericNotifyFromISR+0x2c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d164      	bne.n	80021e8 <xTaskGenericNotifyFromISR+0x240>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800211e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
 8002124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800212a:	68d2      	ldr	r2, [r2, #12]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002134:	6892      	ldr	r2, [r2, #8]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213e:	3304      	adds	r3, #4
 8002140:	429a      	cmp	r2, r3
 8002142:	d103      	bne.n	800214c <xTaskGenericNotifyFromISR+0x1a4>
 8002144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800215c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fa12 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	2201      	movs	r2, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	4b3f      	ldr	r3, [pc, #252]	@ (800226c <xTaskGenericNotifyFromISR+0x2c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	4a3e      	ldr	r2, [pc, #248]	@ (800226c <xTaskGenericNotifyFromISR+0x2c4>)
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217a:	493d      	ldr	r1, [pc, #244]	@ (8002270 <xTaskGenericNotifyFromISR+0x2c8>)
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3304      	adds	r3, #4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021a0:	3204      	adds	r2, #4
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a6:	1d1a      	adds	r2, r3, #4
 80021a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002270 <xTaskGenericNotifyFromISR+0x2c8>)
 80021ba:	441a      	add	r2, r3
 80021bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c4:	492a      	ldr	r1, [pc, #168]	@ (8002270 <xTaskGenericNotifyFromISR+0x2c8>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	4825      	ldr	r0, [pc, #148]	@ (8002270 <xTaskGenericNotifyFromISR+0x2c8>)
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4403      	add	r3, r0
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	e01b      	b.n	8002220 <xTaskGenericNotifyFromISR+0x278>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80021e8:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <xTaskGenericNotifyFromISR+0x2cc>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021f2:	61da      	str	r2, [r3, #28]
 80021f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021fa:	621a      	str	r2, [r3, #32]
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002202:	3218      	adds	r2, #24
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002208:	f103 0218 	add.w	r2, r3, #24
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <xTaskGenericNotifyFromISR+0x2cc>)
 8002214:	629a      	str	r2, [r3, #40]	@ 0x28
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <xTaskGenericNotifyFromISR+0x2cc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <xTaskGenericNotifyFromISR+0x2cc>)
 800221e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <xTaskGenericNotifyFromISR+0x2d0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	429a      	cmp	r2, r3
 800222c:	d908      	bls.n	8002240 <xTaskGenericNotifyFromISR+0x298>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800222e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <xTaskGenericNotifyFromISR+0x292>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8002234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <xTaskGenericNotifyFromISR+0x2d4>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002242:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800224a:	bf00      	nop
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );
 800224c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224e:	4619      	mov	r1, r3
 8002250:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8002254:	f003 f8a0 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800225a:	4618      	mov	r0, r3
 800225c:	3748      	adds	r7, #72	@ 0x48
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000154 	.word	0x20000154
 8002268:	20000178 	.word	0x20000178
 800226c:	20000158 	.word	0x20000158
 8002270:	2000007c 	.word	0x2000007c
 8002274:	20000110 	.word	0x20000110
 8002278:	20000078 	.word	0x20000078
 800227c:	20000164 	.word	0x20000164

08002280 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <prvAddCurrentTaskToDelayedList+0x100>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002290:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <prvAddCurrentTaskToDelayedList+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002296:	4b3c      	ldr	r3, [pc, #240]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x108>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800229c:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3304      	adds	r3, #4
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fa08 	bl	80006b8 <uxListRemove>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80022ae:	4b37      	ldr	r3, [pc, #220]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	2201      	movs	r2, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <prvAddCurrentTaskToDelayedList+0x110>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4013      	ands	r3, r2
 80022c2:	4a33      	ldr	r2, [pc, #204]	@ (8002390 <prvAddCurrentTaskToDelayedList+0x110>)
 80022c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d124      	bne.n	8002318 <prvAddCurrentTaskToDelayedList+0x98>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002394 <prvAddCurrentTaskToDelayedList+0x114>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	6892      	ldr	r2, [r2, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	3204      	adds	r2, #4
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	4b24      	ldr	r3, [pc, #144]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1d1a      	adds	r2, r3, #4
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <prvAddCurrentTaskToDelayedList+0x114>)
 8002308:	615a      	str	r2, [r3, #20]
 800230a:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <prvAddCurrentTaskToDelayedList+0x114>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a20      	ldr	r2, [pc, #128]	@ (8002394 <prvAddCurrentTaskToDelayedList+0x114>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002316:	e02e      	b.n	8002376 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	d20d      	bcs.n	800234c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2104      	movs	r1, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f968 	bl	800560c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	4619      	mov	r1, r3
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7fe f97c 	bl	8000642 <vListInsert>
}
 800234a:	e014      	b.n	8002376 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2104      	movs	r1, #4
 8002352:	4618      	mov	r0, r3
 8002354:	f003 f95a 	bl	800560c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <prvAddCurrentTaskToDelayedList+0x10c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3304      	adds	r3, #4
 800235e:	4619      	mov	r1, r3
 8002360:	69b8      	ldr	r0, [r7, #24]
 8002362:	f7fe f96e 	bl	8000642 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <prvAddCurrentTaskToDelayedList+0x118>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d202      	bcs.n	8002376 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8002370:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <prvAddCurrentTaskToDelayedList+0x118>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000154 	.word	0x20000154
 8002384:	20000108 	.word	0x20000108
 8002388:	2000010c 	.word	0x2000010c
 800238c:	20000078 	.word	0x20000078
 8002390:	20000158 	.word	0x20000158
 8002394:	2000013c 	.word	0x2000013c
 8002398:	20000170 	.word	0x20000170

0800239c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80023a6:	f000 fa5b 	bl	8002860 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <xTimerCreateTimerTask+0x64>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <xTimerCreateTimerTask+0x68>)
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2302      	movs	r3, #2
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023c0:	4911      	ldr	r1, [pc, #68]	@ (8002408 <xTimerCreateTimerTask+0x6c>)
 80023c2:	4812      	ldr	r0, [pc, #72]	@ (800240c <xTimerCreateTimerTask+0x70>)
 80023c4:	f7fe fcf9 	bl	8000dba <xTaskCreate>
 80023c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	603b      	str	r3, [r7, #0]
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80023f0:	f002 ffd2 	bl	8005398 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80023f4:	687b      	ldr	r3, [r7, #4]
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200001ac 	.word	0x200001ac
 8002404:	200001b0 	.word	0x200001b0
 8002408:	08007ba4 	.word	0x08007ba4
 800240c:	080024b5 	.word	0x080024b5

08002410 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800241c:	e008      	b.n	8002430 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	18d1      	adds	r1, r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f8df 	bl	8002600 <prvInsertTimerInActiveList>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <prvReloadTimer+0xe>
        }
    }
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800245e:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <prvProcessExpiredTimer+0x5c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3304      	adds	r3, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f923 	bl	80006b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ffc3 	bl	8002410 <prvReloadTimer>
 800248a:	e008      	b.n	800249e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	4798      	blx	r3
    }
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200001a4 	.word	0x200001a4

080024b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024bc:	f107 0308 	add.w	r3, r7, #8
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f859 	bl	8002578 <prvGetNextExpireTime>
 80024c6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f805 	bl	80024dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80024d2:	f000 f8d7 	bl	8002684 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024d6:	bf00      	nop
 80024d8:	e7f0      	b.n	80024bc <prvTimerTask+0x8>
	...

080024dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80024e6:	f7fe ff3b 	bl	8001360 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f866 	bl	80025c0 <prvSampleTimeNow>
 80024f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d130      	bne.n	800255e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <prvProcessTimerOrBlockTask+0x3c>
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	429a      	cmp	r2, r3
 8002508:	d806      	bhi.n	8002518 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800250a:	f7fe ff37 	bl	800137c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff9f 	bl	8002454 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002516:	e024      	b.n	8002562 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <prvProcessTimerOrBlockTask+0x90>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <prvProcessTimerOrBlockTask+0x50>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <prvProcessTimerOrBlockTask+0x52>
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <prvProcessTimerOrBlockTask+0x94>)
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe fbc9 	bl	8000cd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002542:	f7fe ff1b 	bl	800137c <xTaskResumeAll>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800254c:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <prvProcessTimerOrBlockTask+0x98>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
    }
 800255c:	e001      	b.n	8002562 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800255e:	f7fe ff0d 	bl	800137c <xTaskResumeAll>
    }
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001a8 	.word	0x200001a8
 8002570:	200001ac 	.word	0x200001ac
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <prvGetNextExpireTime+0x44>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <prvGetNextExpireTime+0x16>
 800258a:	2201      	movs	r2, #1
 800258c:	e000      	b.n	8002590 <prvGetNextExpireTime+0x18>
 800258e:	2200      	movs	r2, #0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800259c:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <prvGetNextExpireTime+0x44>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e001      	b.n	80025ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80025ac:	68fb      	ldr	r3, [r7, #12]
    }
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200001a4 	.word	0x200001a4

080025c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80025c8:	f7fe ffea 	bl	80015a0 <xTaskGetTickCount>
 80025cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80025ce:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <prvSampleTimeNow+0x3c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d205      	bcs.n	80025e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80025d8:	f000 f91c 	bl	8002814 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e002      	b.n	80025ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80025ea:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <prvSampleTimeNow+0x3c>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80025f0:	68fb      	ldr	r3, [r7, #12]
    }
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001b4 	.word	0x200001b4

08002600 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d812      	bhi.n	800264c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	1ad2      	subs	r2, r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e01b      	b.n	8002672 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <prvInsertTimerInActiveList+0x7c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7fd fffc 	bl	8000642 <vListInsert>
 800264a:	e012      	b.n	8002672 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d206      	bcs.n	8002662 <prvInsertTimerInActiveList+0x62>
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e007      	b.n	8002672 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <prvInsertTimerInActiveList+0x80>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3304      	adds	r3, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7fd ffe8 	bl	8000642 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002672:	697b      	ldr	r3, [r7, #20]
    }
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200001a8 	.word	0x200001a8
 8002680:	200001a4 	.word	0x200001a4

08002684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002696:	e0a9      	b.n	80027ec <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f2c0 80a6 	blt.w	80027ec <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe f801 	bl	80006b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff81 	bl	80025c0 <prvSampleTimeNow>
 80026be:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f200 808e 	bhi.w	80027e6 <prvProcessReceivedCommands+0x162>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <prvProcessReceivedCommands+0x4c>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	080026f5 	.word	0x080026f5
 80026d8:	0800275d 	.word	0x0800275d
 80026dc:	08002771 	.word	0x08002771
 80026e0:	080027bd 	.word	0x080027bd
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026f5 	.word	0x080026f5
 80026ec:	0800275d 	.word	0x0800275d
 80026f0:	08002771 	.word	0x08002771
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	18d1      	adds	r1, r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	69f8      	ldr	r0, [r7, #28]
 8002714:	f7ff ff74 	bl	8002600 <prvInsertTimerInActiveList>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d065      	beq.n	80027ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	4413      	add	r3, r2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4619      	mov	r1, r3
 8002738:	69f8      	ldr	r0, [r7, #28]
 800273a:	f7ff fe69 	bl	8002410 <prvReloadTimer>
 800273e:	e008      	b.n	8002752 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	69f8      	ldr	r0, [r7, #28]
 8002758:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800275a:	e046      	b.n	80027ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800276e:	e03d      	b.n	80027ec <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2da      	uxtb	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	617b      	str	r3, [r7, #20]
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	18d1      	adds	r1, r2, r3
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	69f8      	ldr	r0, [r7, #28]
 80027b6:	f7ff ff23 	bl	8002600 <prvInsertTimerInActiveList>
                        break;
 80027ba:	e017      	b.n	80027ec <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80027ca:	69f8      	ldr	r0, [r7, #28]
 80027cc:	f000 fc5a 	bl	8003084 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80027d0:	e00c      	b.n	80027ec <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80027e4:	e002      	b.n	80027ec <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <prvProcessReceivedCommands+0x168>
                        break;
 80027ea:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <prvProcessReceivedCommands+0x18c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f107 0108 	add.w	r1, r7, #8
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe f8a0 	bl	800093c <xQueueReceive>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f47f af4a 	bne.w	8002698 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200001ac 	.word	0x200001ac

08002814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800281a:	e009      	b.n	8002830 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800281c:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <prvSwitchTimerLists+0x44>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002826:	f04f 31ff 	mov.w	r1, #4294967295
 800282a:	6838      	ldr	r0, [r7, #0]
 800282c:	f7ff fe12 	bl	8002454 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <prvSwitchTimerLists+0x44>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <prvSwitchTimerLists+0x44>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <prvSwitchTimerLists+0x48>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <prvSwitchTimerLists+0x44>)
 8002846:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002848:	4a04      	ldr	r2, [pc, #16]	@ (800285c <prvSwitchTimerLists+0x48>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
    }
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200001a4 	.word	0x200001a4
 800285c:	200001a8 	.word	0x200001a8

08002860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002864:	f000 f9ae 	bl	8002bc4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <prvCheckForValidListAndQueue+0x54>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11d      	bne.n	80028ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002870:	4811      	ldr	r0, [pc, #68]	@ (80028b8 <prvCheckForValidListAndQueue+0x58>)
 8002872:	f7fd fe8f 	bl	8000594 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002876:	4811      	ldr	r0, [pc, #68]	@ (80028bc <prvCheckForValidListAndQueue+0x5c>)
 8002878:	f7fd fe8c 	bl	8000594 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800287c:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <prvCheckForValidListAndQueue+0x60>)
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <prvCheckForValidListAndQueue+0x58>)
 8002880:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <prvCheckForValidListAndQueue+0x64>)
 8002884:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <prvCheckForValidListAndQueue+0x5c>)
 8002886:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002888:	2200      	movs	r2, #0
 800288a:	210c      	movs	r1, #12
 800288c:	200a      	movs	r0, #10
 800288e:	f7fd ffd9 	bl	8000844 <xQueueGenericCreate>
 8002892:	4603      	mov	r3, r0
 8002894:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <prvCheckForValidListAndQueue+0x54>)
 8002896:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <prvCheckForValidListAndQueue+0x54>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028a0:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <prvCheckForValidListAndQueue+0x54>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4908      	ldr	r1, [pc, #32]	@ (80028c8 <prvCheckForValidListAndQueue+0x68>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f9c4 	bl	8000c34 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028ac:	f000 f9bc 	bl	8002c28 <vPortExitCritical>
    }
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200001ac 	.word	0x200001ac
 80028b8:	2000017c 	.word	0x2000017c
 80028bc:	20000190 	.word	0x20000190
 80028c0:	200001a4 	.word	0x200001a4
 80028c4:	200001a8 	.word	0x200001a8
 80028c8:	08007bac 	.word	0x08007bac

080028cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3b04      	subs	r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b04      	subs	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3b04      	subs	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80028fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002930 <pxPortInitialiseStack+0x64>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3b14      	subs	r3, #20
 8002906:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b04      	subs	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f06f 0202 	mvn.w	r2, #2
 800291a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3b20      	subs	r3, #32
 8002920:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	08002935 	.word	0x08002935

08002934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800293e:	4b13      	ldr	r3, [pc, #76]	@ (800298c <prvTaskExitError+0x58>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d00b      	beq.n	8002960 <prvTaskExitError+0x2c>
    __asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	60fb      	str	r3, [r7, #12]
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <prvTaskExitError+0x28>
    __asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60bb      	str	r3, [r7, #8]
}
 8002972:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002974:	bf00      	nop
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0fc      	beq.n	8002976 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000004 	.word	0x20000004

08002990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002990:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <pxCurrentTCBConst2>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6808      	ldr	r0, [r1, #0]
 8002996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299a:	f380 8809 	msr	PSP, r0
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8811 	msr	BASEPRI, r0
 80029aa:	4770      	bx	lr
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst2>:
 80029b0:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <prvPortStartFirstTask+0x24>)
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f380 8808 	msr	MSP, r0
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f380 8814 	msr	CONTROL, r0
 80029ca:	b662      	cpsie	i
 80029cc:	b661      	cpsie	f
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	df00      	svc	0
 80029d8:	bf00      	nop
 80029da:	0000      	.short	0x0000
 80029dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop

080029e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029ea:	4b69      	ldr	r3, [pc, #420]	@ (8002b90 <xPortStartScheduler+0x1ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a69      	ldr	r2, [pc, #420]	@ (8002b94 <xPortStartScheduler+0x1b0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10b      	bne.n	8002a0c <xPortStartScheduler+0x28>
    __asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a0c:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <xPortStartScheduler+0x1ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a61      	ldr	r2, [pc, #388]	@ (8002b98 <xPortStartScheduler+0x1b4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10b      	bne.n	8002a2e <xPortStartScheduler+0x4a>
    __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	623b      	str	r3, [r7, #32]
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b9c <xPortStartScheduler+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	332c      	adds	r3, #44	@ 0x2c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a59      	ldr	r2, [pc, #356]	@ (8002ba0 <xPortStartScheduler+0x1bc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <xPortStartScheduler+0x74>
    __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61fb      	str	r3, [r7, #28]
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5a:	3338      	adds	r3, #56	@ 0x38
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a51      	ldr	r2, [pc, #324]	@ (8002ba4 <xPortStartScheduler+0x1c0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <xPortStartScheduler+0x98>
    __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	61bb      	str	r3, [r7, #24]
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a80:	4b49      	ldr	r3, [pc, #292]	@ (8002ba8 <xPortStartScheduler+0x1c4>)
 8002a82:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <xPortStartScheduler+0x1c8>)
 8002aa6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <xPortStartScheduler+0x1c8>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <xPortStartScheduler+0xe4>
    __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	617b      	str	r3, [r7, #20]
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d013      	beq.n	8002afe <xPortStartScheduler+0x11a>
    __asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	613b      	str	r3, [r7, #16]
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	e7fd      	b.n	8002aea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b06:	2b80      	cmp	r3, #128	@ 0x80
 8002b08:	d0f1      	beq.n	8002aee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d103      	bne.n	8002b18 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002b10:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e004      	b.n	8002b22 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b20:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4a21      	ldr	r2, [pc, #132]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b2a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b34:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <xPortStartScheduler+0x1cc>)
 8002b36:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <xPortStartScheduler+0x1d0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <xPortStartScheduler+0x1d0>)
 8002b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <xPortStartScheduler+0x1d0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <xPortStartScheduler+0x1d0>)
 8002b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b56:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <xPortStartScheduler+0x1d4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b5e:	f000 f8ed 	bl	8002d3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <xPortStartScheduler+0x1d8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002b68:	f000 f90c 	bl	8002d84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <xPortStartScheduler+0x1dc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <xPortStartScheduler+0x1dc>)
 8002b72:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002b76:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002b78:	f7ff ff1e 	bl	80029b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b7c:	f7fe fe5a 	bl	8001834 <vTaskSwitchContext>
    prvTaskExitError();
 8002b80:	f7ff fed8 	bl	8002934 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3730      	adds	r7, #48	@ 0x30
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00
 8002b94:	410fc271 	.word	0x410fc271
 8002b98:	410fc270 	.word	0x410fc270
 8002b9c:	e000ed08 	.word	0xe000ed08
 8002ba0:	08002991 	.word	0x08002991
 8002ba4:	08002c81 	.word	0x08002c81
 8002ba8:	e000e400 	.word	0xe000e400
 8002bac:	200001b8 	.word	0x200001b8
 8002bb0:	200001bc 	.word	0x200001bc
 8002bb4:	e000ed20 	.word	0xe000ed20
 8002bb8:	e000ed1c 	.word	0xe000ed1c
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	e000ef34 	.word	0xe000ef34

08002bc4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
    __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	607b      	str	r3, [r7, #4]
}
 8002bdc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <vPortEnterCritical+0x5c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <vPortEnterCritical+0x5c>)
 8002be6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002be8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <vPortEnterCritical+0x5c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <vPortEnterCritical+0x60>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <vPortEnterCritical+0x4e>
    __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	603b      	str	r3, [r7, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	e7fd      	b.n	8002c0e <vPortEnterCritical+0x4a>
    }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000004 	.word	0x20000004
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <vPortExitCritical+0x50>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <vPortExitCritical+0x26>
    __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	607b      	str	r3, [r7, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <vPortExitCritical+0x50>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	4a08      	ldr	r2, [pc, #32]	@ (8002c78 <vPortExitCritical+0x50>)
 8002c56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <vPortExitCritical+0x50>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <vPortExitCritical+0x44>
 8002c60:	2300      	movs	r3, #0
 8002c62:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f383 8811 	msr	BASEPRI, r3
}
 8002c6a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	00000000 	.word	0x00000000

08002c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002c80:	f3ef 8009 	mrs	r0, PSP
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <pxCurrentTCBConst>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f01e 0f10 	tst.w	lr, #16
 8002c90:	bf08      	it	eq
 8002c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9a:	6010      	str	r0, [r2, #0]
 8002c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002ca4:	f380 8811 	msr	BASEPRI, r0
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f7fe fdc0 	bl	8001834 <vTaskSwitchContext>
 8002cb4:	f04f 0000 	mov.w	r0, #0
 8002cb8:	f380 8811 	msr	BASEPRI, r0
 8002cbc:	bc09      	pop	{r0, r3}
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	6808      	ldr	r0, [r1, #0]
 8002cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc6:	f01e 0f10 	tst.w	lr, #16
 8002cca:	bf08      	it	eq
 8002ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002cd0:	f380 8809 	msr	PSP, r0
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	f3af 8000 	nop.w

08002ce0 <pxCurrentTCBConst>:
 8002ce0:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop

08002ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
    __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	607b      	str	r3, [r7, #4]
}
 8002d00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002d02:	f002 fa93 	bl	800522c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d06:	f7fe fc73 	bl	80015f0 <xTaskIncrementTick>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8002d10:	f002 faea 	bl	80052e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <SysTick_Handler+0x50>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e001      	b.n	8002d22 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8002d1e:	f002 fac7 	bl	80052b0 <SEGGER_SYSVIEW_RecordExitISR>
 8002d22:	2300      	movs	r3, #0
 8002d24:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f383 8811 	msr	BASEPRI, r3
}
 8002d2c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <vPortSetupTimerInterrupt+0x34>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <vPortSetupTimerInterrupt+0x38>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <vPortSetupTimerInterrupt+0x3c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	@ (8002d7c <vPortSetupTimerInterrupt+0x40>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <vPortSetupTimerInterrupt+0x44>)
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <vPortSetupTimerInterrupt+0x34>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010
 8002d74:	e000e018 	.word	0xe000e018
 8002d78:	20000010 	.word	0x20000010
 8002d7c:	10624dd3 	.word	0x10624dd3
 8002d80:	e000e014 	.word	0xe000e014

08002d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002d84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002d94 <vPortEnableVFP+0x10>
 8002d88:	6801      	ldr	r1, [r0, #0]
 8002d8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002d8e:	6001      	str	r1, [r0, #0]
 8002d90:	4770      	bx	lr
 8002d92:	0000      	.short	0x0000
 8002d94:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop

08002d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002da2:	f3ef 8305 	mrs	r3, IPSR
 8002da6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d915      	bls.n	8002dda <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002dae:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <vPortValidateInterruptPriority+0x74>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <vPortValidateInterruptPriority+0x78>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	7afa      	ldrb	r2, [r7, #11]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20b      	bcs.n	8002dda <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	607b      	str	r3, [r7, #4]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <vPortValidateInterruptPriority+0x7c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002de2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <vPortValidateInterruptPriority+0x80>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d90b      	bls.n	8002e02 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	603b      	str	r3, [r7, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <vPortValidateInterruptPriority+0x62>
    }
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e3f0 	.word	0xe000e3f0
 8002e14:	200001b8 	.word	0x200001b8
 8002e18:	e000ed0c 	.word	0xe000ed0c
 8002e1c:	200001bc 	.word	0x200001bc

08002e20 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	@ 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d022      	beq.n	8002e78 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002e32:	2308      	movs	r3, #8
 8002e34:	43db      	mvns	r3, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d81b      	bhi.n	8002e74 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d014      	beq.n	8002e78 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	f1c3 0308 	rsb	r3, r3, #8
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d804      	bhi.n	8002e6e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	4413      	add	r3, r2
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	e004      	b.n	8002e78 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e001      	b.n	8002e78 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002e78:	f7fe fa72 	bl	8001360 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e7c:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <pvPortMalloc+0x248>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002e84:	f000 f978 	bl	8003178 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f2c0 80d3 	blt.w	8003036 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80cf 	beq.w	8003036 <pvPortMalloc+0x216>
 8002e98:	4b74      	ldr	r3, [pc, #464]	@ (800306c <pvPortMalloc+0x24c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f200 80c9 	bhi.w	8003036 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ea4:	4b72      	ldr	r3, [pc, #456]	@ (8003070 <pvPortMalloc+0x250>)
 8002ea6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002ea8:	4b71      	ldr	r3, [pc, #452]	@ (8003070 <pvPortMalloc+0x250>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	4a70      	ldr	r2, [pc, #448]	@ (8003074 <pvPortMalloc+0x254>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d305      	bcc.n	8002ec2 <pvPortMalloc+0xa2>
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb8:	4a6f      	ldr	r2, [pc, #444]	@ (8003078 <pvPortMalloc+0x258>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d801      	bhi.n	8002ec2 <pvPortMalloc+0xa2>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <pvPortMalloc+0xa4>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d129      	bne.n	8002f1c <pvPortMalloc+0xfc>
    __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	623b      	str	r3, [r7, #32]
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	4a61      	ldr	r2, [pc, #388]	@ (8003074 <pvPortMalloc+0x254>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d305      	bcc.n	8002efe <pvPortMalloc+0xde>
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef4:	4a60      	ldr	r2, [pc, #384]	@ (8003078 <pvPortMalloc+0x258>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d801      	bhi.n	8002efe <pvPortMalloc+0xde>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <pvPortMalloc+0xe0>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <pvPortMalloc+0xfc>
    __asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61fb      	str	r3, [r7, #28]
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d903      	bls.n	8002f2e <pvPortMalloc+0x10e>
 8002f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1d8      	bne.n	8002ee0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003068 <pvPortMalloc+0x248>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d07e      	beq.n	8003036 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4413      	add	r3, r2
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	4a4b      	ldr	r2, [pc, #300]	@ (8003074 <pvPortMalloc+0x254>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d305      	bcc.n	8002f56 <pvPortMalloc+0x136>
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8003078 <pvPortMalloc+0x258>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d801      	bhi.n	8002f56 <pvPortMalloc+0x136>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <pvPortMalloc+0x138>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <pvPortMalloc+0x154>
    __asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d90b      	bls.n	8002f9e <pvPortMalloc+0x17e>
    __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	617b      	str	r3, [r7, #20]
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	e7fd      	b.n	8002f9a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d924      	bls.n	8002ff8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <pvPortMalloc+0x1b8>
    __asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	613b      	str	r3, [r7, #16]
}
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad2      	subs	r2, r2, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <pvPortMalloc+0x24c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <pvPortMalloc+0x24c>)
 8003004:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <pvPortMalloc+0x24c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <pvPortMalloc+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d203      	bcs.n	800301a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003012:	4b16      	ldr	r3, [pc, #88]	@ (800306c <pvPortMalloc+0x24c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a19      	ldr	r2, [pc, #100]	@ (800307c <pvPortMalloc+0x25c>)
 8003018:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800301a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003024:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <pvPortMalloc+0x260>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <pvPortMalloc+0x260>)
 8003034:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003036:	f7fe f9a1 	bl	800137c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <pvPortMalloc+0x23c>
    __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	60fb      	str	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <pvPortMalloc+0x238>
    return pvReturn;
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800305e:	4618      	mov	r0, r3
 8003060:	3738      	adds	r7, #56	@ 0x38
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20012dc8 	.word	0x20012dc8
 800306c:	20012dcc 	.word	0x20012dcc
 8003070:	20012dc0 	.word	0x20012dc0
 8003074:	200001c0 	.word	0x200001c0
 8003078:	20012dbf 	.word	0x20012dbf
 800307c:	20012dd0 	.word	0x20012dd0
 8003080:	20012dd4 	.word	0x20012dd4

08003084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d064      	beq.n	8003160 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003096:	2308      	movs	r3, #8
 8003098:	425b      	negs	r3, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4a30      	ldr	r2, [pc, #192]	@ (8003168 <vPortFree+0xe4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d305      	bcc.n	80030b8 <vPortFree+0x34>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4a2f      	ldr	r2, [pc, #188]	@ (800316c <vPortFree+0xe8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d801      	bhi.n	80030b8 <vPortFree+0x34>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <vPortFree+0x36>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <vPortFree+0x52>
    __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	617b      	str	r3, [r7, #20]
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <vPortFree+0x72>
    __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	613b      	str	r3, [r7, #16]
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	e7fd      	b.n	80030f2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <vPortFree+0x92>
    __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60fb      	str	r3, [r7, #12]
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	e7fd      	b.n	8003112 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0fdb      	lsrs	r3, r3, #31
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01c      	beq.n	8003160 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800313a:	f7fe f911 	bl	8001360 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <vPortFree+0xec>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <vPortFree+0xec>)
 800314a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800314c:	69b8      	ldr	r0, [r7, #24]
 800314e:	f000 f86d 	bl	800322c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003152:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <vPortFree+0xf0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	4a06      	ldr	r2, [pc, #24]	@ (8003174 <vPortFree+0xf0>)
 800315a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800315c:	f7fe f90e 	bl	800137c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200001c0 	.word	0x200001c0
 800316c:	20012dbf 	.word	0x20012dbf
 8003170:	20012dcc 	.word	0x20012dcc
 8003174:	20012dd8 	.word	0x20012dd8

08003178 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800317e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003182:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003184:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <prvHeapInit+0xa0>)
 8003186:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3307      	adds	r3, #7
 8003196:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0307 	bic.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <prvHeapInit+0xa0>)
 80031a8:	4413      	add	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <prvHeapInit+0xa4>)
 80031b0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <prvHeapInit+0xa4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80031c0:	2208      	movs	r2, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f023 0307 	bic.w	r3, r3, #7
 80031ce:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a13      	ldr	r2, [pc, #76]	@ (8003220 <prvHeapInit+0xa8>)
 80031d4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031d6:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <prvHeapInit+0xa8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <prvHeapInit+0xa8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <prvHeapInit+0xa8>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a08      	ldr	r2, [pc, #32]	@ (8003224 <prvHeapInit+0xac>)
 8003202:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a07      	ldr	r2, [pc, #28]	@ (8003228 <prvHeapInit+0xb0>)
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	200001c0 	.word	0x200001c0
 800321c:	20012dc0 	.word	0x20012dc0
 8003220:	20012dc8 	.word	0x20012dc8
 8003224:	20012dd0 	.word	0x20012dd0
 8003228:	20012dcc 	.word	0x20012dcc

0800322c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <prvInsertBlockIntoFreeList+0xe4>)
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e002      	b.n	8003240 <prvInsertBlockIntoFreeList+0x14>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d8f7      	bhi.n	800323a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <prvInsertBlockIntoFreeList+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a2f      	ldr	r2, [pc, #188]	@ (8003314 <prvInsertBlockIntoFreeList+0xe8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d305      	bcc.n	8003266 <prvInsertBlockIntoFreeList+0x3a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4a2e      	ldr	r2, [pc, #184]	@ (8003318 <prvInsertBlockIntoFreeList+0xec>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d801      	bhi.n	8003266 <prvInsertBlockIntoFreeList+0x3a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <prvInsertBlockIntoFreeList+0x3c>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d108      	bne.n	80032a8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	441a      	add	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	441a      	add	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d118      	bne.n	80032ee <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <prvInsertBlockIntoFreeList+0xf0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d00d      	beq.n	80032e4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e008      	b.n	80032f6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80032e4:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <prvInsertBlockIntoFreeList+0xf0>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e003      	b.n	80032f6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d002      	beq.n	8003304 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20012dc0 	.word	0x20012dc0
 8003314:	200001c0 	.word	0x200001c0
 8003318:	20012dbf 	.word	0x20012dbf
 800331c:	20012dc8 	.word	0x20012dc8

08003320 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003324:	4803      	ldr	r0, [pc, #12]	@ (8003334 <_cbSendSystemDesc+0x14>)
 8003326:	f001 ff2b 	bl	8005180 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800332a:	4803      	ldr	r0, [pc, #12]	@ (8003338 <_cbSendSystemDesc+0x18>)
 800332c:	f001 ff28 	bl	8005180 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	08007bb4 	.word	0x08007bb4
 8003338:	08007bfc 	.word	0x08007bfc

0800333c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <SEGGER_SYSVIEW_Conf+0x20>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <SEGGER_SYSVIEW_Conf+0x20>)
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <SEGGER_SYSVIEW_Conf+0x24>)
 800334a:	4a06      	ldr	r2, [pc, #24]	@ (8003364 <SEGGER_SYSVIEW_Conf+0x28>)
 800334c:	f001 fb9e 	bl	8004a8c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003350:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003354:	f001 fbde 	bl	8004b14 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000010 	.word	0x20000010
 8003360:	08003321 	.word	0x08003321
 8003364:	08007cd4 	.word	0x08007cd4

08003368 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b085      	sub	sp, #20
 800336c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	e033      	b.n	80033dc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003374:	491e      	ldr	r1, [pc, #120]	@ (80033f0 <_cbSendTaskList+0x88>)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	491a      	ldr	r1, [pc, #104]	@ (80033f0 <_cbSendTaskList+0x88>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3304      	adds	r3, #4
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	4c16      	ldr	r4, [pc, #88]	@ (80033f0 <_cbSendTaskList+0x88>)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4423      	add	r3, r4
 80033a4:	3308      	adds	r3, #8
 80033a6:	681c      	ldr	r4, [r3, #0]
 80033a8:	4d11      	ldr	r5, [pc, #68]	@ (80033f0 <_cbSendTaskList+0x88>)
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	442b      	add	r3, r5
 80033b6:	330c      	adds	r3, #12
 80033b8:	681d      	ldr	r5, [r3, #0]
 80033ba:	4e0d      	ldr	r6, [pc, #52]	@ (80033f0 <_cbSendTaskList+0x88>)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4433      	add	r3, r6
 80033c8:	3310      	adds	r3, #16
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	462b      	mov	r3, r5
 80033d0:	4622      	mov	r2, r4
 80033d2:	f000 f979 	bl	80036c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3301      	adds	r3, #1
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <_cbSendTaskList+0x8c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3c6      	bcc.n	8003374 <_cbSendTaskList+0xc>
  }
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f0:	20012ddc 	.word	0x20012ddc
 80033f4:	20012e7c 	.word	0x20012e7c

080033f8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003400:	f7fe f8e0 	bl	80015c4 <xTaskGetTickCountFromISR>
 8003404:	4603      	mov	r3, r0
 8003406:	2200      	movs	r2, #0
 8003408:	469a      	mov	sl, r3
 800340a:	4693      	mov	fp, r2
 800340c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	f04f 0a00 	mov.w	sl, #0
 800341c:	f04f 0b00 	mov.w	fp, #0
 8003420:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003424:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003428:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800342c:	4652      	mov	r2, sl
 800342e:	465b      	mov	r3, fp
 8003430:	1a14      	subs	r4, r2, r0
 8003432:	eb63 0501 	sbc.w	r5, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	00ab      	lsls	r3, r5, #2
 8003440:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003444:	00a2      	lsls	r2, r4, #2
 8003446:	4614      	mov	r4, r2
 8003448:	461d      	mov	r5, r3
 800344a:	eb14 0800 	adds.w	r8, r4, r0
 800344e:	eb45 0901 	adc.w	r9, r5, r1
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003466:	4690      	mov	r8, r2
 8003468:	4699      	mov	r9, r3
 800346a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800346e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003480 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800348e:	2205      	movs	r2, #5
 8003490:	492b      	ldr	r1, [pc, #172]	@ (8003540 <SYSVIEW_AddTask+0xc0>)
 8003492:	68b8      	ldr	r0, [r7, #8]
 8003494:	f004 fb2c 	bl	8007af0 <memcmp>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04b      	beq.n	8003536 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800349e:	4b29      	ldr	r3, [pc, #164]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	d903      	bls.n	80034ae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034a6:	4828      	ldr	r0, [pc, #160]	@ (8003548 <SYSVIEW_AddTask+0xc8>)
 80034a8:	f002 fa1a 	bl	80058e0 <SEGGER_SYSVIEW_Warn>
    return;
 80034ac:	e044      	b.n	8003538 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034ae:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4926      	ldr	r1, [pc, #152]	@ (800354c <SYSVIEW_AddTask+0xcc>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034c2:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4921      	ldr	r1, [pc, #132]	@ (800354c <SYSVIEW_AddTask+0xcc>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3304      	adds	r3, #4
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	491b      	ldr	r1, [pc, #108]	@ (800354c <SYSVIEW_AddTask+0xcc>)
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3308      	adds	r3, #8
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4916      	ldr	r1, [pc, #88]	@ (800354c <SYSVIEW_AddTask+0xcc>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	330c      	adds	r3, #12
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003504:	4b0f      	ldr	r3, [pc, #60]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4910      	ldr	r1, [pc, #64]	@ (800354c <SYSVIEW_AddTask+0xcc>)
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3310      	adds	r3, #16
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <SYSVIEW_AddTask+0xc4>)
 8003522:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f8ca 	bl	80036c8 <SYSVIEW_SendTaskInfo>
 8003534:	e000      	b.n	8003538 <SYSVIEW_AddTask+0xb8>
    return;
 8003536:	bf00      	nop

}
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08007c0c 	.word	0x08007c0c
 8003544:	20012e7c 	.word	0x20012e7c
 8003548:	08007c14 	.word	0x08007c14
 800354c:	20012ddc 	.word	0x20012ddc

08003550 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003558:	4b59      	ldr	r3, [pc, #356]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80ab 	beq.w	80036b8 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e00d      	b.n	8003584 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003568:	4956      	ldr	r1, [pc, #344]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d008      	beq.n	8003590 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3301      	adds	r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	4b4e      	ldr	r3, [pc, #312]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3ec      	bcc.n	8003568 <SYSVIEW_DeleteTask+0x18>
 800358e:	e000      	b.n	8003592 <SYSVIEW_DeleteTask+0x42>
      break;
 8003590:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003592:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	429a      	cmp	r2, r3
 800359c:	d111      	bne.n	80035c2 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4a46      	ldr	r2, [pc, #280]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 80035aa:	4413      	add	r3, r2
 80035ac:	2214      	movs	r2, #20
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 faad 	bl	8007b10 <memset>
    _NumTasks--;
 80035b6:	4b42      	ldr	r3, [pc, #264]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e07b      	b.n	80036ba <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d276      	bcs.n	80036ba <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80035cc:	4b3c      	ldr	r3, [pc, #240]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	493c      	ldr	r1, [pc, #240]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	4838      	ldr	r0, [pc, #224]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80035f0:	4b33      	ldr	r3, [pc, #204]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	4933      	ldr	r1, [pc, #204]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3304      	adds	r3, #4
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	482f      	ldr	r0, [pc, #188]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4403      	add	r3, r0
 8003614:	3304      	adds	r3, #4
 8003616:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003618:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	4929      	ldr	r1, [pc, #164]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3308      	adds	r3, #8
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	4825      	ldr	r0, [pc, #148]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4403      	add	r3, r0
 800363c:	3308      	adds	r3, #8
 800363e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003640:	4b1f      	ldr	r3, [pc, #124]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	491f      	ldr	r1, [pc, #124]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	330c      	adds	r3, #12
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	481b      	ldr	r0, [pc, #108]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4403      	add	r3, r0
 8003664:	330c      	adds	r3, #12
 8003666:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	4915      	ldr	r1, [pc, #84]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3310      	adds	r3, #16
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	4811      	ldr	r0, [pc, #68]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4403      	add	r3, r0
 800368c:	3310      	adds	r3, #16
 800368e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1e5a      	subs	r2, r3, #1
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a09      	ldr	r2, [pc, #36]	@ (80036c4 <SYSVIEW_DeleteTask+0x174>)
 80036a0:	4413      	add	r3, r2
 80036a2:	2214      	movs	r2, #20
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fa32 	bl	8007b10 <memset>
    _NumTasks--;
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	4a03      	ldr	r2, [pc, #12]	@ (80036c0 <SYSVIEW_DeleteTask+0x170>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e000      	b.n	80036ba <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80036b8:	bf00      	nop
  }
}
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20012e7c 	.word	0x20012e7c
 80036c4:	20012ddc 	.word	0x20012ddc

080036c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036d6:	f107 0310 	add.w	r3, r7, #16
 80036da:	2218      	movs	r2, #24
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fa16 	bl	8007b10 <memset>
  TaskInfo.TaskID     = TaskID;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fc47 	bl	8004f90 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	@ 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003712:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <_DoInit+0xa0>)
 8003714:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003716:	22a8      	movs	r2, #168	@ 0xa8
 8003718:	2100      	movs	r1, #0
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f004 f9f8 	bl	8007b10 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2203      	movs	r2, #3
 8003724:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2203      	movs	r2, #3
 800372a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <_DoInit+0xa4>)
 8003730:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4a1f      	ldr	r2, [pc, #124]	@ (80037b4 <_DoInit+0xa8>)
 8003736:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800373e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	4a16      	ldr	r2, [pc, #88]	@ (80037b0 <_DoInit+0xa4>)
 8003756:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <_DoInit+0xac>)
 800375c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2210      	movs	r2, #16
 8003762:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003776:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	e00c      	b.n	800379a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1c3 030f 	rsb	r3, r3, #15
 8003786:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <_DoInit+0xb0>)
 8003788:	5cd1      	ldrb	r1, [r2, r3]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	460a      	mov	r2, r1
 8003792:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3301      	adds	r3, #1
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d9ef      	bls.n	8003780 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80037a0:	f3bf 8f5f 	dmb	sy
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20012e80 	.word	0x20012e80
 80037b0:	08007c64 	.word	0x08007c64
 80037b4:	20012f28 	.word	0x20012f28
 80037b8:	20013328 	.word	0x20013328
 80037bc:	08007cdc 	.word	0x08007cdc

080037c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d905      	bls.n	80037f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ee:	e007      	b.n	8003800 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1acb      	subs	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3b01      	subs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380a:	4293      	cmp	r3, r2
 800380c:	bf28      	it	cs
 800380e:	4613      	movcs	r3, r2
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4293      	cmp	r3, r2
 8003818:	bf28      	it	cs
 800381a:	4613      	movcs	r3, r2
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	6978      	ldr	r0, [r7, #20]
 800382e:	f004 f99b 	bl	8007b68 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	4413      	add	r3, r2
 8003838:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	4413      	add	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	4413      	add	r3, r2
 8003850:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	429a      	cmp	r2, r3
 800385a:	d101      	bne.n	8003860 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003860:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1b2      	bne.n	80037d6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003870:	6a3b      	ldr	r3, [r7, #32]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3728      	adds	r7, #40	@ 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d911      	bls.n	80038c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	6938      	ldr	r0, [r7, #16]
 80038ae:	f004 f95b 	bl	8007b68 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80038c0:	e01f      	b.n	8003902 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	6938      	ldr	r0, [r7, #16]
 80038d6:	f004 f947 	bl	8007b68 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4413      	add	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4619      	mov	r1, r3
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f004 f938 	bl	8007b68 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	60da      	str	r2, [r3, #12]
}
 8003902:	bf00      	nop
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	429a      	cmp	r2, r3
 8003924:	d808      	bhi.n	8003938 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	3b01      	subs	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e004      	b.n	8003942 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003942:	697b      	ldr	r3, [r7, #20]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	@ 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800395c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a58 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b53      	cmp	r3, #83	@ 0x53
 8003968:	d001      	beq.n	800396e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800396a:	f7ff fecf 	bl	800370c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4a37      	ldr	r2, [pc, #220]	@ (8003a58 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800397c:	4413      	add	r3, r2
 800397e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	429a      	cmp	r2, r3
 800399a:	d92b      	bls.n	80039f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4293      	cmp	r3, r2
 80039ac:	bf28      	it	cs
 80039ae:	4613      	movcs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b8:	4413      	add	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039c2:	f004 f8d1 	bl	8007b68 <memcpy>
    NumBytesRead += NumBytesRem;
 80039c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d101      	bne.n	80039f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bf28      	it	cs
 8003a04:	4613      	movcs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d019      	beq.n	8003a42 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	4413      	add	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6939      	ldr	r1, [r7, #16]
 8003a1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a1e:	f004 f8a3 	bl	8007b68 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4413      	add	r3, r2
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4413      	add	r3, r2
 8003a40:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	@ 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20012e80 	.word	0x20012e80

08003a5c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	@ 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a68:	4b3e      	ldr	r3, [pc, #248]	@ (8003b64 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b53      	cmp	r3, #83	@ 0x53
 8003a74:	d001      	beq.n	8003a7a <SEGGER_RTT_ReadNoLock+0x1e>
 8003a76:	f7ff fe49 	bl	800370c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	3360      	adds	r3, #96	@ 0x60
 8003a86:	4a37      	ldr	r2, [pc, #220]	@ (8003b64 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d92b      	bls.n	8003b00 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bf28      	it	cs
 8003aba:	4613      	movcs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	4413      	add	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ace:	f004 f84b 	bl	8007b68 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4413      	add	r3, r2
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d101      	bne.n	8003b00 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf28      	it	cs
 8003b10:	4613      	movcs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	4413      	add	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	6939      	ldr	r1, [r7, #16]
 8003b28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b2a:	f004 f81d 	bl	8007b68 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3730      	adds	r7, #48	@ 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20012e80 	.word	0x20012e80

08003b68 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	3360      	adds	r3, #96	@ 0x60
 8003b84:	4a1f      	ldr	r2, [pc, #124]	@ (8003c04 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d029      	beq.n	8003be6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d82e      	bhi.n	8003bf4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d013      	beq.n	8003bc6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003b9e:	e029      	b.n	8003bf4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f7ff feb2 	bl	800390a <_GetAvailWriteSpace>
 8003ba6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d202      	bcs.n	8003bb6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003bb4:	e021      	b.n	8003bfa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f7ff fe5b 	bl	800387a <_WriteNoCheck>
    break;
 8003bc4:	e019      	b.n	8003bfa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff fe9f 	bl	800390a <_GetAvailWriteSpace>
 8003bcc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	bf28      	it	cs
 8003bd6:	4613      	movcs	r3, r2
 8003bd8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7ff fe4b 	bl	800387a <_WriteNoCheck>
    break;
 8003be4:	e009      	b.n	8003bfa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff fde8 	bl	80037c0 <_WriteBlocking>
 8003bf0:	61f8      	str	r0, [r7, #28]
    break;
 8003bf2:	e002      	b.n	8003bfa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
    break;
 8003bf8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20012e80 	.word	0x20012e80

08003c08 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b53      	cmp	r3, #83	@ 0x53
 8003c20:	d001      	beq.n	8003c26 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003c22:	f7ff fd73 	bl	800370c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c26:	f3ef 8311 	mrs	r3, BASEPRI
 8003c2a:	f04f 0120 	mov.w	r1, #32
 8003c2e:	f381 8811 	msr	BASEPRI, r1
 8003c32:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff ff95 	bl	8003b68 <SEGGER_RTT_WriteDownBufferNoLock>
 8003c3e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20012e80 	.word	0x20012e80

08003c54 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c62:	4b3d      	ldr	r3, [pc, #244]	@ (8003d58 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b53      	cmp	r3, #83	@ 0x53
 8003c6e:	d001      	beq.n	8003c74 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c70:	f7ff fd4c 	bl	800370c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c74:	f3ef 8311 	mrs	r3, BASEPRI
 8003c78:	f04f 0120 	mov.w	r1, #32
 8003c7c:	f381 8811 	msr	BASEPRI, r1
 8003c80:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c82:	4b35      	ldr	r3, [pc, #212]	@ (8003d58 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c84:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003c8a:	6939      	ldr	r1, [r7, #16]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	dbeb      	blt.n	8003c8a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003cb2:	e000      	b.n	8003cb6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003cb4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	da3f      	bge.n	8003d40 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003cea:	6939      	ldr	r1, [r7, #16]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003cfe:	6939      	ldr	r1, [r7, #16]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3328      	adds	r3, #40	@ 0x28
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3324      	adds	r3, #36	@ 0x24
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d26:	6939      	ldr	r1, [r7, #16]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	332c      	adds	r3, #44	@ 0x2c
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d3a:	f3bf 8f5f 	dmb	sy
 8003d3e:	e002      	b.n	8003d46 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20012e80 	.word	0x20012e80

08003d5c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	@ 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003d6a:	4b21      	ldr	r3, [pc, #132]	@ (8003df0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d6c:	623b      	str	r3, [r7, #32]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b53      	cmp	r3, #83	@ 0x53
 8003d76:	d001      	beq.n	8003d7c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d78:	f7ff fcc8 	bl	800370c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d7e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d82c      	bhi.n	8003de0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003d86:	f3ef 8311 	mrs	r3, BASEPRI
 8003d8a:	f04f 0120 	mov.w	r1, #32
 8003d8e:	f381 8811 	msr	BASEPRI, r1
 8003d92:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	3360      	adds	r3, #96	@ 0x60
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dd0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e002      	b.n	8003de6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	@ 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20012e80 	.word	0x20012e80

08003df4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	60fa      	str	r2, [r7, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d90a      	bls.n	8003e28 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e16:	e007      	b.n	8003e28 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	1c53      	adds	r3, r2, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	60f9      	str	r1, [r7, #12]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1e5a      	subs	r2, r3, #1
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <_EncodeStr+0x46>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ee      	bne.n	8003e18 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3307      	adds	r3, #7
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e72:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <_HandleIncomingPacket+0xd8>)
 8003e74:	7e1b      	ldrb	r3, [r3, #24]
 8003e76:	4618      	mov	r0, r3
 8003e78:	1cfb      	adds	r3, r7, #3
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7ff fded 	bl	8003a5c <SEGGER_RTT_ReadNoLock>
 8003e82:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d057      	beq.n	8003f3a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	d031      	beq.n	8003ef4 <_HandleIncomingPacket+0x88>
 8003e90:	2b80      	cmp	r3, #128	@ 0x80
 8003e92:	dc40      	bgt.n	8003f16 <_HandleIncomingPacket+0xaa>
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	dc15      	bgt.n	8003ec4 <_HandleIncomingPacket+0x58>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	dd3c      	ble.n	8003f16 <_HandleIncomingPacket+0xaa>
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d839      	bhi.n	8003f16 <_HandleIncomingPacket+0xaa>
 8003ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <_HandleIncomingPacket+0x3c>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecb 	.word	0x08003ecb
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed7 	.word	0x08003ed7
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ec6:	d033      	beq.n	8003f30 <_HandleIncomingPacket+0xc4>
 8003ec8:	e025      	b.n	8003f16 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003eca:	f000 fee7 	bl	8004c9c <SEGGER_SYSVIEW_Start>
      break;
 8003ece:	e034      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ed0:	f000 ff9e 	bl	8004e10 <SEGGER_SYSVIEW_Stop>
      break;
 8003ed4:	e031      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ed6:	f001 f977 	bl	80051c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003eda:	e02e      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003edc:	f001 f93c 	bl	8005158 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ee0:	e02b      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ee2:	f000 ffbb 	bl	8004e5c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ee6:	e028      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ee8:	f001 fca8 	bl	800583c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003eec:	e025      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003eee:	f001 fc87 	bl	8005800 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003ef2:	e022      	b.n	8003f3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <_HandleIncomingPacket+0xd8>)
 8003ef6:	7e1b      	ldrb	r3, [r3, #24]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	1cfb      	adds	r3, r7, #3
 8003efc:	2201      	movs	r2, #1
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7ff fdac 	bl	8003a5c <SEGGER_RTT_ReadNoLock>
 8003f04:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fbec 	bl	80056ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f14:	e00e      	b.n	8003f34 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da0c      	bge.n	8003f38 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <_HandleIncomingPacket+0xd8>)
 8003f20:	7e1b      	ldrb	r3, [r3, #24]
 8003f22:	4618      	mov	r0, r3
 8003f24:	1cfb      	adds	r3, r7, #3
 8003f26:	2201      	movs	r2, #1
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7ff fd97 	bl	8003a5c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f2e:	e003      	b.n	8003f38 <_HandleIncomingPacket+0xcc>
      break;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <_HandleIncomingPacket+0xce>
      break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <_HandleIncomingPacket+0xce>
      break;
 8003f38:	bf00      	nop
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20014340 	.word	0x20014340

08003f48 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f4e:	2301      	movs	r3, #1
 8003f50:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5c:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f62:	e00b      	b.n	8003f7c <_TrySendOverflowPacket+0x34>
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	09db      	lsrs	r3, r3, #7
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f80:	d8f0      	bhi.n	8003f64 <_TrySendOverflowPacket+0x1c>
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f90:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f92:	4b25      	ldr	r3, [pc, #148]	@ (8004028 <_TrySendOverflowPacket+0xe0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	e00b      	b.n	8003fc4 <_TrySendOverflowPacket+0x7c>
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8003fb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	09db      	lsrs	r3, r3, #7
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fc8:	d8f0      	bhi.n	8003fac <_TrySendOverflowPacket+0x64>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003fda:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7fc f910 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004000:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e004      	b.n	8004018 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	3301      	adds	r3, #1
 8004014:	4a03      	ldr	r2, [pc, #12]	@ (8004024 <_TrySendOverflowPacket+0xdc>)
 8004016:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004018:	693b      	ldr	r3, [r7, #16]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3730      	adds	r7, #48	@ 0x30
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20014340 	.word	0x20014340
 8004028:	e0001004 	.word	0xe0001004

0800402c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004038:	4b98      	ldr	r3, [pc, #608]	@ (800429c <_SendPacket+0x270>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d010      	beq.n	8004062 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004040:	4b96      	ldr	r3, [pc, #600]	@ (800429c <_SendPacket+0x270>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 812d 	beq.w	80042a4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800404a:	4b94      	ldr	r3, [pc, #592]	@ (800429c <_SendPacket+0x270>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d109      	bne.n	8004066 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004052:	f7ff ff79 	bl	8003f48 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004056:	4b91      	ldr	r3, [pc, #580]	@ (800429c <_SendPacket+0x270>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 8124 	bne.w	80042a8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004060:	e001      	b.n	8004066 <_SendPacket+0x3a>
    goto Send;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <_SendPacket+0x3c>
Send:
 8004066:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b1f      	cmp	r3, #31
 800406c:	d809      	bhi.n	8004082 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800406e:	4b8b      	ldr	r3, [pc, #556]	@ (800429c <_SendPacket+0x270>)
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8115 	bne.w	80042ac <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b17      	cmp	r3, #23
 8004086:	d807      	bhi.n	8004098 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e0c4      	b.n	8004222 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80040a4:	d912      	bls.n	80040cc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	09da      	lsrs	r2, r3, #7
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	3a01      	subs	r2, #1
 80040be:	60fa      	str	r2, [r7, #12]
 80040c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e006      	b.n	80040da <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80040de:	d807      	bhi.n	80040f0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e098      	b.n	8004222 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f6:	d212      	bcs.n	800411e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	09da      	lsrs	r2, r3, #7
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	3a01      	subs	r2, #1
 8004110:	60fa      	str	r2, [r7, #12]
 8004112:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e081      	b.n	8004222 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004124:	d21d      	bcs.n	8004162 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0b9a      	lsrs	r2, r3, #14
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	09db      	lsrs	r3, r3, #7
 800413a:	b2db      	uxtb	r3, r3
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	3a01      	subs	r2, #1
 8004140:	60fa      	str	r2, [r7, #12]
 8004142:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	3a01      	subs	r2, #1
 8004154:	60fa      	str	r2, [r7, #12]
 8004156:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e05f      	b.n	8004222 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004168:	d228      	bcs.n	80041bc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0d5a      	lsrs	r2, r3, #21
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b01      	subs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0b9b      	lsrs	r3, r3, #14
 800417e:	b2db      	uxtb	r3, r3
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	3a01      	subs	r2, #1
 8004184:	60fa      	str	r2, [r7, #12]
 8004186:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	b2db      	uxtb	r3, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	3a01      	subs	r2, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	3a01      	subs	r2, #1
 80041ae:	60fa      	str	r2, [r7, #12]
 80041b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e032      	b.n	8004222 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0f1a      	lsrs	r2, r3, #28
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0d5b      	lsrs	r3, r3, #21
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	3a01      	subs	r2, #1
 80041d6:	60fa      	str	r2, [r7, #12]
 80041d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0b9b      	lsrs	r3, r3, #14
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	3a01      	subs	r2, #1
 80041ec:	60fa      	str	r2, [r7, #12]
 80041ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	3a01      	subs	r2, #1
 8004202:	60fa      	str	r2, [r7, #12]
 8004204:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	3a01      	subs	r2, #1
 8004216:	60fa      	str	r2, [r7, #12]
 8004218:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <_SendPacket+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004228:	4b1c      	ldr	r3, [pc, #112]	@ (800429c <_SendPacket+0x270>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	e00b      	b.n	8004254 <_SendPacket+0x228>
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	1c59      	adds	r1, r3, #1
 8004244:	6279      	str	r1, [r7, #36]	@ 0x24
 8004246:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	09db      	lsrs	r3, r3, #7
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b7f      	cmp	r3, #127	@ 0x7f
 8004258:	d8f0      	bhi.n	800423c <_SendPacket+0x210>
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004260:	6a3a      	ldr	r2, [r7, #32]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800426a:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <_SendPacket+0x270>)
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	4618      	mov	r0, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	461a      	mov	r2, r3
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	f7fb ffc9 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800427e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <_SendPacket+0x270>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	60d3      	str	r3, [r2, #12]
 800428c:	e00f      	b.n	80042ae <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800428e:	4b03      	ldr	r3, [pc, #12]	@ (800429c <_SendPacket+0x270>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b01      	ldr	r3, [pc, #4]	@ (800429c <_SendPacket+0x270>)
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e008      	b.n	80042ae <_SendPacket+0x282>
 800429c:	20014340 	.word	0x20014340
 80042a0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80042a4:	bf00      	nop
 80042a6:	e002      	b.n	80042ae <_SendPacket+0x282>
      goto SendDone;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <_SendPacket+0x282>
      goto SendDone;
 80042ac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80042ae:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <_SendPacket+0x2d4>)
 80042b0:	7e1b      	ldrb	r3, [r3, #24]
 80042b2:	4619      	mov	r1, r3
 80042b4:	4a13      	ldr	r2, [pc, #76]	@ (8004304 <_SendPacket+0x2d8>)
 80042b6:	460b      	mov	r3, r1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	440b      	add	r3, r1
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	336c      	adds	r3, #108	@ 0x6c
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <_SendPacket+0x2d4>)
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
 80042c8:	4618      	mov	r0, r3
 80042ca:	490e      	ldr	r1, [pc, #56]	@ (8004304 <_SendPacket+0x2d8>)
 80042cc:	4603      	mov	r3, r0
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4403      	add	r3, r0
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	3370      	adds	r3, #112	@ 0x70
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d00b      	beq.n	80042f6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80042de:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <_SendPacket+0x2d4>)
 80042e0:	789b      	ldrb	r3, [r3, #2]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <_SendPacket+0x2d4>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80042ec:	f7ff fdbe 	bl	8003e6c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <_SendPacket+0x2d4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	@ 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20014340 	.word	0x20014340
 8004304:	20012e80 	.word	0x20012e80

08004308 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3301      	adds	r3, #1
 800431e:	2b80      	cmp	r3, #128	@ 0x80
 8004320:	d80a      	bhi.n	8004338 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6051      	str	r1, [r2, #4]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	d15a      	bne.n	80043f6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	e00b      	b.n	800437a <_StoreChar+0x72>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	6279      	str	r1, [r7, #36]	@ 0x24
 800436c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	09db      	lsrs	r3, r3, #7
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2b7f      	cmp	r3, #127	@ 0x7f
 800437e:	d8f0      	bhi.n	8004362 <_StoreChar+0x5a>
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	627a      	str	r2, [r7, #36]	@ 0x24
 8004386:	6a3a      	ldr	r2, [r7, #32]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e00b      	b.n	80043b2 <_StoreChar+0xaa>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	61f9      	str	r1, [r7, #28]
 80043a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80043b6:	d8f0      	bhi.n	800439a <_StoreChar+0x92>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	61fa      	str	r2, [r7, #28]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	221a      	movs	r2, #26
 80043ce:	6939      	ldr	r1, [r7, #16]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe2b 	bl	800402c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fd3a 	bl	8003e54 <_PreparePacket>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
  }
}
 80043f6:	bf00      	nop
 80043f8:	3728      	adds	r7, #40	@ 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004412:	2301      	movs	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004416:	2301      	movs	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800441a:	e007      	b.n	800442c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	623b      	str	r3, [r7, #32]
    Width++;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d2f3      	bcs.n	800441c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	429a      	cmp	r2, r3
 800443a:	d901      	bls.n	8004440 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d000      	beq.n	800444c <_PrintUnsigned+0x4c>
 800444a:	e01f      	b.n	800448c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01c      	beq.n	800448c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <_PrintUnsigned+0x68>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <_PrintUnsigned+0x68>
        c = '0';
 8004462:	2330      	movs	r3, #48	@ 0x30
 8004464:	76fb      	strb	r3, [r7, #27]
 8004466:	e001      	b.n	800446c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004468:	2320      	movs	r3, #32
 800446a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800446c:	e007      	b.n	800447e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	3b01      	subs	r3, #1
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004474:	7efb      	ldrb	r3, [r7, #27]
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff ff45 	bl	8004308 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <_PrintUnsigned+0x8c>
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	429a      	cmp	r2, r3
 800448a:	d3f0      	bcc.n	800446e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d903      	bls.n	800449a <_PrintUnsigned+0x9a>
      NumDigits--;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	e009      	b.n	80044ae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d200      	bcs.n	80044ae <_PrintUnsigned+0xae>
        break;
 80044ac:	e005      	b.n	80044ba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044b8:	e7e8      	b.n	800448c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80044d2:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <_PrintUnsigned+0x128>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff13 	bl	8004308 <_StoreChar>
    Digit /= Base;
 80044e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80044f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d011      	beq.n	8004520 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004502:	e006      	b.n	8004512 <_PrintUnsigned+0x112>
        FieldWidth--;
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	3b01      	subs	r3, #1
 8004508:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800450a:	2120      	movs	r1, #32
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fefb 	bl	8004308 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <_PrintUnsigned+0x120>
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	429a      	cmp	r2, r3
 800451e:	d3f1      	bcc.n	8004504 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004520:	bf00      	nop
 8004522:	3728      	adds	r7, #40	@ 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	08007cfc 	.word	0x08007cfc

0800452c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb8      	it	lt
 8004540:	425b      	neglt	r3, r3
 8004542:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004548:	e007      	b.n	800455a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
    Width++;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3301      	adds	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	daf3      	bge.n	800454a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d901      	bls.n	800456e <_PrintInt+0x42>
    Width = NumDigits;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <_PrintInt+0x5e>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	db04      	blt.n	8004584 <_PrintInt+0x58>
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <_PrintInt+0x5e>
    FieldWidth--;
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	3b01      	subs	r3, #1
 8004588:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <_PrintInt+0x6e>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <_PrintInt+0x9c>
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00e      	beq.n	80045c8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045aa:	e006      	b.n	80045ba <_PrintInt+0x8e>
        FieldWidth--;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80045b2:	2120      	movs	r1, #32
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff fea7 	bl	8004308 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <_PrintInt+0x9c>
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3f1      	bcc.n	80045ac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da07      	bge.n	80045de <_PrintInt+0xb2>
    v = -v;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	425b      	negs	r3, r3
 80045d2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80045d4:	212d      	movs	r1, #45	@ 0x2d
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff fe96 	bl	8004308 <_StoreChar>
 80045dc:	e008      	b.n	80045f0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80045e8:	212b      	movs	r1, #43	@ 0x2b
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fe8c 	bl	8004308 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d019      	beq.n	800462e <_PrintInt+0x102>
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d114      	bne.n	800462e <_PrintInt+0x102>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d111      	bne.n	800462e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004610:	e006      	b.n	8004620 <_PrintInt+0xf4>
        FieldWidth--;
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	3b01      	subs	r3, #1
 8004616:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004618:	2130      	movs	r1, #48	@ 0x30
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fe74 	bl	8004308 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <_PrintInt+0x102>
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	429a      	cmp	r2, r3
 800462c:	d3f1      	bcc.n	8004612 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fedf 	bl	8004400 <_PrintUnsigned>
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b098      	sub	sp, #96	@ 0x60
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004658:	f3ef 8311 	mrs	r3, BASEPRI
 800465c:	f04f 0120 	mov.w	r1, #32
 8004660:	f381 8811 	msr	BASEPRI, r1
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004666:	48b7      	ldr	r0, [pc, #732]	@ (8004944 <_VPrintTarget+0x2f8>)
 8004668:	f7ff fbf4 	bl	8003e54 <_PreparePacket>
 800466c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800466e:	4bb5      	ldr	r3, [pc, #724]	@ (8004944 <_VPrintTarget+0x2f8>)
 8004670:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004678:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3301      	adds	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004692:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 81a8 	beq.w	80049ec <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800469c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046a0:	2b25      	cmp	r3, #37	@ 0x25
 80046a2:	f040 8195 	bne.w	80049d0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80046a6:	2300      	movs	r3, #0
 80046a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80046b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046ba:	3b23      	subs	r3, #35	@ 0x23
 80046bc:	2b0d      	cmp	r3, #13
 80046be:	d83f      	bhi.n	8004740 <_VPrintTarget+0xf4>
 80046c0:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <_VPrintTarget+0x7c>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	08004731 	.word	0x08004731
 80046cc:	08004741 	.word	0x08004741
 80046d0:	08004741 	.word	0x08004741
 80046d4:	08004741 	.word	0x08004741
 80046d8:	08004741 	.word	0x08004741
 80046dc:	08004741 	.word	0x08004741
 80046e0:	08004741 	.word	0x08004741
 80046e4:	08004741 	.word	0x08004741
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004741 	.word	0x08004741
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004741 	.word	0x08004741
 80046f8:	08004741 	.word	0x08004741
 80046fc:	08004711 	.word	0x08004711
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e01a      	b.n	8004746 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e012      	b.n	8004746 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e00a      	b.n	8004746 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004732:	f043 0308 	orr.w	r3, r3, #8
 8004736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e002      	b.n	8004746 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004740:	2300      	movs	r3, #0
 8004742:	653b      	str	r3, [r7, #80]	@ 0x50
 8004744:	bf00      	nop
        }
      } while (v);
 8004746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1b0      	bne.n	80046ae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800474c:	2300      	movs	r3, #0
 800474e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004758:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800475c:	2b2f      	cmp	r3, #47	@ 0x2f
 800475e:	d912      	bls.n	8004786 <_VPrintTarget+0x13a>
 8004760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004764:	2b39      	cmp	r3, #57	@ 0x39
 8004766:	d80e      	bhi.n	8004786 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800476e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	461a      	mov	r2, r3
 800477a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800477e:	4413      	add	r3, r2
 8004780:	3b30      	subs	r3, #48	@ 0x30
 8004782:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004784:	e7e4      	b.n	8004750 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004786:	2300      	movs	r3, #0
 8004788:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004792:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004796:	2b2e      	cmp	r3, #46	@ 0x2e
 8004798:	d11d      	bne.n	80047d6 <_VPrintTarget+0x18a>
        sFormat++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80047a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80047ae:	d912      	bls.n	80047d6 <_VPrintTarget+0x18a>
 80047b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047b4:	2b39      	cmp	r3, #57	@ 0x39
 80047b6:	d80e      	bhi.n	80047d6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80047be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	461a      	mov	r2, r3
 80047ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ce:	4413      	add	r3, r2
 80047d0:	3b30      	subs	r3, #48	@ 0x30
 80047d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80047d4:	e7e4      	b.n	80047a0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80047de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047e2:	2b6c      	cmp	r3, #108	@ 0x6c
 80047e4:	d003      	beq.n	80047ee <_VPrintTarget+0x1a2>
 80047e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ea:	2b68      	cmp	r3, #104	@ 0x68
 80047ec:	d107      	bne.n	80047fe <_VPrintTarget+0x1b2>
          c = *sFormat;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80047fc:	e7ef      	b.n	80047de <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80047fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004802:	2b25      	cmp	r3, #37	@ 0x25
 8004804:	f000 80d8 	beq.w	80049b8 <_VPrintTarget+0x36c>
 8004808:	2b25      	cmp	r3, #37	@ 0x25
 800480a:	f2c0 80dc 	blt.w	80049c6 <_VPrintTarget+0x37a>
 800480e:	2b78      	cmp	r3, #120	@ 0x78
 8004810:	f300 80d9 	bgt.w	80049c6 <_VPrintTarget+0x37a>
 8004814:	2b58      	cmp	r3, #88	@ 0x58
 8004816:	f2c0 80d6 	blt.w	80049c6 <_VPrintTarget+0x37a>
 800481a:	3b58      	subs	r3, #88	@ 0x58
 800481c:	2b20      	cmp	r3, #32
 800481e:	f200 80d2 	bhi.w	80049c6 <_VPrintTarget+0x37a>
 8004822:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <_VPrintTarget+0x1dc>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800491f 	.word	0x0800491f
 800482c:	080049c7 	.word	0x080049c7
 8004830:	080049c7 	.word	0x080049c7
 8004834:	080049c7 	.word	0x080049c7
 8004838:	080049c7 	.word	0x080049c7
 800483c:	080049c7 	.word	0x080049c7
 8004840:	080049c7 	.word	0x080049c7
 8004844:	080049c7 	.word	0x080049c7
 8004848:	080049c7 	.word	0x080049c7
 800484c:	080049c7 	.word	0x080049c7
 8004850:	080049c7 	.word	0x080049c7
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048d3 	.word	0x080048d3
 800485c:	080049c7 	.word	0x080049c7
 8004860:	080049c7 	.word	0x080049c7
 8004864:	080049c7 	.word	0x080049c7
 8004868:	080049c7 	.word	0x080049c7
 800486c:	080049c7 	.word	0x080049c7
 8004870:	080049c7 	.word	0x080049c7
 8004874:	080049c7 	.word	0x080049c7
 8004878:	080049c7 	.word	0x080049c7
 800487c:	080049c7 	.word	0x080049c7
 8004880:	080049c7 	.word	0x080049c7
 8004884:	080049c7 	.word	0x080049c7
 8004888:	08004993 	.word	0x08004993
 800488c:	080049c7 	.word	0x080049c7
 8004890:	080049c7 	.word	0x080049c7
 8004894:	08004949 	.word	0x08004949
 8004898:	080049c7 	.word	0x080049c7
 800489c:	080048f9 	.word	0x080048f9
 80048a0:	080049c7 	.word	0x080049c7
 80048a4:	080049c7 	.word	0x080049c7
 80048a8:	0800491f 	.word	0x0800491f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80048ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80048c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80048c4:	f107 0310 	add.w	r3, r7, #16
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fd1c 	bl	8004308 <_StoreChar>
        break;
 80048d0:	e07a      	b.n	80049c8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1d19      	adds	r1, r3, #4
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6011      	str	r1, [r2, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80048e0:	f107 0010 	add.w	r0, r7, #16
 80048e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ee:	220a      	movs	r2, #10
 80048f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048f2:	f7ff fe1b 	bl	800452c <_PrintInt>
        break;
 80048f6:	e067      	b.n	80049c8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	1d19      	adds	r1, r3, #4
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004906:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004908:	f107 0010 	add.w	r0, r7, #16
 800490c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	220a      	movs	r2, #10
 8004918:	f7ff fd72 	bl	8004400 <_PrintUnsigned>
        break;
 800491c:	e054      	b.n	80049c8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800492c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800492e:	f107 0010 	add.w	r0, r7, #16
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800493c:	2210      	movs	r2, #16
 800493e:	f7ff fd5f 	bl	8004400 <_PrintUnsigned>
        break;
 8004942:	e041      	b.n	80049c8 <_VPrintTarget+0x37c>
 8004944:	20014370 	.word	0x20014370
      case 's':
        s = va_arg(*pParamList, const char*);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <_VPrintTarget+0x314>
          s = "(null)";
 800495c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <_VPrintTarget+0x43c>)
 800495e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	3301      	adds	r3, #1
 800496c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800496e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004976:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800497a:	f107 0310 	add.w	r3, r7, #16
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fcc1 	bl	8004308 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2b7f      	cmp	r3, #127	@ 0x7f
 800498a:	d9e9      	bls.n	8004960 <_VPrintTarget+0x314>
        break;
 800498c:	e01c      	b.n	80049c8 <_VPrintTarget+0x37c>
            break;
 800498e:	bf00      	nop
        break;
 8004990:	e01a      	b.n	80049c8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1d19      	adds	r1, r3, #4
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6011      	str	r1, [r2, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80049a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049a2:	f107 0010 	add.w	r0, r7, #16
 80049a6:	2300      	movs	r3, #0
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	2308      	movs	r3, #8
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2308      	movs	r3, #8
 80049b0:	2210      	movs	r2, #16
 80049b2:	f7ff fd25 	bl	8004400 <_PrintUnsigned>
        break;
 80049b6:	e007      	b.n	80049c8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	2125      	movs	r1, #37	@ 0x25
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fca2 	bl	8004308 <_StoreChar>
        break;
 80049c4:	e000      	b.n	80049c8 <_VPrintTarget+0x37c>
      default:
        break;
 80049c6:	bf00      	nop
      }
      sFormat++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e007      	b.n	80049e0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80049d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fc94 	bl	8004308 <_StoreChar>
    }
  } while (*sFormat);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f ae4d 	bne.w	8004684 <_VPrintTarget+0x38>
 80049ea:	e000      	b.n	80049ee <_VPrintTarget+0x3a2>
      break;
 80049ec:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d041      	beq.n	8004a78 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a04:	e00b      	b.n	8004a1e <_VPrintTarget+0x3d2>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004a10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	09db      	lsrs	r3, r3, #7
 8004a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a22:	d8f0      	bhi.n	8004a06 <_VPrintTarget+0x3ba>
 8004a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a32:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a38:	2300      	movs	r3, #0
 8004a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3c:	e00b      	b.n	8004a56 <_VPrintTarget+0x40a>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	1c59      	adds	r1, r3, #1
 8004a46:	6379      	str	r1, [r7, #52]	@ 0x34
 8004a48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	09db      	lsrs	r3, r3, #7
 8004a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a5a:	d8f0      	bhi.n	8004a3e <_VPrintTarget+0x3f2>
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	221a      	movs	r2, #26
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fada 	bl	800402c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004a7e:	bf00      	nop
 8004a80:	3758      	adds	r7, #88	@ 0x58
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08007c70 	.word	0x08007c70

08004a8c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004aa0:	4917      	ldr	r1, [pc, #92]	@ (8004b00 <SEGGER_SYSVIEW_Init+0x74>)
 8004aa2:	4818      	ldr	r0, [pc, #96]	@ (8004b04 <SEGGER_SYSVIEW_Init+0x78>)
 8004aa4:	f7ff f8d6 	bl	8003c54 <SEGGER_RTT_AllocUpBuffer>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ab0:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ab2:	785a      	ldrb	r2, [r3, #1]
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ab6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aba:	7e1b      	ldrb	r3, [r3, #24]
 8004abc:	4618      	mov	r0, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	4a11      	ldr	r2, [pc, #68]	@ (8004b0c <SEGGER_SYSVIEW_Init+0x80>)
 8004ac6:	490f      	ldr	r1, [pc, #60]	@ (8004b04 <SEGGER_SYSVIEW_Init+0x78>)
 8004ac8:	f7ff f948 	bl	8003d5c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004acc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <SEGGER_SYSVIEW_Init+0x84>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ad8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004ada:	4a0b      	ldr	r2, [pc, #44]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ae0:	4a09      	ldr	r2, [pc, #36]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ae6:	4a08      	ldr	r2, [pc, #32]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004aec:	4a06      	ldr	r2, [pc, #24]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20013338 	.word	0x20013338
 8004b04:	08007c78 	.word	0x08007c78
 8004b08:	20014340 	.word	0x20014340
 8004b0c:	20014338 	.word	0x20014338
 8004b10:	e0001004 	.word	0xe0001004

08004b14 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b1c:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6113      	str	r3, [r2, #16]
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20014340 	.word	0x20014340

08004b34 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b40:	f04f 0120 	mov.w	r1, #32
 8004b44:	f381 8811 	msr	BASEPRI, r1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	4808      	ldr	r0, [pc, #32]	@ (8004b6c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b4c:	f7ff f982 	bl	8003e54 <_PreparePacket>
 8004b50:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	f7ff fa68 	bl	800402c <_SendPacket>
  RECORD_END();
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f383 8811 	msr	BASEPRI, r3
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20014370 	.word	0x20014370

08004b70 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b7e:	f04f 0120 	mov.w	r1, #32
 8004b82:	f381 8811 	msr	BASEPRI, r1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	4816      	ldr	r0, [pc, #88]	@ (8004be4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b8a:	f7ff f963 	bl	8003e54 <_PreparePacket>
 8004b8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e00b      	b.n	8004bb6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	61f9      	str	r1, [r7, #28]
 8004ba8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	09db      	lsrs	r3, r3, #7
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bba:	d8f0      	bhi.n	8004b9e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	61fa      	str	r2, [r7, #28]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	6938      	ldr	r0, [r7, #16]
 8004bd2:	f7ff fa2b 	bl	800402c <_SendPacket>
  RECORD_END();
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f383 8811 	msr	BASEPRI, r3
}
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20014370 	.word	0x20014370

08004be8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	@ 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf8:	f04f 0120 	mov.w	r1, #32
 8004bfc:	f381 8811 	msr	BASEPRI, r1
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	4825      	ldr	r0, [pc, #148]	@ (8004c98 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c04:	f7ff f926 	bl	8003e54 <_PreparePacket>
 8004c08:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c16:	e00b      	b.n	8004c30 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	09db      	lsrs	r3, r3, #7
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c34:	d8f0      	bhi.n	8004c18 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	e00b      	b.n	8004c68 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	1c59      	adds	r1, r3, #1
 8004c58:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	09db      	lsrs	r3, r3, #7
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c6c:	d8f0      	bhi.n	8004c50 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f7ff f9d2 	bl	800402c <_SendPacket>
  RECORD_END();
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f383 8811 	msr	BASEPRI, r3
}
 8004c8e:	bf00      	nop
 8004c90:	3730      	adds	r7, #48	@ 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20014370 	.word	0x20014370

08004c9c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	@ 0x30
 8004ca0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ca2:	4b58      	ldr	r3, [pc, #352]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cac:	f04f 0120 	mov.w	r1, #32
 8004cb0:	f381 8811 	msr	BASEPRI, r1
 8004cb4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004cb6:	4b53      	ldr	r3, [pc, #332]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	220a      	movs	r2, #10
 8004cbc:	4952      	ldr	r1, [pc, #328]	@ (8004e08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb faa6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004cca:	200a      	movs	r0, #10
 8004ccc:	f7ff ff32 	bl	8004b34 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd4:	f04f 0120 	mov.w	r1, #32
 8004cd8:	f381 8811 	msr	BASEPRI, r1
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	484b      	ldr	r0, [pc, #300]	@ (8004e0c <SEGGER_SYSVIEW_Start+0x170>)
 8004ce0:	f7ff f8b8 	bl	8003e54 <_PreparePacket>
 8004ce4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cee:	4b45      	ldr	r3, [pc, #276]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf4:	e00b      	b.n	8004d0e <SEGGER_SYSVIEW_Start+0x72>
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	09db      	lsrs	r3, r3, #7
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d12:	d8f0      	bhi.n	8004cf6 <SEGGER_SYSVIEW_Start+0x5a>
 8004d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d28:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	e00b      	b.n	8004d48 <SEGGER_SYSVIEW_Start+0xac>
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d4c:	d8f0      	bhi.n	8004d30 <SEGGER_SYSVIEW_Start+0x94>
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e00b      	b.n	8004d82 <SEGGER_SYSVIEW_Start+0xe6>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	61f9      	str	r1, [r7, #28]
 8004d74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	09db      	lsrs	r3, r3, #7
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d86:	d8f0      	bhi.n	8004d6a <SEGGER_SYSVIEW_Start+0xce>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	61fa      	str	r2, [r7, #28]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e00b      	b.n	8004dba <SEGGER_SYSVIEW_Start+0x11e>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1c59      	adds	r1, r3, #1
 8004daa:	6179      	str	r1, [r7, #20]
 8004dac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	09db      	lsrs	r3, r3, #7
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dbe:	d8f0      	bhi.n	8004da2 <SEGGER_SYSVIEW_Start+0x106>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	617a      	str	r2, [r7, #20]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004dd0:	2218      	movs	r2, #24
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff f929 	bl	800402c <_SendPacket>
      RECORD_END();
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004de0:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <SEGGER_SYSVIEW_Start+0x168>)
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004dee:	f000 f9eb 	bl	80051c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004df2:	f000 f9b1 	bl	8005158 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004df6:	f000 fd21 	bl	800583c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004dfa:	bf00      	nop
 8004dfc:	3730      	adds	r7, #48	@ 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20014340 	.word	0x20014340
 8004e08:	08007cf0 	.word	0x08007cf0
 8004e0c:	20014370 	.word	0x20014370

08004e10 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e16:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1a:	f04f 0120 	mov.w	r1, #32
 8004e1e:	f381 8811 	msr	BASEPRI, r1
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	480b      	ldr	r0, [pc, #44]	@ (8004e54 <SEGGER_SYSVIEW_Stop+0x44>)
 8004e26:	f7ff f815 	bl	8003e54 <_PreparePacket>
 8004e2a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e34:	220b      	movs	r2, #11
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6838      	ldr	r0, [r7, #0]
 8004e3a:	f7ff f8f7 	bl	800402c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f383 8811 	msr	BASEPRI, r3
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20014370 	.word	0x20014370
 8004e58:	20014340 	.word	0x20014340

08004e5c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	@ 0x30
 8004e60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	f04f 0120 	mov.w	r1, #32
 8004e6a:	f381 8811 	msr	BASEPRI, r1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	4845      	ldr	r0, [pc, #276]	@ (8004f88 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e72:	f7fe ffef 	bl	8003e54 <_PreparePacket>
 8004e76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e80:	4b42      	ldr	r3, [pc, #264]	@ (8004f8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e86:	e00b      	b.n	8004ea0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ea4:	d8f0      	bhi.n	8004e88 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eba:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	e00b      	b.n	8004eda <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ede:	d8f0      	bhi.n	8004ec2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e00b      	b.n	8004f14 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	1c59      	adds	r1, r3, #1
 8004f04:	61f9      	str	r1, [r7, #28]
 8004f06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	09db      	lsrs	r3, r3, #7
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f18:	d8f0      	bhi.n	8004efc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00b      	b.n	8004f4c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	6179      	str	r1, [r7, #20]
 8004f3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f50:	d8f0      	bhi.n	8004f34 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	617a      	str	r2, [r7, #20]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f62:	2218      	movs	r2, #24
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7ff f860 	bl	800402c <_SendPacket>
  RECORD_END();
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f7a:	4b04      	ldr	r3, [pc, #16]	@ (8004f8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	4798      	blx	r3
  }
}
 8004f80:	bf00      	nop
 8004f82:	3730      	adds	r7, #48	@ 0x30
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20014370 	.word	0x20014370
 8004f8c:	20014340 	.word	0x20014340

08004f90 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b092      	sub	sp, #72	@ 0x48
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004f98:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9c:	f04f 0120 	mov.w	r1, #32
 8004fa0:	f381 8811 	msr	BASEPRI, r1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	486a      	ldr	r0, [pc, #424]	@ (8005150 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004fa8:	f7fe ff54 	bl	8003e54 <_PreparePacket>
 8004fac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fc2:	e00b      	b.n	8004fdc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	6479      	str	r1, [r7, #68]	@ 0x44
 8004fce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd8:	09db      	lsrs	r3, r3, #7
 8004fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fde:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe0:	d8f0      	bhi.n	8004fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ffc:	e00b      	b.n	8005016 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	b2da      	uxtb	r2, r3
 8005002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005004:	1c59      	adds	r1, r3, #1
 8005006:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005008:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	09db      	lsrs	r3, r3, #7
 8005014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	2b7f      	cmp	r3, #127	@ 0x7f
 800501a:	d8f0      	bhi.n	8004ffe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	4619      	mov	r1, r3
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7fe fedd 	bl	8003df4 <_EncodeStr>
 800503a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800503c:	2209      	movs	r2, #9
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	6938      	ldr	r0, [r7, #16]
 8005042:	f7fe fff3 	bl	800402c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	637b      	str	r3, [r7, #52]	@ 0x34
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b40      	ldr	r3, [pc, #256]	@ (8005154 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	633b      	str	r3, [r7, #48]	@ 0x30
 800505a:	e00b      	b.n	8005074 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	b2da      	uxtb	r2, r3
 8005060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	6379      	str	r1, [r7, #52]	@ 0x34
 8005066:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	09db      	lsrs	r3, r3, #7
 8005072:	633b      	str	r3, [r7, #48]	@ 0x30
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	2b7f      	cmp	r3, #127	@ 0x7f
 8005078:	d8f0      	bhi.n	800505c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005094:	e00b      	b.n	80050ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	b2da      	uxtb	r2, r3
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80050a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050aa:	09db      	lsrs	r3, r3, #7
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80050b2:	d8f0      	bhi.n	8005096 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	e00b      	b.n	80050e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80050da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	09db      	lsrs	r3, r3, #7
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ec:	d8f0      	bhi.n	80050d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e00b      	b.n	8005122 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	1c59      	adds	r1, r3, #1
 8005112:	61f9      	str	r1, [r7, #28]
 8005114:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	09db      	lsrs	r3, r3, #7
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b7f      	cmp	r3, #127	@ 0x7f
 8005126:	d8f0      	bhi.n	800510a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005138:	2215      	movs	r2, #21
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	6938      	ldr	r0, [r7, #16]
 800513e:	f7fe ff75 	bl	800402c <_SendPacket>
  RECORD_END();
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f383 8811 	msr	BASEPRI, r3
}
 8005148:	bf00      	nop
 800514a:	3748      	adds	r7, #72	@ 0x48
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20014370 	.word	0x20014370
 8005154:	20014340 	.word	0x20014340

08005158 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800515c:	4b07      	ldr	r3, [pc, #28]	@ (800517c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800516e:	4b03      	ldr	r3, [pc, #12]	@ (800517c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4798      	blx	r3
  }
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20014340 	.word	0x20014340

08005180 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005188:	f3ef 8311 	mrs	r3, BASEPRI
 800518c:	f04f 0120 	mov.w	r1, #32
 8005190:	f381 8811 	msr	BASEPRI, r1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	480b      	ldr	r0, [pc, #44]	@ (80051c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005198:	f7fe fe5c 	bl	8003e54 <_PreparePacket>
 800519c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800519e:	2280      	movs	r2, #128	@ 0x80
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	6938      	ldr	r0, [r7, #16]
 80051a4:	f7fe fe26 	bl	8003df4 <_EncodeStr>
 80051a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80051aa:	220e      	movs	r2, #14
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f7fe ff3c 	bl	800402c <_SendPacket>
  RECORD_END();
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f383 8811 	msr	BASEPRI, r3
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20014370 	.word	0x20014370

080051c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01a      	beq.n	800520c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4798      	blx	r3
 80051e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80051ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	000a      	movs	r2, r1
 80051fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051fe:	4613      	mov	r3, r2
 8005200:	461a      	mov	r2, r3
 8005202:	4621      	mov	r1, r4
 8005204:	200d      	movs	r0, #13
 8005206:	f7ff fcef 	bl	8004be8 <SEGGER_SYSVIEW_RecordU32x2>
 800520a:	e006      	b.n	800521a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	200c      	movs	r0, #12
 8005214:	f7ff fcac 	bl	8004b70 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	bf00      	nop
 8005224:	20014340 	.word	0x20014340
 8005228:	e0001004 	.word	0xe0001004

0800522c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005232:	f3ef 8311 	mrs	r3, BASEPRI
 8005236:	f04f 0120 	mov.w	r1, #32
 800523a:	f381 8811 	msr	BASEPRI, r1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	4819      	ldr	r0, [pc, #100]	@ (80052a8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005242:	f7fe fe07 	bl	8003e54 <_PreparePacket>
 8005246:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800524c:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	e00b      	b.n	8005278 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1c59      	adds	r1, r3, #1
 8005268:	6179      	str	r1, [r7, #20]
 800526a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	09db      	lsrs	r3, r3, #7
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b7f      	cmp	r3, #127	@ 0x7f
 800527c:	d8f0      	bhi.n	8005260 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	617a      	str	r2, [r7, #20]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800528e:	2202      	movs	r2, #2
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	68b8      	ldr	r0, [r7, #8]
 8005294:	f7fe feca 	bl	800402c <_SendPacket>
  RECORD_END();
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20014370 	.word	0x20014370
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052b6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ba:	f04f 0120 	mov.w	r1, #32
 80052be:	f381 8811 	msr	BASEPRI, r1
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	4807      	ldr	r0, [pc, #28]	@ (80052e4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80052c6:	f7fe fdc5 	bl	8003e54 <_PreparePacket>
 80052ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80052cc:	2203      	movs	r2, #3
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6838      	ldr	r0, [r7, #0]
 80052d2:	f7fe feab 	bl	800402c <_SendPacket>
  RECORD_END();
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f383 8811 	msr	BASEPRI, r3
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20014370 	.word	0x20014370

080052e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052ee:	f3ef 8311 	mrs	r3, BASEPRI
 80052f2:	f04f 0120 	mov.w	r1, #32
 80052f6:	f381 8811 	msr	BASEPRI, r1
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	4807      	ldr	r0, [pc, #28]	@ (800531c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80052fe:	f7fe fda9 	bl	8003e54 <_PreparePacket>
 8005302:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005304:	2212      	movs	r2, #18
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	6838      	ldr	r0, [r7, #0]
 800530a:	f7fe fe8f 	bl	800402c <_SendPacket>
  RECORD_END();
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f383 8811 	msr	BASEPRI, r3
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20014370 	.word	0x20014370

08005320 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005328:	f3ef 8311 	mrs	r3, BASEPRI
 800532c:	f04f 0120 	mov.w	r1, #32
 8005330:	f381 8811 	msr	BASEPRI, r1
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	4817      	ldr	r0, [pc, #92]	@ (8005394 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005338:	f7fe fd8c 	bl	8003e54 <_PreparePacket>
 800533c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e00b      	b.n	8005364 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	61f9      	str	r1, [r7, #28]
 8005356:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	09db      	lsrs	r3, r3, #7
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b7f      	cmp	r3, #127	@ 0x7f
 8005368:	d8f0      	bhi.n	800534c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	61fa      	str	r2, [r7, #28]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800537a:	221c      	movs	r2, #28
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f7fe fe54 	bl	800402c <_SendPacket>
  RECORD_END();
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f383 8811 	msr	BASEPRI, r3
}
 800538a:	bf00      	nop
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20014370 	.word	0x20014370

08005398 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	@ 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053a2:	f3ef 8311 	mrs	r3, BASEPRI
 80053a6:	f04f 0120 	mov.w	r1, #32
 80053aa:	f381 8811 	msr	BASEPRI, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	4824      	ldr	r0, [pc, #144]	@ (8005444 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80053b2:	f7fe fd4f 	bl	8003e54 <_PreparePacket>
 80053b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	e00b      	b.n	80053de <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80053d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e2:	d8f0      	bhi.n	80053c6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ea:	6a3a      	ldr	r2, [r7, #32]
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	e00b      	b.n	8005416 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	61f9      	str	r1, [r7, #28]
 8005408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b7f      	cmp	r3, #127	@ 0x7f
 800541a:	d8f0      	bhi.n	80053fe <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	61fa      	str	r2, [r7, #28]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800542c:	221c      	movs	r2, #28
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6938      	ldr	r0, [r7, #16]
 8005432:	f7fe fdfb 	bl	800402c <_SendPacket>
  RECORD_END();
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f383 8811 	msr	BASEPRI, r3
}
 800543c:	bf00      	nop
 800543e:	3728      	adds	r7, #40	@ 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20014370 	.word	0x20014370

08005448 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800544e:	f3ef 8311 	mrs	r3, BASEPRI
 8005452:	f04f 0120 	mov.w	r1, #32
 8005456:	f381 8811 	msr	BASEPRI, r1
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	4807      	ldr	r0, [pc, #28]	@ (800547c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800545e:	f7fe fcf9 	bl	8003e54 <_PreparePacket>
 8005462:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005464:	2211      	movs	r2, #17
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f7fe fddf 	bl	800402c <_SendPacket>
  RECORD_END();
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f383 8811 	msr	BASEPRI, r3
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20014370 	.word	0x20014370

08005480 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005488:	f3ef 8311 	mrs	r3, BASEPRI
 800548c:	f04f 0120 	mov.w	r1, #32
 8005490:	f381 8811 	msr	BASEPRI, r1
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	4819      	ldr	r0, [pc, #100]	@ (80054fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005498:	f7fe fcdc 	bl	8003e54 <_PreparePacket>
 800549c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054a2:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e00b      	b.n	80054ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	1c59      	adds	r1, r3, #1
 80054be:	61f9      	str	r1, [r7, #28]
 80054c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	09db      	lsrs	r3, r3, #7
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054d2:	d8f0      	bhi.n	80054b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	61fa      	str	r2, [r7, #28]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80054e4:	2208      	movs	r2, #8
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	6938      	ldr	r0, [r7, #16]
 80054ea:	f7fe fd9f 	bl	800402c <_SendPacket>
  RECORD_END();
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f383 8811 	msr	BASEPRI, r3
}
 80054f4:	bf00      	nop
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20014370 	.word	0x20014370
 8005500:	20014340 	.word	0x20014340

08005504 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800550c:	f3ef 8311 	mrs	r3, BASEPRI
 8005510:	f04f 0120 	mov.w	r1, #32
 8005514:	f381 8811 	msr	BASEPRI, r1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	4819      	ldr	r0, [pc, #100]	@ (8005580 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800551c:	f7fe fc9a 	bl	8003e54 <_PreparePacket>
 8005520:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005526:	4b17      	ldr	r3, [pc, #92]	@ (8005584 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	e00b      	b.n	8005552 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	1c59      	adds	r1, r3, #1
 8005542:	61f9      	str	r1, [r7, #28]
 8005544:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	09db      	lsrs	r3, r3, #7
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b7f      	cmp	r3, #127	@ 0x7f
 8005556:	d8f0      	bhi.n	800553a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	61fa      	str	r2, [r7, #28]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005568:	2204      	movs	r2, #4
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	6938      	ldr	r0, [r7, #16]
 800556e:	f7fe fd5d 	bl	800402c <_SendPacket>
  RECORD_END();
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f383 8811 	msr	BASEPRI, r3
}
 8005578:	bf00      	nop
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20014370 	.word	0x20014370
 8005584:	20014340 	.word	0x20014340

08005588 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005590:	f3ef 8311 	mrs	r3, BASEPRI
 8005594:	f04f 0120 	mov.w	r1, #32
 8005598:	f381 8811 	msr	BASEPRI, r1
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	4819      	ldr	r0, [pc, #100]	@ (8005604 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055a0:	f7fe fc58 	bl	8003e54 <_PreparePacket>
 80055a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055aa:	4b17      	ldr	r3, [pc, #92]	@ (8005608 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e00b      	b.n	80055d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c59      	adds	r1, r3, #1
 80055c6:	61f9      	str	r1, [r7, #28]
 80055c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	09db      	lsrs	r3, r3, #7
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055da:	d8f0      	bhi.n	80055be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80055ec:	2206      	movs	r2, #6
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	6938      	ldr	r0, [r7, #16]
 80055f2:	f7fe fd1b 	bl	800402c <_SendPacket>
  RECORD_END();
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f383 8811 	msr	BASEPRI, r3
}
 80055fc:	bf00      	nop
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20014370 	.word	0x20014370
 8005608:	20014340 	.word	0x20014340

0800560c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	@ 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005616:	f3ef 8311 	mrs	r3, BASEPRI
 800561a:	f04f 0120 	mov.w	r1, #32
 800561e:	f381 8811 	msr	BASEPRI, r1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	4827      	ldr	r0, [pc, #156]	@ (80056c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005626:	f7fe fc15 	bl	8003e54 <_PreparePacket>
 800562a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005630:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	e00b      	b.n	800565c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	6279      	str	r1, [r7, #36]	@ 0x24
 800564e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005660:	d8f0      	bhi.n	8005644 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	627a      	str	r2, [r7, #36]	@ 0x24
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e00b      	b.n	8005694 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	61f9      	str	r1, [r7, #28]
 8005686:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b7f      	cmp	r3, #127	@ 0x7f
 8005698:	d8f0      	bhi.n	800567c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	61fa      	str	r2, [r7, #28]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80056aa:	2207      	movs	r2, #7
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	6938      	ldr	r0, [r7, #16]
 80056b0:	f7fe fcbc 	bl	800402c <_SendPacket>
  RECORD_END();
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f383 8811 	msr	BASEPRI, r3
}
 80056ba:	bf00      	nop
 80056bc:	3728      	adds	r7, #40	@ 0x28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20014370 	.word	0x20014370
 80056c8:	20014340 	.word	0x20014340

080056cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80056d4:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	1ad3      	subs	r3, r2, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20014340 	.word	0x20014340

080056ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	@ 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80056f6:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d077      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005708:	e008      	b.n	800571c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	3301      	adds	r3, #1
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005720:	429a      	cmp	r2, r3
 8005722:	d3f2      	bcc.n	800570a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005724:	e000      	b.n	8005728 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005726:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d055      	beq.n	80057da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800572e:	f3ef 8311 	mrs	r3, BASEPRI
 8005732:	f04f 0120 	mov.w	r1, #32
 8005736:	f381 8811 	msr	BASEPRI, r1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	482f      	ldr	r0, [pc, #188]	@ (80057fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800573e:	f7fe fb89 	bl	8003e54 <_PreparePacket>
 8005742:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	e00b      	b.n	800576a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	6279      	str	r1, [r7, #36]	@ 0x24
 800575c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b7f      	cmp	r3, #127	@ 0x7f
 800576e:	d8f0      	bhi.n	8005752 <SEGGER_SYSVIEW_SendModule+0x66>
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	627a      	str	r2, [r7, #36]	@ 0x24
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e00b      	b.n	80057a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	61f9      	str	r1, [r7, #28]
 8005796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057a8:	d8f0      	bhi.n	800578c <SEGGER_SYSVIEW_SendModule+0xa0>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fe fb16 	bl	8003df4 <_EncodeStr>
 80057c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80057ca:	2216      	movs	r2, #22
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	6938      	ldr	r0, [r7, #16]
 80057d0:	f7fe fc2c 	bl	800402c <_SendPacket>
      RECORD_END();
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80057da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4798      	blx	r3
    }
  }
}
 80057ee:	bf00      	nop
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20014368 	.word	0x20014368
 80057fc:	20014370 	.word	0x20014370

08005800 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00f      	beq.n	800582e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800580e:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f2      	bne.n	8005814 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20014368 	.word	0x20014368

0800583c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	4817      	ldr	r0, [pc, #92]	@ (80058b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005852:	f7fe faff 	bl	8003e54 <_PreparePacket>
 8005856:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e00b      	b.n	8005880 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1c59      	adds	r1, r3, #1
 8005870:	6179      	str	r1, [r7, #20]
 8005872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b7f      	cmp	r3, #127	@ 0x7f
 8005884:	d8f0      	bhi.n	8005868 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	617a      	str	r2, [r7, #20]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005896:	221b      	movs	r2, #27
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f7fe fbc6 	bl	800402c <_SendPacket>
  RECORD_END();
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f383 8811 	msr	BASEPRI, r3
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20014370 	.word	0x20014370
 80058b4:	2001436c 	.word	0x2001436c

080058b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80058b8:	b40f      	push	{r0, r1, r2, r3}
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	461a      	mov	r2, r3
 80058ca:	2100      	movs	r1, #0
 80058cc:	6938      	ldr	r0, [r7, #16]
 80058ce:	f7fe febd 	bl	800464c <_VPrintTarget>
  va_end(ParamList);
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058dc:	b004      	add	sp, #16
 80058de:	4770      	bx	lr

080058e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	@ 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058e8:	f3ef 8311 	mrs	r3, BASEPRI
 80058ec:	f04f 0120 	mov.w	r1, #32
 80058f0:	f381 8811 	msr	BASEPRI, r1
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	4827      	ldr	r0, [pc, #156]	@ (8005994 <SEGGER_SYSVIEW_Warn+0xb4>)
 80058f8:	f7fe faac 	bl	8003e54 <_PreparePacket>
 80058fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058fe:	2280      	movs	r2, #128	@ 0x80
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	6938      	ldr	r0, [r7, #16]
 8005904:	f7fe fa76 	bl	8003df4 <_EncodeStr>
 8005908:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
 800590e:	2301      	movs	r3, #1
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e00b      	b.n	800592c <SEGGER_SYSVIEW_Warn+0x4c>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	6279      	str	r1, [r7, #36]	@ 0x24
 800591e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	09db      	lsrs	r3, r3, #7
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005930:	d8f0      	bhi.n	8005914 <SEGGER_SYSVIEW_Warn+0x34>
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	627a      	str	r2, [r7, #36]	@ 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	e00b      	b.n	8005964 <SEGGER_SYSVIEW_Warn+0x84>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	61f9      	str	r1, [r7, #28]
 8005956:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	09db      	lsrs	r3, r3, #7
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b7f      	cmp	r3, #127	@ 0x7f
 8005968:	d8f0      	bhi.n	800594c <SEGGER_SYSVIEW_Warn+0x6c>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	61fa      	str	r2, [r7, #28]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800597a:	221a      	movs	r2, #26
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	6938      	ldr	r0, [r7, #16]
 8005980:	f7fe fb54 	bl	800402c <_SendPacket>
  RECORD_END();
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f383 8811 	msr	BASEPRI, r3
}
 800598a:	bf00      	nop
 800598c:	3728      	adds	r7, #40	@ 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20014370 	.word	0x20014370

08005998 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800599c:	4b13      	ldr	r3, [pc, #76]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800599e:	7e1b      	ldrb	r3, [r3, #24]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80059a4:	460b      	mov	r3, r1
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	440b      	add	r3, r1
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4413      	add	r3, r2
 80059ae:	336c      	adds	r3, #108	@ 0x6c
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059b4:	7e1b      	ldrb	r3, [r3, #24]
 80059b6:	4618      	mov	r0, r3
 80059b8:	490d      	ldr	r1, [pc, #52]	@ (80059f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80059ba:	4603      	mov	r3, r0
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4403      	add	r3, r0
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	440b      	add	r3, r1
 80059c4:	3370      	adds	r3, #112	@ 0x70
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d00b      	beq.n	80059e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059cc:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d107      	bne.n	80059e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059da:	f7fe fa47 	bl	8003e6c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059de:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80059e4:	4b01      	ldr	r3, [pc, #4]	@ (80059ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20014340 	.word	0x20014340
 80059f0:	20012e80 	.word	0x20012e80

080059f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	db0b      	blt.n	8005a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	f003 021f 	and.w	r2, r3, #31
 8005a0c:	4907      	ldr	r1, [pc, #28]	@ (8005a2c <__NVIC_EnableIRQ+0x38>)
 8005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2001      	movs	r0, #1
 8005a16:	fa00 f202 	lsl.w	r2, r0, r2
 8005a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	e000e100 	.word	0xe000e100

08005a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	6039      	str	r1, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db0a      	blt.n	8005a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	490c      	ldr	r1, [pc, #48]	@ (8005a7c <__NVIC_SetPriority+0x4c>)
 8005a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4e:	0112      	lsls	r2, r2, #4
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	440b      	add	r3, r1
 8005a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a58:	e00a      	b.n	8005a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4908      	ldr	r1, [pc, #32]	@ (8005a80 <__NVIC_SetPriority+0x50>)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3b04      	subs	r3, #4
 8005a68:	0112      	lsls	r2, r2, #4
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	761a      	strb	r2, [r3, #24]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	e000e100 	.word	0xe000e100
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005a8a:	f7ff ff85 	bl	8005998 <SEGGER_SYSVIEW_IsStarted>
 8005a8e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005a96:	f7ff f901 	bl	8004c9c <SEGGER_SYSVIEW_Start>
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <_cbOnUARTRx+0x3c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d806      	bhi.n	8005ac4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <_cbOnUARTRx+0x3c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <_cbOnUARTRx+0x3c>)
 8005ac0:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005ac2:	e009      	b.n	8005ad8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005ac4:	f7ff ffde 	bl	8005a84 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <_cbOnUARTRx+0x3c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	1dfb      	adds	r3, r7, #7
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f7fe f898 	bl	8003c08 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005ad8:	bf00      	nop
}
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000008 	.word	0x20000008

08005ae4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005aec:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <_cbOnUARTTx+0x5c>)
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d80f      	bhi.n	8005b14 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005af4:	4b12      	ldr	r3, [pc, #72]	@ (8005b40 <_cbOnUARTTx+0x5c>)
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b12      	ldr	r3, [pc, #72]	@ (8005b44 <_cbOnUARTTx+0x60>)
 8005afc:	5c9a      	ldrb	r2, [r3, r2]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005b02:	4b0f      	ldr	r3, [pc, #60]	@ (8005b40 <_cbOnUARTTx+0x5c>)
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	3301      	adds	r3, #1
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <_cbOnUARTTx+0x5c>)
 8005b0c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005b12:	e00f      	b.n	8005b34 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005b14:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <_cbOnUARTTx+0x5c>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fd ff17 	bl	8003950 <SEGGER_RTT_ReadUpBufferNoLock>
 8005b22:	4603      	mov	r3, r0
 8005b24:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da02      	bge.n	8005b32 <_cbOnUARTTx+0x4e>
    r = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e000      	b.n	8005b34 <_cbOnUARTTx+0x50>
  }
Done:
 8005b32:	bf00      	nop
  return r;
 8005b34:	68fb      	ldr	r3, [r7, #12]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000008 	.word	0x20000008
 8005b44:	08007d0c 	.word	0x08007d0c

08005b48 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005b50:	4a04      	ldr	r2, [pc, #16]	@ (8005b64 <SEGGER_UART_init+0x1c>)
 8005b52:	4905      	ldr	r1, [pc, #20]	@ (8005b68 <SEGGER_UART_init+0x20>)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f853 	bl	8005c00 <HIF_UART_Init>
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08005aa5 	.word	0x08005aa5
 8005b68:	08005ae5 	.word	0x08005ae5

08005b6c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005b72:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <USART2_IRQHandler+0x80>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005b82:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <USART2_IRQHandler+0x84>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 030b 	and.w	r3, r3, #11
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d108      	bne.n	8005ba6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005b94:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <USART2_IRQHandler+0x88>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005b9c:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <USART2_IRQHandler+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	79fa      	ldrb	r2, [r7, #7]
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01a      	beq.n	8005be6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <USART2_IRQHandler+0x8c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <USART2_IRQHandler+0x8c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	1dfa      	adds	r2, r7, #7
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4798      	blx	r3
 8005bc2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005bca:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <USART2_IRQHandler+0x90>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a0b      	ldr	r2, [pc, #44]	@ (8005bfc <USART2_IRQHandler+0x90>)
 8005bd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e006      	b.n	8005be6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <USART2_IRQHandler+0x80>)
 8005bda:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005bdc:	79fa      	ldrb	r2, [r7, #7]
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <USART2_IRQHandler+0x84>)
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e000      	b.n	8005be6 <USART2_IRQHandler+0x7a>
      return;
 8005be4:	bf00      	nop
    }
  }
}
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40004400 	.word	0x40004400
 8005bf0:	40004404 	.word	0x40004404
 8005bf4:	20014454 	.word	0x20014454
 8005bf8:	20014458 	.word	0x20014458
 8005bfc:	4000440c 	.word	0x4000440c

08005c00 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <HIF_UART_Init+0xc8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc8 <HIF_UART_Init+0xc8>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005c18:	4b2c      	ldr	r3, [pc, #176]	@ (8005ccc <HIF_UART_Init+0xcc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005ccc <HIF_UART_Init+0xcc>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005c24:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd0 <HIF_UART_Init+0xd0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c30:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005c38:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005c3a:	4a25      	ldr	r2, [pc, #148]	@ (8005cd0 <HIF_UART_Init+0xd0>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005c40:	4b24      	ldr	r3, [pc, #144]	@ (8005cd4 <HIF_UART_Init+0xd4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005c54:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005c56:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd4 <HIF_UART_Init+0xd4>)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <HIF_UART_Init+0xd8>)
 8005c5e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005c62:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005c64:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <HIF_UART_Init+0xdc>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce0 <HIF_UART_Init+0xe0>)
 8005c6c:	2280      	movs	r2, #128	@ 0x80
 8005c6e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005c76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce4 <HIF_UART_Init+0xe4>)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8e:	d302      	bcc.n	8005c96 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005c90:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005c94:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4a11      	ldr	r2, [pc, #68]	@ (8005ce8 <HIF_UART_Init+0xe8>)
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <HIF_UART_Init+0xec>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005cac:	4a10      	ldr	r2, [pc, #64]	@ (8005cf0 <HIF_UART_Init+0xf0>)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005cb2:	2106      	movs	r1, #6
 8005cb4:	2026      	movs	r0, #38	@ 0x26
 8005cb6:	f7ff febb 	bl	8005a30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005cba:	2026      	movs	r0, #38	@ 0x26
 8005cbc:	f7ff fe9a 	bl	80059f4 <__NVIC_EnableIRQ>
}
 8005cc0:	bf00      	nop
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023840 	.word	0x40023840
 8005ccc:	40023830 	.word	0x40023830
 8005cd0:	40020020 	.word	0x40020020
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	4000440c 	.word	0x4000440c
 8005cdc:	40004410 	.word	0x40004410
 8005ce0:	40004414 	.word	0x40004414
 8005ce4:	0501bd00 	.word	0x0501bd00
 8005ce8:	40004408 	.word	0x40004408
 8005cec:	20014454 	.word	0x20014454
 8005cf0:	20014458 	.word	0x20014458

08005cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cfa:	f000 fb41 	bl	8006380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cfe:	f000 f87b 	bl	8005df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d02:	f000 f8e7 	bl	8005ed4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8005d06:	4830      	ldr	r0, [pc, #192]	@ (8005dc8 <main+0xd4>)
 8005d08:	f7ff ff1e 	bl	8005b48 <SEGGER_UART_init>

  //Enable the CYCCNT (Cyclic Clock Counter)
  DWT_CTRL |= (1 << 0);
 8005d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005dcc <main+0xd8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2e      	ldr	r2, [pc, #184]	@ (8005dcc <main+0xd8>)
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8005d18:	f7fd fb10 	bl	800333c <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); // this is initialized in SEGGER_UART_Init();

  status = xTaskCreate(Ext_LED1_task, "LED1_Task", 200, NULL, 3, &Led1_task);
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd0 <main+0xdc>)
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	2303      	movs	r3, #3
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	22c8      	movs	r2, #200	@ 0xc8
 8005d28:	492a      	ldr	r1, [pc, #168]	@ (8005dd4 <main+0xe0>)
 8005d2a:	482b      	ldr	r0, [pc, #172]	@ (8005dd8 <main+0xe4>)
 8005d2c:	f7fb f845 	bl	8000dba <xTaskCreate>
 8005d30:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d00b      	beq.n	8005d50 <main+0x5c>
    __asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60bb      	str	r3, [r7, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <main+0x58>

  next_task_handle = Led1_task;
 8005d50:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd0 <main+0xdc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a21      	ldr	r2, [pc, #132]	@ (8005ddc <main+0xe8>)
 8005d56:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(Ext_LED2_task, "LED2_Task", 200, NULL, 2, &Led2_task);
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <main+0xec>)
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	22c8      	movs	r2, #200	@ 0xc8
 8005d64:	491f      	ldr	r1, [pc, #124]	@ (8005de4 <main+0xf0>)
 8005d66:	4820      	ldr	r0, [pc, #128]	@ (8005de8 <main+0xf4>)
 8005d68:	f7fb f827 	bl	8000dba <xTaskCreate>
 8005d6c:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d00b      	beq.n	8005d8c <main+0x98>
    __asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	607b      	str	r3, [r7, #4]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <main+0x94>

  status = xTaskCreate(Ext_LED3_task, "LED3_Task", 200, NULL, 1, &Led3_task);
 8005d8c:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <main+0xf8>)
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	2301      	movs	r3, #1
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	22c8      	movs	r2, #200	@ 0xc8
 8005d98:	4915      	ldr	r1, [pc, #84]	@ (8005df0 <main+0xfc>)
 8005d9a:	4816      	ldr	r0, [pc, #88]	@ (8005df4 <main+0x100>)
 8005d9c:	f7fb f80d 	bl	8000dba <xTaskCreate>
 8005da0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d00b      	beq.n	8005dc0 <main+0xcc>
    __asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	603b      	str	r3, [r7, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <main+0xc8>

  //Start scheduler
  vTaskStartScheduler();
 8005dc0:	f7fb fa74 	bl	80012ac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <main+0xd0>
 8005dc8:	0007a120 	.word	0x0007a120
 8005dcc:	e0001000 	.word	0xe0001000
 8005dd0:	2001445c 	.word	0x2001445c
 8005dd4:	08007c80 	.word	0x08007c80
 8005dd8:	0800600d 	.word	0x0800600d
 8005ddc:	20014468 	.word	0x20014468
 8005de0:	20014460 	.word	0x20014460
 8005de4:	08007c8c 	.word	0x08007c8c
 8005de8:	08006071 	.word	0x08006071
 8005dec:	20014464 	.word	0x20014464
 8005df0:	08007c98 	.word	0x08007c98
 8005df4:	080060d5 	.word	0x080060d5

08005df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b094      	sub	sp, #80	@ 0x50
 8005dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dfe:	f107 031c 	add.w	r3, r7, #28
 8005e02:	2234      	movs	r2, #52	@ 0x34
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fe82 	bl	8007b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	4b2a      	ldr	r3, [pc, #168]	@ (8005ecc <SystemClock_Config+0xd4>)
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	4a29      	ldr	r2, [pc, #164]	@ (8005ecc <SystemClock_Config+0xd4>)
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <SystemClock_Config+0xd4>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4b24      	ldr	r3, [pc, #144]	@ (8005ed0 <SystemClock_Config+0xd8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e44:	4a22      	ldr	r2, [pc, #136]	@ (8005ed0 <SystemClock_Config+0xd8>)
 8005e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <SystemClock_Config+0xd8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e60:	2310      	movs	r3, #16
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e64:	2302      	movs	r3, #2
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005e70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005e76:	2304      	movs	r3, #4
 8005e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e82:	f107 031c 	add.w	r3, r7, #28
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f8f2 	bl	8007070 <HAL_RCC_OscConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005e92:	f000 f95f 	bl	8006154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e96:	230f      	movs	r3, #15
 8005e98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fd74 	bl	80069a0 <HAL_RCC_ClockConfig>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005ebe:	f000 f949 	bl	8006154 <Error_Handler>
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3750      	adds	r7, #80	@ 0x50
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40007000 	.word	0x40007000

08005ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	@ 0x28
 8005ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eda:	f107 0314 	add.w	r3, r7, #20
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	4b39      	ldr	r3, [pc, #228]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	4a38      	ldr	r2, [pc, #224]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005efa:	4b36      	ldr	r3, [pc, #216]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	4b32      	ldr	r3, [pc, #200]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0e:	4a31      	ldr	r2, [pc, #196]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f16:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f32:	4b28      	ldr	r3, [pc, #160]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	4a23      	ldr	r2, [pc, #140]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f4e:	4b21      	ldr	r3, [pc, #132]	@ (8005fd4 <MX_GPIO_Init+0x100>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	607b      	str	r3, [r7, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2123      	movs	r1, #35	@ 0x23
 8005f5e:	481e      	ldr	r0, [pc, #120]	@ (8005fd8 <MX_GPIO_Init+0x104>)
 8005f60:	f000 fcc6 	bl	80068f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4818      	ldr	r0, [pc, #96]	@ (8005fdc <MX_GPIO_Init+0x108>)
 8005f7c:	f000 fb24 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ext_LED_1_Pin Ext_LED_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin;
 8005f80:	2323      	movs	r3, #35	@ 0x23
 8005f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f84:	2301      	movs	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	4619      	mov	r1, r3
 8005f96:	4810      	ldr	r0, [pc, #64]	@ (8005fd8 <MX_GPIO_Init+0x104>)
 8005f98:	f000 fb16 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fac:	2307      	movs	r3, #7
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb0:	f107 0314 	add.w	r3, r7, #20
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4808      	ldr	r0, [pc, #32]	@ (8005fd8 <MX_GPIO_Init+0x104>)
 8005fb8:	f000 fb06 	bl	80065c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2106      	movs	r1, #6
 8005fc0:	2028      	movs	r0, #40	@ 0x28
 8005fc2:	f000 fad7 	bl	8006574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005fc6:	2028      	movs	r0, #40	@ 0x28
 8005fc8:	f000 faf0 	bl	80065ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005fcc:	bf00      	nop
 8005fce:	3728      	adds	r7, #40	@ 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40020000 	.word	0x40020000
 8005fdc:	40020800 	.word	0x40020800

08005fe0 <Btn_Interrupt>:

/* USER CODE BEGIN 4 */

void Btn_Interrupt(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af02      	add	r7, sp, #8
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&xHigherPriorityTaskWoken);
 8005fea:	4b07      	ldr	r3, [pc, #28]	@ (8006008 <Btn_Interrupt+0x28>)
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f7fb ffd4 	bl	8001fa8 <xTaskGenericNotifyFromISR>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20014468 	.word	0x20014468

0800600c <Ext_LED1_task>:


static void Ext_LED1_task(void *parameter)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af02      	add	r7, sp, #8
 8006012:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1)
	{
	SEGGER_SYSVIEW_PrintfTarget("LED1_Toggling");
 8006014:	4812      	ldr	r0, [pc, #72]	@ (8006060 <Ext_LED1_task+0x54>)
 8006016:	f7ff fc4f 	bl	80058b8 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800601a:	2101      	movs	r1, #1
 800601c:	4811      	ldr	r0, [pc, #68]	@ (8006064 <Ext_LED1_task+0x58>)
 800601e:	f000 fc80 	bl	8006922 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8006022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	2200      	movs	r2, #0
 800602c:	2100      	movs	r1, #0
 800602e:	2000      	movs	r0, #0
 8006030:	f7fb ff22 	bl	8001e78 <xTaskGenericNotifyWait>
 8006034:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d1eb      	bne.n	8006014 <Ext_LED1_task+0x8>
		{
			portENTER_CRITICAL();
 800603c:	f7fc fdc2 	bl	8002bc4 <vPortEnterCritical>
			next_task_handle = Led2_task;
 8006040:	4b09      	ldr	r3, [pc, #36]	@ (8006068 <Ext_LED1_task+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a09      	ldr	r2, [pc, #36]	@ (800606c <Ext_LED1_task+0x60>)
 8006046:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8006048:	2201      	movs	r2, #1
 800604a:	2101      	movs	r1, #1
 800604c:	4805      	ldr	r0, [pc, #20]	@ (8006064 <Ext_LED1_task+0x58>)
 800604e:	f000 fc4f 	bl	80068f0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8006052:	f7fc fde9 	bl	8002c28 <vPortExitCritical>
			vTaskDelete(NULL); // if we want delete task running task parameter should be NULL
 8006056:	2000      	movs	r0, #0
 8006058:	f7fb f81e 	bl	8001098 <vTaskDelete>
	SEGGER_SYSVIEW_PrintfTarget("LED1_Toggling");
 800605c:	e7da      	b.n	8006014 <Ext_LED1_task+0x8>
 800605e:	bf00      	nop
 8006060:	08007ca4 	.word	0x08007ca4
 8006064:	40020000 	.word	0x40020000
 8006068:	20014460 	.word	0x20014460
 800606c:	20014468 	.word	0x20014468

08006070 <Ext_LED2_task>:

		}
	}
}
static void Ext_LED2_task(void *parameter)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
	SEGGER_SYSVIEW_PrintfTarget("LED2_Toggling");
 8006078:	4812      	ldr	r0, [pc, #72]	@ (80060c4 <Ext_LED2_task+0x54>)
 800607a:	f7ff fc1d 	bl	80058b8 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800607e:	2102      	movs	r1, #2
 8006080:	4811      	ldr	r0, [pc, #68]	@ (80060c8 <Ext_LED2_task+0x58>)
 8006082:	f000 fc4e 	bl	8006922 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8006086:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	2000      	movs	r0, #0
 8006094:	f7fb fef0 	bl	8001e78 <xTaskGenericNotifyWait>
 8006098:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d1eb      	bne.n	8006078 <Ext_LED2_task+0x8>
		{
			portENTER_CRITICAL();
 80060a0:	f7fc fd90 	bl	8002bc4 <vPortEnterCritical>
			next_task_handle = Led3_task;
 80060a4:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <Ext_LED2_task+0x5c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <Ext_LED2_task+0x60>)
 80060aa:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80060ac:	2201      	movs	r2, #1
 80060ae:	2102      	movs	r1, #2
 80060b0:	4805      	ldr	r0, [pc, #20]	@ (80060c8 <Ext_LED2_task+0x58>)
 80060b2:	f000 fc1d 	bl	80068f0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80060b6:	f7fc fdb7 	bl	8002c28 <vPortExitCritical>
			vTaskDelete(NULL);
 80060ba:	2000      	movs	r0, #0
 80060bc:	f7fa ffec 	bl	8001098 <vTaskDelete>
	SEGGER_SYSVIEW_PrintfTarget("LED2_Toggling");
 80060c0:	e7da      	b.n	8006078 <Ext_LED2_task+0x8>
 80060c2:	bf00      	nop
 80060c4:	08007cb4 	.word	0x08007cb4
 80060c8:	40020000 	.word	0x40020000
 80060cc:	20014464 	.word	0x20014464
 80060d0:	20014468 	.word	0x20014468

080060d4 <Ext_LED3_task>:

		}
	}
}
static void Ext_LED3_task(void *parameter)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
	SEGGER_SYSVIEW_PrintfTarget("LED3_Toggling");
 80060dc:	4811      	ldr	r0, [pc, #68]	@ (8006124 <Ext_LED3_task+0x50>)
 80060de:	f7ff fbeb 	bl	80058b8 <SEGGER_SYSVIEW_PrintfTarget>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80060e2:	2120      	movs	r1, #32
 80060e4:	4810      	ldr	r0, [pc, #64]	@ (8006128 <Ext_LED3_task+0x54>)
 80060e6:	f000 fc1c 	bl	8006922 <HAL_GPIO_TogglePin>
	status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80060ea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	2200      	movs	r2, #0
 80060f4:	2100      	movs	r1, #0
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7fb febe 	bl	8001e78 <xTaskGenericNotifyWait>
 80060fc:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d1eb      	bne.n	80060dc <Ext_LED3_task+0x8>
		{
			portENTER_CRITICAL();
 8006104:	f7fc fd5e 	bl	8002bc4 <vPortEnterCritical>
			next_task_handle = NULL;
 8006108:	4b08      	ldr	r3, [pc, #32]	@ (800612c <Ext_LED3_task+0x58>)
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800610e:	2201      	movs	r2, #1
 8006110:	2120      	movs	r1, #32
 8006112:	4805      	ldr	r0, [pc, #20]	@ (8006128 <Ext_LED3_task+0x54>)
 8006114:	f000 fbec 	bl	80068f0 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8006118:	f7fc fd86 	bl	8002c28 <vPortExitCritical>
			vTaskDelete(NULL);
 800611c:	2000      	movs	r0, #0
 800611e:	f7fa ffbb 	bl	8001098 <vTaskDelete>
	SEGGER_SYSVIEW_PrintfTarget("LED3_Toggling");
 8006122:	e7db      	b.n	80060dc <Ext_LED3_task+0x8>
 8006124:	08007cc4 	.word	0x08007cc4
 8006128:	40020000 	.word	0x40020000
 800612c:	20014468 	.word	0x20014468

08006130 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a04      	ldr	r2, [pc, #16]	@ (8006150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006142:	f000 f93f 	bl	80063c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40001000 	.word	0x40001000

08006154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006158:	b672      	cpsid	i
}
 800615a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <Error_Handler+0x8>

08006160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <HAL_MspInit+0x4c>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	4a0f      	ldr	r2, [pc, #60]	@ (80061ac <HAL_MspInit+0x4c>)
 8006170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006174:	6453      	str	r3, [r2, #68]	@ 0x44
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <HAL_MspInit+0x4c>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <HAL_MspInit+0x4c>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	4a08      	ldr	r2, [pc, #32]	@ (80061ac <HAL_MspInit+0x4c>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006190:	6413      	str	r3, [r2, #64]	@ 0x40
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <HAL_MspInit+0x4c>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40023800 	.word	0x40023800

080061b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	4b33      	ldr	r3, [pc, #204]	@ (8006294 <HAL_InitTick+0xe4>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	4a32      	ldr	r2, [pc, #200]	@ (8006294 <HAL_InitTick+0xe4>)
 80061ca:	f043 0310 	orr.w	r3, r3, #16
 80061ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80061d0:	4b30      	ldr	r3, [pc, #192]	@ (8006294 <HAL_InitTick+0xe4>)
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061dc:	f107 0210 	add.w	r2, r7, #16
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fce0 	bl	8006bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80061f6:	f000 fcc5 	bl	8006b84 <HAL_RCC_GetPCLK1Freq>
 80061fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80061fc:	e004      	b.n	8006208 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80061fe:	f000 fcc1 	bl	8006b84 <HAL_RCC_GetPCLK1Freq>
 8006202:	4603      	mov	r3, r0
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	4a23      	ldr	r2, [pc, #140]	@ (8006298 <HAL_InitTick+0xe8>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	0c9b      	lsrs	r3, r3, #18
 8006212:	3b01      	subs	r3, #1
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006216:	4b21      	ldr	r3, [pc, #132]	@ (800629c <HAL_InitTick+0xec>)
 8006218:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <HAL_InitTick+0xf0>)
 800621a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800621c:	4b1f      	ldr	r3, [pc, #124]	@ (800629c <HAL_InitTick+0xec>)
 800621e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006222:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006224:	4a1d      	ldr	r2, [pc, #116]	@ (800629c <HAL_InitTick+0xec>)
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800622a:	4b1c      	ldr	r3, [pc, #112]	@ (800629c <HAL_InitTick+0xec>)
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006230:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <HAL_InitTick+0xec>)
 8006232:	2200      	movs	r2, #0
 8006234:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006236:	4b19      	ldr	r3, [pc, #100]	@ (800629c <HAL_InitTick+0xec>)
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800623c:	4817      	ldr	r0, [pc, #92]	@ (800629c <HAL_InitTick+0xec>)
 800623e:	f001 f9b5 	bl	80075ac <HAL_TIM_Base_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800624c:	2b00      	cmp	r3, #0
 800624e:	d11b      	bne.n	8006288 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006250:	4812      	ldr	r0, [pc, #72]	@ (800629c <HAL_InitTick+0xec>)
 8006252:	f001 fa05 	bl	8007660 <HAL_TIM_Base_Start_IT>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800625c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006260:	2b00      	cmp	r3, #0
 8006262:	d111      	bne.n	8006288 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006264:	2036      	movs	r0, #54	@ 0x36
 8006266:	f000 f9a1 	bl	80065ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b0f      	cmp	r3, #15
 800626e:	d808      	bhi.n	8006282 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006270:	2200      	movs	r2, #0
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	2036      	movs	r0, #54	@ 0x36
 8006276:	f000 f97d 	bl	8006574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800627a:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <HAL_InitTick+0xf4>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e002      	b.n	8006288 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006288:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800628c:	4618      	mov	r0, r3
 800628e:	3738      	adds	r7, #56	@ 0x38
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40023800 	.word	0x40023800
 8006298:	431bde83 	.word	0x431bde83
 800629c:	2001446c 	.word	0x2001446c
 80062a0:	40001000 	.word	0x40001000
 80062a4:	20000014 	.word	0x20000014

080062a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <NMI_Handler+0x4>

080062b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <HardFault_Handler+0x4>

080062b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <MemManage_Handler+0x4>

080062c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <BusFault_Handler+0x4>

080062c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062cc:	bf00      	nop
 80062ce:	e7fd      	b.n	80062cc <UsageFault_Handler+0x4>

080062d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	Btn_Interrupt();
 80062e2:	f7ff fe7d 	bl	8005fe0 <Btn_Interrupt>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80062e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80062ea:	f000 fb35 	bl	8006958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80062f8:	4802      	ldr	r0, [pc, #8]	@ (8006304 <TIM6_DAC_IRQHandler+0x10>)
 80062fa:	f001 fa21 	bl	8007740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80062fe:	bf00      	nop
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2001446c 	.word	0x2001446c

08006308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <SystemInit+0x20>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006312:	4a05      	ldr	r2, [pc, #20]	@ (8006328 <SystemInit+0x20>)
 8006314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800632c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006364 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006330:	f7ff ffea 	bl	8006308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006334:	480c      	ldr	r0, [pc, #48]	@ (8006368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006336:	490d      	ldr	r1, [pc, #52]	@ (800636c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006338:	4a0d      	ldr	r2, [pc, #52]	@ (8006370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800633a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800633c:	e002      	b.n	8006344 <LoopCopyDataInit>

0800633e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800633e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006342:	3304      	adds	r3, #4

08006344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006348:	d3f9      	bcc.n	800633e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800634a:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800634c:	4c0a      	ldr	r4, [pc, #40]	@ (8006378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800634e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006350:	e001      	b.n	8006356 <LoopFillZerobss>

08006352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006354:	3204      	adds	r2, #4

08006356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006358:	d3fb      	bcc.n	8006352 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800635a:	f001 fbe1 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800635e:	f7ff fcc9 	bl	8005cf4 <main>
  bx  lr    
 8006362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800636c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8006370:	08007d38 	.word	0x08007d38
  ldr r2, =_sbss
 8006374:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8006378:	200144b8 	.word	0x200144b8

0800637c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800637c:	e7fe      	b.n	800637c <ADC_IRQHandler>
	...

08006380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006384:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <HAL_Init+0x40>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <HAL_Init+0x40>)
 800638a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800638e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006390:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <HAL_Init+0x40>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a0a      	ldr	r2, [pc, #40]	@ (80063c0 <HAL_Init+0x40>)
 8006396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800639a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800639c:	4b08      	ldr	r3, [pc, #32]	@ (80063c0 <HAL_Init+0x40>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a07      	ldr	r2, [pc, #28]	@ (80063c0 <HAL_Init+0x40>)
 80063a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a8:	2003      	movs	r0, #3
 80063aa:	f000 f8d8 	bl	800655e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063ae:	2000      	movs	r0, #0
 80063b0:	f7ff fefe 	bl	80061b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063b4:	f7ff fed4 	bl	8006160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40023c00 	.word	0x40023c00

080063c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063c8:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <HAL_IncTick+0x20>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_IncTick+0x24>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	4a04      	ldr	r2, [pc, #16]	@ (80063e8 <HAL_IncTick+0x24>)
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000018 	.word	0x20000018
 80063e8:	200144b4 	.word	0x200144b4

080063ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return uwTick;
 80063f0:	4b03      	ldr	r3, [pc, #12]	@ (8006400 <HAL_GetTick+0x14>)
 80063f2:	681b      	ldr	r3, [r3, #0]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	200144b4 	.word	0x200144b4

08006404 <__NVIC_SetPriorityGrouping>:
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006414:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <__NVIC_SetPriorityGrouping+0x44>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006420:	4013      	ands	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800642c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006436:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <__NVIC_SetPriorityGrouping+0x44>)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	60d3      	str	r3, [r2, #12]
}
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	e000ed00 	.word	0xe000ed00

0800644c <__NVIC_GetPriorityGrouping>:
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006450:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <__NVIC_GetPriorityGrouping+0x18>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	f003 0307 	and.w	r3, r3, #7
}
 800645a:	4618      	mov	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	e000ed00 	.word	0xe000ed00

08006468 <__NVIC_EnableIRQ>:
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	db0b      	blt.n	8006492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	f003 021f 	and.w	r2, r3, #31
 8006480:	4907      	ldr	r1, [pc, #28]	@ (80064a0 <__NVIC_EnableIRQ+0x38>)
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2001      	movs	r0, #1
 800648a:	fa00 f202 	lsl.w	r2, r0, r2
 800648e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e100 	.word	0xe000e100

080064a4 <__NVIC_SetPriority>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db0a      	blt.n	80064ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	490c      	ldr	r1, [pc, #48]	@ (80064f0 <__NVIC_SetPriority+0x4c>)
 80064be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c2:	0112      	lsls	r2, r2, #4
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	440b      	add	r3, r1
 80064c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064cc:	e00a      	b.n	80064e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	4908      	ldr	r1, [pc, #32]	@ (80064f4 <__NVIC_SetPriority+0x50>)
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	3b04      	subs	r3, #4
 80064dc:	0112      	lsls	r2, r2, #4
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	440b      	add	r3, r1
 80064e2:	761a      	strb	r2, [r3, #24]
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	e000e100 	.word	0xe000e100
 80064f4:	e000ed00 	.word	0xe000ed00

080064f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	@ 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f1c3 0307 	rsb	r3, r3, #7
 8006512:	2b04      	cmp	r3, #4
 8006514:	bf28      	it	cs
 8006516:	2304      	movcs	r3, #4
 8006518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3304      	adds	r3, #4
 800651e:	2b06      	cmp	r3, #6
 8006520:	d902      	bls.n	8006528 <NVIC_EncodePriority+0x30>
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3b03      	subs	r3, #3
 8006526:	e000      	b.n	800652a <NVIC_EncodePriority+0x32>
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	43da      	mvns	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	401a      	ands	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006540:	f04f 31ff 	mov.w	r1, #4294967295
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	fa01 f303 	lsl.w	r3, r1, r3
 800654a:	43d9      	mvns	r1, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006550:	4313      	orrs	r3, r2
         );
}
 8006552:	4618      	mov	r0, r3
 8006554:	3724      	adds	r7, #36	@ 0x24
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ff4c 	bl	8006404 <__NVIC_SetPriorityGrouping>
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006586:	f7ff ff61 	bl	800644c <__NVIC_GetPriorityGrouping>
 800658a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	6978      	ldr	r0, [r7, #20]
 8006592:	f7ff ffb1 	bl	80064f8 <NVIC_EncodePriority>
 8006596:	4602      	mov	r2, r0
 8006598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff80 	bl	80064a4 <__NVIC_SetPriority>
}
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff54 	bl	8006468 <__NVIC_EnableIRQ>
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	@ 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	e165      	b.n	80068b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065e4:	2201      	movs	r2, #1
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f040 8154 	bne.w	80068aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b01      	cmp	r3, #1
 800660c:	d005      	beq.n	800661a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006616:	2b02      	cmp	r3, #2
 8006618:	d130      	bne.n	800667c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	2203      	movs	r2, #3
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4313      	orrs	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006650:	2201      	movs	r2, #1
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 0201 	and.w	r2, r3, #1
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4313      	orrs	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d017      	beq.n	80066b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	2203      	movs	r2, #3
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d123      	bne.n	800670c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	08da      	lsrs	r2, r3, #3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3208      	adds	r2, #8
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	220f      	movs	r2, #15
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	08da      	lsrs	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3208      	adds	r2, #8
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2203      	movs	r2, #3
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4013      	ands	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 0203 	and.w	r2, r3, #3
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4313      	orrs	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80ae 	beq.w	80068aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	4b5d      	ldr	r3, [pc, #372]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006756:	4a5c      	ldr	r2, [pc, #368]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800675c:	6453      	str	r3, [r2, #68]	@ 0x44
 800675e:	4b5a      	ldr	r3, [pc, #360]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800676a:	4a58      	ldr	r2, [pc, #352]	@ (80068cc <HAL_GPIO_Init+0x304>)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	089b      	lsrs	r3, r3, #2
 8006770:	3302      	adds	r3, #2
 8006772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	220f      	movs	r2, #15
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4013      	ands	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a4f      	ldr	r2, [pc, #316]	@ (80068d0 <HAL_GPIO_Init+0x308>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d025      	beq.n	80067e2 <HAL_GPIO_Init+0x21a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a4e      	ldr	r2, [pc, #312]	@ (80068d4 <HAL_GPIO_Init+0x30c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01f      	beq.n	80067de <HAL_GPIO_Init+0x216>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a4d      	ldr	r2, [pc, #308]	@ (80068d8 <HAL_GPIO_Init+0x310>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d019      	beq.n	80067da <HAL_GPIO_Init+0x212>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a4c      	ldr	r2, [pc, #304]	@ (80068dc <HAL_GPIO_Init+0x314>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <HAL_GPIO_Init+0x20e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a4b      	ldr	r2, [pc, #300]	@ (80068e0 <HAL_GPIO_Init+0x318>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00d      	beq.n	80067d2 <HAL_GPIO_Init+0x20a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a4a      	ldr	r2, [pc, #296]	@ (80068e4 <HAL_GPIO_Init+0x31c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <HAL_GPIO_Init+0x206>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a49      	ldr	r2, [pc, #292]	@ (80068e8 <HAL_GPIO_Init+0x320>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <HAL_GPIO_Init+0x202>
 80067c6:	2306      	movs	r3, #6
 80067c8:	e00c      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067ca:	2307      	movs	r3, #7
 80067cc:	e00a      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067ce:	2305      	movs	r3, #5
 80067d0:	e008      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067d2:	2304      	movs	r3, #4
 80067d4:	e006      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067d6:	2303      	movs	r3, #3
 80067d8:	e004      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067da:	2302      	movs	r3, #2
 80067dc:	e002      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <HAL_GPIO_Init+0x21c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	f002 0203 	and.w	r2, r2, #3
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	4093      	lsls	r3, r2
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067f4:	4935      	ldr	r1, [pc, #212]	@ (80068cc <HAL_GPIO_Init+0x304>)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	089b      	lsrs	r3, r3, #2
 80067fa:	3302      	adds	r3, #2
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006802:	4b3a      	ldr	r3, [pc, #232]	@ (80068ec <HAL_GPIO_Init+0x324>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	43db      	mvns	r3, r3
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4013      	ands	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006826:	4a31      	ldr	r2, [pc, #196]	@ (80068ec <HAL_GPIO_Init+0x324>)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800682c:	4b2f      	ldr	r3, [pc, #188]	@ (80068ec <HAL_GPIO_Init+0x324>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	43db      	mvns	r3, r3
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4013      	ands	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006850:	4a26      	ldr	r2, [pc, #152]	@ (80068ec <HAL_GPIO_Init+0x324>)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006856:	4b25      	ldr	r3, [pc, #148]	@ (80068ec <HAL_GPIO_Init+0x324>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	43db      	mvns	r3, r3
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4013      	ands	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800687a:	4a1c      	ldr	r2, [pc, #112]	@ (80068ec <HAL_GPIO_Init+0x324>)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006880:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <HAL_GPIO_Init+0x324>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	43db      	mvns	r3, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4013      	ands	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068a4:	4a11      	ldr	r2, [pc, #68]	@ (80068ec <HAL_GPIO_Init+0x324>)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	3301      	adds	r3, #1
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	f67f ae96 	bls.w	80065e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	3724      	adds	r7, #36	@ 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800
 80068cc:	40013800 	.word	0x40013800
 80068d0:	40020000 	.word	0x40020000
 80068d4:	40020400 	.word	0x40020400
 80068d8:	40020800 	.word	0x40020800
 80068dc:	40020c00 	.word	0x40020c00
 80068e0:	40021000 	.word	0x40021000
 80068e4:	40021400 	.word	0x40021400
 80068e8:	40021800 	.word	0x40021800
 80068ec:	40013c00 	.word	0x40013c00

080068f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	807b      	strh	r3, [r7, #2]
 80068fc:	4613      	mov	r3, r2
 80068fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006900:	787b      	ldrb	r3, [r7, #1]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006906:	887a      	ldrh	r2, [r7, #2]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800690c:	e003      	b.n	8006916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800690e:	887b      	ldrh	r3, [r7, #2]
 8006910:	041a      	lsls	r2, r3, #16
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	619a      	str	r2, [r3, #24]
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4013      	ands	r3, r2
 800693a:	041a      	lsls	r2, r3, #16
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	43d9      	mvns	r1, r3
 8006940:	887b      	ldrh	r3, [r7, #2]
 8006942:	400b      	ands	r3, r1
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	619a      	str	r2, [r3, #24]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006962:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800696e:	4a05      	ldr	r2, [pc, #20]	@ (8006984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f806 	bl	8006988 <HAL_GPIO_EXTI_Callback>
  }
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40013c00 	.word	0x40013c00

08006988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0cc      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b4:	4b68      	ldr	r3, [pc, #416]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d90c      	bls.n	80069dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b65      	ldr	r3, [pc, #404]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b63      	ldr	r3, [pc, #396]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0b8      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d020      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f4:	4b59      	ldr	r3, [pc, #356]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4a58      	ldr	r2, [pc, #352]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a0c:	4b53      	ldr	r3, [pc, #332]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4a52      	ldr	r2, [pc, #328]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a18:	4b50      	ldr	r3, [pc, #320]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	494d      	ldr	r1, [pc, #308]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d044      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b47      	ldr	r3, [pc, #284]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d119      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e07f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d003      	beq.n	8006a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e06f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e067      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7e:	4b37      	ldr	r3, [pc, #220]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f023 0203 	bic.w	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4934      	ldr	r1, [pc, #208]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a90:	f7ff fcac 	bl	80063ec <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7ff fca8 	bl	80063ec <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e04f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aae:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d1eb      	bne.n	8006a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac0:	4b25      	ldr	r3, [pc, #148]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d20c      	bcs.n	8006ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b22      	ldr	r3, [pc, #136]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad6:	4b20      	ldr	r3, [pc, #128]	@ (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e032      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af4:	4b19      	ldr	r3, [pc, #100]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4916      	ldr	r1, [pc, #88]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	490e      	ldr	r1, [pc, #56]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b26:	f000 f873 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	490a      	ldr	r1, [pc, #40]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006b38:	5ccb      	ldrb	r3, [r1, r3]
 8006b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3e:	4a09      	ldr	r2, [pc, #36]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fb32 	bl	80061b0 <HAL_InitTick>

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40023c00 	.word	0x40023c00
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	08007d10 	.word	0x08007d10
 8006b64:	20000010 	.word	0x20000010
 8006b68:	20000014 	.word	0x20000014

08006b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b70:	4b03      	ldr	r3, [pc, #12]	@ (8006b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000010 	.word	0x20000010

08006b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b88:	f7ff fff0 	bl	8006b6c <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	0a9b      	lsrs	r3, r3, #10
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4903      	ldr	r1, [pc, #12]	@ (8006ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	08007d20 	.word	0x08007d20

08006bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220f      	movs	r2, #15
 8006bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0203 	and.w	r2, r3, #3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006be0:	4b09      	ldr	r3, [pc, #36]	@ (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bee:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <HAL_RCC_GetClockConfig+0x60>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	40023c00 	.word	0x40023c00

08006c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c14:	b0ae      	sub	sp, #184	@ 0xb8
 8006c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c36:	4bcb      	ldr	r3, [pc, #812]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
 8006c3e:	2b0c      	cmp	r3, #12
 8006c40:	f200 8206 	bhi.w	8007050 <HAL_RCC_GetSysClockFreq+0x440>
 8006c44:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08007051 	.word	0x08007051
 8006c54:	08007051 	.word	0x08007051
 8006c58:	08007051 	.word	0x08007051
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	08007051 	.word	0x08007051
 8006c64:	08007051 	.word	0x08007051
 8006c68:	08007051 	.word	0x08007051
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08007051 	.word	0x08007051
 8006c74:	08007051 	.word	0x08007051
 8006c78:	08007051 	.word	0x08007051
 8006c7c:	08006e81 	.word	0x08006e81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c80:	4bb9      	ldr	r3, [pc, #740]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x358>)
 8006c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c86:	e1e7      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c88:	4bb8      	ldr	r3, [pc, #736]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c8e:	e1e3      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c90:	4bb4      	ldr	r3, [pc, #720]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9c:	4bb1      	ldr	r3, [pc, #708]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d071      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca8:	4bae      	ldr	r3, [pc, #696]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f04f 0100 	mov.w	r1, #0
 8006cda:	0159      	lsls	r1, r3, #5
 8006cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce0:	0150      	lsls	r0, r2, #5
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	1a51      	subs	r1, r2, r1
 8006cea:	6439      	str	r1, [r7, #64]	@ 0x40
 8006cec:	4629      	mov	r1, r5
 8006cee:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006d00:	4649      	mov	r1, r9
 8006d02:	018b      	lsls	r3, r1, #6
 8006d04:	4641      	mov	r1, r8
 8006d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	018a      	lsls	r2, r1, #6
 8006d0e:	4641      	mov	r1, r8
 8006d10:	1a51      	subs	r1, r2, r1
 8006d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d14:	4649      	mov	r1, r9
 8006d16:	eb63 0301 	sbc.w	r3, r3, r1
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006d28:	4649      	mov	r1, r9
 8006d2a:	00cb      	lsls	r3, r1, #3
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d32:	4641      	mov	r1, r8
 8006d34:	00ca      	lsls	r2, r1, #3
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d42:	462b      	mov	r3, r5
 8006d44:	460a      	mov	r2, r1
 8006d46:	eb42 0303 	adc.w	r3, r2, r3
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d58:	4629      	mov	r1, r5
 8006d5a:	024b      	lsls	r3, r1, #9
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d62:	4621      	mov	r1, r4
 8006d64:	024a      	lsls	r2, r1, #9
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006d7c:	f7f9 fa92 	bl	80002a4 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d8a:	e067      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8c:	4b75      	ldr	r3, [pc, #468]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	099b      	lsrs	r3, r3, #6
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006da6:	2300      	movs	r3, #0
 8006da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006daa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006dae:	4622      	mov	r2, r4
 8006db0:	462b      	mov	r3, r5
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f04f 0100 	mov.w	r1, #0
 8006dba:	0159      	lsls	r1, r3, #5
 8006dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dc0:	0150      	lsls	r0, r2, #5
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	1a51      	subs	r1, r2, r1
 8006dca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006dcc:	4629      	mov	r1, r5
 8006dce:	eb63 0301 	sbc.w	r3, r3, r1
 8006dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006de0:	4649      	mov	r1, r9
 8006de2:	018b      	lsls	r3, r1, #6
 8006de4:	4641      	mov	r1, r8
 8006de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dea:	4641      	mov	r1, r8
 8006dec:	018a      	lsls	r2, r1, #6
 8006dee:	4641      	mov	r1, r8
 8006df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8006df4:	4649      	mov	r1, r9
 8006df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e0e:	4692      	mov	sl, r2
 8006e10:	469b      	mov	fp, r3
 8006e12:	4623      	mov	r3, r4
 8006e14:	eb1a 0303 	adds.w	r3, sl, r3
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	028b      	lsls	r3, r1, #10
 8006e32:	4621      	mov	r1, r4
 8006e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e38:	4621      	mov	r1, r4
 8006e3a:	028a      	lsls	r2, r1, #10
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e44:	2200      	movs	r2, #0
 8006e46:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e48:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e4e:	f7f9 fa29 	bl	80002a4 <__aeabi_uldivmod>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4613      	mov	r3, r2
 8006e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e5c:	4b41      	ldr	r3, [pc, #260]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	0c1b      	lsrs	r3, r3, #16
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	3301      	adds	r3, #1
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e7e:	e0eb      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e80:	4b38      	ldr	r3, [pc, #224]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e8c:	4b35      	ldr	r3, [pc, #212]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d06b      	beq.n	8006f70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e98:	4b32      	ldr	r3, [pc, #200]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	099b      	lsrs	r3, r3, #6
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eac:	2300      	movs	r3, #0
 8006eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	f04f 0000 	mov.w	r0, #0
 8006ebc:	f04f 0100 	mov.w	r1, #0
 8006ec0:	0159      	lsls	r1, r3, #5
 8006ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec6:	0150      	lsls	r0, r2, #5
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4621      	mov	r1, r4
 8006ece:	1a51      	subs	r1, r2, r1
 8006ed0:	61b9      	str	r1, [r7, #24]
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	018b      	lsls	r3, r1, #6
 8006eea:	4651      	mov	r1, sl
 8006eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	018a      	lsls	r2, r1, #6
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	ebb2 0801 	subs.w	r8, r2, r1
 8006efa:	4659      	mov	r1, fp
 8006efc:	eb63 0901 	sbc.w	r9, r3, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f14:	4690      	mov	r8, r2
 8006f16:	4699      	mov	r9, r3
 8006f18:	4623      	mov	r3, r4
 8006f1a:	eb18 0303 	adds.w	r3, r8, r3
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	462b      	mov	r3, r5
 8006f22:	eb49 0303 	adc.w	r3, r9, r3
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006f34:	4629      	mov	r1, r5
 8006f36:	024b      	lsls	r3, r1, #9
 8006f38:	4621      	mov	r1, r4
 8006f3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f3e:	4621      	mov	r1, r4
 8006f40:	024a      	lsls	r2, r1, #9
 8006f42:	4610      	mov	r0, r2
 8006f44:	4619      	mov	r1, r3
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f54:	f7f9 f9a6 	bl	80002a4 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f62:	e065      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x420>
 8006f64:	40023800 	.word	0x40023800
 8006f68:	00f42400 	.word	0x00f42400
 8006f6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f70:	4b3d      	ldr	r3, [pc, #244]	@ (8007068 <HAL_RCC_GetSysClockFreq+0x458>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	099b      	lsrs	r3, r3, #6
 8006f76:	2200      	movs	r2, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f82:	2300      	movs	r3, #0
 8006f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	f04f 0000 	mov.w	r0, #0
 8006f92:	f04f 0100 	mov.w	r1, #0
 8006f96:	0159      	lsls	r1, r3, #5
 8006f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f9c:	0150      	lsls	r0, r2, #5
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	1a51      	subs	r1, r2, r1
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	4649      	mov	r1, r9
 8006faa:	eb63 0301 	sbc.w	r3, r3, r1
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	018b      	lsls	r3, r1, #6
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	018a      	lsls	r2, r1, #6
 8006fca:	4651      	mov	r1, sl
 8006fcc:	1a54      	subs	r4, r2, r1
 8006fce:	4659      	mov	r1, fp
 8006fd0:	eb63 0501 	sbc.w	r5, r3, r1
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	00eb      	lsls	r3, r5, #3
 8006fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fe2:	00e2      	lsls	r2, r4, #3
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	4643      	mov	r3, r8
 8006fea:	18e3      	adds	r3, r4, r3
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	464b      	mov	r3, r9
 8006ff0:	eb45 0303 	adc.w	r3, r5, r3
 8006ff4:	607b      	str	r3, [r7, #4]
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007002:	4629      	mov	r1, r5
 8007004:	028b      	lsls	r3, r1, #10
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800700c:	4621      	mov	r1, r4
 800700e:	028a      	lsls	r2, r1, #10
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007018:	2200      	movs	r2, #0
 800701a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800701c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800701e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007022:	f7f9 f93f 	bl	80002a4 <__aeabi_uldivmod>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4613      	mov	r3, r2
 800702c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007030:	4b0d      	ldr	r3, [pc, #52]	@ (8007068 <HAL_RCC_GetSysClockFreq+0x458>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	0f1b      	lsrs	r3, r3, #28
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800703e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007046:	fbb2 f3f3 	udiv	r3, r2, r3
 800704a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800704e:	e003      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007050:	4b06      	ldr	r3, [pc, #24]	@ (800706c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800705c:	4618      	mov	r0, r3
 800705e:	37b8      	adds	r7, #184	@ 0xb8
 8007060:	46bd      	mov	sp, r7
 8007062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007066:	bf00      	nop
 8007068:	40023800 	.word	0x40023800
 800706c:	00f42400 	.word	0x00f42400

08007070 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e28d      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8083 	beq.w	8007196 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007090:	4b94      	ldr	r3, [pc, #592]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b04      	cmp	r3, #4
 800709a:	d019      	beq.n	80070d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800709c:	4b91      	ldr	r3, [pc, #580]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d106      	bne.n	80070b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80070a8:	4b8e      	ldr	r3, [pc, #568]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b4:	d00c      	beq.n	80070d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070b6:	4b8b      	ldr	r3, [pc, #556]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80070be:	2b0c      	cmp	r3, #12
 80070c0:	d112      	bne.n	80070e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070c2:	4b88      	ldr	r3, [pc, #544]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d0:	4b84      	ldr	r3, [pc, #528]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d05b      	beq.n	8007194 <HAL_RCC_OscConfig+0x124>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d157      	bne.n	8007194 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e25a      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f0:	d106      	bne.n	8007100 <HAL_RCC_OscConfig+0x90>
 80070f2:	4b7c      	ldr	r3, [pc, #496]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7b      	ldr	r2, [pc, #492]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e01d      	b.n	800713c <HAL_RCC_OscConfig+0xcc>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0xb4>
 800710a:	4b76      	ldr	r3, [pc, #472]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a75      	ldr	r2, [pc, #468]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b73      	ldr	r3, [pc, #460]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a72      	ldr	r2, [pc, #456]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e00b      	b.n	800713c <HAL_RCC_OscConfig+0xcc>
 8007124:	4b6f      	ldr	r3, [pc, #444]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6e      	ldr	r2, [pc, #440]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 800712a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4b6c      	ldr	r3, [pc, #432]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6b      	ldr	r2, [pc, #428]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800713a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d013      	beq.n	800716c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7ff f952 	bl	80063ec <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7ff f94e 	bl	80063ec <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	@ 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e21f      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715e:	4b61      	ldr	r3, [pc, #388]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0xdc>
 800716a:	e014      	b.n	8007196 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7ff f93e 	bl	80063ec <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007174:	f7ff f93a 	bl	80063ec <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	@ 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e20b      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007186:	4b57      	ldr	r3, [pc, #348]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x104>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d06f      	beq.n	8007282 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071a2:	4b50      	ldr	r3, [pc, #320]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 030c 	and.w	r3, r3, #12
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d017      	beq.n	80071de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80071ae:	4b4d      	ldr	r3, [pc, #308]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d105      	bne.n	80071c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80071ba:	4b4a      	ldr	r3, [pc, #296]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80071ce:	2b0c      	cmp	r3, #12
 80071d0:	d11c      	bne.n	800720c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071d2:	4b44      	ldr	r3, [pc, #272]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d116      	bne.n	800720c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071de:	4b41      	ldr	r3, [pc, #260]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_RCC_OscConfig+0x186>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d001      	beq.n	80071f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e1d3      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f6:	4b3b      	ldr	r3, [pc, #236]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4937      	ldr	r1, [pc, #220]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720a:	e03a      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007214:	4b34      	ldr	r3, [pc, #208]	@ (80072e8 <HAL_RCC_OscConfig+0x278>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7ff f8e7 	bl	80063ec <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007222:	f7ff f8e3 	bl	80063ec <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e1b4      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007234:	4b2b      	ldr	r3, [pc, #172]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	4b28      	ldr	r3, [pc, #160]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	4925      	ldr	r1, [pc, #148]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	e015      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <HAL_RCC_OscConfig+0x278>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7ff f8c6 	bl	80063ec <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007264:	f7ff f8c2 	bl	80063ec <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e193      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b1b      	ldr	r3, [pc, #108]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d036      	beq.n	80072fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <HAL_RCC_OscConfig+0x27c>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729c:	f7ff f8a6 	bl	80063ec <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a4:	f7ff f8a2 	bl	80063ec <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e173      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <HAL_RCC_OscConfig+0x274>)
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x234>
 80072c2:	e01b      	b.n	80072fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c4:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <HAL_RCC_OscConfig+0x27c>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ca:	f7ff f88f 	bl	80063ec <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d0:	e00e      	b.n	80072f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d2:	f7ff f88b 	bl	80063ec <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d907      	bls.n	80072f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e15c      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
 80072e4:	40023800 	.word	0x40023800
 80072e8:	42470000 	.word	0x42470000
 80072ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f0:	4b8a      	ldr	r3, [pc, #552]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80072f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1ea      	bne.n	80072d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8097 	beq.w	8007438 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730e:	4b83      	ldr	r3, [pc, #524]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	4b7f      	ldr	r3, [pc, #508]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	4a7e      	ldr	r2, [pc, #504]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007328:	6413      	str	r3, [r2, #64]	@ 0x40
 800732a:	4b7c      	ldr	r3, [pc, #496]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007336:	2301      	movs	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733a:	4b79      	ldr	r3, [pc, #484]	@ (8007520 <HAL_RCC_OscConfig+0x4b0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d118      	bne.n	8007378 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007346:	4b76      	ldr	r3, [pc, #472]	@ (8007520 <HAL_RCC_OscConfig+0x4b0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a75      	ldr	r2, [pc, #468]	@ (8007520 <HAL_RCC_OscConfig+0x4b0>)
 800734c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007352:	f7ff f84b 	bl	80063ec <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735a:	f7ff f847 	bl	80063ec <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e118      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800736c:	4b6c      	ldr	r3, [pc, #432]	@ (8007520 <HAL_RCC_OscConfig+0x4b0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f0      	beq.n	800735a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <HAL_RCC_OscConfig+0x31e>
 8007380:	4b66      	ldr	r3, [pc, #408]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007384:	4a65      	ldr	r2, [pc, #404]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6713      	str	r3, [r2, #112]	@ 0x70
 800738c:	e01c      	b.n	80073c8 <HAL_RCC_OscConfig+0x358>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b05      	cmp	r3, #5
 8007394:	d10c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x340>
 8007396:	4b61      	ldr	r3, [pc, #388]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	4a60      	ldr	r2, [pc, #384]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a2:	4b5e      	ldr	r3, [pc, #376]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a6:	4a5d      	ldr	r2, [pc, #372]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ae:	e00b      	b.n	80073c8 <HAL_RCC_OscConfig+0x358>
 80073b0:	4b5a      	ldr	r3, [pc, #360]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b4:	4a59      	ldr	r2, [pc, #356]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80073bc:	4b57      	ldr	r3, [pc, #348]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c0:	4a56      	ldr	r2, [pc, #344]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073c2:	f023 0304 	bic.w	r3, r3, #4
 80073c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d015      	beq.n	80073fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7ff f80c 	bl	80063ec <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d6:	e00a      	b.n	80073ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d8:	f7ff f808 	bl	80063ec <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e0d7      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ee:	4b4b      	ldr	r3, [pc, #300]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ee      	beq.n	80073d8 <HAL_RCC_OscConfig+0x368>
 80073fa:	e014      	b.n	8007426 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fe fff6 	bl	80063ec <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007402:	e00a      	b.n	800741a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fe fff2 	bl	80063ec <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e0c1      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800741a:	4b40      	ldr	r3, [pc, #256]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1ee      	bne.n	8007404 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d105      	bne.n	8007438 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800742c:	4b3b      	ldr	r3, [pc, #236]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	4a3a      	ldr	r2, [pc, #232]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80ad 	beq.w	800759c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007442:	4b36      	ldr	r3, [pc, #216]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b08      	cmp	r3, #8
 800744c:	d060      	beq.n	8007510 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d145      	bne.n	80074e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007456:	4b33      	ldr	r3, [pc, #204]	@ (8007524 <HAL_RCC_OscConfig+0x4b4>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745c:	f7fe ffc6 	bl	80063ec <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007464:	f7fe ffc2 	bl	80063ec <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e093      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007476:	4b29      	ldr	r3, [pc, #164]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	019b      	lsls	r3, r3, #6
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	3b01      	subs	r3, #1
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	071b      	lsls	r3, r3, #28
 80074ae:	491b      	ldr	r1, [pc, #108]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <HAL_RCC_OscConfig+0x4b4>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fe ff97 	bl	80063ec <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c2:	f7fe ff93 	bl	80063ec <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e064      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d4:	4b11      	ldr	r3, [pc, #68]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x452>
 80074e0:	e05c      	b.n	800759c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e2:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <HAL_RCC_OscConfig+0x4b4>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fe ff80 	bl	80063ec <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fe ff7c 	bl	80063ec <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e04d      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_RCC_OscConfig+0x4ac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x480>
 800750e:	e045      	b.n	800759c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e040      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
 800751c:	40023800 	.word	0x40023800
 8007520:	40007000 	.word	0x40007000
 8007524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007528:	4b1f      	ldr	r3, [pc, #124]	@ (80075a8 <HAL_RCC_OscConfig+0x538>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d030      	beq.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d129      	bne.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d122      	bne.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800755e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007560:	4293      	cmp	r3, r2
 8007562:	d119      	bne.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	3b01      	subs	r3, #1
 8007572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d10f      	bne.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d107      	bne.n	8007598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007594:	429a      	cmp	r2, r3
 8007596:	d001      	beq.n	800759c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800

080075ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e041      	b.n	8007642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f839 	bl	800764a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f000 f9c0 	bl	8007970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d001      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e04e      	b.n	8007716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a23      	ldr	r2, [pc, #140]	@ (8007724 <HAL_TIM_Base_Start_IT+0xc4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d022      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a2:	d01d      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007728 <HAL_TIM_Base_Start_IT+0xc8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1e      	ldr	r2, [pc, #120]	@ (800772c <HAL_TIM_Base_Start_IT+0xcc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007730 <HAL_TIM_Base_Start_IT+0xd0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007734 <HAL_TIM_Base_Start_IT+0xd4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a19      	ldr	r2, [pc, #100]	@ (8007738 <HAL_TIM_Base_Start_IT+0xd8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x80>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a18      	ldr	r2, [pc, #96]	@ (800773c <HAL_TIM_Base_Start_IT+0xdc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d111      	bne.n	8007704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d010      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0201 	orr.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	e007      	b.n	8007714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40010000 	.word	0x40010000
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40010400 	.word	0x40010400
 8007738:	40014000 	.word	0x40014000
 800773c:	40001800 	.word	0x40001800

08007740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0202 	mvn.w	r2, #2
 8007774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8d2 	bl	8007934 <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8c4 	bl	8007920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8d5 	bl	8007948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d020      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01b      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0204 	mvn.w	r2, #4
 80077c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8ac 	bl	8007934 <HAL_TIM_IC_CaptureCallback>
 80077dc:	e005      	b.n	80077ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f89e 	bl	8007920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8af 	bl	8007948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d020      	beq.n	800783c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0208 	mvn.w	r2, #8
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2204      	movs	r2, #4
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f886 	bl	8007934 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f878 	bl	8007920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f889 	bl	8007948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 0310 	and.w	r3, r3, #16
 8007842:	2b00      	cmp	r3, #0
 8007844:	d020      	beq.n	8007888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01b      	beq.n	8007888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0210 	mvn.w	r2, #16
 8007858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2208      	movs	r2, #8
 800785e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f860 	bl	8007934 <HAL_TIM_IC_CaptureCallback>
 8007874:	e005      	b.n	8007882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f852 	bl	8007920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f863 	bl	8007948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00c      	beq.n	80078ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0201 	mvn.w	r2, #1
 80078a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe fc42 	bl	8006130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00c      	beq.n	80078d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f906 	bl	8007adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00c      	beq.n	80078f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f834 	bl	800795c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0220 	mvn.w	r2, #32
 8007910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8d8 	bl	8007ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a46      	ldr	r2, [pc, #280]	@ (8007a9c <TIM_Base_SetConfig+0x12c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d013      	beq.n	80079b0 <TIM_Base_SetConfig+0x40>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798e:	d00f      	beq.n	80079b0 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a43      	ldr	r2, [pc, #268]	@ (8007aa0 <TIM_Base_SetConfig+0x130>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00b      	beq.n	80079b0 <TIM_Base_SetConfig+0x40>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a42      	ldr	r2, [pc, #264]	@ (8007aa4 <TIM_Base_SetConfig+0x134>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d007      	beq.n	80079b0 <TIM_Base_SetConfig+0x40>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a41      	ldr	r2, [pc, #260]	@ (8007aa8 <TIM_Base_SetConfig+0x138>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_Base_SetConfig+0x40>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a40      	ldr	r2, [pc, #256]	@ (8007aac <TIM_Base_SetConfig+0x13c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d108      	bne.n	80079c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a35      	ldr	r2, [pc, #212]	@ (8007a9c <TIM_Base_SetConfig+0x12c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d02b      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d0:	d027      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a32      	ldr	r2, [pc, #200]	@ (8007aa0 <TIM_Base_SetConfig+0x130>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d023      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a31      	ldr	r2, [pc, #196]	@ (8007aa4 <TIM_Base_SetConfig+0x134>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01f      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a30      	ldr	r2, [pc, #192]	@ (8007aa8 <TIM_Base_SetConfig+0x138>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01b      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2f      	ldr	r2, [pc, #188]	@ (8007aac <TIM_Base_SetConfig+0x13c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d017      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab0 <TIM_Base_SetConfig+0x140>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab4 <TIM_Base_SetConfig+0x144>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00f      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab8 <TIM_Base_SetConfig+0x148>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00b      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007abc <TIM_Base_SetConfig+0x14c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a2a      	ldr	r2, [pc, #168]	@ (8007ac0 <TIM_Base_SetConfig+0x150>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a29      	ldr	r2, [pc, #164]	@ (8007ac4 <TIM_Base_SetConfig+0x154>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d108      	bne.n	8007a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a10      	ldr	r2, [pc, #64]	@ (8007a9c <TIM_Base_SetConfig+0x12c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d003      	beq.n	8007a68 <TIM_Base_SetConfig+0xf8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a12      	ldr	r2, [pc, #72]	@ (8007aac <TIM_Base_SetConfig+0x13c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d103      	bne.n	8007a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d105      	bne.n	8007a8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f023 0201 	bic.w	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	611a      	str	r2, [r3, #16]
  }
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800
 8007abc:	40001800 	.word	0x40001800
 8007ac0:	40001c00 	.word	0x40001c00
 8007ac4:	40002000 	.word	0x40002000

08007ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <memcmp>:
 8007af0:	b510      	push	{r4, lr}
 8007af2:	3901      	subs	r1, #1
 8007af4:	4402      	add	r2, r0
 8007af6:	4290      	cmp	r0, r2
 8007af8:	d101      	bne.n	8007afe <memcmp+0xe>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e005      	b.n	8007b0a <memcmp+0x1a>
 8007afe:	7803      	ldrb	r3, [r0, #0]
 8007b00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d001      	beq.n	8007b0c <memcmp+0x1c>
 8007b08:	1b18      	subs	r0, r3, r4
 8007b0a:	bd10      	pop	{r4, pc}
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	e7f2      	b.n	8007af6 <memcmp+0x6>

08007b10 <memset>:
 8007b10:	4402      	add	r2, r0
 8007b12:	4603      	mov	r3, r0
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d100      	bne.n	8007b1a <memset+0xa>
 8007b18:	4770      	bx	lr
 8007b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1e:	e7f9      	b.n	8007b14 <memset+0x4>

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4d0d      	ldr	r5, [pc, #52]	@ (8007b58 <__libc_init_array+0x38>)
 8007b24:	4c0d      	ldr	r4, [pc, #52]	@ (8007b5c <__libc_init_array+0x3c>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	4d0b      	ldr	r5, [pc, #44]	@ (8007b60 <__libc_init_array+0x40>)
 8007b32:	4c0c      	ldr	r4, [pc, #48]	@ (8007b64 <__libc_init_array+0x44>)
 8007b34:	f000 f826 	bl	8007b84 <_init>
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	08007d30 	.word	0x08007d30
 8007b5c:	08007d30 	.word	0x08007d30
 8007b60:	08007d30 	.word	0x08007d30
 8007b64:	08007d34 	.word	0x08007d34

08007b68 <memcpy>:
 8007b68:	440a      	add	r2, r1
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b70:	d100      	bne.n	8007b74 <memcpy+0xc>
 8007b72:	4770      	bx	lr
 8007b74:	b510      	push	{r4, lr}
 8007b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	d1f9      	bne.n	8007b76 <memcpy+0xe>
 8007b82:	bd10      	pop	{r4, pc}

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
