
Binnary_Sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800704c  0800704c  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0000819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071a0  080071a0  000081a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080071a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012fe8  20000070  08007214  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013058  08007214  0000a058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013940  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4f  00000000  00000000  0001c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001f930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e73  00000000  00000000  00020bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022278  00000000  00000000  00021a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015faa  00000000  00000000  00043ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e26de  00000000  00000000  00059c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c32b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005874  00000000  00000000  0013c370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00141be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007034 	.word	0x08007034

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007034 	.word	0x08007034

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f103 0208 	add.w	r2, r3, #8
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0208 	add.w	r2, r3, #8
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10b      	bne.n	8000700 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d05d      	beq.n	80007c2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800070a:	2b00      	cmp	r3, #0
 800070c:	d059      	beq.n	80007c2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000716:	2100      	movs	r1, #0
 8000718:	fba3 2302 	umull	r2, r3, r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d000      	beq.n	8000722 <xQueueGenericReset+0x52>
 8000720:	2101      	movs	r1, #1
 8000722:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000724:	2b00      	cmp	r3, #0
 8000726:	d14c      	bne.n	80007c2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000728:	f002 fb9c 	bl	8002e64 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000734:	6939      	ldr	r1, [r7, #16]
 8000736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000738:	fb01 f303 	mul.w	r3, r1, r3
 800073c:	441a      	add	r2, r3
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2200      	movs	r2, #0
 8000746:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000758:	3b01      	subs	r3, #1
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	441a      	add	r2, r3
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	22ff      	movs	r2, #255	@ 0xff
 800076c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	22ff      	movs	r2, #255	@ 0xff
 8000774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d114      	bne.n	80007a8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d01a      	beq.n	80007bc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	3310      	adds	r3, #16
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fa8a 	bl	8001ca4 <xTaskRemoveFromEventList>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d012      	beq.n	80007bc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <xQueueGenericReset+0x120>)
 8000798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	f3bf 8f4f 	dsb	sy
 80007a2:	f3bf 8f6f 	isb	sy
 80007a6:	e009      	b.n	80007bc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff feff 	bl	80005b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3324      	adds	r3, #36	@ 0x24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fefa 	bl	80005b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007bc:	f002 fb84 	bl	8002ec8 <vPortExitCritical>
 80007c0:	e001      	b.n	80007c6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10b      	bne.n	80007e4 <xQueueGenericReset+0x114>
    __asm volatile
 80007cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d0:	f383 8811 	msr	BASEPRI, r3
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	f3bf 8f4f 	dsb	sy
 80007dc:	60bb      	str	r3, [r7, #8]
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80007e4:	697b      	ldr	r3, [r7, #20]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d02e      	beq.n	800086a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800080c:	2100      	movs	r1, #0
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	fba3 2302 	umull	r2, r3, r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <xQueueGenericCreate+0x28>
 800081a:	2101      	movs	r1, #1
 800081c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800081e:	2b00      	cmp	r3, #0
 8000820:	d123      	bne.n	800086a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800082a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800082e:	d81c      	bhi.n	800086a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	3350      	adds	r3, #80	@ 0x50
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fbf4 	bl	800302c <pvPortMalloc>
 8000844:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d01d      	beq.n	8000888 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3350      	adds	r3, #80	@ 0x50
 8000854:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f815 	bl	8000892 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000868:	e00e      	b.n	8000888 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10b      	bne.n	8000888 <xQueueGenericCreate+0x94>
    __asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	613b      	str	r3, [r7, #16]
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000888:	69fb      	ldr	r3, [r7, #28]
    }
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e002      	b.n	80008b4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c0:	2101      	movs	r1, #1
 80008c2:	69b8      	ldr	r0, [r7, #24]
 80008c4:	f7ff ff04 	bl	80006d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80008ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10b      	bne.n	800090c <xQueueGenericSend+0x34>
    __asm volatile
 80008f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	f3bf 8f6f 	isb	sy
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <xQueueGenericSend+0x42>
 8000912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <xQueueGenericSend+0x46>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <xQueueGenericSend+0x48>
 800091e:	2300      	movs	r3, #0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10b      	bne.n	800093c <xQueueGenericSend+0x64>
    __asm volatile
 8000924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d103      	bne.n	800094a <xQueueGenericSend+0x72>
 8000942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <xQueueGenericSend+0x76>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <xQueueGenericSend+0x78>
 800094e:	2300      	movs	r3, #0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <xQueueGenericSend+0x94>
    __asm volatile
 8000954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000958:	f383 8811 	msr	BASEPRI, r3
 800095c:	f3bf 8f6f 	isb	sy
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	623b      	str	r3, [r7, #32]
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800096c:	f001 fbb0 	bl	80020d0 <xTaskGetSchedulerState>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <xQueueGenericSend+0xa4>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <xQueueGenericSend+0xa8>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <xQueueGenericSend+0xaa>
 8000980:	2300      	movs	r3, #0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10b      	bne.n	800099e <xQueueGenericSend+0xc6>
    __asm volatile
 8000986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	61fb      	str	r3, [r7, #28]
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800099e:	f002 fa61 	bl	8002e64 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d302      	bcc.n	80009b4 <xQueueGenericSend+0xdc>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d129      	bne.n	8000a08 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ba:	f000 fa89 	bl	8000ed0 <prvCopyDataToQueue>
 80009be:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d010      	beq.n	80009ea <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ca:	3324      	adds	r3, #36	@ 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f969 	bl	8001ca4 <xTaskRemoveFromEventList>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009d8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad8 <xQueueGenericSend+0x200>)
 80009da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	e00a      	b.n	8000a00 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009f0:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <xQueueGenericSend+0x200>)
 80009f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a00:	f002 fa62 	bl	8002ec8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e063      	b.n	8000ad0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a0e:	f002 fa5b 	bl	8002ec8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e05c      	b.n	8000ad0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fa19 	bl	8001e58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2a:	f002 fa4d 	bl	8002ec8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a2e:	f000 fe2f 	bl	8001690 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a32:	f002 fa17 	bl	8002e64 <vPortEnterCritical>
 8000a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a42:	d103      	bne.n	8000a4c <xQueueGenericSend+0x174>
 8000a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x18a>
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a62:	f002 fa31 	bl	8002ec8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a66:	1d3a      	adds	r2, r7, #4
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fa08 	bl	8001e84 <xTaskCheckForTimeOut>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d124      	bne.n	8000ac4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a7c:	f000 fb20 	bl	80010c0 <prvIsQueueFull>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d018      	beq.n	8000ab8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a88:	3310      	adds	r3, #16
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f89c 	bl	8001bcc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a96:	f000 faab 	bl	8000ff0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a9a:	f000 fe07 	bl	80016ac <xTaskResumeAll>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f47f af7c 	bne.w	800099e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <xQueueGenericSend+0x200>)
 8000aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	f3bf 8f6f 	isb	sy
 8000ab6:	e772      	b.n	800099e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aba:	f000 fa99 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000abe:	f000 fdf5 	bl	80016ac <xTaskResumeAll>
 8000ac2:	e76c      	b.n	800099e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac6:	f000 fa93 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aca:	f000 fdef 	bl	80016ac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000ace:	2300      	movs	r3, #0
        }
    }
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3738      	adds	r7, #56	@ 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10b      	bne.n	8000b0e <xQueueReceive+0x32>
    __asm volatile
 8000af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	623b      	str	r3, [r7, #32]
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <xQueueReceive+0x40>
 8000b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <xQueueReceive+0x44>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <xQueueReceive+0x46>
 8000b20:	2300      	movs	r3, #0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10b      	bne.n	8000b3e <xQueueReceive+0x62>
    __asm volatile
 8000b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b2a:	f383 8811 	msr	BASEPRI, r3
 8000b2e:	f3bf 8f6f 	isb	sy
 8000b32:	f3bf 8f4f 	dsb	sy
 8000b36:	61fb      	str	r3, [r7, #28]
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	e7fd      	b.n	8000b3a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b3e:	f001 fac7 	bl	80020d0 <xTaskGetSchedulerState>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <xQueueReceive+0x72>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <xQueueReceive+0x76>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <xQueueReceive+0x78>
 8000b52:	2300      	movs	r3, #0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10b      	bne.n	8000b70 <xQueueReceive+0x94>
    __asm volatile
 8000b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b5c:	f383 8811 	msr	BASEPRI, r3
 8000b60:	f3bf 8f6f 	isb	sy
 8000b64:	f3bf 8f4f 	dsb	sy
 8000b68:	61bb      	str	r3, [r7, #24]
}
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b70:	f002 f978 	bl	8002e64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d01f      	beq.n	8000bc0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b84:	f000 fa0e 	bl	8000fa4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00f      	beq.n	8000bb8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f881 	bl	8001ca4 <xTaskRemoveFromEventList>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <xQueueReceive+0x1c0>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bb8:	f002 f986 	bl	8002ec8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e069      	b.n	8000c94 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bc6:	f002 f97f 	bl	8002ec8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e062      	b.n	8000c94 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f93d 	bl	8001e58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000be2:	f002 f971 	bl	8002ec8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000be6:	f000 fd53 	bl	8001690 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bea:	f002 f93b 	bl	8002e64 <vPortEnterCritical>
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfa:	d103      	bne.n	8000c04 <xQueueReceive+0x128>
 8000bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d103      	bne.n	8000c1a <xQueueReceive+0x13e>
 8000c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c1a:	f002 f955 	bl	8002ec8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c1e:	1d3a      	adds	r2, r7, #4
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f92c 	bl	8001e84 <xTaskCheckForTimeOut>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d123      	bne.n	8000c7a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c34:	f000 fa2e 	bl	8001094 <prvIsQueueEmpty>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d017      	beq.n	8000c6e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c40:	3324      	adds	r3, #36	@ 0x24
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 ffc0 	bl	8001bcc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c4e:	f000 f9cf 	bl	8000ff0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c52:	f000 fd2b 	bl	80016ac <xTaskResumeAll>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d189      	bne.n	8000b70 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <xQueueReceive+0x1c0>)
 8000c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	f3bf 8f6f 	isb	sy
 8000c6c:	e780      	b.n	8000b70 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c70:	f000 f9be 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c74:	f000 fd1a 	bl	80016ac <xTaskResumeAll>
 8000c78:	e77a      	b.n	8000b70 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c7c:	f000 f9b8 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c80:	f000 fd14 	bl	80016ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c86:	f000 fa05 	bl	8001094 <prvIsQueueEmpty>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f43f af6f 	beq.w	8000b70 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000c92:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3730      	adds	r7, #48	@ 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10b      	bne.n	8000cd4 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	61bb      	str	r3, [r7, #24]
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00b      	beq.n	8000cf4 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	617b      	str	r3, [r7, #20]
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cf4:	f001 f9ec 	bl	80020d0 <xTaskGetSchedulerState>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <xQueueSemaphoreTake+0x64>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <xQueueSemaphoreTake+0x68>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <xQueueSemaphoreTake+0x6a>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10b      	bne.n	8000d26 <xQueueSemaphoreTake+0x86>
    __asm volatile
 8000d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	613b      	str	r3, [r7, #16]
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	e7fd      	b.n	8000d22 <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d26:	f002 f89d 	bl	8002e64 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d024      	beq.n	8000d80 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d104      	bne.n	8000d50 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d46:	f001 fbe5 	bl	8002514 <pvTaskIncrementMutexHeldCount>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00f      	beq.n	8000d78 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	3310      	adds	r3, #16
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 ffa1 	bl	8001ca4 <xTaskRemoveFromEventList>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d68:	4b4c      	ldr	r3, [pc, #304]	@ (8000e9c <xQueueSemaphoreTake+0x1fc>)
 8000d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d78:	f002 f8a6 	bl	8002ec8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e089      	b.n	8000e94 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d103      	bne.n	8000d8e <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000d86:	f002 f89f 	bl	8002ec8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e082      	b.n	8000e94 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 f85d 	bl	8001e58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000da2:	f002 f891 	bl	8002ec8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000da6:	f000 fc73 	bl	8001690 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000daa:	f002 f85b 	bl	8002e64 <vPortEnterCritical>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dba:	d103      	bne.n	8000dc4 <xQueueSemaphoreTake+0x124>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d103      	bne.n	8000dda <xQueueSemaphoreTake+0x13a>
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dda:	f002 f875 	bl	8002ec8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dde:	463a      	mov	r2, r7
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 f84c 	bl	8001e84 <xTaskCheckForTimeOut>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d132      	bne.n	8000e58 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000df4:	f000 f94e 	bl	8001094 <prvIsQueueEmpty>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d026      	beq.n	8000e4c <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8000e06:	f002 f82d 	bl	8002e64 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f97c 	bl	800210c <xTaskPriorityInherit>
 8000e14:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8000e16:	f002 f857 	bl	8002ec8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	3324      	adds	r3, #36	@ 0x24
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fed2 	bl	8001bcc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e2a:	f000 f8e1 	bl	8000ff0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e2e:	f000 fc3d 	bl	80016ac <xTaskResumeAll>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f47f af76 	bne.w	8000d26 <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <xQueueSemaphoreTake+0x1fc>)
 8000e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	f3bf 8f4f 	dsb	sy
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	e76c      	b.n	8000d26 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e4e:	f000 f8cf 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e52:	f000 fc2b 	bl	80016ac <xTaskResumeAll>
 8000e56:	e766      	b.n	8000d26 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000e58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e5a:	f000 f8c9 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e5e:	f000 fc25 	bl	80016ac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e64:	f000 f916 	bl	8001094 <prvIsQueueEmpty>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f43f af5b 	beq.w	8000d26 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00d      	beq.n	8000e92 <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8000e76:	f001 fff5 	bl	8002e64 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000e7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e7c:	f000 f810 	bl	8000ea0 <prvGetDisinheritPriorityAfterTimeout>
 8000e80:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	69f9      	ldr	r1, [r7, #28]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fa87 	bl	800239c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000e8e:	f002 f81b 	bl	8002ec8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000e92:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3730      	adds	r7, #48	@ 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f1c3 0305 	rsb	r3, r3, #5
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e001      	b.n	8000ec2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10d      	bne.n	8000f0a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14d      	bne.n	8000f92 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 f9a6 	bl	800224c <xTaskPriorityDisinherit>
 8000f00:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	e043      	b.n	8000f92 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d119      	bne.n	8000f44 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6858      	ldr	r0, [r3, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	f005 f8b5 	bl	800608a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	441a      	add	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d32b      	bcc.n	8000f92 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e026      	b.n	8000f92 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68d8      	ldr	r0, [r3, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	f005 f89b 	bl	800608a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	441a      	add	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	425b      	negs	r3, r3
 8000f7a:	441a      	add	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d105      	bne.n	8000f92 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f9a:	697b      	ldr	r3, [r7, #20]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d018      	beq.n	8000fe8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	441a      	add	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d303      	bcc.n	8000fd8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68d9      	ldr	r1, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f005 f851 	bl	800608a <memcpy>
    }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ff8:	f001 ff34 	bl	8002e64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001002:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001004:	e011      	b.n	800102a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	2b00      	cmp	r3, #0
 800100c:	d012      	beq.n	8001034 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3324      	adds	r3, #36	@ 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fe46 	bl	8001ca4 <xTaskRemoveFromEventList>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800101e:	f000 ff99 	bl	8001f54 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3b01      	subs	r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	2b00      	cmp	r3, #0
 8001030:	dce9      	bgt.n	8001006 <prvUnlockQueue+0x16>
 8001032:	e000      	b.n	8001036 <prvUnlockQueue+0x46>
                    break;
 8001034:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	22ff      	movs	r2, #255	@ 0xff
 800103a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800103e:	f001 ff43 	bl	8002ec8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001042:	f001 ff0f 	bl	8002e64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800104c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800104e:	e011      	b.n	8001074 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d012      	beq.n	800107e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3310      	adds	r3, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fe21 	bl	8001ca4 <xTaskRemoveFromEventList>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001068:	f000 ff74 	bl	8001f54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	3b01      	subs	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dce9      	bgt.n	8001050 <prvUnlockQueue+0x60>
 800107c:	e000      	b.n	8001080 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800107e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	22ff      	movs	r2, #255	@ 0xff
 8001084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001088:	f001 ff1e 	bl	8002ec8 <vPortExitCritical>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800109c:	f001 fee2 	bl	8002e64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e001      	b.n	80010b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010b2:	f001 ff09 	bl	8002ec8 <vPortExitCritical>

    return xReturn;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010c8:	f001 fecc 	bl	8002e64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d102      	bne.n	80010de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e001      	b.n	80010e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010e2:	f001 fef1 	bl	8002ec8 <vPortExitCritical>

    return xReturn;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d024      	beq.n	800116c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e01e      	b.n	8001166 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001128:	4a18      	ldr	r2, [pc, #96]	@ (800118c <vQueueAddToRegistry+0x9c>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d105      	bne.n	8001144 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4a13      	ldr	r2, [pc, #76]	@ (800118c <vQueueAddToRegistry+0x9c>)
 800113e:	4413      	add	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
                    break;
 8001142:	e013      	b.n	800116c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <vQueueAddToRegistry+0x70>
 800114a:	4a10      	ldr	r2, [pc, #64]	@ (800118c <vQueueAddToRegistry+0x9c>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4a0c      	ldr	r2, [pc, #48]	@ (800118c <vQueueAddToRegistry+0x9c>)
 800115c:	4413      	add	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d9dd      	bls.n	8001128 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000008c 	.word	0x2000008c

08001190 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011a0:	f001 fe60 	bl	8002e64 <vPortEnterCritical>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d103      	bne.n	80011ba <vQueueWaitForMessageRestricted+0x2a>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d103      	bne.n	80011d0 <vQueueWaitForMessageRestricted+0x40>
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011d0:	f001 fe7a 	bl	8002ec8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d106      	bne.n	80011ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3324      	adds	r3, #36	@ 0x24
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fd17 	bl	8001c18 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff00 	bl	8000ff0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 ff0e 	bl	800302c <pvPortMalloc>
 8001210:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001218:	2058      	movs	r0, #88	@ 0x58
 800121a:	f001 ff07 	bl	800302c <pvPortMalloc>
 800121e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d008      	beq.n	8001238 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001226:	2258      	movs	r2, #88	@ 0x58
 8001228:	2100      	movs	r1, #0
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f004 feb1 	bl	8005f92 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	631a      	str	r2, [r3, #48]	@ 0x30
 8001236:	e005      	b.n	8001244 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001238:	6938      	ldr	r0, [r7, #16]
 800123a:	f002 f829 	bl	8003290 <vPortFree>
 800123e:	e001      	b.n	8001244 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00d      	beq.n	8001266 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800124a:	2300      	movs	r3, #0
 800124c:	9303      	str	r3, [sp, #12]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f828 	bl	80012b6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001266:	697b      	ldr	r3, [r7, #20]
    }
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ffb3 	bl	80011f8 <prvCreateTask>
 8001292:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800129a:	6938      	ldr	r0, [r7, #16]
 800129c:	f000 f89c 	bl	80013d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e002      	b.n	80012ac <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80012ac:	697b      	ldr	r3, [r7, #20]
    }
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b088      	sub	sp, #32
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80012c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	461a      	mov	r2, r3
 80012ce:	21a5      	movs	r1, #165	@ 0xa5
 80012d0:	f004 fe5f 	bl	8005f92 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80012d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012de:	3b01      	subs	r3, #1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f023 0307 	bic.w	r3, r3, #7
 80012ec:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80012f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012fc:	f383 8811 	msr	BASEPRI, r3
 8001300:	f3bf 8f6f 	isb	sy
 8001304:	f3bf 8f4f 	dsb	sy
 8001308:	617b      	str	r3, [r7, #20]
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01e      	beq.n	8001354 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e012      	b.n	8001342 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	7819      	ldrb	r1, [r3, #0]
 8001324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	3334      	adds	r3, #52	@ 0x34
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d9e9      	bls.n	800131c <prvInitialiseNewTask+0x66>
 8001348:	e000      	b.n	800134c <prvInitialiseNewTask+0x96>
            {
                break;
 800134a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001356:	2b04      	cmp	r3, #4
 8001358:	d90b      	bls.n	8001372 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800135a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	613b      	str	r3, [r7, #16]
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	e7fd      	b.n	800136e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001374:	2b04      	cmp	r3, #4
 8001376:	d901      	bls.n	800137c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001378:	2304      	movs	r3, #4
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800137c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800137e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001380:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001386:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138a:	3304      	adds	r3, #4
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f92f 	bl	80005f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001394:	3318      	adds	r3, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f92a 	bl	80005f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800139c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800139e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013a0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80013a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a4:	f1c3 0205 	rsb	r2, r3, #5
 80013a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013aa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	69b8      	ldr	r0, [r7, #24]
 80013b8:	f001 fbd8 	bl	8002b6c <pxPortInitialiseStack>
 80013bc:	4602      	mov	r2, r0
 80013be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80013e0:	f001 fd40 	bl	8002e64 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80013e4:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <prvAddNewTaskToReadyList+0x114>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a40      	ldr	r2, [pc, #256]	@ (80014ec <prvAddNewTaskToReadyList+0x114>)
 80013ec:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80013ee:	4b40      	ldr	r3, [pc, #256]	@ (80014f0 <prvAddNewTaskToReadyList+0x118>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80013f6:	4a3e      	ldr	r2, [pc, #248]	@ (80014f0 <prvAddNewTaskToReadyList+0x118>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013fc:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <prvAddNewTaskToReadyList+0x114>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d110      	bne.n	8001426 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001404:	f000 fdca 	bl	8001f9c <prvInitialiseTaskLists>
 8001408:	e00d      	b.n	8001426 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <prvAddNewTaskToReadyList+0x11c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <prvAddNewTaskToReadyList+0x118>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d802      	bhi.n	8001426 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001420:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <prvAddNewTaskToReadyList+0x118>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001426:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <prvAddNewTaskToReadyList+0x120>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <prvAddNewTaskToReadyList+0x120>)
 800142e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <prvAddNewTaskToReadyList+0x120>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	2201      	movs	r2, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <prvAddNewTaskToReadyList+0x124>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4313      	orrs	r3, r2
 8001446:	4a2d      	ldr	r2, [pc, #180]	@ (80014fc <prvAddNewTaskToReadyList+0x124>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800144e:	492c      	ldr	r1, [pc, #176]	@ (8001500 <prvAddNewTaskToReadyList+0x128>)
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3304      	adds	r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	3204      	adds	r2, #4
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1d1a      	adds	r2, r3, #4
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <prvAddNewTaskToReadyList+0x128>)
 800148e:	441a      	add	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	4919      	ldr	r1, [pc, #100]	@ (8001500 <prvAddNewTaskToReadyList+0x128>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014aa:	1c59      	adds	r1, r3, #1
 80014ac:	4814      	ldr	r0, [pc, #80]	@ (8001500 <prvAddNewTaskToReadyList+0x128>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4403      	add	r3, r0
 80014b8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80014ba:	f001 fd05 	bl	8002ec8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <prvAddNewTaskToReadyList+0x11c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00e      	beq.n	80014e4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <prvAddNewTaskToReadyList+0x118>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <prvAddNewTaskToReadyList+0x10c>
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <prvAddNewTaskToReadyList+0x12c>)
 80014d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001a4 	.word	0x200001a4
 80014f0:	200000cc 	.word	0x200000cc
 80014f4:	200001b0 	.word	0x200001b0
 80014f8:	200001c0 	.word	0x200001c0
 80014fc:	200001ac 	.word	0x200001ac
 8001500:	200000d0 	.word	0x200000d0
 8001504:	e000ed04 	.word	0xe000ed04

08001508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d018      	beq.n	800154c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800151a:	f000 f8b9 	bl	8001690 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <vTaskDelay+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d00b      	beq.n	800153e <vTaskDelay+0x36>
    __asm volatile
 8001526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	60bb      	str	r3, [r7, #8]
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	e7fd      	b.n	800153a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 ffff 	bl	8002544 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001546:	f000 f8b1 	bl	80016ac <xTaskResumeAll>
 800154a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <vTaskDelay+0x68>)
 8001554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f3bf 8f4f 	dsb	sy
 800155e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001cc 	.word	0x200001cc
 8001570:	e000ed04 	.word	0xe000ed04

08001574 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e011      	b.n	80015ac <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <prvCreateIdleTasks+0x88>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	7819      	ldrb	r1, [r3, #0]
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	4413      	add	r3, r2
 8001596:	460a      	mov	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800159a:	1d3a      	adds	r2, r7, #4
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	ddea      	ble.n	8001588 <prvCreateIdleTasks+0x14>
 80015b2:	e000      	b.n	80015b6 <prvCreateIdleTasks+0x42>
        {
            break;
 80015b4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	e015      	b.n	80015e8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <prvCreateIdleTasks+0x8c>)
 80015be:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <prvCreateIdleTasks+0x90>)
 80015c6:	4413      	add	r3, r2
 80015c8:	1d39      	adds	r1, r7, #4
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	2282      	movs	r2, #130	@ 0x82
 80015d4:	6938      	ldr	r0, [r7, #16]
 80015d6:	f7ff fe4b 	bl	8001270 <xTaskCreate>
 80015da:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dde6      	ble.n	80015bc <prvCreateIdleTasks+0x48>
 80015ee:	e000      	b.n	80015f2 <prvCreateIdleTasks+0x7e>
        {
            break;
 80015f0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80015f2:	69fb      	ldr	r3, [r7, #28]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800704c 	.word	0x0800704c
 8001600:	08001f6d 	.word	0x08001f6d
 8001604:	200001c8 	.word	0x200001c8

08001608 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800160e:	f7ff ffb1 	bl	8001574 <prvCreateIdleTasks>
 8001612:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800161a:	f001 f815 	bl	8002648 <xTimerCreateTimerTask>
 800161e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d116      	bne.n	8001654 <vTaskStartScheduler+0x4c>
    __asm volatile
 8001626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
 8001636:	60bb      	str	r3, [r7, #8]
}
 8001638:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <vTaskStartScheduler+0x78>)
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <vTaskStartScheduler+0x7c>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <vTaskStartScheduler+0x80>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800164e:	f001 fb19 	bl	8002c84 <xPortStartScheduler>
 8001652:	e00f      	b.n	8001674 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	d10b      	bne.n	8001674 <vTaskStartScheduler+0x6c>
    __asm volatile
 800165c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001660:	f383 8811 	msr	BASEPRI, r3
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	607b      	str	r3, [r7, #4]
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <vTaskStartScheduler+0x84>)
 8001676:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001c4 	.word	0x200001c4
 8001684:	200001b0 	.word	0x200001b0
 8001688:	200001a8 	.word	0x200001a8
 800168c:	20000000 	.word	0x20000000

08001690 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <vTaskSuspendAll+0x18>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <vTaskSuspendAll+0x18>)
 800169c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200001cc 	.word	0x200001cc

080016ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80016ba:	f001 fbd3 	bl	8002e64 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80016c2:	4b75      	ldr	r3, [pc, #468]	@ (8001898 <xTaskResumeAll+0x1ec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10b      	bne.n	80016e2 <xTaskResumeAll+0x36>
    __asm volatile
 80016ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016ce:	f383 8811 	msr	BASEPRI, r3
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	603b      	str	r3, [r7, #0]
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80016e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <xTaskResumeAll+0x1ec>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001898 <xTaskResumeAll+0x1ec>)
 80016ea:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80016ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <xTaskResumeAll+0x1ec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 80ca 	bne.w	800188a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016f6:	4b69      	ldr	r3, [pc, #420]	@ (800189c <xTaskResumeAll+0x1f0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80c5 	beq.w	800188a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001700:	e08e      	b.n	8001820 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001702:	4b67      	ldr	r3, [pc, #412]	@ (80018a0 <xTaskResumeAll+0x1f4>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	6a12      	ldr	r2, [r2, #32]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	69d2      	ldr	r2, [r2, #28]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	3318      	adds	r3, #24
 800172c:	429a      	cmp	r2, r3
 800172e:	d103      	bne.n	8001738 <xTaskResumeAll+0x8c>
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	68d2      	ldr	r2, [r2, #12]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	6892      	ldr	r2, [r2, #8]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	429a      	cmp	r2, r3
 800176c:	d103      	bne.n	8001776 <xTaskResumeAll+0xca>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <xTaskResumeAll+0x1f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	4a43      	ldr	r2, [pc, #268]	@ (80018a4 <xTaskResumeAll+0x1f8>)
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800179c:	4942      	ldr	r1, [pc, #264]	@ (80018a8 <xTaskResumeAll+0x1fc>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	3204      	adds	r2, #4
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	1d1a      	adds	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4a33      	ldr	r2, [pc, #204]	@ (80018a8 <xTaskResumeAll+0x1fc>)
 80017dc:	441a      	add	r2, r3
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e6:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <xTaskResumeAll+0x1fc>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	482b      	ldr	r0, [pc, #172]	@ (80018a8 <xTaskResumeAll+0x1fc>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <xTaskResumeAll+0x200>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	429a      	cmp	r2, r3
 8001814:	d904      	bls.n	8001820 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001816:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <xTaskResumeAll+0x204>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2101      	movs	r1, #1
 800181c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <xTaskResumeAll+0x1f4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f af6c 	bne.w	8001702 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001830:	f000 fc32 	bl	8002098 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <xTaskResumeAll+0x208>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001840:	f000 f84c 	bl	80018dc <xTaskIncrementTick>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800184a:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <xTaskResumeAll+0x204>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2101      	movs	r1, #1
 8001850:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3b01      	subs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ef      	bne.n	8001840 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <xTaskResumeAll+0x208>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <xTaskResumeAll+0x204>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <xTaskResumeAll+0x200>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <xTaskResumeAll+0x20c>)
 800187c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f3bf 8f4f 	dsb	sy
 8001886:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800188a:	f001 fb1d 	bl	8002ec8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800188e:	69bb      	ldr	r3, [r7, #24]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200001cc 	.word	0x200001cc
 800189c:	200001a4 	.word	0x200001a4
 80018a0:	20000164 	.word	0x20000164
 80018a4:	200001ac 	.word	0x200001ac
 80018a8:	200000d0 	.word	0x200000d0
 80018ac:	200000cc 	.word	0x200000cc
 80018b0:	200001b8 	.word	0x200001b8
 80018b4:	200001b4 	.word	0x200001b4
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <xTaskGetTickCount+0x1c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200001a8 	.word	0x200001a8

080018dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80018e6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae4 <xTaskIncrementTick+0x208>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 80ef 	bne.w	8001ace <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018f0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae8 <xTaskIncrementTick+0x20c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018f8:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae8 <xTaskIncrementTick+0x20c>)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d121      	bne.n	8001948 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001904:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <xTaskIncrementTick+0x210>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <xTaskIncrementTick+0x4a>
    __asm volatile
 800190e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001912:	f383 8811 	msr	BASEPRI, r3
 8001916:	f3bf 8f6f 	isb	sy
 800191a:	f3bf 8f4f 	dsb	sy
 800191e:	607b      	str	r3, [r7, #4]
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	e7fd      	b.n	8001922 <xTaskIncrementTick+0x46>
 8001926:	4b71      	ldr	r3, [pc, #452]	@ (8001aec <xTaskIncrementTick+0x210>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <xTaskIncrementTick+0x214>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6e      	ldr	r2, [pc, #440]	@ (8001aec <xTaskIncrementTick+0x210>)
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4a6e      	ldr	r2, [pc, #440]	@ (8001af0 <xTaskIncrementTick+0x214>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6e      	ldr	r3, [pc, #440]	@ (8001af4 <xTaskIncrementTick+0x218>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a6c      	ldr	r2, [pc, #432]	@ (8001af4 <xTaskIncrementTick+0x218>)
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	f000 fba8 	bl	8002098 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <xTaskIncrementTick+0x21c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	429a      	cmp	r2, r3
 8001950:	f0c0 80a8 	bcc.w	8001aa4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001954:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <xTaskIncrementTick+0x210>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d104      	bne.n	8001968 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800195e:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <xTaskIncrementTick+0x21c>)
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	601a      	str	r2, [r3, #0]
                    break;
 8001966:	e09d      	b.n	8001aa4 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001968:	4b60      	ldr	r3, [pc, #384]	@ (8001aec <xTaskIncrementTick+0x210>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001978:	6a3a      	ldr	r2, [r7, #32]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	d203      	bcs.n	8001988 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001980:	4a5d      	ldr	r2, [pc, #372]	@ (8001af8 <xTaskIncrementTick+0x21c>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	6013      	str	r3, [r2, #0]
                        break;
 8001986:	e08d      	b.n	8001aa4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	6892      	ldr	r2, [r2, #8]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3304      	adds	r3, #4
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d103      	bne.n	80019b6 <xTaskIncrementTick+0xda>
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01e      	beq.n	8001a0c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	6a12      	ldr	r2, [r2, #32]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	69d2      	ldr	r2, [r2, #28]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	3318      	adds	r3, #24
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d103      	bne.n	80019fc <xTaskIncrementTick+0x120>
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <xTaskIncrementTick+0x220>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <xTaskIncrementTick+0x220>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a22:	4937      	ldr	r1, [pc, #220]	@ (8001b00 <xTaskIncrementTick+0x224>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3304      	adds	r3, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	3204      	adds	r2, #4
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <xTaskIncrementTick+0x224>)
 8001a62:	441a      	add	r2, r3
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a6c:	4924      	ldr	r1, [pc, #144]	@ (8001b00 <xTaskIncrementTick+0x224>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	481f      	ldr	r0, [pc, #124]	@ (8001b00 <xTaskIncrementTick+0x224>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4403      	add	r3, r0
 8001a8c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <xTaskIncrementTick+0x228>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f67f af5b 	bls.w	8001954 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aa2:	e757      	b.n	8001954 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <xTaskIncrementTick+0x228>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aaa:	4915      	ldr	r1, [pc, #84]	@ (8001b00 <xTaskIncrementTick+0x224>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d901      	bls.n	8001ac0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <xTaskIncrementTick+0x22c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e004      	b.n	8001ad8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <xTaskIncrementTick+0x230>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <xTaskIncrementTick+0x230>)
 8001ad6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200001cc 	.word	0x200001cc
 8001ae8:	200001a8 	.word	0x200001a8
 8001aec:	2000015c 	.word	0x2000015c
 8001af0:	20000160 	.word	0x20000160
 8001af4:	200001bc 	.word	0x200001bc
 8001af8:	200001c4 	.word	0x200001c4
 8001afc:	200001ac 	.word	0x200001ac
 8001b00:	200000d0 	.word	0x200000d0
 8001b04:	200000cc 	.word	0x200000cc
 8001b08:	200001b8 	.word	0x200001b8
 8001b0c:	200001b4 	.word	0x200001b4

08001b10 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001b16:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <vTaskSwitchContext+0xa8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <vTaskSwitchContext+0xac>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001b24:	e041      	b.n	8001baa <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <vTaskSwitchContext+0xac>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <vTaskSwitchContext+0xb0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f1c3 031f 	rsb	r3, r3, #31
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	4920      	ldr	r1, [pc, #128]	@ (8001bc4 <vTaskSwitchContext+0xb4>)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	607b      	str	r3, [r7, #4]
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	e7fd      	b.n	8001b6a <vTaskSwitchContext+0x5a>
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <vTaskSwitchContext+0xb4>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d103      	bne.n	8001b9c <vTaskSwitchContext+0x8c>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <vTaskSwitchContext+0xb8>)
 8001ba4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <vTaskSwitchContext+0xb8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
    }
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200001cc 	.word	0x200001cc
 8001bbc:	200001b8 	.word	0x200001b8
 8001bc0:	200001ac 	.word	0x200001ac
 8001bc4:	200000d0 	.word	0x200000d0
 8001bc8:	200000cc 	.word	0x200000cc

08001bcc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	60fb      	str	r3, [r7, #12]
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <vTaskPlaceOnEventList+0x48>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe fd04 	bl	800060a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c02:	2101      	movs	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f000 fc9d 	bl	8002544 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000cc 	.word	0x200000cc

08001c18 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10b      	bne.n	8001c42 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	613b      	str	r3, [r7, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	61da      	str	r2, [r3, #28]
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	6892      	ldr	r2, [r2, #8]
 8001c58:	621a      	str	r2, [r3, #32]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	3218      	adds	r2, #24
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f103 0218 	add.w	r2, r3, #24
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	68b8      	ldr	r0, [r7, #8]
 8001c94:	f000 fc56 	bl	8002544 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000cc 	.word	0x200000cc

08001ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	@ 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10b      	bne.n	8001cd2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cbe:	f383 8811 	msr	BASEPRI, r3
 8001cc2:	f3bf 8f6f 	isb	sy
 8001cc6:	f3bf 8f4f 	dsb	sy
 8001cca:	60fb      	str	r3, [r7, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	e7fd      	b.n	8001cce <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	6a12      	ldr	r2, [r2, #32]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	6a3a      	ldr	r2, [r7, #32]
 8001ce8:	69d2      	ldr	r2, [r2, #28]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	3318      	adds	r3, #24
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d103      	bne.n	8001d00 <xTaskRemoveFromEventList+0x5c>
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	6a1a      	ldr	r2, [r3, #32]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001d10:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <xTaskRemoveFromEventList+0x19c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d160      	bne.n	8001dda <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	68d2      	ldr	r2, [r2, #12]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	6892      	ldr	r2, [r2, #8]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <xTaskRemoveFromEventList+0xa2>
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <xTaskRemoveFromEventList+0x1a0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	4a37      	ldr	r2, [pc, #220]	@ (8001e44 <xTaskRemoveFromEventList+0x1a0>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6c:	4936      	ldr	r1, [pc, #216]	@ (8001e48 <xTaskRemoveFromEventList+0x1a4>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	3204      	adds	r2, #4
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	1d1a      	adds	r2, r3, #4
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <xTaskRemoveFromEventList+0x1a4>)
 8001dac:	441a      	add	r2, r3
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db6:	4924      	ldr	r1, [pc, #144]	@ (8001e48 <xTaskRemoveFromEventList+0x1a4>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001dc8:	1c59      	adds	r1, r3, #1
 8001dca:	481f      	ldr	r0, [pc, #124]	@ (8001e48 <xTaskRemoveFromEventList+0x1a4>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	6019      	str	r1, [r3, #0]
 8001dd8:	e01b      	b.n	8001e12 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <xTaskRemoveFromEventList+0x1a8>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	621a      	str	r2, [r3, #32]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	6a3a      	ldr	r2, [r7, #32]
 8001df4:	3218      	adds	r2, #24
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f103 0218 	add.w	r2, r3, #24
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <xTaskRemoveFromEventList+0x1a8>)
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <xTaskRemoveFromEventList+0x1a8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <xTaskRemoveFromEventList+0x1a8>)
 8001e10:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <xTaskRemoveFromEventList+0x1ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d905      	bls.n	8001e2c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <xTaskRemoveFromEventList+0x1b0>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e001      	b.n	8001e30 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	372c      	adds	r7, #44	@ 0x2c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200001cc 	.word	0x200001cc
 8001e44:	200001ac 	.word	0x200001ac
 8001e48:	200000d0 	.word	0x200000d0
 8001e4c:	20000164 	.word	0x20000164
 8001e50:	200000cc 	.word	0x200000cc
 8001e54:	200001b8 	.word	0x200001b8

08001e58 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <vTaskInternalSetTimeOutState+0x24>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <vTaskInternalSetTimeOutState+0x28>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	200001bc 	.word	0x200001bc
 8001e80:	200001a8 	.word	0x200001a8

08001e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	613b      	str	r3, [r7, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	60fb      	str	r3, [r7, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001eca:	f000 ffcb 	bl	8002e64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <xTaskCheckForTimeOut+0xc8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d102      	bne.n	8001eee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	e026      	b.n	8001f3c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <xTaskCheckForTimeOut+0xcc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d00a      	beq.n	8001f10 <xTaskCheckForTimeOut+0x8c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d305      	bcc.n	8001f10 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e015      	b.n	8001f3c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d20b      	bcs.n	8001f32 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff96 	bl	8001e58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e004      	b.n	8001f3c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f3c:	f000 ffc4 	bl	8002ec8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001f40:	69fb      	ldr	r3, [r7, #28]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001a8 	.word	0x200001a8
 8001f50:	200001bc 	.word	0x200001bc

08001f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <vTaskMissedYield+0x14>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200001b8 	.word	0x200001b8

08001f6c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f74:	f000 f852 	bl	800201c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <prvIdleTask+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d9f9      	bls.n	8001f74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <prvIdleTask+0x2c>)
 8001f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001f90:	e7f0      	b.n	8001f74 <prvIdleTask+0x8>
 8001f92:	bf00      	nop
 8001f94:	200000d0 	.word	0x200000d0
 8001f98:	e000ed04 	.word	0xe000ed04

08001f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	e00c      	b.n	8001fc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <prvInitialiseTaskLists+0x60>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fafa 	bl	80005b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d9ef      	bls.n	8001fa8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fc8:	480d      	ldr	r0, [pc, #52]	@ (8002000 <prvInitialiseTaskLists+0x64>)
 8001fca:	f7fe faf1 	bl	80005b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001fce:	480d      	ldr	r0, [pc, #52]	@ (8002004 <prvInitialiseTaskLists+0x68>)
 8001fd0:	f7fe faee 	bl	80005b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <prvInitialiseTaskLists+0x6c>)
 8001fd6:	f7fe faeb 	bl	80005b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001fda:	480c      	ldr	r0, [pc, #48]	@ (800200c <prvInitialiseTaskLists+0x70>)
 8001fdc:	f7fe fae8 	bl	80005b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001fe0:	480b      	ldr	r0, [pc, #44]	@ (8002010 <prvInitialiseTaskLists+0x74>)
 8001fe2:	f7fe fae5 	bl	80005b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <prvInitialiseTaskLists+0x78>)
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <prvInitialiseTaskLists+0x64>)
 8001fea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <prvInitialiseTaskLists+0x7c>)
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <prvInitialiseTaskLists+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200000d0 	.word	0x200000d0
 8002000:	20000134 	.word	0x20000134
 8002004:	20000148 	.word	0x20000148
 8002008:	20000164 	.word	0x20000164
 800200c:	20000178 	.word	0x20000178
 8002010:	20000190 	.word	0x20000190
 8002014:	2000015c 	.word	0x2000015c
 8002018:	20000160 	.word	0x20000160

0800201c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002022:	e019      	b.n	8002058 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002024:	f000 ff1e 	bl	8002e64 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <prvCheckTasksWaitingTermination+0x50>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fb21 	bl	800067c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <prvCheckTasksWaitingTermination+0x54>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3b01      	subs	r3, #1
 8002040:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <prvCheckTasksWaitingTermination+0x54>)
 8002042:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <prvCheckTasksWaitingTermination+0x58>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <prvCheckTasksWaitingTermination+0x58>)
 800204c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800204e:	f000 ff3b 	bl	8002ec8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f810 	bl	8002078 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <prvCheckTasksWaitingTermination+0x58>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e1      	bne.n	8002024 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000178 	.word	0x20000178
 8002070:	200001a4 	.word	0x200001a4
 8002074:	2000018c 	.word	0x2000018c

08002078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4618      	mov	r0, r3
 8002086:	f001 f903 	bl	8003290 <vPortFree>
            vPortFree( pxTCB );
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f001 f900 	bl	8003290 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <prvResetNextTaskUnblockTime+0x30>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <prvResetNextTaskUnblockTime+0x34>)
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020ae:	e005      	b.n	80020bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <prvResetNextTaskUnblockTime+0x30>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <prvResetNextTaskUnblockTime+0x34>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	2000015c 	.word	0x2000015c
 80020cc:	200001c4 	.word	0x200001c4

080020d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <xTaskGetSchedulerState+0x34>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80020de:	2301      	movs	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	e008      	b.n	80020f6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <xTaskGetSchedulerState+0x38>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80020ec:	2302      	movs	r3, #2
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	e001      	b.n	80020f6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80020f6:	687b      	ldr	r3, [r7, #4]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	200001b0 	.word	0x200001b0
 8002108:	200001cc 	.word	0x200001cc

0800210c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8089 	beq.w	8002236 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	4b45      	ldr	r3, [pc, #276]	@ (8002240 <xTaskPriorityInherit+0x134>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	429a      	cmp	r2, r3
 8002130:	d278      	bcs.n	8002224 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db06      	blt.n	8002148 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800213a:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <xTaskPriorityInherit+0x134>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f1c3 0205 	rsb	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6959      	ldr	r1, [r3, #20]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <xTaskPriorityInherit+0x138>)
 800215a:	4413      	add	r3, r2
 800215c:	4299      	cmp	r1, r3
 800215e:	d159      	bne.n	8002214 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3304      	adds	r3, #4
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fa89 	bl	800067c <uxListRemove>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	2201      	movs	r2, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	4b32      	ldr	r3, [pc, #200]	@ (8002248 <xTaskPriorityInherit+0x13c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4013      	ands	r3, r2
 8002182:	4a31      	ldr	r2, [pc, #196]	@ (8002248 <xTaskPriorityInherit+0x13c>)
 8002184:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002186:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <xTaskPriorityInherit+0x134>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	2201      	movs	r2, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <xTaskPriorityInherit+0x13c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4313      	orrs	r3, r2
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <xTaskPriorityInherit+0x13c>)
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a6:	4927      	ldr	r1, [pc, #156]	@ (8002244 <xTaskPriorityInherit+0x138>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	3204      	adds	r2, #4
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1d1a      	adds	r2, r3, #4
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <xTaskPriorityInherit+0x138>)
 80021e6:	441a      	add	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	615a      	str	r2, [r3, #20]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f0:	4914      	ldr	r1, [pc, #80]	@ (8002244 <xTaskPriorityInherit+0x138>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	480f      	ldr	r0, [pc, #60]	@ (8002244 <xTaskPriorityInherit+0x138>)
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	6019      	str	r1, [r3, #0]
 8002212:	e004      	b.n	800221e <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <xTaskPriorityInherit+0x134>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e008      	b.n	8002236 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <xTaskPriorityInherit+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	429a      	cmp	r2, r3
 8002230:	d201      	bcs.n	8002236 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8002236:	697b      	ldr	r3, [r7, #20]
    }
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200000cc 	.word	0x200000cc
 8002244:	200000d0 	.word	0x200000d0
 8002248:	200001ac 	.word	0x200001ac

0800224c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8090 	beq.w	8002384 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002264:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <xTaskPriorityDisinherit+0x144>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	429a      	cmp	r2, r3
 800226c:	d00b      	beq.n	8002286 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	613b      	str	r3, [r7, #16]
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	e7fd      	b.n	8002282 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	60fb      	str	r3, [r7, #12]
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	e7fd      	b.n	80022a2 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d063      	beq.n	8002384 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d15f      	bne.n	8002384 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f9d7 	bl	800067c <uxListRemove>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	2201      	movs	r2, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002394 <xTaskPriorityDisinherit+0x148>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4013      	ands	r3, r2
 80022e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <xTaskPriorityDisinherit+0x148>)
 80022e8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f1c3 0205 	rsb	r2, r3, #5
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	2201      	movs	r2, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <xTaskPriorityDisinherit+0x148>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	4a21      	ldr	r2, [pc, #132]	@ (8002394 <xTaskPriorityDisinherit+0x148>)
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002314:	4920      	ldr	r1, [pc, #128]	@ (8002398 <xTaskPriorityDisinherit+0x14c>)
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	3204      	adds	r2, #4
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <xTaskPriorityDisinherit+0x14c>)
 8002354:	441a      	add	r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235e:	490e      	ldr	r1, [pc, #56]	@ (8002398 <xTaskPriorityDisinherit+0x14c>)
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	4809      	ldr	r0, [pc, #36]	@ (8002398 <xTaskPriorityDisinherit+0x14c>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4403      	add	r3, r0
 800237e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002380:	2301      	movs	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002384:	69fb      	ldr	r3, [r7, #28]
    }
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200000cc 	.word	0x200000cc
 8002394:	200001ac 	.word	0x200001ac
 8002398:	200000d0 	.word	0x200000d0

0800239c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a5 	beq.w	8002500 <vTaskPriorityDisinheritAfterTimeout+0x164>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	613b      	str	r3, [r7, #16]
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	e7fd      	b.n	80023d2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d902      	bls.n	80023e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	e002      	b.n	80023ec <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f000 8084 	beq.w	8002500 <vTaskPriorityDisinheritAfterTimeout+0x164>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d17e      	bne.n	8002500 <vTaskPriorityDisinheritAfterTimeout+0x164>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a3a      	ldr	r2, [r7, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d10b      	bne.n	8002424 <vTaskPriorityDisinheritAfterTimeout+0x88>
    __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	60fb      	str	r3, [r7, #12]
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db04      	blt.n	8002442 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f1c3 0205 	rsb	r2, r3, #5
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	6959      	ldr	r1, [r3, #20]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a2e      	ldr	r2, [pc, #184]	@ (800250c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002452:	4413      	add	r3, r2
 8002454:	4299      	cmp	r1, r3
 8002456:	d153      	bne.n	8002500 <vTaskPriorityDisinheritAfterTimeout+0x164>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	3304      	adds	r3, #4
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f90d 	bl	800067c <uxListRemove>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2201      	movs	r2, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4013      	ands	r3, r2
 800247a:	4a25      	ldr	r2, [pc, #148]	@ (8002510 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800247c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	2201      	movs	r2, #1
 8002484:	409a      	lsls	r2, r3
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	4a20      	ldr	r2, [pc, #128]	@ (8002510 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002494:	491d      	ldr	r1, [pc, #116]	@ (800250c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	3204      	adds	r2, #4
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	1d1a      	adds	r2, r3, #4
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4a0e      	ldr	r2, [pc, #56]	@ (800250c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024d4:	441a      	add	r2, r3
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024de:	490b      	ldr	r1, [pc, #44]	@ (800250c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	4806      	ldr	r0, [pc, #24]	@ (800250c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4403      	add	r3, r0
 80024fe:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200000cc 	.word	0x200000cc
 800250c:	200000d0 	.word	0x200000d0
 8002510:	200001ac 	.word	0x200001ac

08002514 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <pvTaskIncrementMutexHeldCount+0x2c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8002530:	687b      	ldr	r3, [r7, #4]
    }
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200000cc 	.word	0x200000cc

08002544 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800254e:	4b37      	ldr	r3, [pc, #220]	@ (800262c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002554:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <prvAddCurrentTaskToDelayedList+0xec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800255a:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <prvAddCurrentTaskToDelayedList+0xf0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002560:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3304      	adds	r3, #4
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f888 	bl	800067c <uxListRemove>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	2201      	movs	r2, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	4b2e      	ldr	r3, [pc, #184]	@ (800263c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4013      	ands	r3, r2
 8002586:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002588:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d124      	bne.n	80025dc <prvAddCurrentTaskToDelayedList+0x98>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d021      	beq.n	80025dc <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002598:	4b29      	ldr	r3, [pc, #164]	@ (8002640 <prvAddCurrentTaskToDelayedList+0xfc>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	3204      	adds	r2, #4
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1d1a      	adds	r2, r3, #4
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002640 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025cc:	615a      	str	r2, [r3, #20]
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002640 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80025da:	e022      	b.n	8002622 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7fe f804 	bl	800060a <vListInsert>
}
 8002602:	e00e      	b.n	8002622 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3304      	adds	r3, #4
 800260a:	4619      	mov	r1, r3
 800260c:	69b8      	ldr	r0, [r7, #24]
 800260e:	f7fd fffc 	bl	800060a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <prvAddCurrentTaskToDelayedList+0x100>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d202      	bcs.n	8002622 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800261c:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <prvAddCurrentTaskToDelayedList+0x100>)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200001a8 	.word	0x200001a8
 8002630:	2000015c 	.word	0x2000015c
 8002634:	20000160 	.word	0x20000160
 8002638:	200000cc 	.word	0x200000cc
 800263c:	200001ac 	.word	0x200001ac
 8002640:	20000190 	.word	0x20000190
 8002644:	200001c4 	.word	0x200001c4

08002648 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002652:	f000 fa55 	bl	8002b00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <xTimerCreateTimerTask+0x58>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <xTimerCreateTimerTask+0x5c>)
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2302      	movs	r3, #2
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800266c:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <xTimerCreateTimerTask+0x60>)
 800266e:	480f      	ldr	r0, [pc, #60]	@ (80026ac <xTimerCreateTimerTask+0x64>)
 8002670:	f7fe fdfe 	bl	8001270 <xTaskCreate>
 8002674:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	603b      	str	r3, [r7, #0]
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002694:	687b      	ldr	r3, [r7, #4]
    }
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000200 	.word	0x20000200
 80026a4:	20000204 	.word	0x20000204
 80026a8:	08007054 	.word	0x08007054
 80026ac:	08002755 	.word	0x08002755

080026b0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026bc:	e008      	b.n	80026d0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	18d1      	adds	r1, r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f8df 	bl	80028a0 <prvInsertTimerInActiveList>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <prvReloadTimer+0xe>
        }
    }
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <prvProcessExpiredTimer+0x5c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3304      	adds	r3, #4
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ffb5 	bl	800067c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff ffc3 	bl	80026b0 <prvReloadTimer>
 800272a:	e008      	b.n	800273e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	4798      	blx	r3
    }
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200001f8 	.word	0x200001f8

08002754 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f859 	bl	8002818 <prvGetNextExpireTime>
 8002766:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4619      	mov	r1, r3
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f805 	bl	800277c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002772:	f000 f8d7 	bl	8002924 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002776:	bf00      	nop
 8002778:	e7f0      	b.n	800275c <prvTimerTask+0x8>
	...

0800277c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002786:	f7fe ff83 	bl	8001690 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f866 	bl	8002860 <prvSampleTimeNow>
 8002794:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d130      	bne.n	80027fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <prvProcessTimerOrBlockTask+0x3c>
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d806      	bhi.n	80027b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027aa:	f7fe ff7f 	bl	80016ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff9f 	bl	80026f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027b6:	e024      	b.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <prvProcessTimerOrBlockTask+0x90>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <prvProcessTimerOrBlockTask+0x50>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <prvProcessTimerOrBlockTask+0x52>
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <prvProcessTimerOrBlockTask+0x94>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	f7fe fcd7 	bl	8001190 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027e2:	f7fe ff63 	bl	80016ac <xTaskResumeAll>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <prvProcessTimerOrBlockTask+0x98>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
    }
 80027fc:	e001      	b.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80027fe:	f7fe ff55 	bl	80016ac <xTaskResumeAll>
    }
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200001fc 	.word	0x200001fc
 8002810:	20000200 	.word	0x20000200
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002820:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <prvGetNextExpireTime+0x44>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <prvGetNextExpireTime+0x16>
 800282a:	2201      	movs	r2, #1
 800282c:	e000      	b.n	8002830 <prvGetNextExpireTime+0x18>
 800282e:	2200      	movs	r2, #0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <prvGetNextExpireTime+0x44>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e001      	b.n	800284c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800284c:	68fb      	ldr	r3, [r7, #12]
    }
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200001f8 	.word	0x200001f8

08002860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002868:	f7ff f828 	bl	80018bc <xTaskGetTickCount>
 800286c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <prvSampleTimeNow+0x3c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d205      	bcs.n	8002884 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002878:	f000 f91c 	bl	8002ab4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e002      	b.n	800288a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <prvSampleTimeNow+0x3c>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002890:	68fb      	ldr	r3, [r7, #12]
    }
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000208 	.word	0x20000208

080028a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d812      	bhi.n	80028ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e01b      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <prvInsertTimerInActiveList+0x7c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7fd fe90 	bl	800060a <vListInsert>
 80028ea:	e012      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d206      	bcs.n	8002902 <prvInsertTimerInActiveList+0x62>
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d302      	bcc.n	8002902 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e007      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002902:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <prvInsertTimerInActiveList+0x80>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3304      	adds	r3, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fd fe7c 	bl	800060a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002912:	697b      	ldr	r3, [r7, #20]
    }
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200001fc 	.word	0x200001fc
 8002920:	200001f8 	.word	0x200001f8

08002924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002936:	e0a9      	b.n	8002a8c <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f2c0 80a6 	blt.w	8002a8c <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe93 	bl	800067c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff81 	bl	8002860 <prvSampleTimeNow>
 800295e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3b01      	subs	r3, #1
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 808e 	bhi.w	8002a86 <prvProcessReceivedCommands+0x162>
 800296a:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <prvProcessReceivedCommands+0x4c>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002995 	.word	0x08002995
 8002974:	08002995 	.word	0x08002995
 8002978:	080029fd 	.word	0x080029fd
 800297c:	08002a11 	.word	0x08002a11
 8002980:	08002a5d 	.word	0x08002a5d
 8002984:	08002995 	.word	0x08002995
 8002988:	08002995 	.word	0x08002995
 800298c:	080029fd 	.word	0x080029fd
 8002990:	08002a11 	.word	0x08002a11
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	18d1      	adds	r1, r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	69f8      	ldr	r0, [r7, #28]
 80029b4:	f7ff ff74 	bl	80028a0 <prvInsertTimerInActiveList>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d065      	beq.n	8002a8a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4619      	mov	r1, r3
 80029d8:	69f8      	ldr	r0, [r7, #28]
 80029da:	f7ff fe69 	bl	80026b0 <prvReloadTimer>
 80029de:	e008      	b.n	80029f2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	69f8      	ldr	r0, [r7, #28]
 80029f8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80029fa:	e046      	b.n	8002a8a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002a0e:	e03d      	b.n	8002a8c <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	617b      	str	r3, [r7, #20]
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	18d1      	adds	r1, r2, r3
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	69f8      	ldr	r0, [r7, #28]
 8002a56:	f7ff ff23 	bl	80028a0 <prvInsertTimerInActiveList>
                        break;
 8002a5a:	e017      	b.n	8002a8c <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002a6a:	69f8      	ldr	r0, [r7, #28]
 8002a6c:	f000 fc10 	bl	8003290 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a70:	e00c      	b.n	8002a8c <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002a84:	e002      	b.n	8002a8c <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <prvProcessReceivedCommands+0x168>
                        break;
 8002a8a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <prvProcessReceivedCommands+0x18c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f107 0108 	add.w	r1, r7, #8
 8002a94:	2200      	movs	r2, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f820 	bl	8000adc <xQueueReceive>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f af4a 	bne.w	8002938 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000200 	.word	0x20000200

08002ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002aba:	e009      	b.n	8002ad0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <prvSwitchTimerLists+0x44>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f7ff fe12 	bl	80026f4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <prvSwitchTimerLists+0x44>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002ada:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <prvSwitchTimerLists+0x44>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <prvSwitchTimerLists+0x48>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <prvSwitchTimerLists+0x44>)
 8002ae6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <prvSwitchTimerLists+0x48>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
    }
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200001f8 	.word	0x200001f8
 8002afc:	200001fc 	.word	0x200001fc

08002b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b04:	f000 f9ae 	bl	8002e64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <prvCheckForValidListAndQueue+0x54>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11d      	bne.n	8002b4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b10:	4811      	ldr	r0, [pc, #68]	@ (8002b58 <prvCheckForValidListAndQueue+0x58>)
 8002b12:	f7fd fd4d 	bl	80005b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b16:	4811      	ldr	r0, [pc, #68]	@ (8002b5c <prvCheckForValidListAndQueue+0x5c>)
 8002b18:	f7fd fd4a 	bl	80005b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <prvCheckForValidListAndQueue+0x60>)
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <prvCheckForValidListAndQueue+0x58>)
 8002b20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <prvCheckForValidListAndQueue+0x64>)
 8002b24:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <prvCheckForValidListAndQueue+0x5c>)
 8002b26:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002b28:	2200      	movs	r2, #0
 8002b2a:	210c      	movs	r1, #12
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f7fd fe61 	bl	80007f4 <xQueueGenericCreate>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a07      	ldr	r2, [pc, #28]	@ (8002b54 <prvCheckForValidListAndQueue+0x54>)
 8002b36:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <prvCheckForValidListAndQueue+0x54>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <prvCheckForValidListAndQueue+0x54>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <prvCheckForValidListAndQueue+0x68>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fad2 	bl	80010f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b4c:	f000 f9bc 	bl	8002ec8 <vPortExitCritical>
    }
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000200 	.word	0x20000200
 8002b58:	200001d0 	.word	0x200001d0
 8002b5c:	200001e4 	.word	0x200001e4
 8002b60:	200001f8 	.word	0x200001f8
 8002b64:	200001fc 	.word	0x200001fc
 8002b68:	0800705c 	.word	0x0800705c

08002b6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b04      	subs	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b04      	subs	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd0 <pxPortInitialiseStack+0x64>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3b14      	subs	r3, #20
 8002ba6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b04      	subs	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f06f 0202 	mvn.w	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3b20      	subs	r3, #32
 8002bc0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	08002bd5 	.word	0x08002bd5

08002bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bde:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <prvTaskExitError+0x58>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d00b      	beq.n	8002c00 <prvTaskExitError+0x2c>
    __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60fb      	str	r3, [r7, #12]
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <prvTaskExitError+0x28>
    __asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	60bb      	str	r3, [r7, #8]
}
 8002c12:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c14:	bf00      	nop
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0fc      	beq.n	8002c16 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000004 	.word	0x20000004

08002c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <pxCurrentTCBConst2>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	f380 8809 	msr	PSP, r0
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f380 8811 	msr	BASEPRI, r0
 8002c4a:	4770      	bx	lr
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst2>:
 8002c50:	200000cc 	.word	0x200000cc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c58:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <prvPortStartFirstTask+0x24>)
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f380 8808 	msr	MSP, r0
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f380 8814 	msr	CONTROL, r0
 8002c6a:	b662      	cpsie	i
 8002c6c:	b661      	cpsie	f
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	df00      	svc	0
 8002c78:	bf00      	nop
 8002c7a:	0000      	.short	0x0000
 8002c7c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop

08002c84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	@ 0x30
 8002c88:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c8a:	4b69      	ldr	r3, [pc, #420]	@ (8002e30 <xPortStartScheduler+0x1ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a69      	ldr	r2, [pc, #420]	@ (8002e34 <xPortStartScheduler+0x1b0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10b      	bne.n	8002cac <xPortStartScheduler+0x28>
    __asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cac:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <xPortStartScheduler+0x1ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a61      	ldr	r2, [pc, #388]	@ (8002e38 <xPortStartScheduler+0x1b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10b      	bne.n	8002cce <xPortStartScheduler+0x4a>
    __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	623b      	str	r3, [r7, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002cce:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <xPortStartScheduler+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	332c      	adds	r3, #44	@ 0x2c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a59      	ldr	r2, [pc, #356]	@ (8002e40 <xPortStartScheduler+0x1bc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <xPortStartScheduler+0x74>
    __asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61fb      	str	r3, [r7, #28]
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	3338      	adds	r3, #56	@ 0x38
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <xPortStartScheduler+0x1c0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <xPortStartScheduler+0x98>
    __asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	61bb      	str	r3, [r7, #24]
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d20:	4b49      	ldr	r3, [pc, #292]	@ (8002e48 <xPortStartScheduler+0x1c4>)
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b41      	ldr	r3, [pc, #260]	@ (8002e4c <xPortStartScheduler+0x1c8>)
 8002d46:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002d48:	4b40      	ldr	r3, [pc, #256]	@ (8002e4c <xPortStartScheduler+0x1c8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <xPortStartScheduler+0xe4>
    __asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	617b      	str	r3, [r7, #20]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d013      	beq.n	8002d9e <xPortStartScheduler+0x11a>
    __asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	613b      	str	r3, [r7, #16]
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	e7fd      	b.n	8002d8a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d0f1      	beq.n	8002d8e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d103      	bne.n	8002db8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002db0:	4b27      	ldr	r3, [pc, #156]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e004      	b.n	8002dc2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002dc0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4a21      	ldr	r2, [pc, #132]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002dca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dcc:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <xPortStartScheduler+0x1cc>)
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002de0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <xPortStartScheduler+0x1d0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <xPortStartScheduler+0x1d0>)
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <xPortStartScheduler+0x1d0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <xPortStartScheduler+0x1d0>)
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <xPortStartScheduler+0x1d4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002dfe:	f000 f8e5 	bl	8002fcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e02:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <xPortStartScheduler+0x1d8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e08:	f000 f904 	bl	8003014 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <xPortStartScheduler+0x1dc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <xPortStartScheduler+0x1dc>)
 8002e12:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e18:	f7ff ff1e 	bl	8002c58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e1c:	f7fe fe78 	bl	8001b10 <vTaskSwitchContext>
    prvTaskExitError();
 8002e20:	f7ff fed8 	bl	8002bd4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3730      	adds	r7, #48	@ 0x30
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	410fc271 	.word	0x410fc271
 8002e38:	410fc270 	.word	0x410fc270
 8002e3c:	e000ed08 	.word	0xe000ed08
 8002e40:	08002c31 	.word	0x08002c31
 8002e44:	08002f21 	.word	0x08002f21
 8002e48:	e000e400 	.word	0xe000e400
 8002e4c:	2000020c 	.word	0x2000020c
 8002e50:	20000210 	.word	0x20000210
 8002e54:	e000ed20 	.word	0xe000ed20
 8002e58:	e000ed1c 	.word	0xe000ed1c
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	e000ef34 	.word	0xe000ef34

08002e64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
    __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	607b      	str	r3, [r7, #4]
}
 8002e7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <vPortEnterCritical+0x5c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec0 <vPortEnterCritical+0x5c>)
 8002e86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <vPortEnterCritical+0x5c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d110      	bne.n	8002eb2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <vPortEnterCritical+0x60>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <vPortEnterCritical+0x4e>
    __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	603b      	str	r3, [r7, #0]
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	e7fd      	b.n	8002eae <vPortEnterCritical+0x4a>
    }
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000004 	.word	0x20000004
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ece:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <vPortExitCritical+0x50>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <vPortExitCritical+0x26>
    __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	607b      	str	r3, [r7, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <vPortExitCritical+0x50>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <vPortExitCritical+0x50>)
 8002ef6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <vPortExitCritical+0x50>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <vPortExitCritical+0x44>
 8002f00:	2300      	movs	r3, #0
 8002f02:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002f0a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	00000000 	.word	0x00000000

08002f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f20:	f3ef 8009 	mrs	r0, PSP
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <pxCurrentTCBConst>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f01e 0f10 	tst.w	lr, #16
 8002f30:	bf08      	it	eq
 8002f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	6010      	str	r0, [r2, #0]
 8002f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f44:	f380 8811 	msr	BASEPRI, r0
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f7fe fdde 	bl	8001b10 <vTaskSwitchContext>
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f380 8811 	msr	BASEPRI, r0
 8002f5c:	bc09      	pop	{r0, r3}
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f66:	f01e 0f10 	tst.w	lr, #16
 8002f6a:	bf08      	it	eq
 8002f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f70:	f380 8809 	msr	PSP, r0
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w

08002f80 <pxCurrentTCBConst>:
 8002f80:	200000cc 	.word	0x200000cc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop

08002f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
    __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
}
 8002fa0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002fa2:	f7fe fc9b 	bl	80018dc <xTaskIncrementTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <SysTick_Handler+0x40>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f383 8811 	msr	BASEPRI, r3
}
 8002fbe:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <vPortSetupTimerInterrupt+0x34>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <vPortSetupTimerInterrupt+0x38>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <vPortSetupTimerInterrupt+0x3c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <vPortSetupTimerInterrupt+0x40>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	4a09      	ldr	r2, [pc, #36]	@ (8003010 <vPortSetupTimerInterrupt+0x44>)
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fee:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <vPortSetupTimerInterrupt+0x34>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010
 8003004:	e000e018 	.word	0xe000e018
 8003008:	20000008 	.word	0x20000008
 800300c:	10624dd3 	.word	0x10624dd3
 8003010:	e000e014 	.word	0xe000e014

08003014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003024 <vPortEnableVFP+0x10>
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	4770      	bx	lr
 8003022:	0000      	.short	0x0000
 8003024:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop

0800302c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	@ 0x38
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d022      	beq.n	8003084 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800303e:	2308      	movs	r3, #8
 8003040:	43db      	mvns	r3, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d81b      	bhi.n	8003080 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003048:	2208      	movs	r2, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	f1c3 0308 	rsb	r3, r3, #8
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	43db      	mvns	r3, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d804      	bhi.n	800307a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	4413      	add	r3, r2
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	e004      	b.n	8003084 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	e001      	b.n	8003084 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003084:	f7fe fb04 	bl	8001690 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003088:	4b7a      	ldr	r3, [pc, #488]	@ (8003274 <pvPortMalloc+0x248>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003090:	f000 f978 	bl	8003384 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f2c0 80d3 	blt.w	8003242 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80cf 	beq.w	8003242 <pvPortMalloc+0x216>
 80030a4:	4b74      	ldr	r3, [pc, #464]	@ (8003278 <pvPortMalloc+0x24c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f200 80c9 	bhi.w	8003242 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030b0:	4b72      	ldr	r3, [pc, #456]	@ (800327c <pvPortMalloc+0x250>)
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80030b4:	4b71      	ldr	r3, [pc, #452]	@ (800327c <pvPortMalloc+0x250>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	4a70      	ldr	r2, [pc, #448]	@ (8003280 <pvPortMalloc+0x254>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d305      	bcc.n	80030ce <pvPortMalloc+0xa2>
 80030c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c4:	4a6f      	ldr	r2, [pc, #444]	@ (8003284 <pvPortMalloc+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d801      	bhi.n	80030ce <pvPortMalloc+0xa2>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <pvPortMalloc+0xa4>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d129      	bne.n	8003128 <pvPortMalloc+0xfc>
    __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	623b      	str	r3, [r7, #32]
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80030ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80030f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80030f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f8:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <pvPortMalloc+0x254>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d305      	bcc.n	800310a <pvPortMalloc+0xde>
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	4a60      	ldr	r2, [pc, #384]	@ (8003284 <pvPortMalloc+0x258>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d801      	bhi.n	800310a <pvPortMalloc+0xde>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <pvPortMalloc+0xe0>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <pvPortMalloc+0xfc>
    __asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61fb      	str	r3, [r7, #28]
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d903      	bls.n	800313a <pvPortMalloc+0x10e>
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d8      	bne.n	80030ec <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800313a:	4b4e      	ldr	r3, [pc, #312]	@ (8003274 <pvPortMalloc+0x248>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003140:	429a      	cmp	r2, r3
 8003142:	d07e      	beq.n	8003242 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	4413      	add	r3, r2
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	4a4b      	ldr	r2, [pc, #300]	@ (8003280 <pvPortMalloc+0x254>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d305      	bcc.n	8003162 <pvPortMalloc+0x136>
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	4a4a      	ldr	r2, [pc, #296]	@ (8003284 <pvPortMalloc+0x258>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d801      	bhi.n	8003162 <pvPortMalloc+0x136>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <pvPortMalloc+0x138>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <pvPortMalloc+0x154>
    __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61bb      	str	r3, [r7, #24]
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90b      	bls.n	80031aa <pvPortMalloc+0x17e>
    __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	617b      	str	r3, [r7, #20]
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	e7fd      	b.n	80031a6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	2308      	movs	r3, #8
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d924      	bls.n	8003204 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <pvPortMalloc+0x1b8>
    __asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	613b      	str	r3, [r7, #16]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad2      	subs	r2, r2, r3
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <pvPortMalloc+0x24c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	4a1a      	ldr	r2, [pc, #104]	@ (8003278 <pvPortMalloc+0x24c>)
 8003210:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003212:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <pvPortMalloc+0x24c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <pvPortMalloc+0x25c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d203      	bcs.n	8003226 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800321e:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <pvPortMalloc+0x24c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <pvPortMalloc+0x25c>)
 8003224:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <pvPortMalloc+0x260>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <pvPortMalloc+0x260>)
 8003240:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003242:	f7fe fa33 	bl	80016ac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <pvPortMalloc+0x23c>
    __asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60fb      	str	r3, [r7, #12]
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <pvPortMalloc+0x238>
    return pvReturn;
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800326a:	4618      	mov	r0, r3
 800326c:	3738      	adds	r7, #56	@ 0x38
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20012e1c 	.word	0x20012e1c
 8003278:	20012e20 	.word	0x20012e20
 800327c:	20012e14 	.word	0x20012e14
 8003280:	20000214 	.word	0x20000214
 8003284:	20012e13 	.word	0x20012e13
 8003288:	20012e24 	.word	0x20012e24
 800328c:	20012e28 	.word	0x20012e28

08003290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d064      	beq.n	800336c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032a2:	2308      	movs	r3, #8
 80032a4:	425b      	negs	r3, r3
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4a30      	ldr	r2, [pc, #192]	@ (8003374 <vPortFree+0xe4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d305      	bcc.n	80032c4 <vPortFree+0x34>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003378 <vPortFree+0xe8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d801      	bhi.n	80032c4 <vPortFree+0x34>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <vPortFree+0x36>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <vPortFree+0x52>
    __asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	617b      	str	r3, [r7, #20]
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <vPortFree+0x72>
    __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	613b      	str	r3, [r7, #16]
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	e7fd      	b.n	80032fe <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <vPortFree+0x92>
    __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	60fb      	str	r3, [r7, #12]
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	e7fd      	b.n	800331e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0fdb      	lsrs	r3, r3, #31
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01c      	beq.n	800336c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003346:	f7fe f9a3 	bl	8001690 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <vPortFree+0xec>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4a09      	ldr	r2, [pc, #36]	@ (800337c <vPortFree+0xec>)
 8003356:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003358:	69b8      	ldr	r0, [r7, #24]
 800335a:	f000 f86d 	bl	8003438 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <vPortFree+0xf0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a06      	ldr	r2, [pc, #24]	@ (8003380 <vPortFree+0xf0>)
 8003366:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003368:	f7fe f9a0 	bl	80016ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000214 	.word	0x20000214
 8003378:	20012e13 	.word	0x20012e13
 800337c:	20012e20 	.word	0x20012e20
 8003380:	20012e2c 	.word	0x20012e2c

08003384 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800338a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800338e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <prvHeapInit+0xa0>)
 8003392:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3307      	adds	r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <prvHeapInit+0xa0>)
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <prvHeapInit+0xa4>)
 80033bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <prvHeapInit+0xa4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80033cc:	2208      	movs	r2, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a13      	ldr	r2, [pc, #76]	@ (800342c <prvHeapInit+0xa8>)
 80033e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033e2:	4b12      	ldr	r3, [pc, #72]	@ (800342c <prvHeapInit+0xa8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <prvHeapInit+0xa8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <prvHeapInit+0xa8>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a08      	ldr	r2, [pc, #32]	@ (8003430 <prvHeapInit+0xac>)
 800340e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a07      	ldr	r2, [pc, #28]	@ (8003434 <prvHeapInit+0xb0>)
 8003416:	6013      	str	r3, [r2, #0]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	20000214 	.word	0x20000214
 8003428:	20012e14 	.word	0x20012e14
 800342c:	20012e1c 	.word	0x20012e1c
 8003430:	20012e24 	.word	0x20012e24
 8003434:	20012e20 	.word	0x20012e20

08003438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003440:	4b36      	ldr	r3, [pc, #216]	@ (800351c <prvInsertBlockIntoFreeList+0xe4>)
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e002      	b.n	800344c <prvInsertBlockIntoFreeList+0x14>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d8f7      	bhi.n	8003446 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a30      	ldr	r2, [pc, #192]	@ (800351c <prvInsertBlockIntoFreeList+0xe4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4a2f      	ldr	r2, [pc, #188]	@ (8003520 <prvInsertBlockIntoFreeList+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d305      	bcc.n	8003472 <prvInsertBlockIntoFreeList+0x3a>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4a2e      	ldr	r2, [pc, #184]	@ (8003524 <prvInsertBlockIntoFreeList+0xec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d801      	bhi.n	8003472 <prvInsertBlockIntoFreeList+0x3a>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <prvInsertBlockIntoFreeList+0x3c>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d108      	bne.n	80034b4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	441a      	add	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	441a      	add	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d118      	bne.n	80034fa <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <prvInsertBlockIntoFreeList+0xf0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d00d      	beq.n	80034f0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e008      	b.n	8003502 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80034f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <prvInsertBlockIntoFreeList+0xf0>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e003      	b.n	8003502 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d002      	beq.n	8003510 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20012e14 	.word	0x20012e14
 8003520:	20000214 	.word	0x20000214
 8003524:	20012e13 	.word	0x20012e13
 8003528:	20012e1c 	.word	0x20012e1c

0800352c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003532:	f000 fc31 	bl	8003d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003536:	f000 f87d 	bl	8003634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800353a:	f000 f913 	bl	8003764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800353e:	f000 f8e7 	bl	8003710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(Employee_task, "Employee Task", 250, NULL, 3, &emp_task_handle);
 8003542:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <main+0xe8>)
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2303      	movs	r3, #3
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22fa      	movs	r2, #250	@ 0xfa
 800354e:	4932      	ldr	r1, [pc, #200]	@ (8003618 <main+0xec>)
 8003550:	4832      	ldr	r0, [pc, #200]	@ (800361c <main+0xf0>)
 8003552:	f7fd fe8d 	bl	8001270 <xTaskCreate>
 8003556:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d00b      	beq.n	8003576 <main+0x4a>
    __asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	613b      	str	r3, [r7, #16]
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	e7fd      	b.n	8003572 <main+0x46>

  status = xTaskCreate(Manager_task, "Manager Task", 250, NULL, 4, &man_task_handle);
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <main+0xf4>)
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2304      	movs	r3, #4
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	22fa      	movs	r2, #250	@ 0xfa
 8003582:	4928      	ldr	r1, [pc, #160]	@ (8003624 <main+0xf8>)
 8003584:	4828      	ldr	r0, [pc, #160]	@ (8003628 <main+0xfc>)
 8003586:	f7fd fe73 	bl	8001270 <xTaskCreate>
 800358a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d00b      	beq.n	80035aa <main+0x7e>
    __asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60fb      	str	r3, [r7, #12]
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <main+0x7a>

  sema_handle = xSemaphoreCreateBinary();
 80035aa:	2203      	movs	r2, #3
 80035ac:	2100      	movs	r1, #0
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fd f920 	bl	80007f4 <xQueueGenericCreate>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <main+0x100>)
 80035b8:	6013      	str	r3, [r2, #0]
  configASSERT(sema_handle != NULL);
 80035ba:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <main+0x100>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <main+0xae>
    __asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	60bb      	str	r3, [r7, #8]
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	e7fd      	b.n	80035d6 <main+0xaa>

  queue_handler = xQueueCreate(1,sizeof(unsigned int));
 80035da:	2200      	movs	r2, #0
 80035dc:	2104      	movs	r1, #4
 80035de:	2001      	movs	r0, #1
 80035e0:	f7fd f908 	bl	80007f4 <xQueueGenericCreate>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <main+0x104>)
 80035e8:	6013      	str	r3, [r2, #0]
  configASSERT(queue_handler != NULL);
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <main+0x104>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <main+0xde>
    __asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <main+0xda>


  vTaskStartScheduler();
 800360a:	f7fd fffd 	bl	8001608 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <main+0xe2>
 8003612:	bf00      	nop
 8003614:	20012eb4 	.word	0x20012eb4
 8003618:	08007064 	.word	0x08007064
 800361c:	080038a1 	.word	0x080038a1
 8003620:	20012eb8 	.word	0x20012eb8
 8003624:	08007074 	.word	0x08007074
 8003628:	080038dd 	.word	0x080038dd
 800362c:	20012eb0 	.word	0x20012eb0
 8003630:	20012eac 	.word	0x20012eac

08003634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b094      	sub	sp, #80	@ 0x50
 8003638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800363a:	f107 031c 	add.w	r3, r7, #28
 800363e:	2234      	movs	r2, #52	@ 0x34
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fca5 	bl	8005f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	4b2a      	ldr	r3, [pc, #168]	@ (8003708 <SystemClock_Config+0xd4>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <SystemClock_Config+0xd4>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003666:	6413      	str	r3, [r2, #64]	@ 0x40
 8003668:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <SystemClock_Config+0xd4>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003674:	2300      	movs	r3, #0
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4b24      	ldr	r3, [pc, #144]	@ (800370c <SystemClock_Config+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003680:	4a22      	ldr	r2, [pc, #136]	@ (800370c <SystemClock_Config+0xd8>)
 8003682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b20      	ldr	r3, [pc, #128]	@ (800370c <SystemClock_Config+0xd8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003694:	2302      	movs	r3, #2
 8003696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003698:	2301      	movs	r3, #1
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800369c:	2310      	movs	r3, #16
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036a0:	2302      	movs	r3, #2
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a4:	2300      	movs	r3, #0
 80036a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80036a8:	2310      	movs	r3, #16
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80036ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80036b2:	2304      	movs	r3, #4
 80036b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036b6:	2302      	movs	r3, #2
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036ba:	2302      	movs	r3, #2
 80036bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036be:	f107 031c 	add.w	r3, r7, #28
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f9b6 	bl	8004a34 <HAL_RCC_OscConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80036ce:	f000 f949 	bl	8003964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d2:	230f      	movs	r3, #15
 80036d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d6:	2302      	movs	r3, #2
 80036d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fe24 	bl	800433c <HAL_RCC_ClockConfig>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80036fa:	f000 f933 	bl	8003964 <Error_Handler>
  }
}
 80036fe:	bf00      	nop
 8003700:	3750      	adds	r7, #80	@ 0x50
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40007000 	.word	0x40007000

08003710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003716:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <MX_USART2_UART_Init+0x50>)
 8003718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 800371c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b09      	ldr	r3, [pc, #36]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	4b08      	ldr	r3, [pc, #32]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003746:	4805      	ldr	r0, [pc, #20]	@ (800375c <MX_USART2_UART_Init+0x4c>)
 8003748:	f001 feb4 	bl	80054b4 <HAL_UART_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003752:	f000 f907 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20012e30 	.word	0x20012e30
 8003760:	40004400 	.word	0x40004400

08003764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	@ 0x28
 8003768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <MX_GPIO_Init+0xd0>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <MX_GPIO_Init+0xd0>)
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	6313      	str	r3, [r2, #48]	@ 0x30
 800378a:	4b2a      	ldr	r3, [pc, #168]	@ (8003834 <MX_GPIO_Init+0xd0>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <MX_GPIO_Init+0xd0>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	4a25      	ldr	r2, [pc, #148]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a6:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_GPIO_Init+0xd0>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2120      	movs	r1, #32
 80037ee:	4812      	ldr	r0, [pc, #72]	@ (8003838 <MX_GPIO_Init+0xd4>)
 80037f0:	f000 fd8a 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80037f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80037fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	480c      	ldr	r0, [pc, #48]	@ (800383c <MX_GPIO_Init+0xd8>)
 800380c:	f000 fbe8 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003810:	2320      	movs	r3, #32
 8003812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003814:	2301      	movs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381c:	2300      	movs	r3, #0
 800381e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4804      	ldr	r0, [pc, #16]	@ (8003838 <MX_GPIO_Init+0xd4>)
 8003828:	f000 fbda 	bl	8003fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020800 	.word	0x40020800

08003840 <send_id>:

/* USER CODE BEGIN 4 */
void send_id(unsigned char value)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
	sprintf(msg,"Employee sent ID : %d\r\n",value);
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	461a      	mov	r2, r3
 800384e:	4907      	ldr	r1, [pc, #28]	@ (800386c <send_id+0x2c>)
 8003850:	4807      	ldr	r0, [pc, #28]	@ (8003870 <send_id+0x30>)
 8003852:	f002 fb3b 	bl	8005ecc <siprintf>
	printmsg(msg);
 8003856:	4806      	ldr	r0, [pc, #24]	@ (8003870 <send_id+0x30>)
 8003858:	f000 f80c 	bl	8003874 <printmsg>
	vTaskDelay(value);
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fe52 	bl	8001508 <vTaskDelay>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	08007084 	.word	0x08007084
 8003870:	20012e78 	.word	0x20012e78

08003874 <printmsg>:

void printmsg(char msg[])
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fc fcc7 	bl	8000210 <strlen>
 8003882:	4603      	mov	r3, r0
 8003884:	b29a      	uxth	r2, r3
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4803      	ldr	r0, [pc, #12]	@ (800389c <printmsg+0x28>)
 800388e:	f001 fe61 	bl	8005554 <HAL_UART_Transmit>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20012e30 	.word	0x20012e30

080038a0 <Employee_task>:

void Employee_task(void *parameter)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	unsigned int rand_id;
	while(1)
	{
		xSemaphoreTake(sema_handle,0);
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <Employee_task+0x34>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd f9f6 	bl	8000ca0 <xQueueSemaphoreTake>

		xQueueReceive(queue_handler, &rand_id, portMAX_DELAY);
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <Employee_task+0x38>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f107 010c 	add.w	r1, r7, #12
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd f90b 	bl	8000adc <xQueueReceive>

		send_id(rand_id);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ffb8 	bl	8003840 <send_id>
		xSemaphoreTake(sema_handle,0);
 80038d0:	bf00      	nop
 80038d2:	e7e9      	b.n	80038a8 <Employee_task+0x8>
 80038d4:	20012eb0 	.word	0x20012eb0
 80038d8:	20012eac 	.word	0x20012eac

080038dc <Manager_task>:


}

void Manager_task(void *parameter)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	unsigned int rand_id;

	/*he semaphore is created in the 'empty' state, meaning the semaphore must first be given using the xSemaphoreGive()*/
	xSemaphoreGive(sema_handle);
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <Manager_task+0x58>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	2300      	movs	r3, #0
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	f7fc fff3 	bl	80008d8 <xQueueGenericSend>

	while(1)
	{

		rand_id = (rand() & 0x01FF); // %512 it ensure that the values is between 0 to 512
 80038f2:	f002 f9eb 	bl	8005ccc <rand>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	60fb      	str	r3, [r7, #12]

		xQueueSend(queue_handler,&rand_id,portMAX_DELAY);
 80038fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <Manager_task+0x5c>)
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f107 010c 	add.w	r1, r7, #12
 8003906:	2300      	movs	r3, #0
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	f7fc ffe4 	bl	80008d8 <xQueueGenericSend>

		xSemaphoreGive(sema_handle);
 8003910:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <Manager_task+0x58>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	f7fc ffdd 	bl	80008d8 <xQueueGenericSend>

		taskYIELD();
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <Manager_task+0x60>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
		rand_id = (rand() & 0x01FF); // %512 it ensure that the values is between 0 to 512
 800392e:	bf00      	nop
 8003930:	e7df      	b.n	80038f2 <Manager_task+0x16>
 8003932:	bf00      	nop
 8003934:	20012eb0 	.word	0x20012eb0
 8003938:	20012eac 	.word	0x20012eac
 800393c:	e000ed04 	.word	0xe000ed04

08003940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003952:	f000 fa43 	bl	8003ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40001000 	.word	0x40001000

08003964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003968:	b672      	cpsid	i
}
 800396a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <Error_Handler+0x8>

08003970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <HAL_MspInit+0x4c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	4a0f      	ldr	r2, [pc, #60]	@ (80039bc <HAL_MspInit+0x4c>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003984:	6453      	str	r3, [r2, #68]	@ 0x44
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_MspInit+0x4c>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <HAL_MspInit+0x4c>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	4a08      	ldr	r2, [pc, #32]	@ (80039bc <HAL_MspInit+0x4c>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_MspInit+0x4c>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a19      	ldr	r2, [pc, #100]	@ (8003a44 <HAL_UART_MspInit+0x84>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d12b      	bne.n	8003a3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	4a17      	ldr	r2, [pc, #92]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	4a10      	ldr	r2, [pc, #64]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <HAL_UART_MspInit+0x88>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	4619      	mov	r1, r3
 8003a34:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <HAL_UART_MspInit+0x8c>)
 8003a36:	f000 fad3 	bl	8003fe0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3728      	adds	r7, #40	@ 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40004400 	.word	0x40004400
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020000 	.word	0x40020000

08003a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	@ 0x38
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <HAL_InitTick+0xe4>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	4a32      	ldr	r2, [pc, #200]	@ (8003b34 <HAL_InitTick+0xe4>)
 8003a6a:	f043 0310 	orr.w	r3, r3, #16
 8003a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a70:	4b30      	ldr	r3, [pc, #192]	@ (8003b34 <HAL_InitTick+0xe4>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a7c:	f107 0210 	add.w	r2, r7, #16
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fd72 	bl	8004570 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a96:	f000 fd43 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8003a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a9c:	e004      	b.n	8003aa8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a9e:	f000 fd3f 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	4a23      	ldr	r2, [pc, #140]	@ (8003b38 <HAL_InitTick+0xe8>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ab6:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <HAL_InitTick+0xec>)
 8003ab8:	4a21      	ldr	r2, [pc, #132]	@ (8003b40 <HAL_InitTick+0xf0>)
 8003aba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003abc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <HAL_InitTick+0xec>)
 8003abe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ac2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <HAL_InitTick+0xec>)
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003aca:	4b1c      	ldr	r3, [pc, #112]	@ (8003b3c <HAL_InitTick+0xec>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <HAL_InitTick+0xec>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_InitTick+0xec>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003adc:	4817      	ldr	r0, [pc, #92]	@ (8003b3c <HAL_InitTick+0xec>)
 8003ade:	f001 fa47 	bl	8004f70 <HAL_TIM_Base_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11b      	bne.n	8003b28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003af0:	4812      	ldr	r0, [pc, #72]	@ (8003b3c <HAL_InitTick+0xec>)
 8003af2:	f001 fa97 	bl	8005024 <HAL_TIM_Base_Start_IT>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d111      	bne.n	8003b28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b04:	2036      	movs	r0, #54	@ 0x36
 8003b06:	f000 fa5d 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0f      	cmp	r3, #15
 8003b0e:	d808      	bhi.n	8003b22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003b10:	2200      	movs	r2, #0
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	2036      	movs	r0, #54	@ 0x36
 8003b16:	f000 fa39 	bl	8003f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_InitTick+0xf4>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e002      	b.n	8003b28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3738      	adds	r7, #56	@ 0x38
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	431bde83 	.word	0x431bde83
 8003b3c:	20012ebc 	.word	0x20012ebc
 8003b40:	40001000 	.word	0x40001000
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <NMI_Handler+0x4>

08003b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <MemManage_Handler+0x4>

08003b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b84:	4802      	ldr	r0, [pc, #8]	@ (8003b90 <TIM6_DAC_IRQHandler+0x10>)
 8003b86:	f001 fabd 	bl	8005104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20012ebc 	.word	0x20012ebc

08003b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return 1;
 8003b98:	2301      	movs	r3, #1
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_kill>:

int _kill(int pid, int sig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bae:	f002 fa3f 	bl	8006030 <__errno>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2216      	movs	r2, #22
 8003bb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_exit>:

void _exit (int status)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ffe7 	bl	8003ba4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <_exit+0x12>

08003bda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e00a      	b.n	8003c02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bec:	f3af 8000 	nop.w
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	60ba      	str	r2, [r7, #8]
 8003bf8:	b2ca      	uxtb	r2, r1
 8003bfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	dbf0      	blt.n	8003bec <_read+0x12>
  }

  return len;
 8003c0a:	687b      	ldr	r3, [r7, #4]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e009      	b.n	8003c3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	60ba      	str	r2, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3301      	adds	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	dbf1      	blt.n	8003c26 <_write+0x12>
  }
  return len;
 8003c42:	687b      	ldr	r3, [r7, #4]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_close>:

int _close(int file)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c74:	605a      	str	r2, [r3, #4]
  return 0;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_isatty>:

int _isatty(int file)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c8c:	2301      	movs	r3, #1
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <_sbrk+0x5c>)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <_sbrk+0x60>)
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <_sbrk+0x64>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <_sbrk+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <_sbrk+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce4:	f002 f9a4 	bl	8006030 <__errno>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e009      	b.n	8003d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <_sbrk+0x64>)
 8003d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20020000 	.word	0x20020000
 8003d14:	00000400 	.word	0x00000400
 8003d18:	20012f04 	.word	0x20012f04
 8003d1c:	20013058 	.word	0x20013058

08003d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <SystemInit+0x20>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <SystemInit+0x20>)
 8003d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d48:	f7ff ffea 	bl	8003d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d4c:	480c      	ldr	r0, [pc, #48]	@ (8003d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d4e:	490d      	ldr	r1, [pc, #52]	@ (8003d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d54:	e002      	b.n	8003d5c <LoopCopyDataInit>

08003d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d5a:	3304      	adds	r3, #4

08003d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d60:	d3f9      	bcc.n	8003d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d62:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d64:	4c0a      	ldr	r4, [pc, #40]	@ (8003d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d68:	e001      	b.n	8003d6e <LoopFillZerobss>

08003d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d6c:	3204      	adds	r2, #4

08003d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d70:	d3fb      	bcc.n	8003d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d72:	f002 f963 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d76:	f7ff fbd9 	bl	800352c <main>
  bx  lr    
 8003d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003d88:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8003d8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003d90:	20013058 	.word	0x20013058

08003d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC_IRQHandler>
	...

08003d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd8 <HAL_Init+0x40>)
 8003da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <HAL_Init+0x40>)
 8003dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db4:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_Init+0x40>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc0:	2003      	movs	r0, #3
 8003dc2:	f000 f8d8 	bl	8003f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f7ff fe42 	bl	8003a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dcc:	f7ff fdd0 	bl	8003970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000010 	.word	0x20000010
 8003e00:	20012f08 	.word	0x20012f08

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20012f08 	.word	0x20012f08

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4907      	ldr	r1, [pc, #28]	@ (8003eb8 <__NVIC_EnableIRQ+0x38>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	@ (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
         );
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff4c 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9e:	f7ff ff61 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7ff ffb1 	bl	8003f10 <NVIC_EncodePriority>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff80 	bl	8003ebc <__NVIC_SetPriority>
}
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff54 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	@ 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e165      	b.n	80042c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	f040 8154 	bne.w	80042c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d005      	beq.n	8004032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402e:	2b02      	cmp	r3, #2
 8004030:	d130      	bne.n	8004094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004068:	2201      	movs	r2, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0201 	and.w	r2, r3, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d017      	beq.n	80040d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d123      	bne.n	8004124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	08da      	lsrs	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3208      	adds	r2, #8
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80ae 	beq.w	80042c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b5d      	ldr	r3, [pc, #372]	@ (80042e0 <HAL_GPIO_Init+0x300>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	4a5c      	ldr	r2, [pc, #368]	@ (80042e0 <HAL_GPIO_Init+0x300>)
 8004170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004174:	6453      	str	r3, [r2, #68]	@ 0x44
 8004176:	4b5a      	ldr	r3, [pc, #360]	@ (80042e0 <HAL_GPIO_Init+0x300>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004182:	4a58      	ldr	r2, [pc, #352]	@ (80042e4 <HAL_GPIO_Init+0x304>)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4f      	ldr	r2, [pc, #316]	@ (80042e8 <HAL_GPIO_Init+0x308>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d025      	beq.n	80041fa <HAL_GPIO_Init+0x21a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4e      	ldr	r2, [pc, #312]	@ (80042ec <HAL_GPIO_Init+0x30c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <HAL_GPIO_Init+0x216>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4d      	ldr	r2, [pc, #308]	@ (80042f0 <HAL_GPIO_Init+0x310>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d019      	beq.n	80041f2 <HAL_GPIO_Init+0x212>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4c      	ldr	r2, [pc, #304]	@ (80042f4 <HAL_GPIO_Init+0x314>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_GPIO_Init+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4b      	ldr	r2, [pc, #300]	@ (80042f8 <HAL_GPIO_Init+0x318>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_GPIO_Init+0x20a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4a      	ldr	r2, [pc, #296]	@ (80042fc <HAL_GPIO_Init+0x31c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <HAL_GPIO_Init+0x206>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a49      	ldr	r2, [pc, #292]	@ (8004300 <HAL_GPIO_Init+0x320>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_GPIO_Init+0x202>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00c      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e00a      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e008      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e006      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e004      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e002      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041fa:	2300      	movs	r3, #0
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	f002 0203 	and.w	r2, r2, #3
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	4093      	lsls	r3, r2
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800420c:	4935      	ldr	r1, [pc, #212]	@ (80042e4 <HAL_GPIO_Init+0x304>)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	3302      	adds	r3, #2
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421a:	4b3a      	ldr	r3, [pc, #232]	@ (8004304 <HAL_GPIO_Init+0x324>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800423e:	4a31      	ldr	r2, [pc, #196]	@ (8004304 <HAL_GPIO_Init+0x324>)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004244:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_GPIO_Init+0x324>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_GPIO_Init+0x324>)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800426e:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <HAL_GPIO_Init+0x324>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_GPIO_Init+0x324>)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <HAL_GPIO_Init+0x324>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042bc:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_GPIO_Init+0x324>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	f67f ae96 	bls.w	8003ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3724      	adds	r7, #36	@ 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40013800 	.word	0x40013800
 80042e8:	40020000 	.word	0x40020000
 80042ec:	40020400 	.word	0x40020400
 80042f0:	40020800 	.word	0x40020800
 80042f4:	40020c00 	.word	0x40020c00
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40021400 	.word	0x40021400
 8004300:	40021800 	.word	0x40021800
 8004304:	40013c00 	.word	0x40013c00

08004308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004318:	787b      	ldrb	r3, [r7, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004324:	e003      	b.n	800432e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	041a      	lsls	r2, r3, #16
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	619a      	str	r2, [r3, #24]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7ff fcea 	bl	8003e04 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7ff fce6 	bl	8003e04 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f887 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	@ (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fab4 	bl	8003a50 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800709c 	.word	0x0800709c
 8004500:	20000008 	.word	0x20000008
 8004504:	2000000c 	.word	0x2000000c

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	@ (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000008 	.word	0x20000008

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	080070ac 	.word	0x080070ac

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800454c:	f7ff ffdc 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0b5b      	lsrs	r3, r3, #13
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	080070ac 	.word	0x080070ac

08004570 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	220f      	movs	r2, #15
 800457e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004580:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_RCC_GetClockConfig+0x5c>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0203 	and.w	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <HAL_RCC_GetClockConfig+0x5c>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HAL_RCC_GetClockConfig+0x5c>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045a4:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_GetClockConfig+0x5c>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045b2:	4b07      	ldr	r3, [pc, #28]	@ (80045d0 <HAL_RCC_GetClockConfig+0x60>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40023c00 	.word	0x40023c00

080045d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b0ae      	sub	sp, #184	@ 0xb8
 80045da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045fa:	4bcb      	ldr	r3, [pc, #812]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b0c      	cmp	r3, #12
 8004604:	f200 8206 	bhi.w	8004a14 <HAL_RCC_GetSysClockFreq+0x440>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004645 	.word	0x08004645
 8004614:	08004a15 	.word	0x08004a15
 8004618:	08004a15 	.word	0x08004a15
 800461c:	08004a15 	.word	0x08004a15
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004a15 	.word	0x08004a15
 8004628:	08004a15 	.word	0x08004a15
 800462c:	08004a15 	.word	0x08004a15
 8004630:	08004655 	.word	0x08004655
 8004634:	08004a15 	.word	0x08004a15
 8004638:	08004a15 	.word	0x08004a15
 800463c:	08004a15 	.word	0x08004a15
 8004640:	08004845 	.word	0x08004845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4bb9      	ldr	r3, [pc, #740]	@ (800492c <HAL_RCC_GetSysClockFreq+0x358>)
 8004646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800464a:	e1e7      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464c:	4bb8      	ldr	r3, [pc, #736]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800464e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004652:	e1e3      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004654:	4bb4      	ldr	r3, [pc, #720]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800465c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004660:	4bb1      	ldr	r3, [pc, #708]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d071      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4bae      	ldr	r3, [pc, #696]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004678:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800467c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800468e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	0159      	lsls	r1, r3, #5
 80046a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a4:	0150      	lsls	r0, r2, #5
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4621      	mov	r1, r4
 80046ac:	1a51      	subs	r1, r2, r1
 80046ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb63 0301 	sbc.w	r3, r3, r1
 80046b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046c4:	4649      	mov	r1, r9
 80046c6:	018b      	lsls	r3, r1, #6
 80046c8:	4641      	mov	r1, r8
 80046ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ce:	4641      	mov	r1, r8
 80046d0:	018a      	lsls	r2, r1, #6
 80046d2:	4641      	mov	r1, r8
 80046d4:	1a51      	subs	r1, r2, r1
 80046d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046d8:	4649      	mov	r1, r9
 80046da:	eb63 0301 	sbc.w	r3, r3, r1
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046ec:	4649      	mov	r1, r9
 80046ee:	00cb      	lsls	r3, r1, #3
 80046f0:	4641      	mov	r1, r8
 80046f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f6:	4641      	mov	r1, r8
 80046f8:	00ca      	lsls	r2, r1, #3
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	4622      	mov	r2, r4
 8004702:	189b      	adds	r3, r3, r2
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
 8004706:	462b      	mov	r3, r5
 8004708:	460a      	mov	r2, r1
 800470a:	eb42 0303 	adc.w	r3, r2, r3
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800471c:	4629      	mov	r1, r5
 800471e:	024b      	lsls	r3, r1, #9
 8004720:	4621      	mov	r1, r4
 8004722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004726:	4621      	mov	r1, r4
 8004728:	024a      	lsls	r2, r1, #9
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800473c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004740:	f7fb fdbe 	bl	80002c0 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800474e:	e067      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004750:	4b75      	ldr	r3, [pc, #468]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800475c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800476a:	2300      	movs	r3, #0
 800476c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800476e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4621      	mov	r1, r4
 800478c:	1a51      	subs	r1, r2, r1
 800478e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004790:	4629      	mov	r1, r5
 8004792:	eb63 0301 	sbc.w	r3, r3, r1
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80047a4:	4649      	mov	r1, r9
 80047a6:	018b      	lsls	r3, r1, #6
 80047a8:	4641      	mov	r1, r8
 80047aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ae:	4641      	mov	r1, r8
 80047b0:	018a      	lsls	r2, r1, #6
 80047b2:	4641      	mov	r1, r8
 80047b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80047b8:	4649      	mov	r1, r9
 80047ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d2:	4692      	mov	sl, r2
 80047d4:	469b      	mov	fp, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb1a 0303 	adds.w	r3, sl, r3
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	462b      	mov	r3, r5
 80047e0:	eb4b 0303 	adc.w	r3, fp, r3
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047f2:	4629      	mov	r1, r5
 80047f4:	028b      	lsls	r3, r1, #10
 80047f6:	4621      	mov	r1, r4
 80047f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047fc:	4621      	mov	r1, r4
 80047fe:	028a      	lsls	r2, r1, #10
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004808:	2200      	movs	r2, #0
 800480a:	673b      	str	r3, [r7, #112]	@ 0x70
 800480c:	677a      	str	r2, [r7, #116]	@ 0x74
 800480e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004812:	f7fb fd55 	bl	80002c0 <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4613      	mov	r3, r2
 800481c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004820:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004842:	e0eb      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004844:	4b38      	ldr	r3, [pc, #224]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800484c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004850:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d06b      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485c:	4b32      	ldr	r3, [pc, #200]	@ (8004928 <HAL_RCC_GetSysClockFreq+0x354>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	2200      	movs	r2, #0
 8004864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004870:	2300      	movs	r3, #0
 8004872:	667b      	str	r3, [r7, #100]	@ 0x64
 8004874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004878:	4622      	mov	r2, r4
 800487a:	462b      	mov	r3, r5
 800487c:	f04f 0000 	mov.w	r0, #0
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	0159      	lsls	r1, r3, #5
 8004886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800488a:	0150      	lsls	r0, r2, #5
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4621      	mov	r1, r4
 8004892:	1a51      	subs	r1, r2, r1
 8004894:	61b9      	str	r1, [r7, #24]
 8004896:	4629      	mov	r1, r5
 8004898:	eb63 0301 	sbc.w	r3, r3, r1
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80048aa:	4659      	mov	r1, fp
 80048ac:	018b      	lsls	r3, r1, #6
 80048ae:	4651      	mov	r1, sl
 80048b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048b4:	4651      	mov	r1, sl
 80048b6:	018a      	lsls	r2, r1, #6
 80048b8:	4651      	mov	r1, sl
 80048ba:	ebb2 0801 	subs.w	r8, r2, r1
 80048be:	4659      	mov	r1, fp
 80048c0:	eb63 0901 	sbc.w	r9, r3, r1
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d8:	4690      	mov	r8, r2
 80048da:	4699      	mov	r9, r3
 80048dc:	4623      	mov	r3, r4
 80048de:	eb18 0303 	adds.w	r3, r8, r3
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb49 0303 	adc.w	r3, r9, r3
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048f8:	4629      	mov	r1, r5
 80048fa:	024b      	lsls	r3, r1, #9
 80048fc:	4621      	mov	r1, r4
 80048fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004902:	4621      	mov	r1, r4
 8004904:	024a      	lsls	r2, r1, #9
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490e:	2200      	movs	r2, #0
 8004910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004912:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004918:	f7fb fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004926:	e065      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x420>
 8004928:	40023800 	.word	0x40023800
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004934:	4b3d      	ldr	r3, [pc, #244]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	2200      	movs	r2, #0
 800493c:	4618      	mov	r0, r3
 800493e:	4611      	mov	r1, r2
 8004940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004944:	653b      	str	r3, [r7, #80]	@ 0x50
 8004946:	2300      	movs	r3, #0
 8004948:	657b      	str	r3, [r7, #84]	@ 0x54
 800494a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	0159      	lsls	r1, r3, #5
 800495c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004960:	0150      	lsls	r0, r2, #5
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4641      	mov	r1, r8
 8004968:	1a51      	subs	r1, r2, r1
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	4649      	mov	r1, r9
 800496e:	eb63 0301 	sbc.w	r3, r3, r1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004980:	4659      	mov	r1, fp
 8004982:	018b      	lsls	r3, r1, #6
 8004984:	4651      	mov	r1, sl
 8004986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800498a:	4651      	mov	r1, sl
 800498c:	018a      	lsls	r2, r1, #6
 800498e:	4651      	mov	r1, sl
 8004990:	1a54      	subs	r4, r2, r1
 8004992:	4659      	mov	r1, fp
 8004994:	eb63 0501 	sbc.w	r5, r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	464b      	mov	r3, r9
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c6:	4629      	mov	r1, r5
 80049c8:	028b      	lsls	r3, r1, #10
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d0:	4621      	mov	r1, r4
 80049d2:	028a      	lsls	r2, r1, #10
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049dc:	2200      	movs	r2, #0
 80049de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049e6:	f7fb fc6b 	bl	80002c0 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4613      	mov	r3, r2
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a12:	e003      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	37b8      	adds	r7, #184	@ 0xb8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e28d      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8083 	beq.w	8004b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a54:	4b94      	ldr	r3, [pc, #592]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d019      	beq.n	8004a94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a60:	4b91      	ldr	r3, [pc, #580]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b84      	ldr	r3, [pc, #528]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x124>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e25a      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x90>
 8004ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a7b      	ldr	r2, [pc, #492]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xcc>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xb4>
 8004ace:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a75      	ldr	r2, [pc, #468]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b73      	ldr	r3, [pc, #460]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a72      	ldr	r2, [pc, #456]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xcc>
 8004ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7ff f97c 	bl	8003e04 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7ff f978 	bl	8003e04 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e21f      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xdc>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7ff f968 	bl	8003e04 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7ff f964 	bl	8003e04 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e20b      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x104>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06f      	beq.n	8004c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b66:	4b50      	ldr	r3, [pc, #320]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d017      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b44      	ldr	r3, [pc, #272]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x186>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1d3      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4937      	ldr	r1, [pc, #220]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x278>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7ff f911 	bl	8003e04 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be6:	f7ff f90d 	bl	8003e04 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1b4      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4925      	ldr	r1, [pc, #148]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x278>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7ff f8f0 	bl	8003e04 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7ff f8ec 	bl	8003e04 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e193      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d036      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7ff f8d0 	bl	8003e04 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7ff f8cc 	bl	8003e04 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e173      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x234>
 8004c86:	e01b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c88:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7ff f8b9 	bl	8003e04 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	e00e      	b.n	8004cb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7ff f8b5 	bl	8003e04 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d907      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e15c      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	42470000 	.word	0x42470000
 8004cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ea      	bne.n	8004c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8097 	beq.w	8004dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b83      	ldr	r3, [pc, #524]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cee:	4b7c      	ldr	r3, [pc, #496]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	4b79      	ldr	r3, [pc, #484]	@ (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d118      	bne.n	8004d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0a:	4b76      	ldr	r3, [pc, #472]	@ (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	@ (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d16:	f7ff f875 	bl	8003e04 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1e:	f7ff f871 	bl	8003e04 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e118      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d30:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee4 <HAL_RCC_OscConfig+0x4b0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <HAL_RCC_OscConfig+0x31e>
 8004d44:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	4a65      	ldr	r2, [pc, #404]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d50:	e01c      	b.n	8004d8c <HAL_RCC_OscConfig+0x358>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x340>
 8004d5a:	4b61      	ldr	r3, [pc, #388]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	4a60      	ldr	r2, [pc, #384]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	f043 0304 	orr.w	r3, r3, #4
 8004d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d66:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0x358>
 8004d74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a59      	ldr	r2, [pc, #356]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d80:	4b57      	ldr	r3, [pc, #348]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	4a56      	ldr	r2, [pc, #344]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7ff f836 	bl	8003e04 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7ff f832 	bl	8003e04 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0d7      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCC_OscConfig+0x368>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7ff f820 	bl	8003e04 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7ff f81c 	bl	8003e04 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0c1      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dde:	4b40      	ldr	r3, [pc, #256]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ee      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80ad 	beq.w	8004f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e06:	4b36      	ldr	r3, [pc, #216]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d060      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d145      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ee8 <HAL_RCC_OscConfig+0x4b4>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fe fff0 	bl	8003e04 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fe ffec 	bl	8003e04 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e093      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	491b      	ldr	r1, [pc, #108]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x4b4>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fe ffc1 	bl	8003e04 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fe ffbd 	bl	8003e04 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e064      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x452>
 8004ea4:	e05c      	b.n	8004f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <HAL_RCC_OscConfig+0x4b4>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fe ffaa 	bl	8003e04 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fe ffa6 	bl	8003e04 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e04d      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x480>
 8004ed2:	e045      	b.n	8004f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e040      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eec:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <HAL_RCC_OscConfig+0x538>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d030      	beq.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d129      	bne.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d122      	bne.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d119      	bne.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10f      	bne.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800

08004f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e041      	b.n	8005006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f839 	bl	800500e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 f9c0 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d001      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e04e      	b.n	80050da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d01d      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <HAL_TIM_Base_Start_IT+0xc8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <HAL_TIM_Base_Start_IT+0xdc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d111      	bne.n	80050c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d010      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	e007      	b.n	80050d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40001800 	.word	0x40001800

08005104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0202 	mvn.w	r2, #2
 8005138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8d2 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8c4 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8d5 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0204 	mvn.w	r2, #4
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f8ac 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f89e 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8af 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d020      	beq.n	8005200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0208 	mvn.w	r2, #8
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f886 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f878 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f889 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0210 	mvn.w	r2, #16
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2208      	movs	r2, #8
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f860 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f852 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f863 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00c      	beq.n	8005270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0201 	mvn.w	r2, #1
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fe fb68 	bl	8003940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f906 	bl	80054a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f834 	bl	8005320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0220 	mvn.w	r2, #32
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8d8 	bl	800548c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a46      	ldr	r2, [pc, #280]	@ (8005460 <TIM_Base_SetConfig+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005352:	d00f      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a43      	ldr	r2, [pc, #268]	@ (8005464 <TIM_Base_SetConfig+0x130>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a42      	ldr	r2, [pc, #264]	@ (8005468 <TIM_Base_SetConfig+0x134>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a41      	ldr	r2, [pc, #260]	@ (800546c <TIM_Base_SetConfig+0x138>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a40      	ldr	r2, [pc, #256]	@ (8005470 <TIM_Base_SetConfig+0x13c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d108      	bne.n	8005386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a35      	ldr	r2, [pc, #212]	@ (8005460 <TIM_Base_SetConfig+0x12c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005394:	d027      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a32      	ldr	r2, [pc, #200]	@ (8005464 <TIM_Base_SetConfig+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d023      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a31      	ldr	r2, [pc, #196]	@ (8005468 <TIM_Base_SetConfig+0x134>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01f      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a30      	ldr	r2, [pc, #192]	@ (800546c <TIM_Base_SetConfig+0x138>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005470 <TIM_Base_SetConfig+0x13c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d017      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005474 <TIM_Base_SetConfig+0x140>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005478 <TIM_Base_SetConfig+0x144>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2c      	ldr	r2, [pc, #176]	@ (800547c <TIM_Base_SetConfig+0x148>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005480 <TIM_Base_SetConfig+0x14c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005484 <TIM_Base_SetConfig+0x150>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a29      	ldr	r2, [pc, #164]	@ (8005488 <TIM_Base_SetConfig+0x154>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a10      	ldr	r2, [pc, #64]	@ (8005460 <TIM_Base_SetConfig+0x12c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <TIM_Base_SetConfig+0x13c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]
  }
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800
 8005480:	40001800 	.word	0x40001800
 8005484:	40001c00 	.word	0x40001c00
 8005488:	40002000 	.word	0x40002000

0800548c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e042      	b.n	800554c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fe fa70 	bl	80039c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	@ 0x24
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f973 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800550c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800551c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800552c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	@ 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b20      	cmp	r3, #32
 8005572:	d175      	bne.n	8005660 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_UART_Transmit+0x2c>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e06e      	b.n	8005662 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	@ 0x21
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fe fc37 	bl	8003e04 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ac:	d108      	bne.n	80055c0 <HAL_UART_Transmit+0x6c>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d104      	bne.n	80055c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e003      	b.n	80055c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055c8:	e02e      	b.n	8005628 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	2180      	movs	r1, #128	@ 0x80
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f848 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e03a      	b.n	8005662 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	3302      	adds	r3, #2
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e007      	b.n	800561a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3301      	adds	r3, #1
 8005618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1cb      	bne.n	80055ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2200      	movs	r2, #0
 800563a:	2140      	movs	r1, #64	@ 0x40
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f814 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	e03b      	b.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d037      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005684:	f7fe fbbe 	bl	8003e04 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <UART_WaitOnFlagUntilTimeout+0x30>
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e03a      	b.n	8005714 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d023      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b80      	cmp	r3, #128	@ 0x80
 80056b0:	d020      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b40      	cmp	r3, #64	@ 0x40
 80056b6:	d01d      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d116      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f81d 	bl	800571c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2208      	movs	r2, #8
 80056e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e00f      	b.n	8005714 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	429a      	cmp	r2, r3
 8005710:	d0b4      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b095      	sub	sp, #84	@ 0x54
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005744:	643a      	str	r2, [r7, #64]	@ 0x40
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e5      	bne.n	8005724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3314      	adds	r3, #20
 800575e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	61fb      	str	r3, [r7, #28]
   return(result);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e5      	bne.n	8005758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	d119      	bne.n	80057c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0310 	bic.w	r3, r3, #16
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b4:	61ba      	str	r2, [r7, #24]
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6979      	ldr	r1, [r7, #20]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	613b      	str	r3, [r7, #16]
   return(result);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057d6:	bf00      	nop
 80057d8:	3754      	adds	r7, #84	@ 0x54
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b0c0      	sub	sp, #256	@ 0x100
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	68d9      	ldr	r1, [r3, #12]
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	ea40 0301 	orr.w	r3, r0, r1
 800580c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800584a:	430b      	orrs	r3, r1
 800584c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	6999      	ldr	r1, [r3, #24]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	ea40 0301 	orr.w	r3, r0, r1
 800586a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b8f      	ldr	r3, [pc, #572]	@ (8005ab0 <UART_SetConfig+0x2cc>)
 8005874:	429a      	cmp	r2, r3
 8005876:	d005      	beq.n	8005884 <UART_SetConfig+0xa0>
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ab4 <UART_SetConfig+0x2d0>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d104      	bne.n	800588e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe fe60 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 8005888:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800588c:	e003      	b.n	8005896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fe fe47 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005892:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a0:	f040 810c 	bne.w	8005abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	1891      	adds	r1, r2, r2
 80058bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058be:	415b      	adcs	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058c6:	4621      	mov	r1, r4
 80058c8:	eb12 0801 	adds.w	r8, r2, r1
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb43 0901 	adc.w	r9, r3, r1
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	eb18 0303 	adds.w	r3, r8, r3
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f4:	462b      	mov	r3, r5
 80058f6:	eb49 0303 	adc.w	r3, r9, r3
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800590a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800590e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005912:	460b      	mov	r3, r1
 8005914:	18db      	adds	r3, r3, r3
 8005916:	653b      	str	r3, [r7, #80]	@ 0x50
 8005918:	4613      	mov	r3, r2
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005928:	f7fa fcca 	bl	80002c0 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4b61      	ldr	r3, [pc, #388]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005932:	fba3 2302 	umull	r2, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	011c      	lsls	r4, r3, #4
 800593a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593e:	2200      	movs	r2, #0
 8005940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005944:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005954:	415b      	adcs	r3, r3
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800595c:	4641      	mov	r1, r8
 800595e:	eb12 0a01 	adds.w	sl, r2, r1
 8005962:	4649      	mov	r1, r9
 8005964:	eb43 0b01 	adc.w	fp, r3, r1
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597c:	4692      	mov	sl, r2
 800597e:	469b      	mov	fp, r3
 8005980:	4643      	mov	r3, r8
 8005982:	eb1a 0303 	adds.w	r3, sl, r3
 8005986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800598a:	464b      	mov	r3, r9
 800598c:	eb4b 0303 	adc.w	r3, fp, r3
 8005990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059be:	f7fa fc7f 	bl	80002c0 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 80059ca:	fba3 2301 	umull	r2, r3, r3, r1
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	2264      	movs	r2, #100	@ 0x64
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	1acb      	subs	r3, r1, r3
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059de:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 80059e0:	fba3 2302 	umull	r2, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059ec:	441c      	add	r4, r3
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a7a:	f7fa fc21 	bl	80002c0 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	@ 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3332      	adds	r3, #50	@ 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 0207 	and.w	r2, r3, #7
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aac:	e106      	b.n	8005cbc <UART_SetConfig+0x4d8>
 8005aae:	bf00      	nop
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40011400 	.word	0x40011400
 8005ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ace:	4642      	mov	r2, r8
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	6239      	str	r1, [r7, #32]
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ade:	4641      	mov	r1, r8
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	eb43 0501 	adc.w	r5, r3, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b04:	464b      	mov	r3, r9
 8005b06:	eb45 0303 	adc.w	r3, r5, r3
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	008b      	lsls	r3, r1, #2
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b34:	4621      	mov	r1, r4
 8005b36:	008a      	lsls	r2, r1, #2
 8005b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b3c:	f7fa fbc0 	bl	80002c0 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b60      	ldr	r3, [pc, #384]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	011c      	lsls	r4, r3, #4
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	61b9      	str	r1, [r7, #24]
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6139      	str	r1, [r7, #16]
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bc8:	4649      	mov	r1, r9
 8005bca:	008b      	lsls	r3, r1, #2
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	008a      	lsls	r2, r1, #2
 8005bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bda:	f7fa fb71 	bl	80002c0 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	4b38      	ldr	r3, [pc, #224]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005be6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2264      	movs	r2, #100	@ 0x64
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	@ 0x32
 8005bf8:	4a33      	ldr	r2, [pc, #204]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c56:	464b      	mov	r3, r9
 8005c58:	460a      	mov	r2, r1
 8005c5a:	eb42 0303 	adc.w	r3, r2, r3
 8005c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c78:	4649      	mov	r1, r9
 8005c7a:	008b      	lsls	r3, r1, #2
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c82:	4641      	mov	r1, r8
 8005c84:	008a      	lsls	r2, r1, #2
 8005c86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c8a:	f7fa fb19 	bl	80002c0 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	@ 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	3332      	adds	r3, #50	@ 0x32
 8005ca6:	4a08      	ldr	r2, [pc, #32]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4422      	add	r2, r4
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <rand>:
 8005ccc:	4b16      	ldr	r3, [pc, #88]	@ (8005d28 <rand+0x5c>)
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	681c      	ldr	r4, [r3, #0]
 8005cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cd4:	b9b3      	cbnz	r3, 8005d04 <rand+0x38>
 8005cd6:	2018      	movs	r0, #24
 8005cd8:	f000 fa4e 	bl	8006178 <malloc>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6320      	str	r0, [r4, #48]	@ 0x30
 8005ce0:	b920      	cbnz	r0, 8005cec <rand+0x20>
 8005ce2:	4b12      	ldr	r3, [pc, #72]	@ (8005d2c <rand+0x60>)
 8005ce4:	4812      	ldr	r0, [pc, #72]	@ (8005d30 <rand+0x64>)
 8005ce6:	2152      	movs	r1, #82	@ 0x52
 8005ce8:	f000 f9de 	bl	80060a8 <__assert_func>
 8005cec:	4911      	ldr	r1, [pc, #68]	@ (8005d34 <rand+0x68>)
 8005cee:	4b12      	ldr	r3, [pc, #72]	@ (8005d38 <rand+0x6c>)
 8005cf0:	e9c0 1300 	strd	r1, r3, [r0]
 8005cf4:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <rand+0x70>)
 8005cf6:	6083      	str	r3, [r0, #8]
 8005cf8:	230b      	movs	r3, #11
 8005cfa:	8183      	strh	r3, [r0, #12]
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d06:	480e      	ldr	r0, [pc, #56]	@ (8005d40 <rand+0x74>)
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	694c      	ldr	r4, [r1, #20]
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d44 <rand+0x78>)
 8005d0e:	4358      	muls	r0, r3
 8005d10:	fb02 0004 	mla	r0, r2, r4, r0
 8005d14:	fba3 3202 	umull	r3, r2, r3, r2
 8005d18:	3301      	adds	r3, #1
 8005d1a:	eb40 0002 	adc.w	r0, r0, r2
 8005d1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d26:	bd10      	pop	{r4, pc}
 8005d28:	20000020 	.word	0x20000020
 8005d2c:	080070b4 	.word	0x080070b4
 8005d30:	080070cb 	.word	0x080070cb
 8005d34:	abcd330e 	.word	0xabcd330e
 8005d38:	e66d1234 	.word	0xe66d1234
 8005d3c:	0005deec 	.word	0x0005deec
 8005d40:	5851f42d 	.word	0x5851f42d
 8005d44:	4c957f2d 	.word	0x4c957f2d

08005d48 <std>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6083      	str	r3, [r0, #8]
 8005d58:	8181      	strh	r1, [r0, #12]
 8005d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d5c:	81c2      	strh	r2, [r0, #14]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	@ 0x5c
 8005d66:	f000 f914 	bl	8005f92 <memset>
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <std+0x58>)
 8005d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <std+0x5c>)
 8005d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <std+0x60>)
 8005d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <std+0x64>)
 8005d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <std+0x68>)
 8005d7c:	6224      	str	r4, [r4, #32]
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d006      	beq.n	8005d90 <std+0x48>
 8005d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d86:	4294      	cmp	r4, r2
 8005d88:	d002      	beq.n	8005d90 <std+0x48>
 8005d8a:	33d0      	adds	r3, #208	@ 0xd0
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d105      	bne.n	8005d9c <std+0x54>
 8005d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 b974 	b.w	8006084 <__retarget_lock_init_recursive>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	08005f0d 	.word	0x08005f0d
 8005da4:	08005f2f 	.word	0x08005f2f
 8005da8:	08005f67 	.word	0x08005f67
 8005dac:	08005f8b 	.word	0x08005f8b
 8005db0:	20012f0c 	.word	0x20012f0c

08005db4 <stdio_exit_handler>:
 8005db4:	4a02      	ldr	r2, [pc, #8]	@ (8005dc0 <stdio_exit_handler+0xc>)
 8005db6:	4903      	ldr	r1, [pc, #12]	@ (8005dc4 <stdio_exit_handler+0x10>)
 8005db8:	4803      	ldr	r0, [pc, #12]	@ (8005dc8 <stdio_exit_handler+0x14>)
 8005dba:	f000 b869 	b.w	8005e90 <_fwalk_sglue>
 8005dbe:	bf00      	nop
 8005dc0:	20000014 	.word	0x20000014
 8005dc4:	080069b9 	.word	0x080069b9
 8005dc8:	20000024 	.word	0x20000024

08005dcc <cleanup_stdio>:
 8005dcc:	6841      	ldr	r1, [r0, #4]
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <cleanup_stdio+0x34>)
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	d001      	beq.n	8005ddc <cleanup_stdio+0x10>
 8005dd8:	f000 fdee 	bl	80069b8 <_fflush_r>
 8005ddc:	68a1      	ldr	r1, [r4, #8]
 8005dde:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <cleanup_stdio+0x38>)
 8005de0:	4299      	cmp	r1, r3
 8005de2:	d002      	beq.n	8005dea <cleanup_stdio+0x1e>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fde7 	bl	80069b8 <_fflush_r>
 8005dea:	68e1      	ldr	r1, [r4, #12]
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <cleanup_stdio+0x3c>)
 8005dee:	4299      	cmp	r1, r3
 8005df0:	d004      	beq.n	8005dfc <cleanup_stdio+0x30>
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f000 bdde 	b.w	80069b8 <_fflush_r>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	20012f0c 	.word	0x20012f0c
 8005e04:	20012f74 	.word	0x20012f74
 8005e08:	20012fdc 	.word	0x20012fdc

08005e0c <global_stdio_init.part.0>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <global_stdio_init.part.0+0x30>)
 8005e10:	4c0b      	ldr	r4, [pc, #44]	@ (8005e40 <global_stdio_init.part.0+0x34>)
 8005e12:	4a0c      	ldr	r2, [pc, #48]	@ (8005e44 <global_stdio_init.part.0+0x38>)
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4620      	mov	r0, r4
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	f7ff ff94 	bl	8005d48 <std>
 8005e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e24:	2201      	movs	r2, #1
 8005e26:	2109      	movs	r1, #9
 8005e28:	f7ff ff8e 	bl	8005d48 <std>
 8005e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e30:	2202      	movs	r2, #2
 8005e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e36:	2112      	movs	r1, #18
 8005e38:	f7ff bf86 	b.w	8005d48 <std>
 8005e3c:	20013044 	.word	0x20013044
 8005e40:	20012f0c 	.word	0x20012f0c
 8005e44:	08005db5 	.word	0x08005db5

08005e48 <__sfp_lock_acquire>:
 8005e48:	4801      	ldr	r0, [pc, #4]	@ (8005e50 <__sfp_lock_acquire+0x8>)
 8005e4a:	f000 b91c 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	2001304d 	.word	0x2001304d

08005e54 <__sfp_lock_release>:
 8005e54:	4801      	ldr	r0, [pc, #4]	@ (8005e5c <__sfp_lock_release+0x8>)
 8005e56:	f000 b917 	b.w	8006088 <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	2001304d 	.word	0x2001304d

08005e60 <__sinit>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	f7ff fff0 	bl	8005e48 <__sfp_lock_acquire>
 8005e68:	6a23      	ldr	r3, [r4, #32]
 8005e6a:	b11b      	cbz	r3, 8005e74 <__sinit+0x14>
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f7ff bff0 	b.w	8005e54 <__sfp_lock_release>
 8005e74:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <__sinit+0x28>)
 8005e76:	6223      	str	r3, [r4, #32]
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <__sinit+0x2c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f5      	bne.n	8005e6c <__sinit+0xc>
 8005e80:	f7ff ffc4 	bl	8005e0c <global_stdio_init.part.0>
 8005e84:	e7f2      	b.n	8005e6c <__sinit+0xc>
 8005e86:	bf00      	nop
 8005e88:	08005dcd 	.word	0x08005dcd
 8005e8c:	20013044 	.word	0x20013044

08005e90 <_fwalk_sglue>:
 8005e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e94:	4607      	mov	r7, r0
 8005e96:	4688      	mov	r8, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ea4:	d505      	bpl.n	8005eb2 <_fwalk_sglue+0x22>
 8005ea6:	6824      	ldr	r4, [r4, #0]
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d1f7      	bne.n	8005e9c <_fwalk_sglue+0xc>
 8005eac:	4630      	mov	r0, r6
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d907      	bls.n	8005ec8 <_fwalk_sglue+0x38>
 8005eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	d003      	beq.n	8005ec8 <_fwalk_sglue+0x38>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	4306      	orrs	r6, r0
 8005ec8:	3568      	adds	r5, #104	@ 0x68
 8005eca:	e7e9      	b.n	8005ea0 <_fwalk_sglue+0x10>

08005ecc <siprintf>:
 8005ecc:	b40e      	push	{r1, r2, r3}
 8005ece:	b500      	push	{lr}
 8005ed0:	b09c      	sub	sp, #112	@ 0x70
 8005ed2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ed4:	9002      	str	r0, [sp, #8]
 8005ed6:	9006      	str	r0, [sp, #24]
 8005ed8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005edc:	4809      	ldr	r0, [pc, #36]	@ (8005f04 <siprintf+0x38>)
 8005ede:	9107      	str	r1, [sp, #28]
 8005ee0:	9104      	str	r1, [sp, #16]
 8005ee2:	4909      	ldr	r1, [pc, #36]	@ (8005f08 <siprintf+0x3c>)
 8005ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee8:	9105      	str	r1, [sp, #20]
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	a902      	add	r1, sp, #8
 8005ef0:	f000 fa54 	bl	800639c <_svfiprintf_r>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	b01c      	add	sp, #112	@ 0x70
 8005efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f00:	b003      	add	sp, #12
 8005f02:	4770      	bx	lr
 8005f04:	20000020 	.word	0x20000020
 8005f08:	ffff0208 	.word	0xffff0208

08005f0c <__sread>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f14:	f000 f868 	bl	8005fe8 <_read_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	bfab      	itete	ge
 8005f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f20:	181b      	addge	r3, r3, r0
 8005f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f26:	bfac      	ite	ge
 8005f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f2a:	81a3      	strhlt	r3, [r4, #12]
 8005f2c:	bd10      	pop	{r4, pc}

08005f2e <__swrite>:
 8005f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f32:	461f      	mov	r7, r3
 8005f34:	898b      	ldrh	r3, [r1, #12]
 8005f36:	05db      	lsls	r3, r3, #23
 8005f38:	4605      	mov	r5, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	d505      	bpl.n	8005f4c <__swrite+0x1e>
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	2302      	movs	r3, #2
 8005f46:	2200      	movs	r2, #0
 8005f48:	f000 f83c 	bl	8005fc4 <_lseek_r>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	4632      	mov	r2, r6
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	f000 b853 	b.w	800600c <_write_r>

08005f66 <__sseek>:
 8005f66:	b510      	push	{r4, lr}
 8005f68:	460c      	mov	r4, r1
 8005f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6e:	f000 f829 	bl	8005fc4 <_lseek_r>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	bf15      	itete	ne
 8005f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f82:	81a3      	strheq	r3, [r4, #12]
 8005f84:	bf18      	it	ne
 8005f86:	81a3      	strhne	r3, [r4, #12]
 8005f88:	bd10      	pop	{r4, pc}

08005f8a <__sclose>:
 8005f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8e:	f000 b809 	b.w	8005fa4 <_close_r>

08005f92 <memset>:
 8005f92:	4402      	add	r2, r0
 8005f94:	4603      	mov	r3, r0
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d100      	bne.n	8005f9c <memset+0xa>
 8005f9a:	4770      	bx	lr
 8005f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa0:	e7f9      	b.n	8005f96 <memset+0x4>
	...

08005fa4 <_close_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	@ (8005fc0 <_close_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fd fe4c 	bl	8003c4c <_close>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_close_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_close_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20013048 	.word	0x20013048

08005fc4 <_lseek_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	@ (8005fe4 <_lseek_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fd fe61 	bl	8003c9a <_lseek>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_lseek_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_lseek_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20013048 	.word	0x20013048

08005fe8 <_read_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d07      	ldr	r5, [pc, #28]	@ (8006008 <_read_r+0x20>)
 8005fec:	4604      	mov	r4, r0
 8005fee:	4608      	mov	r0, r1
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f7fd fdef 	bl	8003bda <_read>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_read_r+0x1e>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_read_r+0x1e>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20013048 	.word	0x20013048

0800600c <_write_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d07      	ldr	r5, [pc, #28]	@ (800602c <_write_r+0x20>)
 8006010:	4604      	mov	r4, r0
 8006012:	4608      	mov	r0, r1
 8006014:	4611      	mov	r1, r2
 8006016:	2200      	movs	r2, #0
 8006018:	602a      	str	r2, [r5, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f7fd fdfa 	bl	8003c14 <_write>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_write_r+0x1e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_write_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20013048 	.word	0x20013048

08006030 <__errno>:
 8006030:	4b01      	ldr	r3, [pc, #4]	@ (8006038 <__errno+0x8>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000020 	.word	0x20000020

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	@ (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	@ (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	@ (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	@ (8006080 <__libc_init_array+0x44>)
 8006050:	f000 fff0 	bl	8007034 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	0800719c 	.word	0x0800719c
 8006078:	0800719c 	.word	0x0800719c
 800607c:	0800719c 	.word	0x0800719c
 8006080:	080071a0 	.word	0x080071a0

08006084 <__retarget_lock_init_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_acquire_recursive>:
 8006086:	4770      	bx	lr

08006088 <__retarget_lock_release_recursive>:
 8006088:	4770      	bx	lr

0800608a <memcpy>:
 800608a:	440a      	add	r2, r1
 800608c:	4291      	cmp	r1, r2
 800608e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006092:	d100      	bne.n	8006096 <memcpy+0xc>
 8006094:	4770      	bx	lr
 8006096:	b510      	push	{r4, lr}
 8006098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a0:	4291      	cmp	r1, r2
 80060a2:	d1f9      	bne.n	8006098 <memcpy+0xe>
 80060a4:	bd10      	pop	{r4, pc}
	...

080060a8 <__assert_func>:
 80060a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060aa:	4614      	mov	r4, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <__assert_func+0x2c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4605      	mov	r5, r0
 80060b4:	68d8      	ldr	r0, [r3, #12]
 80060b6:	b954      	cbnz	r4, 80060ce <__assert_func+0x26>
 80060b8:	4b07      	ldr	r3, [pc, #28]	@ (80060d8 <__assert_func+0x30>)
 80060ba:	461c      	mov	r4, r3
 80060bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060c0:	9100      	str	r1, [sp, #0]
 80060c2:	462b      	mov	r3, r5
 80060c4:	4905      	ldr	r1, [pc, #20]	@ (80060dc <__assert_func+0x34>)
 80060c6:	f000 fc9f 	bl	8006a08 <fiprintf>
 80060ca:	f000 fcd9 	bl	8006a80 <abort>
 80060ce:	4b04      	ldr	r3, [pc, #16]	@ (80060e0 <__assert_func+0x38>)
 80060d0:	e7f4      	b.n	80060bc <__assert_func+0x14>
 80060d2:	bf00      	nop
 80060d4:	20000020 	.word	0x20000020
 80060d8:	0800715e 	.word	0x0800715e
 80060dc:	08007130 	.word	0x08007130
 80060e0:	08007123 	.word	0x08007123

080060e4 <_free_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4605      	mov	r5, r0
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d041      	beq.n	8006170 <_free_r+0x8c>
 80060ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f0:	1f0c      	subs	r4, r1, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bfb8      	it	lt
 80060f6:	18e4      	addlt	r4, r4, r3
 80060f8:	f000 f8e8 	bl	80062cc <__malloc_lock>
 80060fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <_free_r+0x90>)
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	b933      	cbnz	r3, 8006110 <_free_r+0x2c>
 8006102:	6063      	str	r3, [r4, #4]
 8006104:	6014      	str	r4, [r2, #0]
 8006106:	4628      	mov	r0, r5
 8006108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800610c:	f000 b8e4 	b.w	80062d8 <__malloc_unlock>
 8006110:	42a3      	cmp	r3, r4
 8006112:	d908      	bls.n	8006126 <_free_r+0x42>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	1821      	adds	r1, r4, r0
 8006118:	428b      	cmp	r3, r1
 800611a:	bf01      	itttt	eq
 800611c:	6819      	ldreq	r1, [r3, #0]
 800611e:	685b      	ldreq	r3, [r3, #4]
 8006120:	1809      	addeq	r1, r1, r0
 8006122:	6021      	streq	r1, [r4, #0]
 8006124:	e7ed      	b.n	8006102 <_free_r+0x1e>
 8006126:	461a      	mov	r2, r3
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b10b      	cbz	r3, 8006130 <_free_r+0x4c>
 800612c:	42a3      	cmp	r3, r4
 800612e:	d9fa      	bls.n	8006126 <_free_r+0x42>
 8006130:	6811      	ldr	r1, [r2, #0]
 8006132:	1850      	adds	r0, r2, r1
 8006134:	42a0      	cmp	r0, r4
 8006136:	d10b      	bne.n	8006150 <_free_r+0x6c>
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	4401      	add	r1, r0
 800613c:	1850      	adds	r0, r2, r1
 800613e:	4283      	cmp	r3, r0
 8006140:	6011      	str	r1, [r2, #0]
 8006142:	d1e0      	bne.n	8006106 <_free_r+0x22>
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	6053      	str	r3, [r2, #4]
 800614a:	4408      	add	r0, r1
 800614c:	6010      	str	r0, [r2, #0]
 800614e:	e7da      	b.n	8006106 <_free_r+0x22>
 8006150:	d902      	bls.n	8006158 <_free_r+0x74>
 8006152:	230c      	movs	r3, #12
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	e7d6      	b.n	8006106 <_free_r+0x22>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	1821      	adds	r1, r4, r0
 800615c:	428b      	cmp	r3, r1
 800615e:	bf04      	itt	eq
 8006160:	6819      	ldreq	r1, [r3, #0]
 8006162:	685b      	ldreq	r3, [r3, #4]
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	bf04      	itt	eq
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	6054      	str	r4, [r2, #4]
 800616e:	e7ca      	b.n	8006106 <_free_r+0x22>
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	20013054 	.word	0x20013054

08006178 <malloc>:
 8006178:	4b02      	ldr	r3, [pc, #8]	@ (8006184 <malloc+0xc>)
 800617a:	4601      	mov	r1, r0
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f000 b825 	b.w	80061cc <_malloc_r>
 8006182:	bf00      	nop
 8006184:	20000020 	.word	0x20000020

08006188 <sbrk_aligned>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0f      	ldr	r6, [pc, #60]	@ (80061c8 <sbrk_aligned+0x40>)
 800618c:	460c      	mov	r4, r1
 800618e:	6831      	ldr	r1, [r6, #0]
 8006190:	4605      	mov	r5, r0
 8006192:	b911      	cbnz	r1, 800619a <sbrk_aligned+0x12>
 8006194:	f000 fc64 	bl	8006a60 <_sbrk_r>
 8006198:	6030      	str	r0, [r6, #0]
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f000 fc5f 	bl	8006a60 <_sbrk_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d103      	bne.n	80061ae <sbrk_aligned+0x26>
 80061a6:	f04f 34ff 	mov.w	r4, #4294967295
 80061aa:	4620      	mov	r0, r4
 80061ac:	bd70      	pop	{r4, r5, r6, pc}
 80061ae:	1cc4      	adds	r4, r0, #3
 80061b0:	f024 0403 	bic.w	r4, r4, #3
 80061b4:	42a0      	cmp	r0, r4
 80061b6:	d0f8      	beq.n	80061aa <sbrk_aligned+0x22>
 80061b8:	1a21      	subs	r1, r4, r0
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 fc50 	bl	8006a60 <_sbrk_r>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1f2      	bne.n	80061aa <sbrk_aligned+0x22>
 80061c4:	e7ef      	b.n	80061a6 <sbrk_aligned+0x1e>
 80061c6:	bf00      	nop
 80061c8:	20013050 	.word	0x20013050

080061cc <_malloc_r>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	1ccd      	adds	r5, r1, #3
 80061d2:	f025 0503 	bic.w	r5, r5, #3
 80061d6:	3508      	adds	r5, #8
 80061d8:	2d0c      	cmp	r5, #12
 80061da:	bf38      	it	cc
 80061dc:	250c      	movcc	r5, #12
 80061de:	2d00      	cmp	r5, #0
 80061e0:	4606      	mov	r6, r0
 80061e2:	db01      	blt.n	80061e8 <_malloc_r+0x1c>
 80061e4:	42a9      	cmp	r1, r5
 80061e6:	d904      	bls.n	80061f2 <_malloc_r+0x26>
 80061e8:	230c      	movs	r3, #12
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	2000      	movs	r0, #0
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062c8 <_malloc_r+0xfc>
 80061f6:	f000 f869 	bl	80062cc <__malloc_lock>
 80061fa:	f8d8 3000 	ldr.w	r3, [r8]
 80061fe:	461c      	mov	r4, r3
 8006200:	bb44      	cbnz	r4, 8006254 <_malloc_r+0x88>
 8006202:	4629      	mov	r1, r5
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ffbf 	bl	8006188 <sbrk_aligned>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	4604      	mov	r4, r0
 800620e:	d158      	bne.n	80062c2 <_malloc_r+0xf6>
 8006210:	f8d8 4000 	ldr.w	r4, [r8]
 8006214:	4627      	mov	r7, r4
 8006216:	2f00      	cmp	r7, #0
 8006218:	d143      	bne.n	80062a2 <_malloc_r+0xd6>
 800621a:	2c00      	cmp	r4, #0
 800621c:	d04b      	beq.n	80062b6 <_malloc_r+0xea>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	4639      	mov	r1, r7
 8006222:	4630      	mov	r0, r6
 8006224:	eb04 0903 	add.w	r9, r4, r3
 8006228:	f000 fc1a 	bl	8006a60 <_sbrk_r>
 800622c:	4581      	cmp	r9, r0
 800622e:	d142      	bne.n	80062b6 <_malloc_r+0xea>
 8006230:	6821      	ldr	r1, [r4, #0]
 8006232:	1a6d      	subs	r5, r5, r1
 8006234:	4629      	mov	r1, r5
 8006236:	4630      	mov	r0, r6
 8006238:	f7ff ffa6 	bl	8006188 <sbrk_aligned>
 800623c:	3001      	adds	r0, #1
 800623e:	d03a      	beq.n	80062b6 <_malloc_r+0xea>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	442b      	add	r3, r5
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	f8d8 3000 	ldr.w	r3, [r8]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	bb62      	cbnz	r2, 80062a8 <_malloc_r+0xdc>
 800624e:	f8c8 7000 	str.w	r7, [r8]
 8006252:	e00f      	b.n	8006274 <_malloc_r+0xa8>
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	1b52      	subs	r2, r2, r5
 8006258:	d420      	bmi.n	800629c <_malloc_r+0xd0>
 800625a:	2a0b      	cmp	r2, #11
 800625c:	d917      	bls.n	800628e <_malloc_r+0xc2>
 800625e:	1961      	adds	r1, r4, r5
 8006260:	42a3      	cmp	r3, r4
 8006262:	6025      	str	r5, [r4, #0]
 8006264:	bf18      	it	ne
 8006266:	6059      	strne	r1, [r3, #4]
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	bf08      	it	eq
 800626c:	f8c8 1000 	streq.w	r1, [r8]
 8006270:	5162      	str	r2, [r4, r5]
 8006272:	604b      	str	r3, [r1, #4]
 8006274:	4630      	mov	r0, r6
 8006276:	f000 f82f 	bl	80062d8 <__malloc_unlock>
 800627a:	f104 000b 	add.w	r0, r4, #11
 800627e:	1d23      	adds	r3, r4, #4
 8006280:	f020 0007 	bic.w	r0, r0, #7
 8006284:	1ac2      	subs	r2, r0, r3
 8006286:	bf1c      	itt	ne
 8006288:	1a1b      	subne	r3, r3, r0
 800628a:	50a3      	strne	r3, [r4, r2]
 800628c:	e7af      	b.n	80061ee <_malloc_r+0x22>
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	42a3      	cmp	r3, r4
 8006292:	bf0c      	ite	eq
 8006294:	f8c8 2000 	streq.w	r2, [r8]
 8006298:	605a      	strne	r2, [r3, #4]
 800629a:	e7eb      	b.n	8006274 <_malloc_r+0xa8>
 800629c:	4623      	mov	r3, r4
 800629e:	6864      	ldr	r4, [r4, #4]
 80062a0:	e7ae      	b.n	8006200 <_malloc_r+0x34>
 80062a2:	463c      	mov	r4, r7
 80062a4:	687f      	ldr	r7, [r7, #4]
 80062a6:	e7b6      	b.n	8006216 <_malloc_r+0x4a>
 80062a8:	461a      	mov	r2, r3
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d1fb      	bne.n	80062a8 <_malloc_r+0xdc>
 80062b0:	2300      	movs	r3, #0
 80062b2:	6053      	str	r3, [r2, #4]
 80062b4:	e7de      	b.n	8006274 <_malloc_r+0xa8>
 80062b6:	230c      	movs	r3, #12
 80062b8:	6033      	str	r3, [r6, #0]
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 f80c 	bl	80062d8 <__malloc_unlock>
 80062c0:	e794      	b.n	80061ec <_malloc_r+0x20>
 80062c2:	6005      	str	r5, [r0, #0]
 80062c4:	e7d6      	b.n	8006274 <_malloc_r+0xa8>
 80062c6:	bf00      	nop
 80062c8:	20013054 	.word	0x20013054

080062cc <__malloc_lock>:
 80062cc:	4801      	ldr	r0, [pc, #4]	@ (80062d4 <__malloc_lock+0x8>)
 80062ce:	f7ff beda 	b.w	8006086 <__retarget_lock_acquire_recursive>
 80062d2:	bf00      	nop
 80062d4:	2001304c 	.word	0x2001304c

080062d8 <__malloc_unlock>:
 80062d8:	4801      	ldr	r0, [pc, #4]	@ (80062e0 <__malloc_unlock+0x8>)
 80062da:	f7ff bed5 	b.w	8006088 <__retarget_lock_release_recursive>
 80062de:	bf00      	nop
 80062e0:	2001304c 	.word	0x2001304c

080062e4 <__ssputs_r>:
 80062e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	688e      	ldr	r6, [r1, #8]
 80062ea:	461f      	mov	r7, r3
 80062ec:	42be      	cmp	r6, r7
 80062ee:	680b      	ldr	r3, [r1, #0]
 80062f0:	4682      	mov	sl, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	4690      	mov	r8, r2
 80062f6:	d82d      	bhi.n	8006354 <__ssputs_r+0x70>
 80062f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006300:	d026      	beq.n	8006350 <__ssputs_r+0x6c>
 8006302:	6965      	ldr	r5, [r4, #20]
 8006304:	6909      	ldr	r1, [r1, #16]
 8006306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800630a:	eba3 0901 	sub.w	r9, r3, r1
 800630e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006312:	1c7b      	adds	r3, r7, #1
 8006314:	444b      	add	r3, r9
 8006316:	106d      	asrs	r5, r5, #1
 8006318:	429d      	cmp	r5, r3
 800631a:	bf38      	it	cc
 800631c:	461d      	movcc	r5, r3
 800631e:	0553      	lsls	r3, r2, #21
 8006320:	d527      	bpl.n	8006372 <__ssputs_r+0x8e>
 8006322:	4629      	mov	r1, r5
 8006324:	f7ff ff52 	bl	80061cc <_malloc_r>
 8006328:	4606      	mov	r6, r0
 800632a:	b360      	cbz	r0, 8006386 <__ssputs_r+0xa2>
 800632c:	6921      	ldr	r1, [r4, #16]
 800632e:	464a      	mov	r2, r9
 8006330:	f7ff feab 	bl	800608a <memcpy>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800633a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	6126      	str	r6, [r4, #16]
 8006342:	6165      	str	r5, [r4, #20]
 8006344:	444e      	add	r6, r9
 8006346:	eba5 0509 	sub.w	r5, r5, r9
 800634a:	6026      	str	r6, [r4, #0]
 800634c:	60a5      	str	r5, [r4, #8]
 800634e:	463e      	mov	r6, r7
 8006350:	42be      	cmp	r6, r7
 8006352:	d900      	bls.n	8006356 <__ssputs_r+0x72>
 8006354:	463e      	mov	r6, r7
 8006356:	6820      	ldr	r0, [r4, #0]
 8006358:	4632      	mov	r2, r6
 800635a:	4641      	mov	r1, r8
 800635c:	f000 fb66 	bl	8006a2c <memmove>
 8006360:	68a3      	ldr	r3, [r4, #8]
 8006362:	1b9b      	subs	r3, r3, r6
 8006364:	60a3      	str	r3, [r4, #8]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	4433      	add	r3, r6
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	2000      	movs	r0, #0
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	462a      	mov	r2, r5
 8006374:	f000 fb8b 	bl	8006a8e <_realloc_r>
 8006378:	4606      	mov	r6, r0
 800637a:	2800      	cmp	r0, #0
 800637c:	d1e0      	bne.n	8006340 <__ssputs_r+0x5c>
 800637e:	6921      	ldr	r1, [r4, #16]
 8006380:	4650      	mov	r0, sl
 8006382:	f7ff feaf 	bl	80060e4 <_free_r>
 8006386:	230c      	movs	r3, #12
 8006388:	f8ca 3000 	str.w	r3, [sl]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e7e9      	b.n	800636e <__ssputs_r+0x8a>
	...

0800639c <_svfiprintf_r>:
 800639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	4698      	mov	r8, r3
 80063a2:	898b      	ldrh	r3, [r1, #12]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	b09d      	sub	sp, #116	@ 0x74
 80063a8:	4607      	mov	r7, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	4614      	mov	r4, r2
 80063ae:	d510      	bpl.n	80063d2 <_svfiprintf_r+0x36>
 80063b0:	690b      	ldr	r3, [r1, #16]
 80063b2:	b973      	cbnz	r3, 80063d2 <_svfiprintf_r+0x36>
 80063b4:	2140      	movs	r1, #64	@ 0x40
 80063b6:	f7ff ff09 	bl	80061cc <_malloc_r>
 80063ba:	6028      	str	r0, [r5, #0]
 80063bc:	6128      	str	r0, [r5, #16]
 80063be:	b930      	cbnz	r0, 80063ce <_svfiprintf_r+0x32>
 80063c0:	230c      	movs	r3, #12
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	b01d      	add	sp, #116	@ 0x74
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	2340      	movs	r3, #64	@ 0x40
 80063d0:	616b      	str	r3, [r5, #20]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d6:	2320      	movs	r3, #32
 80063d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e0:	2330      	movs	r3, #48	@ 0x30
 80063e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006580 <_svfiprintf_r+0x1e4>
 80063e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063ea:	f04f 0901 	mov.w	r9, #1
 80063ee:	4623      	mov	r3, r4
 80063f0:	469a      	mov	sl, r3
 80063f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f6:	b10a      	cbz	r2, 80063fc <_svfiprintf_r+0x60>
 80063f8:	2a25      	cmp	r2, #37	@ 0x25
 80063fa:	d1f9      	bne.n	80063f0 <_svfiprintf_r+0x54>
 80063fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006400:	d00b      	beq.n	800641a <_svfiprintf_r+0x7e>
 8006402:	465b      	mov	r3, fp
 8006404:	4622      	mov	r2, r4
 8006406:	4629      	mov	r1, r5
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff ff6b 	bl	80062e4 <__ssputs_r>
 800640e:	3001      	adds	r0, #1
 8006410:	f000 80a7 	beq.w	8006562 <_svfiprintf_r+0x1c6>
 8006414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006416:	445a      	add	r2, fp
 8006418:	9209      	str	r2, [sp, #36]	@ 0x24
 800641a:	f89a 3000 	ldrb.w	r3, [sl]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 809f 	beq.w	8006562 <_svfiprintf_r+0x1c6>
 8006424:	2300      	movs	r3, #0
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800642e:	f10a 0a01 	add.w	sl, sl, #1
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	9307      	str	r3, [sp, #28]
 8006436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800643a:	931a      	str	r3, [sp, #104]	@ 0x68
 800643c:	4654      	mov	r4, sl
 800643e:	2205      	movs	r2, #5
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	484e      	ldr	r0, [pc, #312]	@ (8006580 <_svfiprintf_r+0x1e4>)
 8006446:	f7f9 feeb 	bl	8000220 <memchr>
 800644a:	9a04      	ldr	r2, [sp, #16]
 800644c:	b9d8      	cbnz	r0, 8006486 <_svfiprintf_r+0xea>
 800644e:	06d0      	lsls	r0, r2, #27
 8006450:	bf44      	itt	mi
 8006452:	2320      	movmi	r3, #32
 8006454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006458:	0711      	lsls	r1, r2, #28
 800645a:	bf44      	itt	mi
 800645c:	232b      	movmi	r3, #43	@ 0x2b
 800645e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006462:	f89a 3000 	ldrb.w	r3, [sl]
 8006466:	2b2a      	cmp	r3, #42	@ 0x2a
 8006468:	d015      	beq.n	8006496 <_svfiprintf_r+0xfa>
 800646a:	9a07      	ldr	r2, [sp, #28]
 800646c:	4654      	mov	r4, sl
 800646e:	2000      	movs	r0, #0
 8006470:	f04f 0c0a 	mov.w	ip, #10
 8006474:	4621      	mov	r1, r4
 8006476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647a:	3b30      	subs	r3, #48	@ 0x30
 800647c:	2b09      	cmp	r3, #9
 800647e:	d94b      	bls.n	8006518 <_svfiprintf_r+0x17c>
 8006480:	b1b0      	cbz	r0, 80064b0 <_svfiprintf_r+0x114>
 8006482:	9207      	str	r2, [sp, #28]
 8006484:	e014      	b.n	80064b0 <_svfiprintf_r+0x114>
 8006486:	eba0 0308 	sub.w	r3, r0, r8
 800648a:	fa09 f303 	lsl.w	r3, r9, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	46a2      	mov	sl, r4
 8006494:	e7d2      	b.n	800643c <_svfiprintf_r+0xa0>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	1d19      	adds	r1, r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	9103      	str	r1, [sp, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bfbb      	ittet	lt
 80064a2:	425b      	neglt	r3, r3
 80064a4:	f042 0202 	orrlt.w	r2, r2, #2
 80064a8:	9307      	strge	r3, [sp, #28]
 80064aa:	9307      	strlt	r3, [sp, #28]
 80064ac:	bfb8      	it	lt
 80064ae:	9204      	strlt	r2, [sp, #16]
 80064b0:	7823      	ldrb	r3, [r4, #0]
 80064b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80064b4:	d10a      	bne.n	80064cc <_svfiprintf_r+0x130>
 80064b6:	7863      	ldrb	r3, [r4, #1]
 80064b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ba:	d132      	bne.n	8006522 <_svfiprintf_r+0x186>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9203      	str	r2, [sp, #12]
 80064c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064c8:	3402      	adds	r4, #2
 80064ca:	9305      	str	r3, [sp, #20]
 80064cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006590 <_svfiprintf_r+0x1f4>
 80064d0:	7821      	ldrb	r1, [r4, #0]
 80064d2:	2203      	movs	r2, #3
 80064d4:	4650      	mov	r0, sl
 80064d6:	f7f9 fea3 	bl	8000220 <memchr>
 80064da:	b138      	cbz	r0, 80064ec <_svfiprintf_r+0x150>
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	eba0 000a 	sub.w	r0, r0, sl
 80064e2:	2240      	movs	r2, #64	@ 0x40
 80064e4:	4082      	lsls	r2, r0
 80064e6:	4313      	orrs	r3, r2
 80064e8:	3401      	adds	r4, #1
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f0:	4824      	ldr	r0, [pc, #144]	@ (8006584 <_svfiprintf_r+0x1e8>)
 80064f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064f6:	2206      	movs	r2, #6
 80064f8:	f7f9 fe92 	bl	8000220 <memchr>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d036      	beq.n	800656e <_svfiprintf_r+0x1d2>
 8006500:	4b21      	ldr	r3, [pc, #132]	@ (8006588 <_svfiprintf_r+0x1ec>)
 8006502:	bb1b      	cbnz	r3, 800654c <_svfiprintf_r+0x1b0>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	3307      	adds	r3, #7
 8006508:	f023 0307 	bic.w	r3, r3, #7
 800650c:	3308      	adds	r3, #8
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006512:	4433      	add	r3, r6
 8006514:	9309      	str	r3, [sp, #36]	@ 0x24
 8006516:	e76a      	b.n	80063ee <_svfiprintf_r+0x52>
 8006518:	fb0c 3202 	mla	r2, ip, r2, r3
 800651c:	460c      	mov	r4, r1
 800651e:	2001      	movs	r0, #1
 8006520:	e7a8      	b.n	8006474 <_svfiprintf_r+0xd8>
 8006522:	2300      	movs	r3, #0
 8006524:	3401      	adds	r4, #1
 8006526:	9305      	str	r3, [sp, #20]
 8006528:	4619      	mov	r1, r3
 800652a:	f04f 0c0a 	mov.w	ip, #10
 800652e:	4620      	mov	r0, r4
 8006530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006534:	3a30      	subs	r2, #48	@ 0x30
 8006536:	2a09      	cmp	r2, #9
 8006538:	d903      	bls.n	8006542 <_svfiprintf_r+0x1a6>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0c6      	beq.n	80064cc <_svfiprintf_r+0x130>
 800653e:	9105      	str	r1, [sp, #20]
 8006540:	e7c4      	b.n	80064cc <_svfiprintf_r+0x130>
 8006542:	fb0c 2101 	mla	r1, ip, r1, r2
 8006546:	4604      	mov	r4, r0
 8006548:	2301      	movs	r3, #1
 800654a:	e7f0      	b.n	800652e <_svfiprintf_r+0x192>
 800654c:	ab03      	add	r3, sp, #12
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	462a      	mov	r2, r5
 8006552:	4b0e      	ldr	r3, [pc, #56]	@ (800658c <_svfiprintf_r+0x1f0>)
 8006554:	a904      	add	r1, sp, #16
 8006556:	4638      	mov	r0, r7
 8006558:	f3af 8000 	nop.w
 800655c:	1c42      	adds	r2, r0, #1
 800655e:	4606      	mov	r6, r0
 8006560:	d1d6      	bne.n	8006510 <_svfiprintf_r+0x174>
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	065b      	lsls	r3, r3, #25
 8006566:	f53f af2d 	bmi.w	80063c4 <_svfiprintf_r+0x28>
 800656a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800656c:	e72c      	b.n	80063c8 <_svfiprintf_r+0x2c>
 800656e:	ab03      	add	r3, sp, #12
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	462a      	mov	r2, r5
 8006574:	4b05      	ldr	r3, [pc, #20]	@ (800658c <_svfiprintf_r+0x1f0>)
 8006576:	a904      	add	r1, sp, #16
 8006578:	4638      	mov	r0, r7
 800657a:	f000 f879 	bl	8006670 <_printf_i>
 800657e:	e7ed      	b.n	800655c <_svfiprintf_r+0x1c0>
 8006580:	0800715f 	.word	0x0800715f
 8006584:	08007169 	.word	0x08007169
 8006588:	00000000 	.word	0x00000000
 800658c:	080062e5 	.word	0x080062e5
 8006590:	08007165 	.word	0x08007165

08006594 <_printf_common>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	4616      	mov	r6, r2
 800659a:	4698      	mov	r8, r3
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfb8      	it	lt
 80065a8:	4613      	movlt	r3, r2
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065b0:	4607      	mov	r7, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b10a      	cbz	r2, 80065ba <_printf_common+0x26>
 80065b6:	3301      	adds	r3, #1
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	0699      	lsls	r1, r3, #26
 80065be:	bf42      	ittt	mi
 80065c0:	6833      	ldrmi	r3, [r6, #0]
 80065c2:	3302      	addmi	r3, #2
 80065c4:	6033      	strmi	r3, [r6, #0]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	f015 0506 	ands.w	r5, r5, #6
 80065cc:	d106      	bne.n	80065dc <_printf_common+0x48>
 80065ce:	f104 0a19 	add.w	sl, r4, #25
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	6832      	ldr	r2, [r6, #0]
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dc26      	bgt.n	800662a <_printf_common+0x96>
 80065dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	3b00      	subs	r3, #0
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	0692      	lsls	r2, r2, #26
 80065ea:	d42b      	bmi.n	8006644 <_printf_common+0xb0>
 80065ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065f0:	4641      	mov	r1, r8
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c8      	blx	r9
 80065f6:	3001      	adds	r0, #1
 80065f8:	d01e      	beq.n	8006638 <_printf_common+0xa4>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	2b04      	cmp	r3, #4
 8006604:	bf02      	ittt	eq
 8006606:	68e5      	ldreq	r5, [r4, #12]
 8006608:	6833      	ldreq	r3, [r6, #0]
 800660a:	1aed      	subeq	r5, r5, r3
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	2600      	movs	r6, #0
 8006620:	341a      	adds	r4, #26
 8006622:	42b5      	cmp	r5, r6
 8006624:	d11a      	bne.n	800665c <_printf_common+0xc8>
 8006626:	2000      	movs	r0, #0
 8006628:	e008      	b.n	800663c <_printf_common+0xa8>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4641      	mov	r1, r8
 8006630:	4638      	mov	r0, r7
 8006632:	47c8      	blx	r9
 8006634:	3001      	adds	r0, #1
 8006636:	d103      	bne.n	8006640 <_printf_common+0xac>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	3501      	adds	r5, #1
 8006642:	e7c6      	b.n	80065d2 <_printf_common+0x3e>
 8006644:	18e1      	adds	r1, r4, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	2030      	movs	r0, #48	@ 0x30
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800664e:	4422      	add	r2, r4
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006658:	3302      	adds	r3, #2
 800665a:	e7c7      	b.n	80065ec <_printf_common+0x58>
 800665c:	2301      	movs	r3, #1
 800665e:	4622      	mov	r2, r4
 8006660:	4641      	mov	r1, r8
 8006662:	4638      	mov	r0, r7
 8006664:	47c8      	blx	r9
 8006666:	3001      	adds	r0, #1
 8006668:	d0e6      	beq.n	8006638 <_printf_common+0xa4>
 800666a:	3601      	adds	r6, #1
 800666c:	e7d9      	b.n	8006622 <_printf_common+0x8e>
	...

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	7e0f      	ldrb	r7, [r1, #24]
 8006676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006678:	2f78      	cmp	r7, #120	@ 0x78
 800667a:	4691      	mov	r9, r2
 800667c:	4680      	mov	r8, r0
 800667e:	460c      	mov	r4, r1
 8006680:	469a      	mov	sl, r3
 8006682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	@ 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d2 	beq.w	8006836 <_printf_i+0x1c6>
 8006692:	2f58      	cmp	r7, #88	@ 0x58
 8006694:	f000 80b9 	beq.w	800680a <_printf_i+0x19a>
 8006698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a101      	add	r1, pc, #4	@ (adr r1, 80066b0 <_printf_i+0x40>)
 80066ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	0800681d 	.word	0x0800681d
 80066e0:	08006747 	.word	0x08006747
 80066e4:	080067d7 	.word	0x080067d7
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	0800683f 	.word	0x0800683f
 80066f4:	08006699 	.word	0x08006699
 80066f8:	08006747 	.word	0x08006747
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	080067df 	.word	0x080067df
 8006708:	6833      	ldr	r3, [r6, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6032      	str	r2, [r6, #0]
 8006710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e09d      	b.n	8006858 <_printf_i+0x1e8>
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	6031      	str	r1, [r6, #0]
 8006724:	0606      	lsls	r6, r0, #24
 8006726:	d501      	bpl.n	800672c <_printf_i+0xbc>
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	e003      	b.n	8006734 <_printf_i+0xc4>
 800672c:	0645      	lsls	r5, r0, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0xb8>
 8006730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006734:	2d00      	cmp	r5, #0
 8006736:	da03      	bge.n	8006740 <_printf_i+0xd0>
 8006738:	232d      	movs	r3, #45	@ 0x2d
 800673a:	426d      	negs	r5, r5
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006740:	4859      	ldr	r0, [pc, #356]	@ (80068a8 <_printf_i+0x238>)
 8006742:	230a      	movs	r3, #10
 8006744:	e011      	b.n	800676a <_printf_i+0xfa>
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	6833      	ldr	r3, [r6, #0]
 800674a:	0608      	lsls	r0, r1, #24
 800674c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006750:	d402      	bmi.n	8006758 <_printf_i+0xe8>
 8006752:	0649      	lsls	r1, r1, #25
 8006754:	bf48      	it	mi
 8006756:	b2ad      	uxthmi	r5, r5
 8006758:	2f6f      	cmp	r7, #111	@ 0x6f
 800675a:	4853      	ldr	r0, [pc, #332]	@ (80068a8 <_printf_i+0x238>)
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	bf14      	ite	ne
 8006760:	230a      	movne	r3, #10
 8006762:	2308      	moveq	r3, #8
 8006764:	2100      	movs	r1, #0
 8006766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800676a:	6866      	ldr	r6, [r4, #4]
 800676c:	60a6      	str	r6, [r4, #8]
 800676e:	2e00      	cmp	r6, #0
 8006770:	bfa2      	ittt	ge
 8006772:	6821      	ldrge	r1, [r4, #0]
 8006774:	f021 0104 	bicge.w	r1, r1, #4
 8006778:	6021      	strge	r1, [r4, #0]
 800677a:	b90d      	cbnz	r5, 8006780 <_printf_i+0x110>
 800677c:	2e00      	cmp	r6, #0
 800677e:	d04b      	beq.n	8006818 <_printf_i+0x1a8>
 8006780:	4616      	mov	r6, r2
 8006782:	fbb5 f1f3 	udiv	r1, r5, r3
 8006786:	fb03 5711 	mls	r7, r3, r1, r5
 800678a:	5dc7      	ldrb	r7, [r0, r7]
 800678c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006790:	462f      	mov	r7, r5
 8006792:	42bb      	cmp	r3, r7
 8006794:	460d      	mov	r5, r1
 8006796:	d9f4      	bls.n	8006782 <_printf_i+0x112>
 8006798:	2b08      	cmp	r3, #8
 800679a:	d10b      	bne.n	80067b4 <_printf_i+0x144>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07df      	lsls	r7, r3, #31
 80067a0:	d508      	bpl.n	80067b4 <_printf_i+0x144>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	4299      	cmp	r1, r3
 80067a8:	bfde      	ittt	le
 80067aa:	2330      	movle	r3, #48	@ 0x30
 80067ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067b4:	1b92      	subs	r2, r2, r6
 80067b6:	6122      	str	r2, [r4, #16]
 80067b8:	f8cd a000 	str.w	sl, [sp]
 80067bc:	464b      	mov	r3, r9
 80067be:	aa03      	add	r2, sp, #12
 80067c0:	4621      	mov	r1, r4
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7ff fee6 	bl	8006594 <_printf_common>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d14a      	bne.n	8006862 <_printf_i+0x1f2>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	b004      	add	sp, #16
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	f043 0320 	orr.w	r3, r3, #32
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	4833      	ldr	r0, [pc, #204]	@ (80068ac <_printf_i+0x23c>)
 80067e0:	2778      	movs	r7, #120	@ 0x78
 80067e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	6831      	ldr	r1, [r6, #0]
 80067ea:	061f      	lsls	r7, r3, #24
 80067ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80067f0:	d402      	bmi.n	80067f8 <_printf_i+0x188>
 80067f2:	065f      	lsls	r7, r3, #25
 80067f4:	bf48      	it	mi
 80067f6:	b2ad      	uxthmi	r5, r5
 80067f8:	6031      	str	r1, [r6, #0]
 80067fa:	07d9      	lsls	r1, r3, #31
 80067fc:	bf44      	itt	mi
 80067fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006802:	6023      	strmi	r3, [r4, #0]
 8006804:	b11d      	cbz	r5, 800680e <_printf_i+0x19e>
 8006806:	2310      	movs	r3, #16
 8006808:	e7ac      	b.n	8006764 <_printf_i+0xf4>
 800680a:	4827      	ldr	r0, [pc, #156]	@ (80068a8 <_printf_i+0x238>)
 800680c:	e7e9      	b.n	80067e2 <_printf_i+0x172>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f023 0320 	bic.w	r3, r3, #32
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	e7f6      	b.n	8006806 <_printf_i+0x196>
 8006818:	4616      	mov	r6, r2
 800681a:	e7bd      	b.n	8006798 <_printf_i+0x128>
 800681c:	6833      	ldr	r3, [r6, #0]
 800681e:	6825      	ldr	r5, [r4, #0]
 8006820:	6961      	ldr	r1, [r4, #20]
 8006822:	1d18      	adds	r0, r3, #4
 8006824:	6030      	str	r0, [r6, #0]
 8006826:	062e      	lsls	r6, r5, #24
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	d501      	bpl.n	8006830 <_printf_i+0x1c0>
 800682c:	6019      	str	r1, [r3, #0]
 800682e:	e002      	b.n	8006836 <_printf_i+0x1c6>
 8006830:	0668      	lsls	r0, r5, #25
 8006832:	d5fb      	bpl.n	800682c <_printf_i+0x1bc>
 8006834:	8019      	strh	r1, [r3, #0]
 8006836:	2300      	movs	r3, #0
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	4616      	mov	r6, r2
 800683c:	e7bc      	b.n	80067b8 <_printf_i+0x148>
 800683e:	6833      	ldr	r3, [r6, #0]
 8006840:	1d1a      	adds	r2, r3, #4
 8006842:	6032      	str	r2, [r6, #0]
 8006844:	681e      	ldr	r6, [r3, #0]
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	2100      	movs	r1, #0
 800684a:	4630      	mov	r0, r6
 800684c:	f7f9 fce8 	bl	8000220 <memchr>
 8006850:	b108      	cbz	r0, 8006856 <_printf_i+0x1e6>
 8006852:	1b80      	subs	r0, r0, r6
 8006854:	6060      	str	r0, [r4, #4]
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	6123      	str	r3, [r4, #16]
 800685a:	2300      	movs	r3, #0
 800685c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006860:	e7aa      	b.n	80067b8 <_printf_i+0x148>
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	4632      	mov	r2, r6
 8006866:	4649      	mov	r1, r9
 8006868:	4640      	mov	r0, r8
 800686a:	47d0      	blx	sl
 800686c:	3001      	adds	r0, #1
 800686e:	d0ad      	beq.n	80067cc <_printf_i+0x15c>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	079b      	lsls	r3, r3, #30
 8006874:	d413      	bmi.n	800689e <_printf_i+0x22e>
 8006876:	68e0      	ldr	r0, [r4, #12]
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	4298      	cmp	r0, r3
 800687c:	bfb8      	it	lt
 800687e:	4618      	movlt	r0, r3
 8006880:	e7a6      	b.n	80067d0 <_printf_i+0x160>
 8006882:	2301      	movs	r3, #1
 8006884:	4632      	mov	r2, r6
 8006886:	4649      	mov	r1, r9
 8006888:	4640      	mov	r0, r8
 800688a:	47d0      	blx	sl
 800688c:	3001      	adds	r0, #1
 800688e:	d09d      	beq.n	80067cc <_printf_i+0x15c>
 8006890:	3501      	adds	r5, #1
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	9903      	ldr	r1, [sp, #12]
 8006896:	1a5b      	subs	r3, r3, r1
 8006898:	42ab      	cmp	r3, r5
 800689a:	dcf2      	bgt.n	8006882 <_printf_i+0x212>
 800689c:	e7eb      	b.n	8006876 <_printf_i+0x206>
 800689e:	2500      	movs	r5, #0
 80068a0:	f104 0619 	add.w	r6, r4, #25
 80068a4:	e7f5      	b.n	8006892 <_printf_i+0x222>
 80068a6:	bf00      	nop
 80068a8:	08007170 	.word	0x08007170
 80068ac:	08007181 	.word	0x08007181

080068b0 <__sflush_r>:
 80068b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b8:	0716      	lsls	r6, r2, #28
 80068ba:	4605      	mov	r5, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	d454      	bmi.n	800696a <__sflush_r+0xba>
 80068c0:	684b      	ldr	r3, [r1, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dc02      	bgt.n	80068cc <__sflush_r+0x1c>
 80068c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dd48      	ble.n	800695e <__sflush_r+0xae>
 80068cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d045      	beq.n	800695e <__sflush_r+0xae>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068d8:	682f      	ldr	r7, [r5, #0]
 80068da:	6a21      	ldr	r1, [r4, #32]
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	d030      	beq.n	8006942 <__sflush_r+0x92>
 80068e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	0759      	lsls	r1, r3, #29
 80068e6:	d505      	bpl.n	80068f4 <__sflush_r+0x44>
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068ee:	b10b      	cbz	r3, 80068f4 <__sflush_r+0x44>
 80068f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068f8:	6a21      	ldr	r1, [r4, #32]
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b0      	blx	r6
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	d106      	bne.n	8006912 <__sflush_r+0x62>
 8006904:	6829      	ldr	r1, [r5, #0]
 8006906:	291d      	cmp	r1, #29
 8006908:	d82b      	bhi.n	8006962 <__sflush_r+0xb2>
 800690a:	4a2a      	ldr	r2, [pc, #168]	@ (80069b4 <__sflush_r+0x104>)
 800690c:	410a      	asrs	r2, r1
 800690e:	07d6      	lsls	r6, r2, #31
 8006910:	d427      	bmi.n	8006962 <__sflush_r+0xb2>
 8006912:	2200      	movs	r2, #0
 8006914:	6062      	str	r2, [r4, #4]
 8006916:	04d9      	lsls	r1, r3, #19
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	6022      	str	r2, [r4, #0]
 800691c:	d504      	bpl.n	8006928 <__sflush_r+0x78>
 800691e:	1c42      	adds	r2, r0, #1
 8006920:	d101      	bne.n	8006926 <__sflush_r+0x76>
 8006922:	682b      	ldr	r3, [r5, #0]
 8006924:	b903      	cbnz	r3, 8006928 <__sflush_r+0x78>
 8006926:	6560      	str	r0, [r4, #84]	@ 0x54
 8006928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800692a:	602f      	str	r7, [r5, #0]
 800692c:	b1b9      	cbz	r1, 800695e <__sflush_r+0xae>
 800692e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006932:	4299      	cmp	r1, r3
 8006934:	d002      	beq.n	800693c <__sflush_r+0x8c>
 8006936:	4628      	mov	r0, r5
 8006938:	f7ff fbd4 	bl	80060e4 <_free_r>
 800693c:	2300      	movs	r3, #0
 800693e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006940:	e00d      	b.n	800695e <__sflush_r+0xae>
 8006942:	2301      	movs	r3, #1
 8006944:	4628      	mov	r0, r5
 8006946:	47b0      	blx	r6
 8006948:	4602      	mov	r2, r0
 800694a:	1c50      	adds	r0, r2, #1
 800694c:	d1c9      	bne.n	80068e2 <__sflush_r+0x32>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0c6      	beq.n	80068e2 <__sflush_r+0x32>
 8006954:	2b1d      	cmp	r3, #29
 8006956:	d001      	beq.n	800695c <__sflush_r+0xac>
 8006958:	2b16      	cmp	r3, #22
 800695a:	d11e      	bne.n	800699a <__sflush_r+0xea>
 800695c:	602f      	str	r7, [r5, #0]
 800695e:	2000      	movs	r0, #0
 8006960:	e022      	b.n	80069a8 <__sflush_r+0xf8>
 8006962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006966:	b21b      	sxth	r3, r3
 8006968:	e01b      	b.n	80069a2 <__sflush_r+0xf2>
 800696a:	690f      	ldr	r7, [r1, #16]
 800696c:	2f00      	cmp	r7, #0
 800696e:	d0f6      	beq.n	800695e <__sflush_r+0xae>
 8006970:	0793      	lsls	r3, r2, #30
 8006972:	680e      	ldr	r6, [r1, #0]
 8006974:	bf08      	it	eq
 8006976:	694b      	ldreq	r3, [r1, #20]
 8006978:	600f      	str	r7, [r1, #0]
 800697a:	bf18      	it	ne
 800697c:	2300      	movne	r3, #0
 800697e:	eba6 0807 	sub.w	r8, r6, r7
 8006982:	608b      	str	r3, [r1, #8]
 8006984:	f1b8 0f00 	cmp.w	r8, #0
 8006988:	dde9      	ble.n	800695e <__sflush_r+0xae>
 800698a:	6a21      	ldr	r1, [r4, #32]
 800698c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800698e:	4643      	mov	r3, r8
 8006990:	463a      	mov	r2, r7
 8006992:	4628      	mov	r0, r5
 8006994:	47b0      	blx	r6
 8006996:	2800      	cmp	r0, #0
 8006998:	dc08      	bgt.n	80069ac <__sflush_r+0xfc>
 800699a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a2:	81a3      	strh	r3, [r4, #12]
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ac:	4407      	add	r7, r0
 80069ae:	eba8 0800 	sub.w	r8, r8, r0
 80069b2:	e7e7      	b.n	8006984 <__sflush_r+0xd4>
 80069b4:	dfbffffe 	.word	0xdfbffffe

080069b8 <_fflush_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	690b      	ldr	r3, [r1, #16]
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	b913      	cbnz	r3, 80069c8 <_fflush_r+0x10>
 80069c2:	2500      	movs	r5, #0
 80069c4:	4628      	mov	r0, r5
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	b118      	cbz	r0, 80069d2 <_fflush_r+0x1a>
 80069ca:	6a03      	ldr	r3, [r0, #32]
 80069cc:	b90b      	cbnz	r3, 80069d2 <_fflush_r+0x1a>
 80069ce:	f7ff fa47 	bl	8005e60 <__sinit>
 80069d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f3      	beq.n	80069c2 <_fflush_r+0xa>
 80069da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069dc:	07d0      	lsls	r0, r2, #31
 80069de:	d404      	bmi.n	80069ea <_fflush_r+0x32>
 80069e0:	0599      	lsls	r1, r3, #22
 80069e2:	d402      	bmi.n	80069ea <_fflush_r+0x32>
 80069e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069e6:	f7ff fb4e 	bl	8006086 <__retarget_lock_acquire_recursive>
 80069ea:	4628      	mov	r0, r5
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7ff ff5f 	bl	80068b0 <__sflush_r>
 80069f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069f4:	07da      	lsls	r2, r3, #31
 80069f6:	4605      	mov	r5, r0
 80069f8:	d4e4      	bmi.n	80069c4 <_fflush_r+0xc>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	059b      	lsls	r3, r3, #22
 80069fe:	d4e1      	bmi.n	80069c4 <_fflush_r+0xc>
 8006a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a02:	f7ff fb41 	bl	8006088 <__retarget_lock_release_recursive>
 8006a06:	e7dd      	b.n	80069c4 <_fflush_r+0xc>

08006a08 <fiprintf>:
 8006a08:	b40e      	push	{r1, r2, r3}
 8006a0a:	b503      	push	{r0, r1, lr}
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	ab03      	add	r3, sp, #12
 8006a10:	4805      	ldr	r0, [pc, #20]	@ (8006a28 <fiprintf+0x20>)
 8006a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a16:	6800      	ldr	r0, [r0, #0]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	f000 f88f 	bl	8006b3c <_vfiprintf_r>
 8006a1e:	b002      	add	sp, #8
 8006a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a24:	b003      	add	sp, #12
 8006a26:	4770      	bx	lr
 8006a28:	20000020 	.word	0x20000020

08006a2c <memmove>:
 8006a2c:	4288      	cmp	r0, r1
 8006a2e:	b510      	push	{r4, lr}
 8006a30:	eb01 0402 	add.w	r4, r1, r2
 8006a34:	d902      	bls.n	8006a3c <memmove+0x10>
 8006a36:	4284      	cmp	r4, r0
 8006a38:	4623      	mov	r3, r4
 8006a3a:	d807      	bhi.n	8006a4c <memmove+0x20>
 8006a3c:	1e43      	subs	r3, r0, #1
 8006a3e:	42a1      	cmp	r1, r4
 8006a40:	d008      	beq.n	8006a54 <memmove+0x28>
 8006a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a4a:	e7f8      	b.n	8006a3e <memmove+0x12>
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4601      	mov	r1, r0
 8006a50:	428a      	cmp	r2, r1
 8006a52:	d100      	bne.n	8006a56 <memmove+0x2a>
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a5e:	e7f7      	b.n	8006a50 <memmove+0x24>

08006a60 <_sbrk_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	@ (8006a7c <_sbrk_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fd f922 	bl	8003cb4 <_sbrk>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_sbrk_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_sbrk_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20013048 	.word	0x20013048

08006a80 <abort>:
 8006a80:	b508      	push	{r3, lr}
 8006a82:	2006      	movs	r0, #6
 8006a84:	f000 fa2e 	bl	8006ee4 <raise>
 8006a88:	2001      	movs	r0, #1
 8006a8a:	f7fd f89b 	bl	8003bc4 <_exit>

08006a8e <_realloc_r>:
 8006a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	4680      	mov	r8, r0
 8006a94:	4615      	mov	r5, r2
 8006a96:	460c      	mov	r4, r1
 8006a98:	b921      	cbnz	r1, 8006aa4 <_realloc_r+0x16>
 8006a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	f7ff bb94 	b.w	80061cc <_malloc_r>
 8006aa4:	b92a      	cbnz	r2, 8006ab2 <_realloc_r+0x24>
 8006aa6:	f7ff fb1d 	bl	80060e4 <_free_r>
 8006aaa:	2400      	movs	r4, #0
 8006aac:	4620      	mov	r0, r4
 8006aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab2:	f000 fa33 	bl	8006f1c <_malloc_usable_size_r>
 8006ab6:	4285      	cmp	r5, r0
 8006ab8:	4606      	mov	r6, r0
 8006aba:	d802      	bhi.n	8006ac2 <_realloc_r+0x34>
 8006abc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ac0:	d8f4      	bhi.n	8006aac <_realloc_r+0x1e>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	f7ff fb81 	bl	80061cc <_malloc_r>
 8006aca:	4607      	mov	r7, r0
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0ec      	beq.n	8006aaa <_realloc_r+0x1c>
 8006ad0:	42b5      	cmp	r5, r6
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	bf28      	it	cs
 8006ad8:	4632      	movcs	r2, r6
 8006ada:	f7ff fad6 	bl	800608a <memcpy>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f7ff faff 	bl	80060e4 <_free_r>
 8006ae6:	463c      	mov	r4, r7
 8006ae8:	e7e0      	b.n	8006aac <_realloc_r+0x1e>

08006aea <__sfputc_r>:
 8006aea:	6893      	ldr	r3, [r2, #8]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	b410      	push	{r4}
 8006af2:	6093      	str	r3, [r2, #8]
 8006af4:	da08      	bge.n	8006b08 <__sfputc_r+0x1e>
 8006af6:	6994      	ldr	r4, [r2, #24]
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	db01      	blt.n	8006b00 <__sfputc_r+0x16>
 8006afc:	290a      	cmp	r1, #10
 8006afe:	d103      	bne.n	8006b08 <__sfputc_r+0x1e>
 8006b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b04:	f000 b932 	b.w	8006d6c <__swbuf_r>
 8006b08:	6813      	ldr	r3, [r2, #0]
 8006b0a:	1c58      	adds	r0, r3, #1
 8006b0c:	6010      	str	r0, [r2, #0]
 8006b0e:	7019      	strb	r1, [r3, #0]
 8006b10:	4608      	mov	r0, r1
 8006b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <__sfputs_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460f      	mov	r7, r1
 8006b1e:	4614      	mov	r4, r2
 8006b20:	18d5      	adds	r5, r2, r3
 8006b22:	42ac      	cmp	r4, r5
 8006b24:	d101      	bne.n	8006b2a <__sfputs_r+0x12>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e007      	b.n	8006b3a <__sfputs_r+0x22>
 8006b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b2e:	463a      	mov	r2, r7
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffda 	bl	8006aea <__sfputc_r>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d1f3      	bne.n	8006b22 <__sfputs_r+0xa>
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b3c <_vfiprintf_r>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	460d      	mov	r5, r1
 8006b42:	b09d      	sub	sp, #116	@ 0x74
 8006b44:	4614      	mov	r4, r2
 8006b46:	4698      	mov	r8, r3
 8006b48:	4606      	mov	r6, r0
 8006b4a:	b118      	cbz	r0, 8006b54 <_vfiprintf_r+0x18>
 8006b4c:	6a03      	ldr	r3, [r0, #32]
 8006b4e:	b90b      	cbnz	r3, 8006b54 <_vfiprintf_r+0x18>
 8006b50:	f7ff f986 	bl	8005e60 <__sinit>
 8006b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b56:	07d9      	lsls	r1, r3, #31
 8006b58:	d405      	bmi.n	8006b66 <_vfiprintf_r+0x2a>
 8006b5a:	89ab      	ldrh	r3, [r5, #12]
 8006b5c:	059a      	lsls	r2, r3, #22
 8006b5e:	d402      	bmi.n	8006b66 <_vfiprintf_r+0x2a>
 8006b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b62:	f7ff fa90 	bl	8006086 <__retarget_lock_acquire_recursive>
 8006b66:	89ab      	ldrh	r3, [r5, #12]
 8006b68:	071b      	lsls	r3, r3, #28
 8006b6a:	d501      	bpl.n	8006b70 <_vfiprintf_r+0x34>
 8006b6c:	692b      	ldr	r3, [r5, #16]
 8006b6e:	b99b      	cbnz	r3, 8006b98 <_vfiprintf_r+0x5c>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	f000 f938 	bl	8006de8 <__swsetup_r>
 8006b78:	b170      	cbz	r0, 8006b98 <_vfiprintf_r+0x5c>
 8006b7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b7c:	07dc      	lsls	r4, r3, #31
 8006b7e:	d504      	bpl.n	8006b8a <_vfiprintf_r+0x4e>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	b01d      	add	sp, #116	@ 0x74
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	0598      	lsls	r0, r3, #22
 8006b8e:	d4f7      	bmi.n	8006b80 <_vfiprintf_r+0x44>
 8006b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b92:	f7ff fa79 	bl	8006088 <__retarget_lock_release_recursive>
 8006b96:	e7f3      	b.n	8006b80 <_vfiprintf_r+0x44>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba6:	2330      	movs	r3, #48	@ 0x30
 8006ba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d58 <_vfiprintf_r+0x21c>
 8006bac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bb0:	f04f 0901 	mov.w	r9, #1
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	469a      	mov	sl, r3
 8006bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bbc:	b10a      	cbz	r2, 8006bc2 <_vfiprintf_r+0x86>
 8006bbe:	2a25      	cmp	r2, #37	@ 0x25
 8006bc0:	d1f9      	bne.n	8006bb6 <_vfiprintf_r+0x7a>
 8006bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc6:	d00b      	beq.n	8006be0 <_vfiprintf_r+0xa4>
 8006bc8:	465b      	mov	r3, fp
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff ffa2 	bl	8006b18 <__sfputs_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f000 80a7 	beq.w	8006d28 <_vfiprintf_r+0x1ec>
 8006bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bdc:	445a      	add	r2, fp
 8006bde:	9209      	str	r2, [sp, #36]	@ 0x24
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 809f 	beq.w	8006d28 <_vfiprintf_r+0x1ec>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bf4:	f10a 0a01 	add.w	sl, sl, #1
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	9307      	str	r3, [sp, #28]
 8006bfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c00:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c02:	4654      	mov	r4, sl
 8006c04:	2205      	movs	r2, #5
 8006c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0a:	4853      	ldr	r0, [pc, #332]	@ (8006d58 <_vfiprintf_r+0x21c>)
 8006c0c:	f7f9 fb08 	bl	8000220 <memchr>
 8006c10:	9a04      	ldr	r2, [sp, #16]
 8006c12:	b9d8      	cbnz	r0, 8006c4c <_vfiprintf_r+0x110>
 8006c14:	06d1      	lsls	r1, r2, #27
 8006c16:	bf44      	itt	mi
 8006c18:	2320      	movmi	r3, #32
 8006c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c1e:	0713      	lsls	r3, r2, #28
 8006c20:	bf44      	itt	mi
 8006c22:	232b      	movmi	r3, #43	@ 0x2b
 8006c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c28:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c2e:	d015      	beq.n	8006c5c <_vfiprintf_r+0x120>
 8006c30:	9a07      	ldr	r2, [sp, #28]
 8006c32:	4654      	mov	r4, sl
 8006c34:	2000      	movs	r0, #0
 8006c36:	f04f 0c0a 	mov.w	ip, #10
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c40:	3b30      	subs	r3, #48	@ 0x30
 8006c42:	2b09      	cmp	r3, #9
 8006c44:	d94b      	bls.n	8006cde <_vfiprintf_r+0x1a2>
 8006c46:	b1b0      	cbz	r0, 8006c76 <_vfiprintf_r+0x13a>
 8006c48:	9207      	str	r2, [sp, #28]
 8006c4a:	e014      	b.n	8006c76 <_vfiprintf_r+0x13a>
 8006c4c:	eba0 0308 	sub.w	r3, r0, r8
 8006c50:	fa09 f303 	lsl.w	r3, r9, r3
 8006c54:	4313      	orrs	r3, r2
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	46a2      	mov	sl, r4
 8006c5a:	e7d2      	b.n	8006c02 <_vfiprintf_r+0xc6>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1d19      	adds	r1, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	9103      	str	r1, [sp, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfbb      	ittet	lt
 8006c68:	425b      	neglt	r3, r3
 8006c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c6e:	9307      	strge	r3, [sp, #28]
 8006c70:	9307      	strlt	r3, [sp, #28]
 8006c72:	bfb8      	it	lt
 8006c74:	9204      	strlt	r2, [sp, #16]
 8006c76:	7823      	ldrb	r3, [r4, #0]
 8006c78:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c7a:	d10a      	bne.n	8006c92 <_vfiprintf_r+0x156>
 8006c7c:	7863      	ldrb	r3, [r4, #1]
 8006c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c80:	d132      	bne.n	8006ce8 <_vfiprintf_r+0x1ac>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	9203      	str	r2, [sp, #12]
 8006c8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c8e:	3402      	adds	r4, #2
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d68 <_vfiprintf_r+0x22c>
 8006c96:	7821      	ldrb	r1, [r4, #0]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f7f9 fac0 	bl	8000220 <memchr>
 8006ca0:	b138      	cbz	r0, 8006cb2 <_vfiprintf_r+0x176>
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	eba0 000a 	sub.w	r0, r0, sl
 8006ca8:	2240      	movs	r2, #64	@ 0x40
 8006caa:	4082      	lsls	r2, r0
 8006cac:	4313      	orrs	r3, r2
 8006cae:	3401      	adds	r4, #1
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb6:	4829      	ldr	r0, [pc, #164]	@ (8006d5c <_vfiprintf_r+0x220>)
 8006cb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cbc:	2206      	movs	r2, #6
 8006cbe:	f7f9 faaf 	bl	8000220 <memchr>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d03f      	beq.n	8006d46 <_vfiprintf_r+0x20a>
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <_vfiprintf_r+0x224>)
 8006cc8:	bb1b      	cbnz	r3, 8006d12 <_vfiprintf_r+0x1d6>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	f023 0307 	bic.w	r3, r3, #7
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd8:	443b      	add	r3, r7
 8006cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cdc:	e76a      	b.n	8006bb4 <_vfiprintf_r+0x78>
 8006cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	e7a8      	b.n	8006c3a <_vfiprintf_r+0xfe>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	3401      	adds	r4, #1
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f04f 0c0a 	mov.w	ip, #10
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cfa:	3a30      	subs	r2, #48	@ 0x30
 8006cfc:	2a09      	cmp	r2, #9
 8006cfe:	d903      	bls.n	8006d08 <_vfiprintf_r+0x1cc>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0c6      	beq.n	8006c92 <_vfiprintf_r+0x156>
 8006d04:	9105      	str	r1, [sp, #20]
 8006d06:	e7c4      	b.n	8006c92 <_vfiprintf_r+0x156>
 8006d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e7f0      	b.n	8006cf4 <_vfiprintf_r+0x1b8>
 8006d12:	ab03      	add	r3, sp, #12
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	462a      	mov	r2, r5
 8006d18:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <_vfiprintf_r+0x228>)
 8006d1a:	a904      	add	r1, sp, #16
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f3af 8000 	nop.w
 8006d22:	4607      	mov	r7, r0
 8006d24:	1c78      	adds	r0, r7, #1
 8006d26:	d1d6      	bne.n	8006cd6 <_vfiprintf_r+0x19a>
 8006d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	d405      	bmi.n	8006d3a <_vfiprintf_r+0x1fe>
 8006d2e:	89ab      	ldrh	r3, [r5, #12]
 8006d30:	059a      	lsls	r2, r3, #22
 8006d32:	d402      	bmi.n	8006d3a <_vfiprintf_r+0x1fe>
 8006d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d36:	f7ff f9a7 	bl	8006088 <__retarget_lock_release_recursive>
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	065b      	lsls	r3, r3, #25
 8006d3e:	f53f af1f 	bmi.w	8006b80 <_vfiprintf_r+0x44>
 8006d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d44:	e71e      	b.n	8006b84 <_vfiprintf_r+0x48>
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <_vfiprintf_r+0x228>)
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff fc8d 	bl	8006670 <_printf_i>
 8006d56:	e7e4      	b.n	8006d22 <_vfiprintf_r+0x1e6>
 8006d58:	0800715f 	.word	0x0800715f
 8006d5c:	08007169 	.word	0x08007169
 8006d60:	00000000 	.word	0x00000000
 8006d64:	08006b19 	.word	0x08006b19
 8006d68:	08007165 	.word	0x08007165

08006d6c <__swbuf_r>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	4605      	mov	r5, r0
 8006d74:	b118      	cbz	r0, 8006d7e <__swbuf_r+0x12>
 8006d76:	6a03      	ldr	r3, [r0, #32]
 8006d78:	b90b      	cbnz	r3, 8006d7e <__swbuf_r+0x12>
 8006d7a:	f7ff f871 	bl	8005e60 <__sinit>
 8006d7e:	69a3      	ldr	r3, [r4, #24]
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	071a      	lsls	r2, r3, #28
 8006d86:	d501      	bpl.n	8006d8c <__swbuf_r+0x20>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b943      	cbnz	r3, 8006d9e <__swbuf_r+0x32>
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 f82a 	bl	8006de8 <__swsetup_r>
 8006d94:	b118      	cbz	r0, 8006d9e <__swbuf_r+0x32>
 8006d96:	f04f 37ff 	mov.w	r7, #4294967295
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	1a98      	subs	r0, r3, r2
 8006da4:	6963      	ldr	r3, [r4, #20]
 8006da6:	b2f6      	uxtb	r6, r6
 8006da8:	4283      	cmp	r3, r0
 8006daa:	4637      	mov	r7, r6
 8006dac:	dc05      	bgt.n	8006dba <__swbuf_r+0x4e>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff fe01 	bl	80069b8 <_fflush_r>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d1ed      	bne.n	8006d96 <__swbuf_r+0x2a>
 8006dba:	68a3      	ldr	r3, [r4, #8]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	60a3      	str	r3, [r4, #8]
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	701e      	strb	r6, [r3, #0]
 8006dc8:	6962      	ldr	r2, [r4, #20]
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d004      	beq.n	8006dda <__swbuf_r+0x6e>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	07db      	lsls	r3, r3, #31
 8006dd4:	d5e1      	bpl.n	8006d9a <__swbuf_r+0x2e>
 8006dd6:	2e0a      	cmp	r6, #10
 8006dd8:	d1df      	bne.n	8006d9a <__swbuf_r+0x2e>
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f7ff fdeb 	bl	80069b8 <_fflush_r>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d0d9      	beq.n	8006d9a <__swbuf_r+0x2e>
 8006de6:	e7d6      	b.n	8006d96 <__swbuf_r+0x2a>

08006de8 <__swsetup_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4b29      	ldr	r3, [pc, #164]	@ (8006e90 <__swsetup_r+0xa8>)
 8006dec:	4605      	mov	r5, r0
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	460c      	mov	r4, r1
 8006df2:	b118      	cbz	r0, 8006dfc <__swsetup_r+0x14>
 8006df4:	6a03      	ldr	r3, [r0, #32]
 8006df6:	b90b      	cbnz	r3, 8006dfc <__swsetup_r+0x14>
 8006df8:	f7ff f832 	bl	8005e60 <__sinit>
 8006dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e00:	0719      	lsls	r1, r3, #28
 8006e02:	d422      	bmi.n	8006e4a <__swsetup_r+0x62>
 8006e04:	06da      	lsls	r2, r3, #27
 8006e06:	d407      	bmi.n	8006e18 <__swsetup_r+0x30>
 8006e08:	2209      	movs	r2, #9
 8006e0a:	602a      	str	r2, [r5, #0]
 8006e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	e033      	b.n	8006e80 <__swsetup_r+0x98>
 8006e18:	0758      	lsls	r0, r3, #29
 8006e1a:	d512      	bpl.n	8006e42 <__swsetup_r+0x5a>
 8006e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e1e:	b141      	cbz	r1, 8006e32 <__swsetup_r+0x4a>
 8006e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e24:	4299      	cmp	r1, r3
 8006e26:	d002      	beq.n	8006e2e <__swsetup_r+0x46>
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7ff f95b 	bl	80060e4 <_free_r>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e38:	81a3      	strh	r3, [r4, #12]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6063      	str	r3, [r4, #4]
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	f043 0308 	orr.w	r3, r3, #8
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	b94b      	cbnz	r3, 8006e62 <__swsetup_r+0x7a>
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e58:	d003      	beq.n	8006e62 <__swsetup_r+0x7a>
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f88b 	bl	8006f78 <__smakebuf_r>
 8006e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e66:	f013 0201 	ands.w	r2, r3, #1
 8006e6a:	d00a      	beq.n	8006e82 <__swsetup_r+0x9a>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	60a2      	str	r2, [r4, #8]
 8006e70:	6962      	ldr	r2, [r4, #20]
 8006e72:	4252      	negs	r2, r2
 8006e74:	61a2      	str	r2, [r4, #24]
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	b942      	cbnz	r2, 8006e8c <__swsetup_r+0xa4>
 8006e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e7e:	d1c5      	bne.n	8006e0c <__swsetup_r+0x24>
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	0799      	lsls	r1, r3, #30
 8006e84:	bf58      	it	pl
 8006e86:	6962      	ldrpl	r2, [r4, #20]
 8006e88:	60a2      	str	r2, [r4, #8]
 8006e8a:	e7f4      	b.n	8006e76 <__swsetup_r+0x8e>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e7f7      	b.n	8006e80 <__swsetup_r+0x98>
 8006e90:	20000020 	.word	0x20000020

08006e94 <_raise_r>:
 8006e94:	291f      	cmp	r1, #31
 8006e96:	b538      	push	{r3, r4, r5, lr}
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	d904      	bls.n	8006ea8 <_raise_r+0x14>
 8006e9e:	2316      	movs	r3, #22
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006eaa:	b112      	cbz	r2, 8006eb2 <_raise_r+0x1e>
 8006eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eb0:	b94b      	cbnz	r3, 8006ec6 <_raise_r+0x32>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f830 	bl	8006f18 <_getpid_r>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4601      	mov	r1, r0
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec2:	f000 b817 	b.w	8006ef4 <_kill_r>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d00a      	beq.n	8006ee0 <_raise_r+0x4c>
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	d103      	bne.n	8006ed6 <_raise_r+0x42>
 8006ece:	2316      	movs	r3, #22
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	e7e7      	b.n	8006ea6 <_raise_r+0x12>
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006edc:	4620      	mov	r0, r4
 8006ede:	4798      	blx	r3
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e7e0      	b.n	8006ea6 <_raise_r+0x12>

08006ee4 <raise>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	@ (8006ef0 <raise+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f7ff bfd3 	b.w	8006e94 <_raise_r>
 8006eee:	bf00      	nop
 8006ef0:	20000020 	.word	0x20000020

08006ef4 <_kill_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	@ (8006f14 <_kill_r+0x20>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f7fc fe4f 	bl	8003ba4 <_kill>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d102      	bne.n	8006f10 <_kill_r+0x1c>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	b103      	cbz	r3, 8006f10 <_kill_r+0x1c>
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	bf00      	nop
 8006f14:	20013048 	.word	0x20013048

08006f18 <_getpid_r>:
 8006f18:	f7fc be3c 	b.w	8003b94 <_getpid>

08006f1c <_malloc_usable_size_r>:
 8006f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f20:	1f18      	subs	r0, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bfbc      	itt	lt
 8006f26:	580b      	ldrlt	r3, [r1, r0]
 8006f28:	18c0      	addlt	r0, r0, r3
 8006f2a:	4770      	bx	lr

08006f2c <__swhatbuf_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	b096      	sub	sp, #88	@ 0x58
 8006f38:	4615      	mov	r5, r2
 8006f3a:	461e      	mov	r6, r3
 8006f3c:	da0d      	bge.n	8006f5a <__swhatbuf_r+0x2e>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	bf14      	ite	ne
 8006f4a:	2340      	movne	r3, #64	@ 0x40
 8006f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f50:	2000      	movs	r0, #0
 8006f52:	6031      	str	r1, [r6, #0]
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	b016      	add	sp, #88	@ 0x58
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	466a      	mov	r2, sp
 8006f5c:	f000 f848 	bl	8006ff0 <_fstat_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	dbec      	blt.n	8006f3e <__swhatbuf_r+0x12>
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f6e:	4259      	negs	r1, r3
 8006f70:	4159      	adcs	r1, r3
 8006f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f76:	e7eb      	b.n	8006f50 <__swhatbuf_r+0x24>

08006f78 <__smakebuf_r>:
 8006f78:	898b      	ldrh	r3, [r1, #12]
 8006f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f7c:	079d      	lsls	r5, r3, #30
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	d507      	bpl.n	8006f94 <__smakebuf_r+0x1c>
 8006f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	b003      	add	sp, #12
 8006f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f94:	ab01      	add	r3, sp, #4
 8006f96:	466a      	mov	r2, sp
 8006f98:	f7ff ffc8 	bl	8006f2c <__swhatbuf_r>
 8006f9c:	9f00      	ldr	r7, [sp, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f7ff f912 	bl	80061cc <_malloc_r>
 8006fa8:	b948      	cbnz	r0, 8006fbe <__smakebuf_r+0x46>
 8006faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fae:	059a      	lsls	r2, r3, #22
 8006fb0:	d4ee      	bmi.n	8006f90 <__smakebuf_r+0x18>
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	e7e2      	b.n	8006f84 <__smakebuf_r+0xc>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	6020      	str	r0, [r4, #0]
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fce:	b15b      	cbz	r3, 8006fe8 <__smakebuf_r+0x70>
 8006fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f81d 	bl	8007014 <_isatty_r>
 8006fda:	b128      	cbz	r0, 8006fe8 <__smakebuf_r+0x70>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	431d      	orrs	r5, r3
 8006fec:	81a5      	strh	r5, [r4, #12]
 8006fee:	e7cf      	b.n	8006f90 <__smakebuf_r+0x18>

08006ff0 <_fstat_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_fstat_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f7fc fe31 	bl	8003c64 <_fstat>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_fstat_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_fstat_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	20013048 	.word	0x20013048

08007014 <_isatty_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d06      	ldr	r5, [pc, #24]	@ (8007030 <_isatty_r+0x1c>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fc fe30 	bl	8003c84 <_isatty>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_isatty_r+0x1a>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_isatty_r+0x1a>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	20013048 	.word	0x20013048

08007034 <_init>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	bf00      	nop
 8007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703a:	bc08      	pop	{r3}
 800703c:	469e      	mov	lr, r3
 800703e:	4770      	bx	lr

08007040 <_fini>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr
