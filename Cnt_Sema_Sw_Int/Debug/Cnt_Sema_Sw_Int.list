
Cnt_Sema_Sw_Int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005aa0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e60  20000014  08005ab4  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e74  08005ab4  00007e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013503  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db3  00000000  00000000  0001a547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df4  00000000  00000000  0001e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217e4  00000000  00000000  0001f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157e3  00000000  00000000  00040aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0837  00000000  00000000  0005628b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  00136b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059a8 	.word	0x080059a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080059a8 	.word	0x080059a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f103 0208 	add.w	r2, r3, #8
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f04f 32ff 	mov.w	r2, #4294967295
 8000528:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f103 0208 	add.w	r2, r3, #8
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f103 0208 	add.w	r2, r3, #8
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000580:	d103      	bne.n	800058a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e00c      	b.n	80005a4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3308      	adds	r3, #8
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e002      	b.n	8000598 <vListInsert+0x2e>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d2f6      	bcs.n	8000592 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6892      	ldr	r2, [r2, #8]
 80005f2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	6852      	ldr	r2, [r2, #4]
 80005fc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d103      	bne.n	8000610 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10b      	bne.n	8000660 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d05d      	beq.n	8000722 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800066a:	2b00      	cmp	r3, #0
 800066c:	d059      	beq.n	8000722 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000676:	2100      	movs	r1, #0
 8000678:	fba3 2302 	umull	r2, r3, r3, r2
 800067c:	2b00      	cmp	r3, #0
 800067e:	d000      	beq.n	8000682 <xQueueGenericReset+0x52>
 8000680:	2101      	movs	r1, #1
 8000682:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000684:	2b00      	cmp	r3, #0
 8000686:	d14c      	bne.n	8000722 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000688:	f002 fa54 	bl	8002b34 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000694:	6939      	ldr	r1, [r7, #16]
 8000696:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	441a      	add	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	2200      	movs	r2, #0
 80006a6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006b8:	3b01      	subs	r3, #1
 80006ba:	6939      	ldr	r1, [r7, #16]
 80006bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006be:	fb01 f303 	mul.w	r3, r1, r3
 80006c2:	441a      	add	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	22ff      	movs	r2, #255	@ 0xff
 80006cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d114      	bne.n	8000708 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01a      	beq.n	800071c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	3310      	adds	r3, #16
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9ea 	bl	8001ac4 <xTaskRemoveFromEventList>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d012      	beq.n	800071c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <xQueueGenericReset+0x120>)
 80006f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	f3bf 8f4f 	dsb	sy
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	e009      	b.n	800071c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3310      	adds	r3, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff feff 	bl	8000510 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	3324      	adds	r3, #36	@ 0x24
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fefa 	bl	8000510 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800071c:	f002 fa3c 	bl	8002b98 <vPortExitCritical>
 8000720:	e001      	b.n	8000726 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10b      	bne.n	8000744 <xQueueGenericReset+0x114>
    __asm volatile
 800072c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000730:	f383 8811 	msr	BASEPRI, r3
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	f3bf 8f4f 	dsb	sy
 800073c:	60bb      	str	r3, [r7, #8]
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000744:	697b      	ldr	r3, [r7, #20]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000ed04 	.word	0xe000ed04

08000754 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af02      	add	r7, sp, #8
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d02e      	beq.n	80007ca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800076c:	2100      	movs	r1, #0
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	fba3 2302 	umull	r2, r3, r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d000      	beq.n	800077c <xQueueGenericCreate+0x28>
 800077a:	2101      	movs	r1, #1
 800077c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800077e:	2b00      	cmp	r3, #0
 8000780:	d123      	bne.n	80007ca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800078a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800078e:	d81c      	bhi.n	80007ca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	3350      	adds	r3, #80	@ 0x50
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 faee 	bl	8002d80 <pvPortMalloc>
 80007a4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01d      	beq.n	80007e8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3350      	adds	r3, #80	@ 0x50
 80007b4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4613      	mov	r3, r2
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f000 f815 	bl	80007f2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80007c8:	e00e      	b.n	80007e8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10b      	bne.n	80007e8 <xQueueGenericCreate+0x94>
    __asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	613b      	str	r3, [r7, #16]
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80007e8:	69fb      	ldr	r3, [r7, #28]
    }
 80007ea:	4618      	mov	r0, r3
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e002      	b.n	8000814 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000820:	2101      	movs	r1, #1
 8000822:	69b8      	ldr	r0, [r7, #24]
 8000824:	f7ff ff04 	bl	8000630 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d010      	beq.n	800086e <xQueueCreateCountingSemaphore+0x36>
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d80c      	bhi.n	800086e <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000854:	2202      	movs	r2, #2
 8000856:	2100      	movs	r1, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff7b 	bl	8000754 <xQueueGenericCreate>
 800085e:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d012      	beq.n	800088c <xQueueCreateCountingSemaphore+0x54>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800086c:	e00e      	b.n	800088c <xQueueCreateCountingSemaphore+0x54>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10b      	bne.n	800088c <xQueueCreateCountingSemaphore+0x54>
    __asm volatile
 8000874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000878:	f383 8811 	msr	BASEPRI, r3
 800087c:	f3bf 8f6f 	isb	sy
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	60bb      	str	r3, [r7, #8]
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 800088c:	68fb      	ldr	r3, [r7, #12]
    }
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b090      	sub	sp, #64	@ 0x40
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80008a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10b      	bne.n	80008c2 <xQueueGiveFromISR+0x2c>
    __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	e7fd      	b.n	80008be <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80008c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00b      	beq.n	80008e2 <xQueueGiveFromISR+0x4c>
    __asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	623b      	str	r3, [r7, #32]
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80008e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <xQueueGiveFromISR+0x5c>
 80008ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <xQueueGiveFromISR+0x60>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <xQueueGiveFromISR+0x62>
 80008f6:	2300      	movs	r3, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10b      	bne.n	8000914 <xQueueGiveFromISR+0x7e>
    __asm volatile
 80008fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	61fb      	str	r3, [r7, #28]
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000914:	f002 f9f2 	bl	8002cfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000918:	f3ef 8211 	mrs	r2, BASEPRI
 800091c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000920:	f383 8811 	msr	BASEPRI, r3
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	61ba      	str	r2, [r7, #24]
 800092e:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000930:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000938:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800093a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800093c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000940:	429a      	cmp	r2, r3
 8000942:	d243      	bcs.n	80009cc <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800094a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800094e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000954:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000956:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800095a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095e:	d112      	bne.n	8000986 <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000964:	2b00      	cmp	r3, #0
 8000966:	d02e      	beq.n	80009c6 <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800096a:	3324      	adds	r3, #36	@ 0x24
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f8a9 	bl	8001ac4 <xTaskRemoveFromEventList>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d026      	beq.n	80009c6 <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d023      	beq.n	80009c6 <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e01f      	b.n	80009c6 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000986:	f000 fead 	bl	80016e4 <uxTaskGetNumberOfTasks>
 800098a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800098c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000992:	429a      	cmp	r2, r3
 8000994:	d917      	bls.n	80009c6 <xQueueGiveFromISR+0x130>
 8000996:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800099a:	2b7f      	cmp	r3, #127	@ 0x7f
 800099c:	d10b      	bne.n	80009b6 <xQueueGiveFromISR+0x120>
    __asm volatile
 800099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009a2:	f383 8811 	msr	BASEPRI, r3
 80009a6:	f3bf 8f6f 	isb	sy
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	613b      	str	r3, [r7, #16]
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <xQueueGiveFromISR+0x11c>
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80009c6:	2301      	movs	r3, #1
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009ca:	e001      	b.n	80009d0 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80009da:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 80009dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3740      	adds	r7, #64	@ 0x40
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80009fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10b      	bne.n	8000a1a <xQueueReceive+0x32>
    __asm volatile
 8000a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a06:	f383 8811 	msr	BASEPRI, r3
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	f3bf 8f4f 	dsb	sy
 8000a12:	623b      	str	r3, [r7, #32]
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	e7fd      	b.n	8000a16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <xQueueReceive+0x40>
 8000a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <xQueueReceive+0x44>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <xQueueReceive+0x46>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10b      	bne.n	8000a4a <xQueueReceive+0x62>
    __asm volatile
 8000a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a36:	f383 8811 	msr	BASEPRI, r3
 8000a3a:	f3bf 8f6f 	isb	sy
 8000a3e:	f3bf 8f4f 	dsb	sy
 8000a42:	61fb      	str	r3, [r7, #28]
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	e7fd      	b.n	8000a46 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a4a:	f001 fa51 	bl	8001ef0 <xTaskGetSchedulerState>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <xQueueReceive+0x72>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <xQueueReceive+0x76>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <xQueueReceive+0x78>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10b      	bne.n	8000a7c <xQueueReceive+0x94>
    __asm volatile
 8000a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a68:	f383 8811 	msr	BASEPRI, r3
 8000a6c:	f3bf 8f6f 	isb	sy
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	61bb      	str	r3, [r7, #24]
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a7c:	f002 f85a 	bl	8002b34 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d01f      	beq.n	8000acc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a90:	f000 f9a4 	bl	8000ddc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00f      	beq.n	8000ac4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa6:	3310      	adds	r3, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f80b 	bl	8001ac4 <xTaskRemoveFromEventList>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba8 <xQueueReceive+0x1c0>)
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000ac4:	f002 f868 	bl	8002b98 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e069      	b.n	8000ba0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ad2:	f002 f861 	bl	8002b98 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e062      	b.n	8000ba0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d106      	bne.n	8000aee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 f8c7 	bl	8001c78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000aee:	f002 f853 	bl	8002b98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000af2:	f000 fcd1 	bl	8001498 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000af6:	f002 f81d 	bl	8002b34 <vPortEnterCritical>
 8000afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b06:	d103      	bne.n	8000b10 <xQueueReceive+0x128>
 8000b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d103      	bne.n	8000b26 <xQueueReceive+0x13e>
 8000b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000b26:	f002 f837 	bl	8002b98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b2a:	1d3a      	adds	r2, r7, #4
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f8b6 	bl	8001ca4 <xTaskCheckForTimeOut>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d123      	bne.n	8000b86 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b40:	f000 f9c4 	bl	8000ecc <prvIsQueueEmpty>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d017      	beq.n	8000b7a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4c:	3324      	adds	r3, #36	@ 0x24
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 ff4a 	bl	80019ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b5a:	f000 f965 	bl	8000e28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b5e:	f000 fca9 	bl	80014b4 <xTaskResumeAll>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d189      	bne.n	8000a7c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <xQueueReceive+0x1c0>)
 8000b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	f3bf 8f4f 	dsb	sy
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	e780      	b.n	8000a7c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b7c:	f000 f954 	bl	8000e28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b80:	f000 fc98 	bl	80014b4 <xTaskResumeAll>
 8000b84:	e77a      	b.n	8000a7c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b88:	f000 f94e 	bl	8000e28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b8c:	f000 fc92 	bl	80014b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b92:	f000 f99b 	bl	8000ecc <prvIsQueueEmpty>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f43f af6f 	beq.w	8000a7c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000b9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3730      	adds	r7, #48	@ 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	e000ed04 	.word	0xe000ed04

08000bac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10b      	bne.n	8000be0 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bcc:	f383 8811 	msr	BASEPRI, r3
 8000bd0:	f3bf 8f6f 	isb	sy
 8000bd4:	f3bf 8f4f 	dsb	sy
 8000bd8:	61bb      	str	r3, [r7, #24]
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	617b      	str	r3, [r7, #20]
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c00:	f001 f976 	bl	8001ef0 <xTaskGetSchedulerState>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <xQueueSemaphoreTake+0x64>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <xQueueSemaphoreTake+0x68>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <xQueueSemaphoreTake+0x6a>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10b      	bne.n	8000c32 <xQueueSemaphoreTake+0x86>
    __asm volatile
 8000c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c1e:	f383 8811 	msr	BASEPRI, r3
 8000c22:	f3bf 8f6f 	isb	sy
 8000c26:	f3bf 8f4f 	dsb	sy
 8000c2a:	613b      	str	r3, [r7, #16]
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c32:	f001 ff7f 	bl	8002b34 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c3a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d024      	beq.n	8000c8c <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d104      	bne.n	8000c5c <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000c52:	f001 fac7 	bl	80021e4 <pvTaskIncrementMutexHeldCount>
 8000c56:	4602      	mov	r2, r0
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00f      	beq.n	8000c84 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	3310      	adds	r3, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 ff2b 	bl	8001ac4 <xTaskRemoveFromEventList>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c74:	4b4c      	ldr	r3, [pc, #304]	@ (8000da8 <xQueueSemaphoreTake+0x1fc>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c84:	f001 ff88 	bl	8002b98 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e089      	b.n	8000da0 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000c92:	f001 ff81 	bl	8002b98 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e082      	b.n	8000da0 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d106      	bne.n	8000cae <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 ffe7 	bl	8001c78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cae:	f001 ff73 	bl	8002b98 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cb2:	f000 fbf1 	bl	8001498 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cb6:	f001 ff3d 	bl	8002b34 <vPortEnterCritical>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc6:	d103      	bne.n	8000cd0 <xQueueSemaphoreTake+0x124>
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d103      	bne.n	8000ce6 <xQueueSemaphoreTake+0x13a>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ce6:	f001 ff57 	bl	8002b98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cea:	463a      	mov	r2, r7
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 ffd6 	bl	8001ca4 <xTaskCheckForTimeOut>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d132      	bne.n	8000d64 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d00:	f000 f8e4 	bl	8000ecc <prvIsQueueEmpty>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d026      	beq.n	8000d58 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8000d12:	f001 ff0f 	bl	8002b34 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f906 	bl	8001f2c <xTaskPriorityInherit>
 8000d20:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8000d22:	f001 ff39 	bl	8002b98 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	3324      	adds	r3, #36	@ 0x24
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fe5c 	bl	80019ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d36:	f000 f877 	bl	8000e28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d3a:	f000 fbbb 	bl	80014b4 <xTaskResumeAll>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f af76 	bne.w	8000c32 <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <xQueueSemaphoreTake+0x1fc>)
 8000d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	f3bf 8f6f 	isb	sy
 8000d56:	e76c      	b.n	8000c32 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000d58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d5a:	f000 f865 	bl	8000e28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d5e:	f000 fba9 	bl	80014b4 <xTaskResumeAll>
 8000d62:	e766      	b.n	8000c32 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000d64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d66:	f000 f85f 	bl	8000e28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d6a:	f000 fba3 	bl	80014b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d70:	f000 f8ac 	bl	8000ecc <prvIsQueueEmpty>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f43f af5b 	beq.w	8000c32 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00d      	beq.n	8000d9e <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8000d82:	f001 fed7 	bl	8002b34 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000d86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d88:	f000 f810 	bl	8000dac <prvGetDisinheritPriorityAfterTimeout>
 8000d8c:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	69f9      	ldr	r1, [r7, #28]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f969 	bl	800206c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000d9a:	f001 fefd 	bl	8002b98 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000d9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3730      	adds	r7, #48	@ 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e000ed04 	.word	0xe000ed04

08000dac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1c3 0305 	rsb	r3, r3, #5
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e001      	b.n	8000dce <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000dce:	68fb      	ldr	r3, [r7, #12]
    }
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d018      	beq.n	8000e20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	441a      	add	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d303      	bcc.n	8000e10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68d9      	ldr	r1, [r3, #12]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6838      	ldr	r0, [r7, #0]
 8000e1c:	f004 fdb6 	bl	800598c <memcpy>
    }
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e30:	f001 fe80 	bl	8002b34 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000e3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e3c:	e011      	b.n	8000e62 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d012      	beq.n	8000e6c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3324      	adds	r3, #36	@ 0x24
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fe3a 	bl	8001ac4 <xTaskRemoveFromEventList>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000e56:	f000 ff8d 	bl	8001d74 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	dce9      	bgt.n	8000e3e <prvUnlockQueue+0x16>
 8000e6a:	e000      	b.n	8000e6e <prvUnlockQueue+0x46>
                    break;
 8000e6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	22ff      	movs	r2, #255	@ 0xff
 8000e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000e76:	f001 fe8f 	bl	8002b98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e7a:	f001 fe5b 	bl	8002b34 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e86:	e011      	b.n	8000eac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d012      	beq.n	8000eb6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3310      	adds	r3, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 fe15 	bl	8001ac4 <xTaskRemoveFromEventList>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ea0:	f000 ff68 	bl	8001d74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dce9      	bgt.n	8000e88 <prvUnlockQueue+0x60>
 8000eb4:	e000      	b.n	8000eb8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000eb6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	22ff      	movs	r2, #255	@ 0xff
 8000ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000ec0:	f001 fe6a 	bl	8002b98 <vPortExitCritical>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ed4:	f001 fe2e 	bl	8002b34 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e001      	b.n	8000eea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000eea:	f001 fe55 	bl	8002b98 <vPortExitCritical>

    return xReturn;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10b      	bne.n	8000f24 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f10:	f383 8811 	msr	BASEPRI, r3
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	60fb      	str	r3, [r7, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d024      	beq.n	8000f74 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e01e      	b.n	8000f6e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000f30:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <vQueueAddToRegistry+0x9c>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d105      	bne.n	8000f4c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <vQueueAddToRegistry+0x9c>)
 8000f46:	4413      	add	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
                    break;
 8000f4a:	e013      	b.n	8000f74 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <vQueueAddToRegistry+0x70>
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <vQueueAddToRegistry+0x9c>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <vQueueAddToRegistry+0x9c>)
 8000f64:	4413      	add	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	d9dd      	bls.n	8000f30 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000030 	.word	0x20000030

08000f98 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000fa8:	f001 fdc4 	bl	8002b34 <vPortEnterCritical>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d103      	bne.n	8000fc2 <vQueueWaitForMessageRestricted+0x2a>
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fce:	d103      	bne.n	8000fd8 <vQueueWaitForMessageRestricted+0x40>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000fd8:	f001 fdde 	bl	8002b98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d106      	bne.n	8000ff2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3324      	adds	r3, #36	@ 0x24
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fd23 	bl	8001a38 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff18 	bl	8000e28 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af04      	add	r7, sp, #16
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 feb4 	bl	8002d80 <pvPortMalloc>
 8001018:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001020:	2058      	movs	r0, #88	@ 0x58
 8001022:	f001 fead 	bl	8002d80 <pvPortMalloc>
 8001026:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800102e:	2258      	movs	r2, #88	@ 0x58
 8001030:	2100      	movs	r1, #0
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f004 fc7e 	bl	8005934 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30
 800103e:	e005      	b.n	800104c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001040:	6938      	ldr	r0, [r7, #16]
 8001042:	f001 ffcf 	bl	8002fe4 <vPortFree>
 8001046:	e001      	b.n	800104c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00d      	beq.n	800106e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001052:	2300      	movs	r3, #0
 8001054:	9303      	str	r3, [sp, #12]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f828 	bl	80010be <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800106e:	697b      	ldr	r3, [r7, #20]
    }
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ffb3 	bl	8001000 <prvCreateTask>
 800109a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80010a2:	6938      	ldr	r0, [r7, #16]
 80010a4:	f000 f89c 	bl	80011e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e002      	b.n	80010b4 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80010b4:	697b      	ldr	r3, [r7, #20]
    }
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b088      	sub	sp, #32
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	461a      	mov	r2, r3
 80010d6:	21a5      	movs	r1, #165	@ 0xa5
 80010d8:	f004 fc2c 	bl	8005934 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010e6:	3b01      	subs	r3, #1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	617b      	str	r3, [r7, #20]
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01e      	beq.n	800115c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e012      	b.n	800114a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	7819      	ldrb	r1, [r3, #0]
 800112c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4413      	add	r3, r2
 8001132:	3334      	adds	r3, #52	@ 0x34
 8001134:	460a      	mov	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	3301      	adds	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	2b09      	cmp	r3, #9
 800114e:	d9e9      	bls.n	8001124 <prvInitialiseNewTask+0x66>
 8001150:	e000      	b.n	8001154 <prvInitialiseNewTask+0x96>
            {
                break;
 8001152:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001156:	2200      	movs	r2, #0
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800115c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115e:	2b04      	cmp	r3, #4
 8001160:	d90b      	bls.n	800117a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	613b      	str	r3, [r7, #16]
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117c:	2b04      	cmp	r3, #4
 800117e:	d901      	bls.n	8001184 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001180:	2304      	movs	r3, #4
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800118a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800118c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800118e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001192:	3304      	adds	r3, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9db 	bl	8000550 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800119a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800119c:	3318      	adds	r3, #24
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9d6 	bl	8000550 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80011aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ac:	f1c3 0205 	rsb	r2, r3, #5
 80011b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	69b8      	ldr	r0, [r7, #24]
 80011c0:	f001 fb3c 	bl	800283c <pxPortInitialiseStack>
 80011c4:	4602      	mov	r2, r0
 80011c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80011ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80011e8:	f001 fca4 	bl	8002b34 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80011ec:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <prvAddNewTaskToReadyList+0x114>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a40      	ldr	r2, [pc, #256]	@ (80012f4 <prvAddNewTaskToReadyList+0x114>)
 80011f4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <prvAddNewTaskToReadyList+0x118>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80011fe:	4a3e      	ldr	r2, [pc, #248]	@ (80012f8 <prvAddNewTaskToReadyList+0x118>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001204:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <prvAddNewTaskToReadyList+0x114>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d110      	bne.n	800122e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800120c:	f000 fdd6 	bl	8001dbc <prvInitialiseTaskLists>
 8001210:	e00d      	b.n	800122e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001212:	4b3a      	ldr	r3, [pc, #232]	@ (80012fc <prvAddNewTaskToReadyList+0x11c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <prvAddNewTaskToReadyList+0x118>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	429a      	cmp	r2, r3
 8001226:	d802      	bhi.n	800122e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001228:	4a33      	ldr	r2, [pc, #204]	@ (80012f8 <prvAddNewTaskToReadyList+0x118>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800122e:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <prvAddNewTaskToReadyList+0x120>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <prvAddNewTaskToReadyList+0x120>)
 8001236:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001238:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <prvAddNewTaskToReadyList+0x120>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	2201      	movs	r2, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <prvAddNewTaskToReadyList+0x124>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	4a2d      	ldr	r2, [pc, #180]	@ (8001304 <prvAddNewTaskToReadyList+0x124>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001256:	492c      	ldr	r1, [pc, #176]	@ (8001308 <prvAddNewTaskToReadyList+0x128>)
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	3204      	adds	r2, #4
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1d1a      	adds	r2, r3, #4
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <prvAddNewTaskToReadyList+0x128>)
 8001296:	441a      	add	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a0:	4919      	ldr	r1, [pc, #100]	@ (8001308 <prvAddNewTaskToReadyList+0x128>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012b2:	1c59      	adds	r1, r3, #1
 80012b4:	4814      	ldr	r0, [pc, #80]	@ (8001308 <prvAddNewTaskToReadyList+0x128>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4403      	add	r3, r0
 80012c0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80012c2:	f001 fc69 	bl	8002b98 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <prvAddNewTaskToReadyList+0x11c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00e      	beq.n	80012ec <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <prvAddNewTaskToReadyList+0x118>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <prvAddNewTaskToReadyList+0x10c>
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <prvAddNewTaskToReadyList+0x12c>)
 80012de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f3bf 8f4f 	dsb	sy
 80012e8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000148 	.word	0x20000148
 80012f8:	20000070 	.word	0x20000070
 80012fc:	20000154 	.word	0x20000154
 8001300:	20000164 	.word	0x20000164
 8001304:	20000150 	.word	0x20000150
 8001308:	20000074 	.word	0x20000074
 800130c:	e000ed04 	.word	0xe000ed04

08001310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d018      	beq.n	8001354 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8001322:	f000 f8b9 	bl	8001498 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <vTaskDelay+0x64>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d00b      	beq.n	8001346 <vTaskDelay+0x36>
    __asm volatile
 800132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	60bb      	str	r3, [r7, #8]
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	e7fd      	b.n	8001342 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001346:	2100      	movs	r1, #0
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 ff63 	bl	8002214 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800134e:	f000 f8b1 	bl	80014b4 <xTaskResumeAll>
 8001352:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <vTaskDelay+0x68>)
 800135c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f3bf 8f4f 	dsb	sy
 8001366:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000170 	.word	0x20000170
 8001378:	e000ed04 	.word	0xe000ed04

0800137c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e011      	b.n	80013b4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001390:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <prvCreateIdleTasks+0x88>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	7819      	ldrb	r1, [r3, #0]
 8001398:	1d3a      	adds	r2, r7, #4
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	460a      	mov	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80013a2:	1d3a      	adds	r2, r7, #4
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	ddea      	ble.n	8001390 <prvCreateIdleTasks+0x14>
 80013ba:	e000      	b.n	80013be <prvCreateIdleTasks+0x42>
        {
            break;
 80013bc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	e015      	b.n	80013f0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <prvCreateIdleTasks+0x8c>)
 80013c6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <prvCreateIdleTasks+0x90>)
 80013ce:	4413      	add	r3, r2
 80013d0:	1d39      	adds	r1, r7, #4
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	2300      	movs	r3, #0
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	2282      	movs	r2, #130	@ 0x82
 80013dc:	6938      	ldr	r0, [r7, #16]
 80013de:	f7ff fe4b 	bl	8001078 <xTaskCreate>
 80013e2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dde6      	ble.n	80013c4 <prvCreateIdleTasks+0x48>
 80013f6:	e000      	b.n	80013fa <prvCreateIdleTasks+0x7e>
        {
            break;
 80013f8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80013fa:	69fb      	ldr	r3, [r7, #28]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	080059c0 	.word	0x080059c0
 8001408:	08001d8d 	.word	0x08001d8d
 800140c:	2000016c 	.word	0x2000016c

08001410 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001416:	f7ff ffb1 	bl	800137c <prvCreateIdleTasks>
 800141a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001422:	f000 ff79 	bl	8002318 <xTimerCreateTimerTask>
 8001426:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d116      	bne.n	800145c <vTaskStartScheduler+0x4c>
    __asm volatile
 800142e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	f3bf 8f6f 	isb	sy
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	60bb      	str	r3, [r7, #8]
}
 8001440:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <vTaskStartScheduler+0x78>)
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <vTaskStartScheduler+0x7c>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <vTaskStartScheduler+0x80>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001456:	f001 fa7d 	bl	8002954 <xPortStartScheduler>
 800145a:	e00f      	b.n	800147c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001462:	d10b      	bne.n	800147c <vTaskStartScheduler+0x6c>
    __asm volatile
 8001464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001468:	f383 8811 	msr	BASEPRI, r3
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f3bf 8f4f 	dsb	sy
 8001474:	607b      	str	r3, [r7, #4]
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <vTaskStartScheduler+0x84>)
 800147e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000168 	.word	0x20000168
 800148c:	20000154 	.word	0x20000154
 8001490:	2000014c 	.word	0x2000014c
 8001494:	20000000 	.word	0x20000000

08001498 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <vTaskSuspendAll+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <vTaskSuspendAll+0x18>)
 80014a4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	20000170 	.word	0x20000170

080014b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80014c2:	f001 fb37 	bl	8002b34 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80014ca:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <xTaskResumeAll+0x1ec>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10b      	bne.n	80014ea <xTaskResumeAll+0x36>
    __asm volatile
 80014d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	603b      	str	r3, [r7, #0]
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80014ea:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <xTaskResumeAll+0x1ec>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	4a6b      	ldr	r2, [pc, #428]	@ (80016a0 <xTaskResumeAll+0x1ec>)
 80014f2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80014f4:	4b6a      	ldr	r3, [pc, #424]	@ (80016a0 <xTaskResumeAll+0x1ec>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 80ca 	bne.w	8001692 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014fe:	4b69      	ldr	r3, [pc, #420]	@ (80016a4 <xTaskResumeAll+0x1f0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80c5 	beq.w	8001692 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001508:	e08e      	b.n	8001628 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800150a:	4b67      	ldr	r3, [pc, #412]	@ (80016a8 <xTaskResumeAll+0x1f4>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	6a12      	ldr	r2, [r2, #32]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	69d2      	ldr	r2, [r2, #28]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3318      	adds	r3, #24
 8001534:	429a      	cmp	r2, r3
 8001536:	d103      	bne.n	8001540 <xTaskResumeAll+0x8c>
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	6892      	ldr	r2, [r2, #8]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	429a      	cmp	r2, r3
 8001574:	d103      	bne.n	800157e <xTaskResumeAll+0xca>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001592:	2201      	movs	r2, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	4b45      	ldr	r3, [pc, #276]	@ (80016ac <xTaskResumeAll+0x1f8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <xTaskResumeAll+0x1f8>)
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a4:	4942      	ldr	r1, [pc, #264]	@ (80016b0 <xTaskResumeAll+0x1fc>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3304      	adds	r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	3204      	adds	r2, #4
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <xTaskResumeAll+0x1fc>)
 80015e4:	441a      	add	r2, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ee:	4930      	ldr	r1, [pc, #192]	@ (80016b0 <xTaskResumeAll+0x1fc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	482b      	ldr	r0, [pc, #172]	@ (80016b0 <xTaskResumeAll+0x1fc>)
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4403      	add	r3, r0
 800160e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <xTaskResumeAll+0x200>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d904      	bls.n	8001628 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800161e:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <xTaskResumeAll+0x204>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2101      	movs	r1, #1
 8001624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <xTaskResumeAll+0x1f4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f af6c 	bne.w	800150a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001638:	f000 fc3e 	bl	8001eb8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <xTaskResumeAll+0x208>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d012      	beq.n	800166e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001648:	f000 f858 	bl	80016fc <xTaskIncrementTick>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001652:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <xTaskResumeAll+0x204>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2101      	movs	r1, #1
 8001658:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3b01      	subs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ef      	bne.n	8001648 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <xTaskResumeAll+0x208>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <xTaskResumeAll+0x204>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <xTaskResumeAll+0x200>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <xTaskResumeAll+0x20c>)
 8001684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001692:	f001 fa81 	bl	8002b98 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001696:	69bb      	ldr	r3, [r7, #24]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000170 	.word	0x20000170
 80016a4:	20000148 	.word	0x20000148
 80016a8:	20000108 	.word	0x20000108
 80016ac:	20000150 	.word	0x20000150
 80016b0:	20000074 	.word	0x20000074
 80016b4:	20000070 	.word	0x20000070
 80016b8:	2000015c 	.word	0x2000015c
 80016bc:	20000158 	.word	0x20000158
 80016c0:	e000ed04 	.word	0xe000ed04

080016c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <xTaskGetTickCount+0x1c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2000014c 	.word	0x2000014c

080016e4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <uxTaskGetNumberOfTasks+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000148 	.word	0x20000148

080016fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <xTaskIncrementTick+0x208>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80ef 	bne.w	80018ee <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001710:	4b7d      	ldr	r3, [pc, #500]	@ (8001908 <xTaskIncrementTick+0x20c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001718:	4a7b      	ldr	r2, [pc, #492]	@ (8001908 <xTaskIncrementTick+0x20c>)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d121      	bne.n	8001768 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001724:	4b79      	ldr	r3, [pc, #484]	@ (800190c <xTaskIncrementTick+0x210>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <xTaskIncrementTick+0x4a>
    __asm volatile
 800172e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	607b      	str	r3, [r7, #4]
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <xTaskIncrementTick+0x46>
 8001746:	4b71      	ldr	r3, [pc, #452]	@ (800190c <xTaskIncrementTick+0x210>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	4b70      	ldr	r3, [pc, #448]	@ (8001910 <xTaskIncrementTick+0x214>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6e      	ldr	r2, [pc, #440]	@ (800190c <xTaskIncrementTick+0x210>)
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4a6e      	ldr	r2, [pc, #440]	@ (8001910 <xTaskIncrementTick+0x214>)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b6e      	ldr	r3, [pc, #440]	@ (8001914 <xTaskIncrementTick+0x218>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a6c      	ldr	r2, [pc, #432]	@ (8001914 <xTaskIncrementTick+0x218>)
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	f000 fba8 	bl	8001eb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001768:	4b6b      	ldr	r3, [pc, #428]	@ (8001918 <xTaskIncrementTick+0x21c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	429a      	cmp	r2, r3
 8001770:	f0c0 80a8 	bcc.w	80018c4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001774:	4b65      	ldr	r3, [pc, #404]	@ (800190c <xTaskIncrementTick+0x210>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800177e:	4b66      	ldr	r3, [pc, #408]	@ (8001918 <xTaskIncrementTick+0x21c>)
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	601a      	str	r2, [r3, #0]
                    break;
 8001786:	e09d      	b.n	80018c4 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001788:	4b60      	ldr	r3, [pc, #384]	@ (800190c <xTaskIncrementTick+0x210>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	d203      	bcs.n	80017a8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001918 <xTaskIncrementTick+0x21c>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6013      	str	r3, [r2, #0]
                        break;
 80017a6:	e08d      	b.n	80018c4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	68d2      	ldr	r2, [r2, #12]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	6892      	ldr	r2, [r2, #8]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	3304      	adds	r3, #4
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d103      	bne.n	80017d6 <xTaskIncrementTick+0xda>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01e      	beq.n	800182c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	6a12      	ldr	r2, [r2, #32]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	69d2      	ldr	r2, [r2, #28]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3318      	adds	r3, #24
 8001810:	429a      	cmp	r2, r3
 8001812:	d103      	bne.n	800181c <xTaskIncrementTick+0x120>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	4b39      	ldr	r3, [pc, #228]	@ (800191c <xTaskIncrementTick+0x220>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4313      	orrs	r3, r2
 800183a:	4a38      	ldr	r2, [pc, #224]	@ (800191c <xTaskIncrementTick+0x220>)
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001842:	4937      	ldr	r1, [pc, #220]	@ (8001920 <xTaskIncrementTick+0x224>)
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	3204      	adds	r2, #4
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	1d1a      	adds	r2, r3, #4
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <xTaskIncrementTick+0x224>)
 8001882:	441a      	add	r2, r3
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188c:	4924      	ldr	r1, [pc, #144]	@ (8001920 <xTaskIncrementTick+0x224>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	481f      	ldr	r0, [pc, #124]	@ (8001920 <xTaskIncrementTick+0x224>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4403      	add	r3, r0
 80018ac:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <xTaskIncrementTick+0x228>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f67f af5b 	bls.w	8001774 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018c2:	e757      	b.n	8001774 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80018c4:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <xTaskIncrementTick+0x228>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ca:	4915      	ldr	r1, [pc, #84]	@ (8001920 <xTaskIncrementTick+0x224>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d901      	bls.n	80018e0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <xTaskIncrementTick+0x22c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e004      	b.n	80018f8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <xTaskIncrementTick+0x230>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <xTaskIncrementTick+0x230>)
 80018f6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3728      	adds	r7, #40	@ 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000170 	.word	0x20000170
 8001908:	2000014c 	.word	0x2000014c
 800190c:	20000100 	.word	0x20000100
 8001910:	20000104 	.word	0x20000104
 8001914:	20000160 	.word	0x20000160
 8001918:	20000168 	.word	0x20000168
 800191c:	20000150 	.word	0x20000150
 8001920:	20000074 	.word	0x20000074
 8001924:	20000070 	.word	0x20000070
 8001928:	2000015c 	.word	0x2000015c
 800192c:	20000158 	.word	0x20000158

08001930 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001936:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <vTaskSwitchContext+0xa8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <vTaskSwitchContext+0xac>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001944:	e041      	b.n	80019ca <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <vTaskSwitchContext+0xac>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <vTaskSwitchContext+0xb0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800195a:	7afb      	ldrb	r3, [r7, #11]
 800195c:	f1c3 031f 	rsb	r3, r3, #31
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4920      	ldr	r1, [pc, #128]	@ (80019e4 <vTaskSwitchContext+0xb4>)
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10b      	bne.n	800198e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800197a:	f383 8811 	msr	BASEPRI, r3
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f3bf 8f4f 	dsb	sy
 8001986:	607b      	str	r3, [r7, #4]
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	e7fd      	b.n	800198a <vTaskSwitchContext+0x5a>
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <vTaskSwitchContext+0xb4>)
 800199a:	4413      	add	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	3308      	adds	r3, #8
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d103      	bne.n	80019bc <vTaskSwitchContext+0x8c>
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <vTaskSwitchContext+0xb8>)
 80019c4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <vTaskSwitchContext+0xb8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
    }
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000170 	.word	0x20000170
 80019dc:	2000015c 	.word	0x2000015c
 80019e0:	20000150 	.word	0x20000150
 80019e4:	20000074 	.word	0x20000074
 80019e8:	20000070 	.word	0x20000070

080019ec <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10b      	bne.n	8001a14 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80019fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	60fb      	str	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <vTaskPlaceOnEventList+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3318      	adds	r3, #24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe fda4 	bl	800056a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a22:	2101      	movs	r1, #1
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f000 fbf5 	bl	8002214 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000070 	.word	0x20000070

08001a38 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10b      	bne.n	8001a62 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	613b      	str	r3, [r7, #16]
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	61da      	str	r2, [r3, #28]
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	621a      	str	r2, [r3, #32]
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	3218      	adds	r2, #24
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f103 0218 	add.w	r2, r3, #24
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	68b8      	ldr	r0, [r7, #8]
 8001ab4:	f000 fbae 	bl	8002214 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000070 	.word	0x20000070

08001ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b08b      	sub	sp, #44	@ 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	60fb      	str	r3, [r7, #12]
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	e7fd      	b.n	8001aee <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	6a12      	ldr	r2, [r2, #32]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	69d2      	ldr	r2, [r2, #28]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	3318      	adds	r3, #24
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d103      	bne.n	8001b20 <xTaskRemoveFromEventList+0x5c>
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001b30:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <xTaskRemoveFromEventList+0x19c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d160      	bne.n	8001bfa <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	6a3a      	ldr	r2, [r7, #32]
 8001b44:	68d2      	ldr	r2, [r2, #12]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	6892      	ldr	r2, [r2, #8]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d103      	bne.n	8001b66 <xTaskRemoveFromEventList+0xa2>
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <xTaskRemoveFromEventList+0x1a0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	4a37      	ldr	r2, [pc, #220]	@ (8001c64 <xTaskRemoveFromEventList+0x1a0>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	4936      	ldr	r1, [pc, #216]	@ (8001c68 <xTaskRemoveFromEventList+0x1a4>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	3204      	adds	r2, #4
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	1d1a      	adds	r2, r3, #4
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <xTaskRemoveFromEventList+0x1a4>)
 8001bcc:	441a      	add	r2, r3
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd6:	4924      	ldr	r1, [pc, #144]	@ (8001c68 <xTaskRemoveFromEventList+0x1a4>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001be8:	1c59      	adds	r1, r3, #1
 8001bea:	481f      	ldr	r0, [pc, #124]	@ (8001c68 <xTaskRemoveFromEventList+0x1a4>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4403      	add	r3, r0
 8001bf6:	6019      	str	r1, [r3, #0]
 8001bf8:	e01b      	b.n	8001c32 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <xTaskRemoveFromEventList+0x1a8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	61da      	str	r2, [r3, #28]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	621a      	str	r2, [r3, #32]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	6a3a      	ldr	r2, [r7, #32]
 8001c14:	3218      	adds	r2, #24
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f103 0218 	add.w	r2, r3, #24
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <xTaskRemoveFromEventList+0x1a8>)
 8001c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c28:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <xTaskRemoveFromEventList+0x1a8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <xTaskRemoveFromEventList+0x1a8>)
 8001c30:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <xTaskRemoveFromEventList+0x1ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d905      	bls.n	8001c4c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <xTaskRemoveFromEventList+0x1b0>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e001      	b.n	8001c50 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	372c      	adds	r7, #44	@ 0x2c
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000170 	.word	0x20000170
 8001c64:	20000150 	.word	0x20000150
 8001c68:	20000074 	.word	0x20000074
 8001c6c:	20000108 	.word	0x20000108
 8001c70:	20000070 	.word	0x20000070
 8001c74:	2000015c 	.word	0x2000015c

08001c78 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <vTaskInternalSetTimeOutState+0x24>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <vTaskInternalSetTimeOutState+0x28>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000160 	.word	0x20000160
 8001ca0:	2000014c 	.word	0x2000014c

08001ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	613b      	str	r3, [r7, #16]
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	60fb      	str	r3, [r7, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	e7fd      	b.n	8001ce6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001cea:	f000 ff23 	bl	8002b34 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <xTaskCheckForTimeOut+0xc8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d102      	bne.n	8001d0e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	e026      	b.n	8001d5c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <xTaskCheckForTimeOut+0xcc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d00a      	beq.n	8001d30 <xTaskCheckForTimeOut+0x8c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d305      	bcc.n	8001d30 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e015      	b.n	8001d5c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20b      	bcs.n	8001d52 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	1ad2      	subs	r2, r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff96 	bl	8001c78 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	e004      	b.n	8001d5c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001d5c:	f000 ff1c 	bl	8002b98 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001d60:	69fb      	ldr	r3, [r7, #28]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000014c 	.word	0x2000014c
 8001d70:	20000160 	.word	0x20000160

08001d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <vTaskMissedYield+0x14>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	2000015c 	.word	0x2000015c

08001d8c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d94:	f000 f852 	bl	8001e3c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <prvIdleTask+0x28>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d9f9      	bls.n	8001d94 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <prvIdleTask+0x2c>)
 8001da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001db0:	e7f0      	b.n	8001d94 <prvIdleTask+0x8>
 8001db2:	bf00      	nop
 8001db4:	20000074 	.word	0x20000074
 8001db8:	e000ed04 	.word	0xe000ed04

08001dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	e00c      	b.n	8001de2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <prvInitialiseTaskLists+0x60>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb9a 	bl	8000510 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3301      	adds	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d9ef      	bls.n	8001dc8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001de8:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <prvInitialiseTaskLists+0x64>)
 8001dea:	f7fe fb91 	bl	8000510 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <prvInitialiseTaskLists+0x68>)
 8001df0:	f7fe fb8e 	bl	8000510 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <prvInitialiseTaskLists+0x6c>)
 8001df6:	f7fe fb8b 	bl	8000510 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001dfa:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <prvInitialiseTaskLists+0x70>)
 8001dfc:	f7fe fb88 	bl	8000510 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001e00:	480b      	ldr	r0, [pc, #44]	@ (8001e30 <prvInitialiseTaskLists+0x74>)
 8001e02:	f7fe fb85 	bl	8000510 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <prvInitialiseTaskLists+0x78>)
 8001e08:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <prvInitialiseTaskLists+0x64>)
 8001e0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <prvInitialiseTaskLists+0x7c>)
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <prvInitialiseTaskLists+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000074 	.word	0x20000074
 8001e20:	200000d8 	.word	0x200000d8
 8001e24:	200000ec 	.word	0x200000ec
 8001e28:	20000108 	.word	0x20000108
 8001e2c:	2000011c 	.word	0x2000011c
 8001e30:	20000134 	.word	0x20000134
 8001e34:	20000100 	.word	0x20000100
 8001e38:	20000104 	.word	0x20000104

08001e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e42:	e019      	b.n	8001e78 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001e44:	f000 fe76 	bl	8002b34 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e48:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <prvCheckTasksWaitingTermination+0x50>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fbc1 	bl	80005dc <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <prvCheckTasksWaitingTermination+0x54>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <prvCheckTasksWaitingTermination+0x54>)
 8001e62:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <prvCheckTasksWaitingTermination+0x58>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <prvCheckTasksWaitingTermination+0x58>)
 8001e6c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001e6e:	f000 fe93 	bl	8002b98 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f810 	bl	8001e98 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <prvCheckTasksWaitingTermination+0x58>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e1      	bne.n	8001e44 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000011c 	.word	0x2000011c
 8001e90:	20000148 	.word	0x20000148
 8001e94:	20000130 	.word	0x20000130

08001e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f89d 	bl	8002fe4 <vPortFree>
            vPortFree( pxTCB );
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f001 f89a 	bl	8002fe4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <prvResetNextTaskUnblockTime+0x30>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <prvResetNextTaskUnblockTime+0x34>)
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ece:	e005      	b.n	8001edc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <prvResetNextTaskUnblockTime+0x30>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <prvResetNextTaskUnblockTime+0x34>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000100 	.word	0x20000100
 8001eec:	20000168 	.word	0x20000168

08001ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <xTaskGetSchedulerState+0x34>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001efe:	2301      	movs	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	e008      	b.n	8001f16 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <xTaskGetSchedulerState+0x38>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e001      	b.n	8001f16 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001f16:	687b      	ldr	r3, [r7, #4]
    }
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000154 	.word	0x20000154
 8001f28:	20000170 	.word	0x20000170

08001f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8089 	beq.w	8002056 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f48:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <xTaskPriorityInherit+0x134>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d278      	bcs.n	8002044 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db06      	blt.n	8001f68 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8001f5a:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <xTaskPriorityInherit+0x134>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f1c3 0205 	rsb	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6959      	ldr	r1, [r3, #20]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4a3a      	ldr	r2, [pc, #232]	@ (8002064 <xTaskPriorityInherit+0x138>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4299      	cmp	r1, r3
 8001f7e:	d159      	bne.n	8002034 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb29 	bl	80005dc <uxListRemove>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	2201      	movs	r2, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <xTaskPriorityInherit+0x13c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <xTaskPriorityInherit+0x13c>)
 8001fa4:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <xTaskPriorityInherit+0x134>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <xTaskPriorityInherit+0x13c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002068 <xTaskPriorityInherit+0x13c>)
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc6:	4927      	ldr	r1, [pc, #156]	@ (8002064 <xTaskPriorityInherit+0x138>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	3204      	adds	r2, #4
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <xTaskPriorityInherit+0x138>)
 8002006:	441a      	add	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002010:	4914      	ldr	r1, [pc, #80]	@ (8002064 <xTaskPriorityInherit+0x138>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	480f      	ldr	r0, [pc, #60]	@ (8002064 <xTaskPriorityInherit+0x138>)
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4403      	add	r3, r0
 8002030:	6019      	str	r1, [r3, #0]
 8002032:	e004      	b.n	800203e <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <xTaskPriorityInherit+0x134>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e008      	b.n	8002056 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <xTaskPriorityInherit+0x134>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	429a      	cmp	r2, r3
 8002050:	d201      	bcs.n	8002056 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8002056:	697b      	ldr	r3, [r7, #20]
    }
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000070 	.word	0x20000070
 8002064:	20000074 	.word	0x20000074
 8002068:	20000150 	.word	0x20000150

0800206c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a5 	beq.w	80021d0 <vTaskPriorityDisinheritAfterTimeout+0x164>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	613b      	str	r3, [r7, #16]
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d902      	bls.n	80020b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	e002      	b.n	80020bc <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c2:	429a      	cmp	r2, r3
 80020c4:	f000 8084 	beq.w	80021d0 <vTaskPriorityDisinheritAfterTimeout+0x164>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d17e      	bne.n	80021d0 <vTaskPriorityDisinheritAfterTimeout+0x164>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80020d2:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a3a      	ldr	r2, [r7, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d10b      	bne.n	80020f4 <vTaskPriorityDisinheritAfterTimeout+0x88>
    __asm volatile
 80020dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	60fb      	str	r3, [r7, #12]
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db04      	blt.n	8002112 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f1c3 0205 	rsb	r2, r3, #5
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	6959      	ldr	r1, [r3, #20]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4a2e      	ldr	r2, [pc, #184]	@ (80021dc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002122:	4413      	add	r3, r2
 8002124:	4299      	cmp	r1, r3
 8002126:	d153      	bne.n	80021d0 <vTaskPriorityDisinheritAfterTimeout+0x164>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	3304      	adds	r3, #4
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa55 	bl	80005dc <uxListRemove>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	2201      	movs	r2, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4013      	ands	r3, r2
 800214a:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800214c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	2201      	movs	r2, #1
 8002154:	409a      	lsls	r2, r3
 8002156:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	4a20      	ldr	r2, [pc, #128]	@ (80021e0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	491d      	ldr	r1, [pc, #116]	@ (80021dc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	3204      	adds	r2, #4
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	1d1a      	adds	r2, r3, #4
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4a0e      	ldr	r2, [pc, #56]	@ (80021dc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80021a4:	441a      	add	r2, r3
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ae:	490b      	ldr	r1, [pc, #44]	@ (80021dc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021c0:	1c59      	adds	r1, r3, #1
 80021c2:	4806      	ldr	r0, [pc, #24]	@ (80021dc <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4403      	add	r3, r0
 80021ce:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	@ 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000070 	.word	0x20000070
 80021dc:	20000074 	.word	0x20000074
 80021e0:	20000150 	.word	0x20000150

080021e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <pvTaskIncrementMutexHeldCount+0x2c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8002200:	687b      	ldr	r3, [r7, #4]
    }
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000070 	.word	0x20000070

08002214 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xec>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800222a:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <prvAddCurrentTaskToDelayedList+0xf0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002230:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3304      	adds	r3, #4
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f9d0 	bl	80005dc <uxListRemove>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002242:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	2201      	movs	r2, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	4b2e      	ldr	r3, [pc, #184]	@ (800230c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4013      	ands	r3, r2
 8002256:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002258:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d124      	bne.n	80022ac <prvAddCurrentTaskToDelayedList+0x98>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d021      	beq.n	80022ac <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002268:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <prvAddCurrentTaskToDelayedList+0xfc>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	3204      	adds	r2, #4
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	@ (8002310 <prvAddCurrentTaskToDelayedList+0xfc>)
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <prvAddCurrentTaskToDelayedList+0xfc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <prvAddCurrentTaskToDelayedList+0xfc>)
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80022aa:	e022      	b.n	80022f2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022b4:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80022c4:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3304      	adds	r3, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	6978      	ldr	r0, [r7, #20]
 80022ce:	f7fe f94c 	bl	800056a <vListInsert>
}
 80022d2:	e00e      	b.n	80022f2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3304      	adds	r3, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	69b8      	ldr	r0, [r7, #24]
 80022de:	f7fe f944 	bl	800056a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <prvAddCurrentTaskToDelayedList+0x100>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d202      	bcs.n	80022f2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80022ec:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <prvAddCurrentTaskToDelayedList+0x100>)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000014c 	.word	0x2000014c
 8002300:	20000100 	.word	0x20000100
 8002304:	20000104 	.word	0x20000104
 8002308:	20000070 	.word	0x20000070
 800230c:	20000150 	.word	0x20000150
 8002310:	20000134 	.word	0x20000134
 8002314:	20000168 	.word	0x20000168

08002318 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002322:	f000 fa55 	bl	80027d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <xTimerCreateTimerTask+0x58>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <xTimerCreateTimerTask+0x5c>)
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2302      	movs	r3, #2
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800233c:	490e      	ldr	r1, [pc, #56]	@ (8002378 <xTimerCreateTimerTask+0x60>)
 800233e:	480f      	ldr	r0, [pc, #60]	@ (800237c <xTimerCreateTimerTask+0x64>)
 8002340:	f7fe fe9a 	bl	8001078 <xTaskCreate>
 8002344:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	603b      	str	r3, [r7, #0]
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002364:	687b      	ldr	r3, [r7, #4]
    }
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200001a4 	.word	0x200001a4
 8002374:	200001a8 	.word	0x200001a8
 8002378:	080059c8 	.word	0x080059c8
 800237c:	08002425 	.word	0x08002425

08002380 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800238c:	e008      	b.n	80023a0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	18d1      	adds	r1, r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f8df 	bl	8002570 <prvInsertTimerInActiveList>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <prvReloadTimer+0xe>
        }
    }
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <prvProcessExpiredTimer+0x5c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3304      	adds	r3, #4
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8fd 	bl	80005dc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff ffc3 	bl	8002380 <prvReloadTimer>
 80023fa:	e008      	b.n	800240e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	b2da      	uxtb	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	4798      	blx	r3
    }
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000019c 	.word	0x2000019c

08002424 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f859 	bl	80024e8 <prvGetNextExpireTime>
 8002436:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4619      	mov	r1, r3
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f805 	bl	800244c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002442:	f000 f8d7 	bl	80025f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002446:	bf00      	nop
 8002448:	e7f0      	b.n	800242c <prvTimerTask+0x8>
	...

0800244c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002456:	f7ff f81f 	bl	8001498 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f866 	bl	8002530 <prvSampleTimeNow>
 8002464:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d130      	bne.n	80024ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <prvProcessTimerOrBlockTask+0x3c>
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	429a      	cmp	r2, r3
 8002478:	d806      	bhi.n	8002488 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800247a:	f7ff f81b 	bl	80014b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff9f 	bl	80023c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002486:	e024      	b.n	80024d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <prvProcessTimerOrBlockTask+0x90>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <prvProcessTimerOrBlockTask+0x50>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <prvProcessTimerOrBlockTask+0x52>
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <prvProcessTimerOrBlockTask+0x94>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fd73 	bl	8000f98 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80024b2:	f7fe ffff 	bl	80014b4 <xTaskResumeAll>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <prvProcessTimerOrBlockTask+0x98>)
 80024be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	f3bf 8f6f 	isb	sy
    }
 80024cc:	e001      	b.n	80024d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80024ce:	f7fe fff1 	bl	80014b4 <xTaskResumeAll>
    }
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200001a0 	.word	0x200001a0
 80024e0:	200001a4 	.word	0x200001a4
 80024e4:	e000ed04 	.word	0xe000ed04

080024e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <prvGetNextExpireTime+0x44>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <prvGetNextExpireTime+0x16>
 80024fa:	2201      	movs	r2, #1
 80024fc:	e000      	b.n	8002500 <prvGetNextExpireTime+0x18>
 80024fe:	2200      	movs	r2, #0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <prvGetNextExpireTime+0x44>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e001      	b.n	800251c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800251c:	68fb      	ldr	r3, [r7, #12]
    }
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000019c 	.word	0x2000019c

08002530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002538:	f7ff f8c4 	bl	80016c4 <xTaskGetTickCount>
 800253c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <prvSampleTimeNow+0x3c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d205      	bcs.n	8002554 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002548:	f000 f91c 	bl	8002784 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e002      	b.n	800255a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <prvSampleTimeNow+0x3c>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002560:	68fb      	ldr	r3, [r7, #12]
    }
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001ac 	.word	0x200001ac

08002570 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d812      	bhi.n	80025bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e01b      	b.n	80025e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <prvInsertTimerInActiveList+0x7c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fd ffd8 	bl	800056a <vListInsert>
 80025ba:	e012      	b.n	80025e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d206      	bcs.n	80025d2 <prvInsertTimerInActiveList+0x62>
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d302      	bcc.n	80025d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e007      	b.n	80025e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <prvInsertTimerInActiveList+0x80>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7fd ffc4 	bl	800056a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80025e2:	697b      	ldr	r3, [r7, #20]
    }
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200001a0 	.word	0x200001a0
 80025f0:	2000019c 	.word	0x2000019c

080025f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002606:	e0a9      	b.n	800275c <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f2c0 80a6 	blt.w	800275c <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3304      	adds	r3, #4
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ffdb 	bl	80005dc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff81 	bl	8002530 <prvSampleTimeNow>
 800262e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3b01      	subs	r3, #1
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 808e 	bhi.w	8002756 <prvProcessReceivedCommands+0x162>
 800263a:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <prvProcessReceivedCommands+0x4c>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002665 	.word	0x08002665
 8002644:	08002665 	.word	0x08002665
 8002648:	080026cd 	.word	0x080026cd
 800264c:	080026e1 	.word	0x080026e1
 8002650:	0800272d 	.word	0x0800272d
 8002654:	08002665 	.word	0x08002665
 8002658:	08002665 	.word	0x08002665
 800265c:	080026cd 	.word	0x080026cd
 8002660:	080026e1 	.word	0x080026e1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	18d1      	adds	r1, r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f7ff ff74 	bl	8002570 <prvInsertTimerInActiveList>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d065      	beq.n	800275a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4619      	mov	r1, r3
 80026a8:	69f8      	ldr	r0, [r7, #28]
 80026aa:	f7ff fe69 	bl	8002380 <prvReloadTimer>
 80026ae:	e008      	b.n	80026c2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	69f8      	ldr	r0, [r7, #28]
 80026c8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80026ca:	e046      	b.n	800275a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80026de:	e03d      	b.n	800275c <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	617b      	str	r3, [r7, #20]
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	18d1      	adds	r1, r2, r3
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	69f8      	ldr	r0, [r7, #28]
 8002726:	f7ff ff23 	bl	8002570 <prvInsertTimerInActiveList>
                        break;
 800272a:	e017      	b.n	800275c <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800273a:	69f8      	ldr	r0, [r7, #28]
 800273c:	f000 fc52 	bl	8002fe4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002740:	e00c      	b.n	800275c <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002754:	e002      	b.n	800275c <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <prvProcessReceivedCommands+0x168>
                        break;
 800275a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800275c:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <prvProcessReceivedCommands+0x18c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f107 0108 	add.w	r1, r7, #8
 8002764:	2200      	movs	r2, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe f93e 	bl	80009e8 <xQueueReceive>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f47f af4a 	bne.w	8002608 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200001a4 	.word	0x200001a4

08002784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800278a:	e009      	b.n	80027a0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <prvSwitchTimerLists+0x44>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002796:	f04f 31ff 	mov.w	r1, #4294967295
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f7ff fe12 	bl	80023c4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <prvSwitchTimerLists+0x44>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <prvSwitchTimerLists+0x44>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <prvSwitchTimerLists+0x48>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <prvSwitchTimerLists+0x44>)
 80027b6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <prvSwitchTimerLists+0x48>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
    }
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000019c 	.word	0x2000019c
 80027cc:	200001a0 	.word	0x200001a0

080027d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80027d4:	f000 f9ae 	bl	8002b34 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <prvCheckForValidListAndQueue+0x54>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80027e0:	4811      	ldr	r0, [pc, #68]	@ (8002828 <prvCheckForValidListAndQueue+0x58>)
 80027e2:	f7fd fe95 	bl	8000510 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80027e6:	4811      	ldr	r0, [pc, #68]	@ (800282c <prvCheckForValidListAndQueue+0x5c>)
 80027e8:	f7fd fe92 	bl	8000510 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80027ec:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <prvCheckForValidListAndQueue+0x60>)
 80027ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <prvCheckForValidListAndQueue+0x58>)
 80027f0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <prvCheckForValidListAndQueue+0x64>)
 80027f4:	4a0d      	ldr	r2, [pc, #52]	@ (800282c <prvCheckForValidListAndQueue+0x5c>)
 80027f6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80027f8:	2200      	movs	r2, #0
 80027fa:	210c      	movs	r1, #12
 80027fc:	200a      	movs	r0, #10
 80027fe:	f7fd ffa9 	bl	8000754 <xQueueGenericCreate>
 8002802:	4603      	mov	r3, r0
 8002804:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <prvCheckForValidListAndQueue+0x54>)
 8002806:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <prvCheckForValidListAndQueue+0x54>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <prvCheckForValidListAndQueue+0x54>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4908      	ldr	r1, [pc, #32]	@ (8002838 <prvCheckForValidListAndQueue+0x68>)
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fb6e 	bl	8000ef8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800281c:	f000 f9bc 	bl	8002b98 <vPortExitCritical>
    }
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200001a4 	.word	0x200001a4
 8002828:	20000174 	.word	0x20000174
 800282c:	20000188 	.word	0x20000188
 8002830:	2000019c 	.word	0x2000019c
 8002834:	200001a0 	.word	0x200001a0
 8002838:	080059d0 	.word	0x080059d0

0800283c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3b04      	subs	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002854:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b04      	subs	r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b04      	subs	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800286c:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <pxPortInitialiseStack+0x64>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b14      	subs	r3, #20
 8002876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b04      	subs	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f06f 0202 	mvn.w	r2, #2
 800288a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b20      	subs	r3, #32
 8002890:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	080028a5 	.word	0x080028a5

080028a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80028ae:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <prvTaskExitError+0x58>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d00b      	beq.n	80028d0 <prvTaskExitError+0x2c>
    __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	60fb      	str	r3, [r7, #12]
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <prvTaskExitError+0x28>
    __asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	60bb      	str	r3, [r7, #8]
}
 80028e2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80028e4:	bf00      	nop
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0fc      	beq.n	80028e6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000004 	.word	0x20000004

08002900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <pxCurrentTCBConst2>)
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	6808      	ldr	r0, [r1, #0]
 8002906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	f380 8809 	msr	PSP, r0
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f380 8811 	msr	BASEPRI, r0
 800291a:	4770      	bx	lr
 800291c:	f3af 8000 	nop.w

08002920 <pxCurrentTCBConst2>:
 8002920:	20000070 	.word	0x20000070
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop

08002928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002928:	4808      	ldr	r0, [pc, #32]	@ (800294c <prvPortStartFirstTask+0x24>)
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	f380 8808 	msr	MSP, r0
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f380 8814 	msr	CONTROL, r0
 800293a:	b662      	cpsie	i
 800293c:	b661      	cpsie	f
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	df00      	svc	0
 8002948:	bf00      	nop
 800294a:	0000      	.short	0x0000
 800294c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop

08002954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	@ 0x30
 8002958:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800295a:	4b69      	ldr	r3, [pc, #420]	@ (8002b00 <xPortStartScheduler+0x1ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a69      	ldr	r2, [pc, #420]	@ (8002b04 <xPortStartScheduler+0x1b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10b      	bne.n	800297c <xPortStartScheduler+0x28>
    __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800297c:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <xPortStartScheduler+0x1ac>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a61      	ldr	r2, [pc, #388]	@ (8002b08 <xPortStartScheduler+0x1b4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10b      	bne.n	800299e <xPortStartScheduler+0x4a>
    __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	623b      	str	r3, [r7, #32]
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800299e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <xPortStartScheduler+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	332c      	adds	r3, #44	@ 0x2c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a59      	ldr	r2, [pc, #356]	@ (8002b10 <xPortStartScheduler+0x1bc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <xPortStartScheduler+0x74>
    __asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	61fb      	str	r3, [r7, #28]
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80029c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ca:	3338      	adds	r3, #56	@ 0x38
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a51      	ldr	r2, [pc, #324]	@ (8002b14 <xPortStartScheduler+0x1c0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00b      	beq.n	80029ec <xPortStartScheduler+0x98>
    __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029f0:	4b49      	ldr	r3, [pc, #292]	@ (8002b18 <xPortStartScheduler+0x1c4>)
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80029f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	22ff      	movs	r2, #255	@ 0xff
 8002a00:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <xPortStartScheduler+0x1c8>)
 8002a16:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002a18:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <xPortStartScheduler+0x1c8>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <xPortStartScheduler+0xe4>
    __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	617b      	str	r3, [r7, #20]
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <xPortStartScheduler+0x11a>
    __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	613b      	str	r3, [r7, #16]
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	d0f1      	beq.n	8002a5e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d103      	bne.n	8002a88 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002a80:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e004      	b.n	8002a92 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	4a24      	ldr	r2, [pc, #144]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002a90:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a92:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002a9a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b20 <xPortStartScheduler+0x1cc>)
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <xPortStartScheduler+0x1d0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <xPortStartScheduler+0x1d0>)
 8002ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002aba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <xPortStartScheduler+0x1d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <xPortStartScheduler+0x1d0>)
 8002ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ac6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <xPortStartScheduler+0x1d4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ace:	f000 f8e5 	bl	8002c9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ad2:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <xPortStartScheduler+0x1d8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ad8:	f000 f904 	bl	8002ce4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <xPortStartScheduler+0x1dc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <xPortStartScheduler+0x1dc>)
 8002ae2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002ae8:	f7ff ff1e 	bl	8002928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002aec:	f7fe ff20 	bl	8001930 <vTaskSwitchContext>
    prvTaskExitError();
 8002af0:	f7ff fed8 	bl	80028a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3730      	adds	r7, #48	@ 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	410fc271 	.word	0x410fc271
 8002b08:	410fc270 	.word	0x410fc270
 8002b0c:	e000ed08 	.word	0xe000ed08
 8002b10:	08002901 	.word	0x08002901
 8002b14:	08002bf1 	.word	0x08002bf1
 8002b18:	e000e400 	.word	0xe000e400
 8002b1c:	200001b0 	.word	0x200001b0
 8002b20:	200001b4 	.word	0x200001b4
 8002b24:	e000ed20 	.word	0xe000ed20
 8002b28:	e000ed1c 	.word	0xe000ed1c
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	e000ef34 	.word	0xe000ef34

08002b34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
    __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	607b      	str	r3, [r7, #4]
}
 8002b4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <vPortEnterCritical+0x5c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <vPortEnterCritical+0x5c>)
 8002b56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b58:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <vPortEnterCritical+0x5c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <vPortEnterCritical+0x60>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <vPortEnterCritical+0x4e>
    __asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	603b      	str	r3, [r7, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <vPortEnterCritical+0x4a>
    }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000004 	.word	0x20000004
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <vPortExitCritical+0x50>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <vPortExitCritical+0x26>
    __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	607b      	str	r3, [r7, #4]
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <vPortExitCritical+0x50>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <vPortExitCritical+0x50>)
 8002bc6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <vPortExitCritical+0x50>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <vPortExitCritical+0x44>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f383 8811 	msr	BASEPRI, r3
}
 8002bda:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	20000004 	.word	0x20000004
 8002bec:	00000000 	.word	0x00000000

08002bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002bf0:	f3ef 8009 	mrs	r0, PSP
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <pxCurrentTCBConst>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f01e 0f10 	tst.w	lr, #16
 8002c00:	bf08      	it	eq
 8002c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002c14:	f380 8811 	msr	BASEPRI, r0
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f7fe fe86 	bl	8001930 <vTaskSwitchContext>
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f380 8811 	msr	BASEPRI, r0
 8002c2c:	bc09      	pop	{r0, r3}
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c36:	f01e 0f10 	tst.w	lr, #16
 8002c3a:	bf08      	it	eq
 8002c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c40:	f380 8809 	msr	PSP, r0
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst>:
 8002c50:	20000070 	.word	0x20000070
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
    __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	607b      	str	r3, [r7, #4]
}
 8002c70:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c72:	f7fe fd43 	bl	80016fc <xTaskIncrementTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SysTick_Handler+0x40>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f383 8811 	msr	BASEPRI, r3
}
 8002c8e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <vPortSetupTimerInterrupt+0x38>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <vPortSetupTimerInterrupt+0x3c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <vPortSetupTimerInterrupt+0x40>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <vPortSetupTimerInterrupt+0x44>)
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cbe:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010
 8002cd4:	e000e018 	.word	0xe000e018
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	10624dd3 	.word	0x10624dd3
 8002ce0:	e000e014 	.word	0xe000e014

08002ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002cf4 <vPortEnableVFP+0x10>
 8002ce8:	6801      	ldr	r1, [r0, #0]
 8002cea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002cee:	6001      	str	r1, [r0, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	0000      	.short	0x0000
 8002cf4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop

08002cfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002d02:	f3ef 8305 	mrs	r3, IPSR
 8002d06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d915      	bls.n	8002d3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d0e:	4a18      	ldr	r2, [pc, #96]	@ (8002d70 <vPortValidateInterruptPriority+0x74>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <vPortValidateInterruptPriority+0x78>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	7afa      	ldrb	r2, [r7, #11]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20b      	bcs.n	8002d3a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	607b      	str	r3, [r7, #4]
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <vPortValidateInterruptPriority+0x7c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <vPortValidateInterruptPriority+0x80>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d90b      	bls.n	8002d62 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	603b      	str	r3, [r7, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <vPortValidateInterruptPriority+0x62>
    }
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e3f0 	.word	0xe000e3f0
 8002d74:	200001b0 	.word	0x200001b0
 8002d78:	e000ed0c 	.word	0xe000ed0c
 8002d7c:	200001b4 	.word	0x200001b4

08002d80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	@ 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d022      	beq.n	8002dd8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002d92:	2308      	movs	r3, #8
 8002d94:	43db      	mvns	r3, r3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d81b      	bhi.n	8002dd4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	f1c3 0308 	rsb	r3, r3, #8
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d804      	bhi.n	8002dce <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc8:	4413      	add	r3, r2
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	e004      	b.n	8002dd8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	e001      	b.n	8002dd8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002dd8:	f7fe fb5e 	bl	8001498 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ddc:	4b7a      	ldr	r3, [pc, #488]	@ (8002fc8 <pvPortMalloc+0x248>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002de4:	f000 f978 	bl	80030d8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f2c0 80d3 	blt.w	8002f96 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80cf 	beq.w	8002f96 <pvPortMalloc+0x216>
 8002df8:	4b74      	ldr	r3, [pc, #464]	@ (8002fcc <pvPortMalloc+0x24c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	f200 80c9 	bhi.w	8002f96 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e04:	4b72      	ldr	r3, [pc, #456]	@ (8002fd0 <pvPortMalloc+0x250>)
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002e08:	4b71      	ldr	r3, [pc, #452]	@ (8002fd0 <pvPortMalloc+0x250>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	4a70      	ldr	r2, [pc, #448]	@ (8002fd4 <pvPortMalloc+0x254>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d305      	bcc.n	8002e22 <pvPortMalloc+0xa2>
 8002e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e18:	4a6f      	ldr	r2, [pc, #444]	@ (8002fd8 <pvPortMalloc+0x258>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d801      	bhi.n	8002e22 <pvPortMalloc+0xa2>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <pvPortMalloc+0xa4>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d129      	bne.n	8002e7c <pvPortMalloc+0xfc>
    __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4c:	4a61      	ldr	r2, [pc, #388]	@ (8002fd4 <pvPortMalloc+0x254>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d305      	bcc.n	8002e5e <pvPortMalloc+0xde>
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	4a60      	ldr	r2, [pc, #384]	@ (8002fd8 <pvPortMalloc+0x258>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d801      	bhi.n	8002e5e <pvPortMalloc+0xde>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <pvPortMalloc+0xe0>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <pvPortMalloc+0xfc>
    __asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	61fb      	str	r3, [r7, #28]
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d903      	bls.n	8002e8e <pvPortMalloc+0x10e>
 8002e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1d8      	bne.n	8002e40 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc8 <pvPortMalloc+0x248>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d07e      	beq.n	8002f96 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4413      	add	r3, r2
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd4 <pvPortMalloc+0x254>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d305      	bcc.n	8002eb6 <pvPortMalloc+0x136>
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd8 <pvPortMalloc+0x258>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d801      	bhi.n	8002eb6 <pvPortMalloc+0x136>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <pvPortMalloc+0x138>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <pvPortMalloc+0x154>
    __asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	61bb      	str	r3, [r7, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d90b      	bls.n	8002efe <pvPortMalloc+0x17e>
    __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	617b      	str	r3, [r7, #20]
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	e7fd      	b.n	8002efa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1ad2      	subs	r2, r2, r3
 8002f06:	2308      	movs	r3, #8
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d924      	bls.n	8002f58 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <pvPortMalloc+0x1b8>
    __asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f56:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f58:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <pvPortMalloc+0x24c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <pvPortMalloc+0x24c>)
 8002f64:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <pvPortMalloc+0x24c>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <pvPortMalloc+0x25c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d203      	bcs.n	8002f7a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f72:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <pvPortMalloc+0x24c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a19      	ldr	r2, [pc, #100]	@ (8002fdc <pvPortMalloc+0x25c>)
 8002f78:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f84:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <pvPortMalloc+0x260>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	4a13      	ldr	r2, [pc, #76]	@ (8002fe0 <pvPortMalloc+0x260>)
 8002f94:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f96:	f7fe fa8d 	bl	80014b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <pvPortMalloc+0x23c>
    __asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <pvPortMalloc+0x238>
    return pvReturn;
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3738      	adds	r7, #56	@ 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20012dc0 	.word	0x20012dc0
 8002fcc:	20012dc4 	.word	0x20012dc4
 8002fd0:	20012db8 	.word	0x20012db8
 8002fd4:	200001b8 	.word	0x200001b8
 8002fd8:	20012db7 	.word	0x20012db7
 8002fdc:	20012dc8 	.word	0x20012dc8
 8002fe0:	20012dcc 	.word	0x20012dcc

08002fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d064      	beq.n	80030c0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4a30      	ldr	r2, [pc, #192]	@ (80030c8 <vPortFree+0xe4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d305      	bcc.n	8003018 <vPortFree+0x34>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4a2f      	ldr	r2, [pc, #188]	@ (80030cc <vPortFree+0xe8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d801      	bhi.n	8003018 <vPortFree+0x34>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <vPortFree+0x36>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <vPortFree+0x52>
    __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	617b      	str	r3, [r7, #20]
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	e7fd      	b.n	8003032 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <vPortFree+0x72>
    __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	613b      	str	r3, [r7, #16]
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <vPortFree+0x92>
    __asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60fb      	str	r3, [r7, #12]
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	e7fd      	b.n	8003072 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0fdb      	lsrs	r3, r3, #31
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01c      	beq.n	80030c0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800309a:	f7fe f9fd 	bl	8001498 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <vPortFree+0xec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a09      	ldr	r2, [pc, #36]	@ (80030d0 <vPortFree+0xec>)
 80030aa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030ac:	69b8      	ldr	r0, [r7, #24]
 80030ae:	f000 f86d 	bl	800318c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <vPortFree+0xf0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a06      	ldr	r2, [pc, #24]	@ (80030d4 <vPortFree+0xf0>)
 80030ba:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030bc:	f7fe f9fa 	bl	80014b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030c0:	bf00      	nop
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200001b8 	.word	0x200001b8
 80030cc:	20012db7 	.word	0x20012db7
 80030d0:	20012dc4 	.word	0x20012dc4
 80030d4:	20012dd0 	.word	0x20012dd0

080030d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030de:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80030e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80030e4:	4b24      	ldr	r3, [pc, #144]	@ (8003178 <prvHeapInit+0xa0>)
 80030e6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4a1c      	ldr	r2, [pc, #112]	@ (8003178 <prvHeapInit+0xa0>)
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <prvHeapInit+0xa4>)
 8003110:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003112:	4b1a      	ldr	r3, [pc, #104]	@ (800317c <prvHeapInit+0xa4>)
 8003114:	2200      	movs	r2, #0
 8003116:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003120:	2208      	movs	r2, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <prvHeapInit+0xa8>)
 8003134:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <prvHeapInit+0xa8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <prvHeapInit+0xa8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003154:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <prvHeapInit+0xa8>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <prvHeapInit+0xac>)
 8003162:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a07      	ldr	r2, [pc, #28]	@ (8003188 <prvHeapInit+0xb0>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	200001b8 	.word	0x200001b8
 800317c:	20012db8 	.word	0x20012db8
 8003180:	20012dc0 	.word	0x20012dc0
 8003184:	20012dc8 	.word	0x20012dc8
 8003188:	20012dc4 	.word	0x20012dc4

0800318c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <prvInsertBlockIntoFreeList+0xe4>)
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e002      	b.n	80031a0 <prvInsertBlockIntoFreeList+0x14>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d8f7      	bhi.n	800319a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <prvInsertBlockIntoFreeList+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003274 <prvInsertBlockIntoFreeList+0xe8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d305      	bcc.n	80031c6 <prvInsertBlockIntoFreeList+0x3a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003278 <prvInsertBlockIntoFreeList+0xec>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d801      	bhi.n	80031c6 <prvInsertBlockIntoFreeList+0x3a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <prvInsertBlockIntoFreeList+0x3c>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60fb      	str	r3, [r7, #12]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d108      	bne.n	8003208 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	441a      	add	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	441a      	add	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d118      	bne.n	800324e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b16      	ldr	r3, [pc, #88]	@ (800327c <prvInsertBlockIntoFreeList+0xf0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d00d      	beq.n	8003244 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e008      	b.n	8003256 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003244:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <prvInsertBlockIntoFreeList+0xf0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e003      	b.n	8003256 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d002      	beq.n	8003264 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20012db8 	.word	0x20012db8
 8003274:	200001b8 	.word	0x200001b8
 8003278:	20012db7 	.word	0x20012db7
 800327c:	20012dc0 	.word	0x20012dc0

08003280 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0c      	blt.n	80032ac <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <__NVIC_SetPendingIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	3340      	adds	r3, #64	@ 0x40
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100

080032bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032c2:	f000 fb55 	bl	8003970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032c6:	f000 f859 	bl	800337c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032ca:	f000 f8ef 	bl	80034ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80032ce:	f000 f8c3 	bl	8003458 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80032d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032d6:	f000 fb8d 	bl	80039f4 <HAL_Delay>
  vTaskDelay(pdMS_TO_TICKS(500));
 80032da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032de:	f7fe f817 	bl	8001310 <vTaskDelay>

  status = xTaskCreate(periodic_task, "Periodic_Task", 200, NULL, 3, &periodic_task_hanlde);
 80032e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <main+0xa4>)
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2303      	movs	r3, #3
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	22c8      	movs	r2, #200	@ 0xc8
 80032ee:	491d      	ldr	r1, [pc, #116]	@ (8003364 <main+0xa8>)
 80032f0:	481d      	ldr	r0, [pc, #116]	@ (8003368 <main+0xac>)
 80032f2:	f7fd fec1 	bl	8001078 <xTaskCreate>
 80032f6:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d00b      	beq.n	8003316 <main+0x5a>
    __asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	60bb      	str	r3, [r7, #8]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <main+0x56>

  status = xTaskCreate(handler_task, "Hanlder_Task", 200, NULL, 2, &handler_task_hanlde);
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <main+0xb0>)
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	22c8      	movs	r2, #200	@ 0xc8
 8003322:	4913      	ldr	r1, [pc, #76]	@ (8003370 <main+0xb4>)
 8003324:	4813      	ldr	r0, [pc, #76]	@ (8003374 <main+0xb8>)
 8003326:	f7fd fea7 	bl	8001078 <xTaskCreate>
 800332a:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00b      	beq.n	800334a <main+0x8e>
    __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <main+0x8a>

  semacount = xSemaphoreCreateCounting(10,0);
 800334a:	2100      	movs	r1, #0
 800334c:	200a      	movs	r0, #10
 800334e:	f7fd fa73 	bl	8000838 <xQueueCreateCountingSemaphore>
 8003352:	4603      	mov	r3, r0
 8003354:	4a08      	ldr	r2, [pc, #32]	@ (8003378 <main+0xbc>)
 8003356:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 8003358:	f7fe f85a 	bl	8001410 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <main+0xa0>
 8003360:	20012e20 	.word	0x20012e20
 8003364:	080059d8 	.word	0x080059d8
 8003368:	080035c5 	.word	0x080035c5
 800336c:	20012e24 	.word	0x20012e24
 8003370:	080059e8 	.word	0x080059e8
 8003374:	080035f5 	.word	0x080035f5
 8003378:	20012e1c 	.word	0x20012e1c

0800337c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	@ 0x50
 8003380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	2234      	movs	r2, #52	@ 0x34
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fad2 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003450 <SystemClock_Config+0xd4>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	4a29      	ldr	r2, [pc, #164]	@ (8003450 <SystemClock_Config+0xd4>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <SystemClock_Config+0xd4>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033bc:	2300      	movs	r3, #0
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <SystemClock_Config+0xd8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80033c8:	4a22      	ldr	r2, [pc, #136]	@ (8003454 <SystemClock_Config+0xd8>)
 80033ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <SystemClock_Config+0xd8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033dc:	2302      	movs	r3, #2
 80033de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e0:	2301      	movs	r3, #1
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033e4:	2310      	movs	r3, #16
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e8:	2302      	movs	r3, #2
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80033f0:	2310      	movs	r3, #16
 80033f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80033f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033fa:	2304      	movs	r3, #4
 80033fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80033fe:	2302      	movs	r3, #2
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003402:	2302      	movs	r3, #2
 8003404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f946 	bl	800469c <HAL_RCC_OscConfig>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003416:	f000 f913 	bl	8003640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341a:	230f      	movs	r3, #15
 800341c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800341e:	2302      	movs	r3, #2
 8003420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800342a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003430:	f107 0308 	add.w	r3, r7, #8
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fdb4 	bl	8003fa4 <HAL_RCC_ClockConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003442:	f000 f8fd 	bl	8003640 <Error_Handler>
  }
}
 8003446:	bf00      	nop
 8003448:	3750      	adds	r7, #80	@ 0x50
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000

08003458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <MX_USART2_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003490:	f001 fe44 	bl	800511c <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f000 f8d1 	bl	8003640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20012dd4 	.word	0x20012dd4
 80034a8:	40004400 	.word	0x40004400

080034ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	4b31      	ldr	r3, [pc, #196]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a30      	ldr	r2, [pc, #192]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b2e      	ldr	r3, [pc, #184]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4a29      	ldr	r2, [pc, #164]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <MX_GPIO_Init+0xe0>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <MX_GPIO_Init+0xe0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a22      	ldr	r2, [pc, #136]	@ (800358c <MX_GPIO_Init+0xe0>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <MX_GPIO_Init+0xe0>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <MX_GPIO_Init+0xe0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <MX_GPIO_Init+0xe0>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <MX_GPIO_Init+0xe0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003532:	2200      	movs	r2, #0
 8003534:	2120      	movs	r1, #32
 8003536:	4816      	ldr	r0, [pc, #88]	@ (8003590 <MX_GPIO_Init+0xe4>)
 8003538:	f000 fcf6 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800353c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003542:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4619      	mov	r1, r3
 8003552:	4810      	ldr	r0, [pc, #64]	@ (8003594 <MX_GPIO_Init+0xe8>)
 8003554:	f000 fb54 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003558:	2320      	movs	r3, #32
 800355a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355c:	2301      	movs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	4808      	ldr	r0, [pc, #32]	@ (8003590 <MX_GPIO_Init+0xe4>)
 8003570:	f000 fb46 	bl	8003c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	2106      	movs	r1, #6
 8003578:	2028      	movs	r0, #40	@ 0x28
 800357a:	f000 fb17 	bl	8003bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800357e:	2028      	movs	r0, #40	@ 0x28
 8003580:	f000 fb30 	bl	8003be4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003584:	bf00      	nop
 8003586:	3728      	adds	r7, #40	@ 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020800 	.word	0x40020800

08003598 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char msg[])
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fc fe35 	bl	8000210 <strlen>
 80035a6:	4603      	mov	r3, r0
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4803      	ldr	r0, [pc, #12]	@ (80035c0 <printmsg+0x28>)
 80035b2:	f001 fe03 	bl	80051bc <HAL_UART_Transmit>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20012dd4 	.word	0x20012dd4

080035c4 <periodic_task>:

void periodic_task(void *)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(500));
 80035cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035d0:	f7fd fe9e 	bl	8001310 <vTaskDelay>

		printmsg("Periodic task - Pending the interrupt.\r\n");
 80035d4:	4805      	ldr	r0, [pc, #20]	@ (80035ec <periodic_task+0x28>)
 80035d6:	f7ff ffdf 	bl	8003598 <printmsg>

		/*This will pend the interrupt forcefully so that CPU will run this ISR's*/
		NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 80035da:	2028      	movs	r0, #40	@ 0x28
 80035dc:	f7ff fe50 	bl	8003280 <__NVIC_SetPendingIRQ>

		printmsg("Periodic Task resuming\r\n");
 80035e0:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <periodic_task+0x2c>)
 80035e2:	f7ff ffd9 	bl	8003598 <printmsg>
		vTaskDelay(pdMS_TO_TICKS(500));
 80035e6:	bf00      	nop
 80035e8:	e7f0      	b.n	80035cc <periodic_task+0x8>
 80035ea:	bf00      	nop
 80035ec:	080059f8 	.word	0x080059f8
 80035f0:	08005a24 	.word	0x08005a24

080035f4 <handler_task>:


	}
}
void handler_task(void *)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(semacount,portMAX_DELAY);
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <handler_task+0x20>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fad1 	bl	8000bac <xQueueSemaphoreTake>

		printmsg("Handler Task -- Processing Event \r\n");
 800360a:	4803      	ldr	r0, [pc, #12]	@ (8003618 <handler_task+0x24>)
 800360c:	f7ff ffc4 	bl	8003598 <printmsg>
		xSemaphoreTake(semacount,portMAX_DELAY);
 8003610:	bf00      	nop
 8003612:	e7f3      	b.n	80035fc <handler_task+0x8>
 8003614:	20012e1c 	.word	0x20012e1c
 8003618:	08005a40 	.word	0x08005a40

0800361c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a04      	ldr	r2, [pc, #16]	@ (800363c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800362e:	f000 f9c1 	bl	80039b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40001000 	.word	0x40001000

08003640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003644:	b672      	cpsid	i
}
 8003646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <Error_Handler+0x8>

0800364c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_MspInit+0x4c>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	4a0f      	ldr	r2, [pc, #60]	@ (8003698 <HAL_MspInit+0x4c>)
 800365c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003660:	6453      	str	r3, [r2, #68]	@ 0x44
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <HAL_MspInit+0x4c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_MspInit+0x4c>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <HAL_MspInit+0x4c>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_MspInit+0x4c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_UART_MspInit+0x84>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12b      	bne.n	8003716 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	4b18      	ldr	r3, [pc, #96]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	4a17      	ldr	r2, [pc, #92]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	4a10      	ldr	r2, [pc, #64]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_UART_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036f6:	230c      	movs	r3, #12
 80036f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003706:	2307      	movs	r3, #7
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	4805      	ldr	r0, [pc, #20]	@ (8003728 <HAL_UART_MspInit+0x8c>)
 8003712:	f000 fa75 	bl	8003c00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	@ 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40004400 	.word	0x40004400
 8003724:	40023800 	.word	0x40023800
 8003728:	40020000 	.word	0x40020000

0800372c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	@ 0x38
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	4b33      	ldr	r3, [pc, #204]	@ (8003810 <HAL_InitTick+0xe4>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	4a32      	ldr	r2, [pc, #200]	@ (8003810 <HAL_InitTick+0xe4>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	6413      	str	r3, [r2, #64]	@ 0x40
 800374c:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <HAL_InitTick+0xe4>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fd38 	bl	80041d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003772:	f000 fd09 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8003776:	6378      	str	r0, [r7, #52]	@ 0x34
 8003778:	e004      	b.n	8003784 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800377a:	f000 fd05 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 800377e:	4603      	mov	r3, r0
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	4a23      	ldr	r2, [pc, #140]	@ (8003814 <HAL_InitTick+0xe8>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	3b01      	subs	r3, #1
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003792:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_InitTick+0xec>)
 8003794:	4a21      	ldr	r2, [pc, #132]	@ (800381c <HAL_InitTick+0xf0>)
 8003796:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <HAL_InitTick+0xec>)
 800379a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800379e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <HAL_InitTick+0xec>)
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <HAL_InitTick+0xec>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_InitTick+0xec>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <HAL_InitTick+0xec>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80037b8:	4817      	ldr	r0, [pc, #92]	@ (8003818 <HAL_InitTick+0xec>)
 80037ba:	f001 fa0d 	bl	8004bd8 <HAL_TIM_Base_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80037c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11b      	bne.n	8003804 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037cc:	4812      	ldr	r0, [pc, #72]	@ (8003818 <HAL_InitTick+0xec>)
 80037ce:	f001 fa5d 	bl	8004c8c <HAL_TIM_Base_Start_IT>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80037d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d111      	bne.n	8003804 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037e0:	2036      	movs	r0, #54	@ 0x36
 80037e2:	f000 f9ff 	bl	8003be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d808      	bhi.n	80037fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80037ec:	2200      	movs	r2, #0
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	2036      	movs	r0, #54	@ 0x36
 80037f2:	f000 f9db 	bl	8003bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <HAL_InitTick+0xf4>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e002      	b.n	8003804 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003808:	4618      	mov	r0, r3
 800380a:	3738      	adds	r7, #56	@ 0x38
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	431bde83 	.word	0x431bde83
 8003818:	20012e28 	.word	0x20012e28
 800381c:	40001000 	.word	0x40001000
 8003820:	2000000c 	.word	0x2000000c

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <NMI_Handler+0x4>

0800382c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <HardFault_Handler+0x4>

08003834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <MemManage_Handler+0x4>

0800383c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <BusFault_Handler+0x4>

08003844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <UsageFault_Handler+0x4>

0800384c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]

		printmsg("==>Button_Handler\r\n");
 8003866:	481c      	ldr	r0, [pc, #112]	@ (80038d8 <EXTI15_10_IRQHandler+0x7c>)
 8003868:	f7ff fe96 	bl	8003598 <printmsg>

		xSemaphoreGiveFromISR( semacount, &xHigherPriorityTaskWoken );
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <EXTI15_10_IRQHandler+0x80>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1d3a      	adds	r2, r7, #4
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd f80e 	bl	8000896 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR( semacount, &xHigherPriorityTaskWoken );
 800387a:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <EXTI15_10_IRQHandler+0x80>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	1d3a      	adds	r2, r7, #4
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd f807 	bl	8000896 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR( semacount, &xHigherPriorityTaskWoken );
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <EXTI15_10_IRQHandler+0x80>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1d3a      	adds	r2, r7, #4
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd f800 	bl	8000896 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR( semacount, &xHigherPriorityTaskWoken );
 8003896:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <EXTI15_10_IRQHandler+0x80>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1d3a      	adds	r2, r7, #4
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc fff9 	bl	8000896 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR( semacount, &xHigherPriorityTaskWoken );
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <EXTI15_10_IRQHandler+0x80>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1d3a      	adds	r2, r7, #4
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fff2 	bl	8000896 <xQueueGiveFromISR>

	    NOTE: The syntax for forcing a context switch within an ISR varies between
	    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
	    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
	    from an ISR! */
	    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <EXTI15_10_IRQHandler+0x6c>
 80038b8:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <EXTI15_10_IRQHandler+0x84>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80038cc:	f000 fb46 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08005a64 	.word	0x08005a64
 80038dc:	20012e1c 	.word	0x20012e1c
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038e8:	4802      	ldr	r0, [pc, #8]	@ (80038f4 <TIM6_DAC_IRQHandler+0x10>)
 80038ea:	f001 fa3f 	bl	8004d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20012e28 	.word	0x20012e28

080038f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <SystemInit+0x20>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <SystemInit+0x20>)
 8003904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800391c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003954 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003920:	f7ff ffea 	bl	80038f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003924:	480c      	ldr	r0, [pc, #48]	@ (8003958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003926:	490d      	ldr	r1, [pc, #52]	@ (800395c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003928:	4a0d      	ldr	r2, [pc, #52]	@ (8003960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800393c:	4c0a      	ldr	r4, [pc, #40]	@ (8003968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800394a:	f001 fffb 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800394e:	f7ff fcb5 	bl	80032bc <main>
  bx  lr    
 8003952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800395c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003960:	08005aa0 	.word	0x08005aa0
  ldr r2, =_sbss
 8003964:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003968:	20012e74 	.word	0x20012e74

0800396c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800396c:	e7fe      	b.n	800396c <ADC_IRQHandler>
	...

08003970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003974:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0d      	ldr	r2, [pc, #52]	@ (80039b0 <HAL_Init+0x40>)
 800397a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800397e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_Init+0x40>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <HAL_Init+0x40>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800398a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800398c:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <HAL_Init+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <HAL_Init+0x40>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003998:	2003      	movs	r0, #3
 800399a:	f000 f8fc 	bl	8003b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399e:	200f      	movs	r0, #15
 80039a0:	f7ff fec4 	bl	800372c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a4:	f7ff fe52 	bl	800364c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000010 	.word	0x20000010
 80039d8:	20012e70 	.word	0x20012e70

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20012e70 	.word	0x20012e70

080039f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff ffee 	bl	80039dc <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d005      	beq.n	8003a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_Delay+0x44>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a1a:	bf00      	nop
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d8f7      	bhi.n	8003a1c <HAL_Delay+0x28>
  {
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000010 	.word	0x20000010

08003a3c <__NVIC_SetPriorityGrouping>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <__NVIC_SetPriorityGrouping+0x44>)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	60d3      	str	r3, [r2, #12]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_GetPriorityGrouping>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <__NVIC_GetPriorityGrouping+0x18>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	f003 0307 	and.w	r3, r3, #7
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_EnableIRQ>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	db0b      	blt.n	8003aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	4907      	ldr	r1, [pc, #28]	@ (8003ad8 <__NVIC_EnableIRQ+0x38>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000e100 	.word	0xe000e100

08003adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	db0a      	blt.n	8003b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	490c      	ldr	r1, [pc, #48]	@ (8003b28 <__NVIC_SetPriority+0x4c>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	440b      	add	r3, r1
 8003b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b04:	e00a      	b.n	8003b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4908      	ldr	r1, [pc, #32]	@ (8003b2c <__NVIC_SetPriority+0x50>)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	3b04      	subs	r3, #4
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	440b      	add	r3, r1
 8003b1a:	761a      	strb	r2, [r3, #24]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	@ 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f1c3 0307 	rsb	r3, r3, #7
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf28      	it	cs
 8003b4e:	2304      	movcs	r3, #4
 8003b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d902      	bls.n	8003b60 <NVIC_EncodePriority+0x30>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3b03      	subs	r3, #3
 8003b5e:	e000      	b.n	8003b62 <NVIC_EncodePriority+0x32>
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	401a      	ands	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b78:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	43d9      	mvns	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	4313      	orrs	r3, r2
         );
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3724      	adds	r7, #36	@ 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff4c 	bl	8003a3c <__NVIC_SetPriorityGrouping>
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bbe:	f7ff ff61 	bl	8003a84 <__NVIC_GetPriorityGrouping>
 8003bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	f7ff ffb1 	bl	8003b30 <NVIC_EncodePriority>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff80 	bl	8003adc <__NVIC_SetPriority>
}
 8003bdc:	bf00      	nop
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff54 	bl	8003aa0 <__NVIC_EnableIRQ>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	@ 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e165      	b.n	8003ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	f040 8154 	bne.w	8003ee2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d005      	beq.n	8003c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d130      	bne.n	8003cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c88:	2201      	movs	r2, #1
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 0201 	and.w	r2, r3, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d017      	beq.n	8003cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d123      	bne.n	8003d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	08da      	lsrs	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3208      	adds	r2, #8
 8003d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	220f      	movs	r2, #15
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	08da      	lsrs	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3208      	adds	r2, #8
 8003d3e:	69b9      	ldr	r1, [r7, #24]
 8003d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80ae 	beq.w	8003ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f00 <HAL_GPIO_Init+0x300>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f00 <HAL_GPIO_Init+0x300>)
 8003d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d96:	4b5a      	ldr	r3, [pc, #360]	@ (8003f00 <HAL_GPIO_Init+0x300>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003da2:	4a58      	ldr	r2, [pc, #352]	@ (8003f04 <HAL_GPIO_Init+0x304>)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	3302      	adds	r3, #2
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	220f      	movs	r2, #15
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003f08 <HAL_GPIO_Init+0x308>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d025      	beq.n	8003e1a <HAL_GPIO_Init+0x21a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f0c <HAL_GPIO_Init+0x30c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01f      	beq.n	8003e16 <HAL_GPIO_Init+0x216>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8003f10 <HAL_GPIO_Init+0x310>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d019      	beq.n	8003e12 <HAL_GPIO_Init+0x212>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4c      	ldr	r2, [pc, #304]	@ (8003f14 <HAL_GPIO_Init+0x314>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_GPIO_Init+0x20e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f18 <HAL_GPIO_Init+0x318>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00d      	beq.n	8003e0a <HAL_GPIO_Init+0x20a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4a      	ldr	r2, [pc, #296]	@ (8003f1c <HAL_GPIO_Init+0x31c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <HAL_GPIO_Init+0x206>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a49      	ldr	r2, [pc, #292]	@ (8003f20 <HAL_GPIO_Init+0x320>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_GPIO_Init+0x202>
 8003dfe:	2306      	movs	r3, #6
 8003e00:	e00c      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e02:	2307      	movs	r3, #7
 8003e04:	e00a      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e008      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e004      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e002      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_GPIO_Init+0x21c>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f002 0203 	and.w	r2, r2, #3
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	4093      	lsls	r3, r2
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2c:	4935      	ldr	r1, [pc, #212]	@ (8003f04 <HAL_GPIO_Init+0x304>)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	3302      	adds	r3, #2
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5e:	4a31      	ldr	r2, [pc, #196]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e88:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e8e:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003edc:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <HAL_GPIO_Init+0x324>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	f67f ae96 	bls.w	8003c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020c00 	.word	0x40020c00
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40021400 	.word	0x40021400
 8003f20:	40021800 	.word	0x40021800
 8003f24:	40013c00 	.word	0x40013c00

08003f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
 8003f34:	4613      	mov	r3, r2
 8003f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f44:	e003      	b.n	8003f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	041a      	lsls	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	619a      	str	r2, [r3, #24]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f66:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f72:	4a05      	ldr	r2, [pc, #20]	@ (8003f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f806 	bl	8003f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40013c00 	.word	0x40013c00

08003f8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7ff fca2 	bl	80039dc <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7ff fc9e 	bl	80039dc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f887 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff faee 	bl	800372c <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	08005a78 	.word	0x08005a78
 8004168:	20000008 	.word	0x20000008
 800416c:	2000000c 	.word	0x2000000c

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000008 	.word	0x20000008

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08005a88 	.word	0x08005a88

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041b4:	f7ff ffdc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	@ (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08005a88 	.word	0x08005a88

080041d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	220f      	movs	r2, #15
 80041e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041e8:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0203 	and.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004200:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800421a:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <HAL_RCC_GetClockConfig+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40023c00 	.word	0x40023c00

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b0ae      	sub	sp, #184	@ 0xb8
 8004242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004262:	4bcb      	ldr	r3, [pc, #812]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b0c      	cmp	r3, #12
 800426c:	f200 8206 	bhi.w	800467c <HAL_RCC_GetSysClockFreq+0x440>
 8004270:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042ad 	.word	0x080042ad
 800427c:	0800467d 	.word	0x0800467d
 8004280:	0800467d 	.word	0x0800467d
 8004284:	0800467d 	.word	0x0800467d
 8004288:	080042b5 	.word	0x080042b5
 800428c:	0800467d 	.word	0x0800467d
 8004290:	0800467d 	.word	0x0800467d
 8004294:	0800467d 	.word	0x0800467d
 8004298:	080042bd 	.word	0x080042bd
 800429c:	0800467d 	.word	0x0800467d
 80042a0:	0800467d 	.word	0x0800467d
 80042a4:	0800467d 	.word	0x0800467d
 80042a8:	080044ad 	.word	0x080044ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4bb9      	ldr	r3, [pc, #740]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x358>)
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042b2:	e1e7      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b4:	4bb8      	ldr	r3, [pc, #736]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042ba:	e1e3      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042bc:	4bb4      	ldr	r3, [pc, #720]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c8:	4bb1      	ldr	r3, [pc, #708]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d071      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d4:	4bae      	ldr	r3, [pc, #696]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80042e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	f04f 0000 	mov.w	r0, #0
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	0159      	lsls	r1, r3, #5
 8004308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430c:	0150      	lsls	r0, r2, #5
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4621      	mov	r1, r4
 8004314:	1a51      	subs	r1, r2, r1
 8004316:	6439      	str	r1, [r7, #64]	@ 0x40
 8004318:	4629      	mov	r1, r5
 800431a:	eb63 0301 	sbc.w	r3, r3, r1
 800431e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800432c:	4649      	mov	r1, r9
 800432e:	018b      	lsls	r3, r1, #6
 8004330:	4641      	mov	r1, r8
 8004332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004336:	4641      	mov	r1, r8
 8004338:	018a      	lsls	r2, r1, #6
 800433a:	4641      	mov	r1, r8
 800433c:	1a51      	subs	r1, r2, r1
 800433e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004340:	4649      	mov	r1, r9
 8004342:	eb63 0301 	sbc.w	r3, r3, r1
 8004346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004354:	4649      	mov	r1, r9
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4641      	mov	r1, r8
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4641      	mov	r1, r8
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4622      	mov	r2, r4
 800436a:	189b      	adds	r3, r3, r2
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
 800436e:	462b      	mov	r3, r5
 8004370:	460a      	mov	r2, r1
 8004372:	eb42 0303 	adc.w	r3, r2, r3
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004384:	4629      	mov	r1, r5
 8004386:	024b      	lsls	r3, r1, #9
 8004388:	4621      	mov	r1, r4
 800438a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800438e:	4621      	mov	r1, r4
 8004390:	024a      	lsls	r2, r1, #9
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043a8:	f7fb ff3a 	bl	8000220 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b6:	e067      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b8:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80043c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043d2:	2300      	movs	r3, #0
 80043d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	0159      	lsls	r1, r3, #5
 80043e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ec:	0150      	lsls	r0, r2, #5
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4621      	mov	r1, r4
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800440c:	4649      	mov	r1, r9
 800440e:	018b      	lsls	r3, r1, #6
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004416:	4641      	mov	r1, r8
 8004418:	018a      	lsls	r2, r1, #6
 800441a:	4641      	mov	r1, r8
 800441c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004420:	4649      	mov	r1, r9
 8004422:	eb63 0b01 	sbc.w	fp, r3, r1
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004432:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443a:	4692      	mov	sl, r2
 800443c:	469b      	mov	fp, r3
 800443e:	4623      	mov	r3, r4
 8004440:	eb1a 0303 	adds.w	r3, sl, r3
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	462b      	mov	r3, r5
 8004448:	eb4b 0303 	adc.w	r3, fp, r3
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800445a:	4629      	mov	r1, r5
 800445c:	028b      	lsls	r3, r1, #10
 800445e:	4621      	mov	r1, r4
 8004460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004464:	4621      	mov	r1, r4
 8004466:	028a      	lsls	r2, r1, #10
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004470:	2200      	movs	r2, #0
 8004472:	673b      	str	r3, [r7, #112]	@ 0x70
 8004474:	677a      	str	r2, [r7, #116]	@ 0x74
 8004476:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800447a:	f7fb fed1 	bl	8000220 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4613      	mov	r3, r2
 8004484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004488:	4b41      	ldr	r3, [pc, #260]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800449a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044aa:	e0eb      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b38      	ldr	r3, [pc, #224]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b8:	4b35      	ldr	r3, [pc, #212]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06b      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c4:	4b32      	ldr	r3, [pc, #200]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	2200      	movs	r2, #0
 80044cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d8:	2300      	movs	r3, #0
 80044da:	667b      	str	r3, [r7, #100]	@ 0x64
 80044dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80044e0:	4622      	mov	r2, r4
 80044e2:	462b      	mov	r3, r5
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f2:	0150      	lsls	r0, r2, #5
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4621      	mov	r1, r4
 80044fa:	1a51      	subs	r1, r2, r1
 80044fc:	61b9      	str	r1, [r7, #24]
 80044fe:	4629      	mov	r1, r5
 8004500:	eb63 0301 	sbc.w	r3, r3, r1
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004512:	4659      	mov	r1, fp
 8004514:	018b      	lsls	r3, r1, #6
 8004516:	4651      	mov	r1, sl
 8004518:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800451c:	4651      	mov	r1, sl
 800451e:	018a      	lsls	r2, r1, #6
 8004520:	4651      	mov	r1, sl
 8004522:	ebb2 0801 	subs.w	r8, r2, r1
 8004526:	4659      	mov	r1, fp
 8004528:	eb63 0901 	sbc.w	r9, r3, r1
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004538:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800453c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004540:	4690      	mov	r8, r2
 8004542:	4699      	mov	r9, r3
 8004544:	4623      	mov	r3, r4
 8004546:	eb18 0303 	adds.w	r3, r8, r3
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	462b      	mov	r3, r5
 800454e:	eb49 0303 	adc.w	r3, r9, r3
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004560:	4629      	mov	r1, r5
 8004562:	024b      	lsls	r3, r1, #9
 8004564:	4621      	mov	r1, r4
 8004566:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800456a:	4621      	mov	r1, r4
 800456c:	024a      	lsls	r2, r1, #9
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004576:	2200      	movs	r2, #0
 8004578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800457a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800457c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004580:	f7fb fe4e 	bl	8000220 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800458e:	e065      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x420>
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459c:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x458>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	2200      	movs	r2, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	4611      	mov	r1, r2
 80045a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ae:	2300      	movs	r3, #0
 80045b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80045b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	f04f 0000 	mov.w	r0, #0
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	0159      	lsls	r1, r3, #5
 80045c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c8:	0150      	lsls	r0, r2, #5
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4641      	mov	r1, r8
 80045d0:	1a51      	subs	r1, r2, r1
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4649      	mov	r1, r9
 80045d6:	eb63 0301 	sbc.w	r3, r3, r1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045e8:	4659      	mov	r1, fp
 80045ea:	018b      	lsls	r3, r1, #6
 80045ec:	4651      	mov	r1, sl
 80045ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045f2:	4651      	mov	r1, sl
 80045f4:	018a      	lsls	r2, r1, #6
 80045f6:	4651      	mov	r1, sl
 80045f8:	1a54      	subs	r4, r2, r1
 80045fa:	4659      	mov	r1, fp
 80045fc:	eb63 0501 	sbc.w	r5, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	00eb      	lsls	r3, r5, #3
 800460a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4643      	mov	r3, r8
 8004616:	18e3      	adds	r3, r4, r3
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	464b      	mov	r3, r9
 800461c:	eb45 0303 	adc.w	r3, r5, r3
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800462e:	4629      	mov	r1, r5
 8004630:	028b      	lsls	r3, r1, #10
 8004632:	4621      	mov	r1, r4
 8004634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004638:	4621      	mov	r1, r4
 800463a:	028a      	lsls	r2, r1, #10
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004644:	2200      	movs	r2, #0
 8004646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004648:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800464a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800464e:	f7fb fde7 	bl	8000220 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4613      	mov	r3, r2
 8004658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800465c:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x458>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0f1b      	lsrs	r3, r3, #28
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800466e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800467a:	e003      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x45c>)
 800467e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004688:	4618      	mov	r0, r3
 800468a:	37b8      	adds	r7, #184	@ 0xb8
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	00f42400 	.word	0x00f42400

0800469c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e28d      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8083 	beq.w	80047c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046bc:	4b94      	ldr	r3, [pc, #592]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d019      	beq.n	80046fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046c8:	4b91      	ldr	r3, [pc, #580]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046d4:	4b8e      	ldr	r3, [pc, #568]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b84      	ldr	r3, [pc, #528]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x124>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e25a      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x90>
 800471e:	4b7c      	ldr	r3, [pc, #496]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7b      	ldr	r2, [pc, #492]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xcc>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0xb4>
 8004736:	4b76      	ldr	r3, [pc, #472]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a75      	ldr	r2, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b73      	ldr	r3, [pc, #460]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a72      	ldr	r2, [pc, #456]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xcc>
 8004750:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b6c      	ldr	r3, [pc, #432]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6b      	ldr	r2, [pc, #428]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7ff f934 	bl	80039dc <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7ff f930 	bl	80039dc <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e21f      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b61      	ldr	r3, [pc, #388]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xdc>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7ff f920 	bl	80039dc <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7ff f91c 	bl	80039dc <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	@ 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e20b      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b57      	ldr	r3, [pc, #348]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x104>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d06f      	beq.n	80048ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ce:	4b50      	ldr	r3, [pc, #320]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d017      	beq.n	800480a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047da:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
        || \
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d105      	bne.n	80047f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b47      	ldr	r3, [pc, #284]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b44      	ldr	r3, [pc, #272]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	4b41      	ldr	r3, [pc, #260]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x186>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e1d3      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4937      	ldr	r1, [pc, #220]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004836:	e03a      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b34      	ldr	r3, [pc, #208]	@ (8004914 <HAL_RCC_OscConfig+0x278>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7ff f8c9 	bl	80039dc <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484e:	f7ff f8c5 	bl	80039dc <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e1b4      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004860:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b28      	ldr	r3, [pc, #160]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4925      	ldr	r1, [pc, #148]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e015      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <HAL_RCC_OscConfig+0x278>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7ff f8a8 	bl	80039dc <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004890:	f7ff f8a4 	bl	80039dc <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e193      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d036      	beq.n	8004928 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c2:	4b15      	ldr	r3, [pc, #84]	@ (8004918 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7ff f888 	bl	80039dc <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7ff f884 	bl	80039dc <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e173      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <HAL_RCC_OscConfig+0x274>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x234>
 80048ee:	e01b      	b.n	8004928 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f0:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7ff f871 	bl	80039dc <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fc:	e00e      	b.n	800491c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fe:	f7ff f86d 	bl	80039dc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d907      	bls.n	800491c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e15c      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
 8004910:	40023800 	.word	0x40023800
 8004914:	42470000 	.word	0x42470000
 8004918:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ea      	bne.n	80048fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8097 	beq.w	8004a64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b83      	ldr	r3, [pc, #524]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	@ 0x40
 8004956:	4b7c      	ldr	r3, [pc, #496]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b79      	ldr	r3, [pc, #484]	@ (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d118      	bne.n	80049a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b76      	ldr	r3, [pc, #472]	@ (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a75      	ldr	r2, [pc, #468]	@ (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7ff f82d 	bl	80039dc <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7ff f829 	bl	80039dc <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e118      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b6c      	ldr	r3, [pc, #432]	@ (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x31e>
 80049ac:	4b66      	ldr	r3, [pc, #408]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	4a65      	ldr	r2, [pc, #404]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b8:	e01c      	b.n	80049f4 <HAL_RCC_OscConfig+0x358>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x340>
 80049c2:	4b61      	ldr	r3, [pc, #388]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	4a60      	ldr	r2, [pc, #384]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0x358>
 80049dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e0:	4a59      	ldr	r2, [pc, #356]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e8:	4b57      	ldr	r3, [pc, #348]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a56      	ldr	r2, [pc, #344]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	f023 0304 	bic.w	r3, r3, #4
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fe ffee 	bl	80039dc <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fe ffea 	bl	80039dc <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0d7      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ee      	beq.n	8004a04 <HAL_RCC_OscConfig+0x368>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fe ffd8 	bl	80039dc <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fe ffd4 	bl	80039dc <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0c1      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a46:	4b40      	ldr	r3, [pc, #256]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ee      	bne.n	8004a30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80ad 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6e:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d145      	bne.n	8004b0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b33      	ldr	r3, [pc, #204]	@ (8004b50 <HAL_RCC_OscConfig+0x4b4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe ffa8 	bl	80039dc <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fe ffa4 	bl	80039dc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e093      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa2:	4b29      	ldr	r3, [pc, #164]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	491b      	ldr	r1, [pc, #108]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <HAL_RCC_OscConfig+0x4b4>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fe ff79 	bl	80039dc <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fe ff75 	bl	80039dc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e064      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b00:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x452>
 8004b0c:	e05c      	b.n	8004bc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0e:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <HAL_RCC_OscConfig+0x4b4>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe ff62 	bl	80039dc <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fe ff5e 	bl	80039dc <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e04d      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x480>
 8004b3a:	e045      	b.n	8004bc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e040      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b54:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd4 <HAL_RCC_OscConfig+0x538>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d030      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d129      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d122      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d119      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f839 	bl	8004c76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f000 f9c0 	bl	8004f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e04e      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	@ (8004d50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1e      	ldr	r2, [pc, #120]	@ (8004d58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	@ (8004d64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	@ (8004d68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800

08004d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01b      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0202 	mvn.w	r2, #2
 8004da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8d2 	bl	8004f60 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8c4 	bl	8004f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8d5 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0204 	mvn.w	r2, #4
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8ac 	bl	8004f60 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f89e 	bl	8004f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8af 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0208 	mvn.w	r2, #8
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f886 	bl	8004f60 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f878 	bl	8004f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f889 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0210 	mvn.w	r2, #16
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f860 	bl	8004f60 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f852 	bl	8004f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f863 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0201 	mvn.w	r2, #1
 8004ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe fba2 	bl	800361c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00c      	beq.n	8004efc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f906 	bl	8005108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f834 	bl	8004f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0220 	mvn.w	r2, #32
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8d8 	bl	80050f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a46      	ldr	r2, [pc, #280]	@ (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fba:	d00f      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a43      	ldr	r2, [pc, #268]	@ (80050cc <TIM_Base_SetConfig+0x130>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a42      	ldr	r2, [pc, #264]	@ (80050d0 <TIM_Base_SetConfig+0x134>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a41      	ldr	r2, [pc, #260]	@ (80050d4 <TIM_Base_SetConfig+0x138>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a40      	ldr	r2, [pc, #256]	@ (80050d8 <TIM_Base_SetConfig+0x13c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d108      	bne.n	8004fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffc:	d027      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a32      	ldr	r2, [pc, #200]	@ (80050cc <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d023      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a31      	ldr	r2, [pc, #196]	@ (80050d0 <TIM_Base_SetConfig+0x134>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01f      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a30      	ldr	r2, [pc, #192]	@ (80050d4 <TIM_Base_SetConfig+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2f      	ldr	r2, [pc, #188]	@ (80050d8 <TIM_Base_SetConfig+0x13c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d017      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <TIM_Base_SetConfig+0x140>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2d      	ldr	r2, [pc, #180]	@ (80050e0 <TIM_Base_SetConfig+0x144>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00f      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	@ (80050e4 <TIM_Base_SetConfig+0x148>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	@ (80050e8 <TIM_Base_SetConfig+0x14c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2a      	ldr	r2, [pc, #168]	@ (80050ec <TIM_Base_SetConfig+0x150>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <TIM_Base_SetConfig+0x154>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a10      	ldr	r2, [pc, #64]	@ (80050c8 <TIM_Base_SetConfig+0x12c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_Base_SetConfig+0xf8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <TIM_Base_SetConfig+0x13c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d103      	bne.n	800509c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]
  }
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800
 80050e8:	40001800 	.word	0x40001800
 80050ec:	40001c00 	.word	0x40001c00
 80050f0:	40002000 	.word	0x40002000

080050f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e042      	b.n	80051b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe faaa 	bl	800369c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	@ 0x24
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800515e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f973 	bl	800544c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d175      	bne.n	80052c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_UART_Transmit+0x2c>
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e06e      	b.n	80052ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2221      	movs	r2, #33	@ 0x21
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051fa:	f7fe fbef 	bl	80039dc <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005214:	d108      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e003      	b.n	8005230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005230:	e02e      	b.n	8005290 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f848 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e03a      	b.n	80052ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3302      	adds	r3, #2
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e007      	b.n	8005282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1cb      	bne.n	8005232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2140      	movs	r1, #64	@ 0x40
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f814 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	e03b      	b.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d037      	beq.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fe fb76 	bl	80039dc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e03a      	b.n	800537c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d023      	beq.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b80      	cmp	r3, #128	@ 0x80
 8005318:	d020      	beq.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d01d      	beq.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b08      	cmp	r3, #8
 800532c:	d116      	bne.n	800535c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f81d 	bl	8005384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2208      	movs	r2, #8
 800534e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e00f      	b.n	800537c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	429a      	cmp	r2, r3
 8005378:	d0b4      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b095      	sub	sp, #84	@ 0x54
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d119      	bne.n	8005430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	60bb      	str	r3, [r7, #8]
   return(result);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0310 	bic.w	r3, r3, #16
 8005412:	647b      	str	r3, [r7, #68]	@ 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800541c:	61ba      	str	r2, [r7, #24]
 800541e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6979      	ldr	r1, [r7, #20]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	613b      	str	r3, [r7, #16]
   return(result);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800543e:	bf00      	nop
 8005440:	3754      	adds	r7, #84	@ 0x54
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b0c0      	sub	sp, #256	@ 0x100
 8005452:	af00      	add	r7, sp, #0
 8005454:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	68d9      	ldr	r1, [r3, #12]
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	ea40 0301 	orr.w	r3, r0, r1
 8005474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	431a      	orrs	r2, r3
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054a4:	f021 010c 	bic.w	r1, r1, #12
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054b2:	430b      	orrs	r3, r1
 80054b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	6999      	ldr	r1, [r3, #24]
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	ea40 0301 	orr.w	r3, r0, r1
 80054d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b8f      	ldr	r3, [pc, #572]	@ (8005718 <UART_SetConfig+0x2cc>)
 80054dc:	429a      	cmp	r2, r3
 80054de:	d005      	beq.n	80054ec <UART_SetConfig+0xa0>
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b8d      	ldr	r3, [pc, #564]	@ (800571c <UART_SetConfig+0x2d0>)
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d104      	bne.n	80054f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7fe fe60 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 80054f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054f4:	e003      	b.n	80054fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fe fe47 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 80054fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005508:	f040 810c 	bne.w	8005724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800550c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005510:	2200      	movs	r2, #0
 8005512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005516:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800551a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	1891      	adds	r1, r2, r2
 8005524:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005526:	415b      	adcs	r3, r3
 8005528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800552a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800552e:	4621      	mov	r1, r4
 8005530:	eb12 0801 	adds.w	r8, r2, r1
 8005534:	4629      	mov	r1, r5
 8005536:	eb43 0901 	adc.w	r9, r3, r1
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800554a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800554e:	4690      	mov	r8, r2
 8005550:	4699      	mov	r9, r3
 8005552:	4623      	mov	r3, r4
 8005554:	eb18 0303 	adds.w	r3, r8, r3
 8005558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800555c:	462b      	mov	r3, r5
 800555e:	eb49 0303 	adc.w	r3, r9, r3
 8005562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005572:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800557a:	460b      	mov	r3, r1
 800557c:	18db      	adds	r3, r3, r3
 800557e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005580:	4613      	mov	r3, r2
 8005582:	eb42 0303 	adc.w	r3, r2, r3
 8005586:	657b      	str	r3, [r7, #84]	@ 0x54
 8005588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800558c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005590:	f7fa fe46 	bl	8000220 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4b61      	ldr	r3, [pc, #388]	@ (8005720 <UART_SetConfig+0x2d4>)
 800559a:	fba3 2302 	umull	r2, r3, r3, r2
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	011c      	lsls	r4, r3, #4
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055bc:	415b      	adcs	r3, r3
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055c4:	4641      	mov	r1, r8
 80055c6:	eb12 0a01 	adds.w	sl, r2, r1
 80055ca:	4649      	mov	r1, r9
 80055cc:	eb43 0b01 	adc.w	fp, r3, r1
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055e4:	4692      	mov	sl, r2
 80055e6:	469b      	mov	fp, r3
 80055e8:	4643      	mov	r3, r8
 80055ea:	eb1a 0303 	adds.w	r3, sl, r3
 80055ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f2:	464b      	mov	r3, r9
 80055f4:	eb4b 0303 	adc.w	r3, fp, r3
 80055f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005608:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800560c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005610:	460b      	mov	r3, r1
 8005612:	18db      	adds	r3, r3, r3
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40
 8005616:	4613      	mov	r3, r2
 8005618:	eb42 0303 	adc.w	r3, r2, r3
 800561c:	647b      	str	r3, [r7, #68]	@ 0x44
 800561e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005626:	f7fa fdfb 	bl	8000220 <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4611      	mov	r1, r2
 8005630:	4b3b      	ldr	r3, [pc, #236]	@ (8005720 <UART_SetConfig+0x2d4>)
 8005632:	fba3 2301 	umull	r2, r3, r3, r1
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2264      	movs	r2, #100	@ 0x64
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	1acb      	subs	r3, r1, r3
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005646:	4b36      	ldr	r3, [pc, #216]	@ (8005720 <UART_SetConfig+0x2d4>)
 8005648:	fba3 2302 	umull	r2, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005654:	441c      	add	r4, r3
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005660:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005670:	415b      	adcs	r3, r3
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005678:	4641      	mov	r1, r8
 800567a:	1851      	adds	r1, r2, r1
 800567c:	6339      	str	r1, [r7, #48]	@ 0x30
 800567e:	4649      	mov	r1, r9
 8005680:	414b      	adcs	r3, r1
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005690:	4659      	mov	r1, fp
 8005692:	00cb      	lsls	r3, r1, #3
 8005694:	4651      	mov	r1, sl
 8005696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569a:	4651      	mov	r1, sl
 800569c:	00ca      	lsls	r2, r1, #3
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	4642      	mov	r2, r8
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056ac:	464b      	mov	r3, r9
 80056ae:	460a      	mov	r2, r1
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056cc:	460b      	mov	r3, r1
 80056ce:	18db      	adds	r3, r3, r3
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d2:	4613      	mov	r3, r2
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056e2:	f7fa fd9d 	bl	8000220 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <UART_SetConfig+0x2d4>)
 80056ec:	fba3 1302 	umull	r1, r3, r3, r2
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	2164      	movs	r1, #100	@ 0x64
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	3332      	adds	r3, #50	@ 0x32
 80056fe:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <UART_SetConfig+0x2d4>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	f003 0207 	and.w	r2, r3, #7
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4422      	add	r2, r4
 8005712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005714:	e106      	b.n	8005924 <UART_SetConfig+0x4d8>
 8005716:	bf00      	nop
 8005718:	40011000 	.word	0x40011000
 800571c:	40011400 	.word	0x40011400
 8005720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005728:	2200      	movs	r2, #0
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800572e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005736:	4642      	mov	r2, r8
 8005738:	464b      	mov	r3, r9
 800573a:	1891      	adds	r1, r2, r2
 800573c:	6239      	str	r1, [r7, #32]
 800573e:	415b      	adcs	r3, r3
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
 8005742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005746:	4641      	mov	r1, r8
 8005748:	1854      	adds	r4, r2, r1
 800574a:	4649      	mov	r1, r9
 800574c:	eb43 0501 	adc.w	r5, r3, r1
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	00eb      	lsls	r3, r5, #3
 800575a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575e:	00e2      	lsls	r2, r4, #3
 8005760:	4614      	mov	r4, r2
 8005762:	461d      	mov	r5, r3
 8005764:	4643      	mov	r3, r8
 8005766:	18e3      	adds	r3, r4, r3
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800576c:	464b      	mov	r3, r9
 800576e:	eb45 0303 	adc.w	r3, r5, r3
 8005772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005782:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005792:	4629      	mov	r1, r5
 8005794:	008b      	lsls	r3, r1, #2
 8005796:	4621      	mov	r1, r4
 8005798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579c:	4621      	mov	r1, r4
 800579e:	008a      	lsls	r2, r1, #2
 80057a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057a4:	f7fa fd3c 	bl	8000220 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b60      	ldr	r3, [pc, #384]	@ (8005930 <UART_SetConfig+0x4e4>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011c      	lsls	r4, r3, #4
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	61b9      	str	r1, [r7, #24]
 80057d0:	415b      	adcs	r3, r3
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6139      	str	r1, [r7, #16]
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800580c:	464b      	mov	r3, r9
 800580e:	460a      	mov	r2, r1
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005822:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005830:	4649      	mov	r1, r9
 8005832:	008b      	lsls	r3, r1, #2
 8005834:	4641      	mov	r1, r8
 8005836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800583a:	4641      	mov	r1, r8
 800583c:	008a      	lsls	r2, r1, #2
 800583e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005842:	f7fa fced 	bl	8000220 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4611      	mov	r1, r2
 800584c:	4b38      	ldr	r3, [pc, #224]	@ (8005930 <UART_SetConfig+0x4e4>)
 800584e:	fba3 2301 	umull	r2, r3, r3, r1
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2264      	movs	r2, #100	@ 0x64
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	1acb      	subs	r3, r1, r3
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	3332      	adds	r3, #50	@ 0x32
 8005860:	4a33      	ldr	r2, [pc, #204]	@ (8005930 <UART_SetConfig+0x4e4>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800586c:	441c      	add	r4, r3
 800586e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005872:	2200      	movs	r2, #0
 8005874:	673b      	str	r3, [r7, #112]	@ 0x70
 8005876:	677a      	str	r2, [r7, #116]	@ 0x74
 8005878:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	415b      	adcs	r3, r3
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058be:	464b      	mov	r3, r9
 80058c0:	460a      	mov	r2, r1
 80058c2:	eb42 0303 	adc.w	r3, r2, r3
 80058c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058e0:	4649      	mov	r1, r9
 80058e2:	008b      	lsls	r3, r1, #2
 80058e4:	4641      	mov	r1, r8
 80058e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ea:	4641      	mov	r1, r8
 80058ec:	008a      	lsls	r2, r1, #2
 80058ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058f2:	f7fa fc95 	bl	8000220 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <UART_SetConfig+0x4e4>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	@ 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	3332      	adds	r3, #50	@ 0x32
 800590e:	4a08      	ldr	r2, [pc, #32]	@ (8005930 <UART_SetConfig+0x4e4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4422      	add	r2, r4
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800592a:	46bd      	mov	sp, r7
 800592c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005930:	51eb851f 	.word	0x51eb851f

08005934 <memset>:
 8005934:	4402      	add	r2, r0
 8005936:	4603      	mov	r3, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4d0d      	ldr	r5, [pc, #52]	@ (800597c <__libc_init_array+0x38>)
 8005948:	4c0d      	ldr	r4, [pc, #52]	@ (8005980 <__libc_init_array+0x3c>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	2600      	movs	r6, #0
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	4d0b      	ldr	r5, [pc, #44]	@ (8005984 <__libc_init_array+0x40>)
 8005956:	4c0c      	ldr	r4, [pc, #48]	@ (8005988 <__libc_init_array+0x44>)
 8005958:	f000 f826 	bl	80059a8 <_init>
 800595c:	1b64      	subs	r4, r4, r5
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	2600      	movs	r6, #0
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08005a98 	.word	0x08005a98
 8005980:	08005a98 	.word	0x08005a98
 8005984:	08005a98 	.word	0x08005a98
 8005988:	08005a9c 	.word	0x08005a9c

0800598c <memcpy>:
 800598c:	440a      	add	r2, r1
 800598e:	4291      	cmp	r1, r2
 8005990:	f100 33ff 	add.w	r3, r0, #4294967295
 8005994:	d100      	bne.n	8005998 <memcpy+0xc>
 8005996:	4770      	bx	lr
 8005998:	b510      	push	{r4, lr}
 800599a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800599e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a2:	4291      	cmp	r1, r2
 80059a4:	d1f9      	bne.n	800599a <memcpy+0xe>
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
