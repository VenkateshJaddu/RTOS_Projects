
Queue_n_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d40  08007d40  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d48  08007d48  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007d50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eb0  20000020  08007d70  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ed0  08007d70  00009ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016455  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d7  00000000  00000000  0001f4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa6  00000000  00000000  00023e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228a7  00000000  00000000  00024e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019333  00000000  00000000  000476dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5f91  00000000  00000000  00060a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001469a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  001469e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014bdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b38 	.word	0x08007b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	08007b38 	.word	0x08007b38

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f103 0208 	add.w	r2, r3, #8
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f04f 32ff 	mov.w	r2, #4294967295
 800053c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0208 	add.w	r2, r3, #8
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f103 0208 	add.w	r2, r3, #8
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800057e:	b480      	push	{r7}
 8000580:	b085      	sub	sp, #20
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000594:	d103      	bne.n	800059e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e00c      	b.n	80005b8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3308      	adds	r3, #8
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e002      	b.n	80005ac <vListInsert+0x2e>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d2f6      	bcs.n	80005a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6892      	ldr	r2, [r2, #8]
 8000606:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6852      	ldr	r2, [r2, #4]
 8000610:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	d103      	bne.n	8000624 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10b      	bne.n	8000674 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800065c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d05d      	beq.n	8000736 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800067e:	2b00      	cmp	r3, #0
 8000680:	d059      	beq.n	8000736 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800068a:	2100      	movs	r1, #0
 800068c:	fba3 2302 	umull	r2, r3, r3, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d000      	beq.n	8000696 <xQueueGenericReset+0x52>
 8000694:	2101      	movs	r1, #1
 8000696:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000698:	2b00      	cmp	r3, #0
 800069a:	d14c      	bne.n	8000736 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800069c:	f002 fe6a 	bl	8003374 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006a8:	6939      	ldr	r1, [r7, #16]
 80006aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	441a      	add	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006cc:	3b01      	subs	r3, #1
 80006ce:	6939      	ldr	r1, [r7, #16]
 80006d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006d2:	fb01 f303 	mul.w	r3, r1, r3
 80006d6:	441a      	add	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	22ff      	movs	r2, #255	@ 0xff
 80006e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	22ff      	movs	r2, #255	@ 0xff
 80006e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d114      	bne.n	800071c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d01a      	beq.n	8000730 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	3310      	adds	r3, #16
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fade 	bl	8001cc0 <xTaskRemoveFromEventList>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <xQueueGenericReset+0x120>)
 800070c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	f3bf 8f6f 	isb	sy
 800071a:	e009      	b.n	8000730 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	3310      	adds	r3, #16
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff feff 	bl	8000524 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	3324      	adds	r3, #36	@ 0x24
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fefa 	bl	8000524 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000730:	f002 fe52 	bl	80033d8 <vPortExitCritical>
 8000734:	e001      	b.n	800073a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10b      	bne.n	8000758 <xQueueGenericReset+0x114>
    __asm volatile
 8000740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000744:	f383 8811 	msr	BASEPRI, r3
 8000748:	f3bf 8f6f 	isb	sy
 800074c:	f3bf 8f4f 	dsb	sy
 8000750:	60bb      	str	r3, [r7, #8]
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000758:	697b      	ldr	r3, [r7, #20]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000ed04 	.word	0xe000ed04

08000768 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af02      	add	r7, sp, #8
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d02e      	beq.n	80007de <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000780:	2100      	movs	r1, #0
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	fba3 2302 	umull	r2, r3, r3, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d000      	beq.n	8000790 <xQueueGenericCreate+0x28>
 800078e:	2101      	movs	r1, #1
 8000790:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000792:	2b00      	cmp	r3, #0
 8000794:	d123      	bne.n	80007de <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800079e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007a2:	d81c      	bhi.n	80007de <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	3350      	adds	r3, #80	@ 0x50
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 ff04 	bl	80035c0 <pvPortMalloc>
 80007b8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d01d      	beq.n	80007fc <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3350      	adds	r3, #80	@ 0x50
 80007c8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f815 	bl	8000806 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80007dc:	e00e      	b.n	80007fc <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10b      	bne.n	80007fc <xQueueGenericCreate+0x94>
    __asm volatile
 80007e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	613b      	str	r3, [r7, #16]
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
    }
 80007fe:	4618      	mov	r0, r3
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e002      	b.n	8000828 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	68ba      	ldr	r2, [r7, #8]
 8000832:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000834:	2101      	movs	r1, #1
 8000836:	69b8      	ldr	r0, [r7, #24]
 8000838:	f7ff ff04 	bl	8000644 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	78fa      	ldrb	r2, [r7, #3]
 8000840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	@ 0x38
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800085a:	2300      	movs	r3, #0
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8000862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <xQueueGenericSend+0x34>
    __asm volatile
 8000868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086c:	f383 8811 	msr	BASEPRI, r3
 8000870:	f3bf 8f6f 	isb	sy
 8000874:	f3bf 8f4f 	dsb	sy
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d103      	bne.n	800088e <xQueueGenericSend+0x42>
 8000886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <xQueueGenericSend+0x46>
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <xQueueGenericSend+0x48>
 8000892:	2300      	movs	r3, #0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10b      	bne.n	80008b0 <xQueueGenericSend+0x64>
    __asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d103      	bne.n	80008be <xQueueGenericSend+0x72>
 80008b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d101      	bne.n	80008c2 <xQueueGenericSend+0x76>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <xQueueGenericSend+0x78>
 80008c2:	2300      	movs	r3, #0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10b      	bne.n	80008e0 <xQueueGenericSend+0x94>
    __asm volatile
 80008c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008cc:	f383 8811 	msr	BASEPRI, r3
 80008d0:	f3bf 8f6f 	isb	sy
 80008d4:	f3bf 8f4f 	dsb	sy
 80008d8:	623b      	str	r3, [r7, #32]
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008e0:	f001 fc04 	bl	80020ec <xTaskGetSchedulerState>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <xQueueGenericSend+0xa4>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <xQueueGenericSend+0xa8>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <xQueueGenericSend+0xaa>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10b      	bne.n	8000912 <xQueueGenericSend+0xc6>
    __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	61fb      	str	r3, [r7, #28]
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000912:	f002 fd2f 	bl	8003374 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800091a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800091c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800091e:	429a      	cmp	r2, r3
 8000920:	d302      	bcc.n	8000928 <xQueueGenericSend+0xdc>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d129      	bne.n	800097c <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800092e:	f000 fae0 	bl	8000ef2 <prvCopyDataToQueue>
 8000932:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000938:	2b00      	cmp	r3, #0
 800093a:	d010      	beq.n	800095e <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800093c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800093e:	3324      	adds	r3, #36	@ 0x24
 8000940:	4618      	mov	r0, r3
 8000942:	f001 f9bd 	bl	8001cc0 <xTaskRemoveFromEventList>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d013      	beq.n	8000974 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800094c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <xQueueGenericSend+0x200>)
 800094e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	e00a      	b.n	8000974 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800095e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000964:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <xQueueGenericSend+0x200>)
 8000966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000974:	f002 fd30 	bl	80033d8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000978:	2301      	movs	r3, #1
 800097a:	e063      	b.n	8000a44 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000982:	f002 fd29 	bl	80033d8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000986:	2300      	movs	r3, #0
 8000988:	e05c      	b.n	8000a44 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800098a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800098c:	2b00      	cmp	r3, #0
 800098e:	d106      	bne.n	800099e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fa6d 	bl	8001e74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800099a:	2301      	movs	r3, #1
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800099e:	f002 fd1b 	bl	80033d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009a2:	f000 fe77 	bl	8001694 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009a6:	f002 fce5 	bl	8003374 <vPortEnterCritical>
 80009aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b6:	d103      	bne.n	80009c0 <xQueueGenericSend+0x174>
 80009b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d103      	bne.n	80009d6 <xQueueGenericSend+0x18a>
 80009ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80009d6:	f002 fcff 	bl	80033d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fa5c 	bl	8001ea0 <xTaskCheckForTimeOut>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d124      	bne.n	8000a38 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009f0:	f000 fb77 	bl	80010e2 <prvIsQueueFull>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d018      	beq.n	8000a2c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fc:	3310      	adds	r3, #16
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f8f0 	bl	8001be8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a0a:	f000 fb02 	bl	8001012 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a0e:	f000 fe4f 	bl	80016b0 <xTaskResumeAll>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f47f af7c 	bne.w	8000912 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <xQueueGenericSend+0x200>)
 8000a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	f3bf 8f4f 	dsb	sy
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	e772      	b.n	8000912 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a2e:	f000 faf0 	bl	8001012 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a32:	f000 fe3d 	bl	80016b0 <xTaskResumeAll>
 8000a36:	e76c      	b.n	8000912 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a3a:	f000 faea 	bl	8001012 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a3e:	f000 fe37 	bl	80016b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a42:	2300      	movs	r3, #0
        }
    }
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3738      	adds	r7, #56	@ 0x38
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b092      	sub	sp, #72	@ 0x48
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10b      	bne.n	8000a80 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8000a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a6c:	f383 8811 	msr	BASEPRI, r3
 8000a70:	f3bf 8f6f 	isb	sy
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <xQueueGenericSendFromISR+0x3e>
 8000a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <xQueueGenericSendFromISR+0x42>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <xQueueGenericSendFromISR+0x44>
 8000a92:	2300      	movs	r3, #0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10b      	bne.n	8000ab0 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8000a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d103      	bne.n	8000abe <xQueueGenericSendFromISR+0x6e>
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d101      	bne.n	8000ac2 <xQueueGenericSendFromISR+0x72>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <xQueueGenericSendFromISR+0x74>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10b      	bne.n	8000ae0 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8000ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000acc:	f383 8811 	msr	BASEPRI, r3
 8000ad0:	f3bf 8f6f 	isb	sy
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ae0:	f002 fd2c 	bl	800353c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000ae4:	f3ef 8211 	mrs	r2, BASEPRI
 8000ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aec:	f383 8811 	msr	BASEPRI, r3
 8000af0:	f3bf 8f6f 	isb	sy
 8000af4:	f3bf 8f4f 	dsb	sy
 8000af8:	623a      	str	r2, [r7, #32]
 8000afa:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000afc:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d302      	bcc.n	8000b12 <xQueueGenericSendFromISR+0xc2>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d147      	bne.n	8000ba2 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b28:	f000 f9e3 	bl	8000ef2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b2c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d112      	bne.n	8000b5c <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d02e      	beq.n	8000b9c <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b40:	3324      	adds	r3, #36	@ 0x24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f8bc 	bl	8001cc0 <xTaskRemoveFromEventList>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d026      	beq.n	8000b9c <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d023      	beq.n	8000b9c <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e01f      	b.n	8000b9c <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000b5c:	f000 fec0 	bl	80018e0 <uxTaskGetNumberOfTasks>
 8000b60:	6338      	str	r0, [r7, #48]	@ 0x30
 8000b62:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d917      	bls.n	8000b9c <xQueueGenericSendFromISR+0x14c>
 8000b6c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	d10b      	bne.n	8000b8c <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8000b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	61bb      	str	r3, [r7, #24]
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <xQueueGenericSendFromISR+0x138>
 8000b8c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	b25a      	sxtb	r2, r3
 8000b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000ba0:	e001      	b.n	8000ba6 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000bb0:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8000bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3748      	adds	r7, #72	@ 0x48
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <xQueueReceive+0x32>
    __asm volatile
 8000bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	623b      	str	r3, [r7, #32]
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d103      	bne.n	8000bfc <xQueueReceive+0x40>
 8000bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <xQueueReceive+0x44>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <xQueueReceive+0x46>
 8000c00:	2300      	movs	r3, #0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10b      	bne.n	8000c1e <xQueueReceive+0x62>
    __asm volatile
 8000c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c0a:	f383 8811 	msr	BASEPRI, r3
 8000c0e:	f3bf 8f6f 	isb	sy
 8000c12:	f3bf 8f4f 	dsb	sy
 8000c16:	61fb      	str	r3, [r7, #28]
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	e7fd      	b.n	8000c1a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c1e:	f001 fa65 	bl	80020ec <xTaskGetSchedulerState>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <xQueueReceive+0x72>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <xQueueReceive+0x76>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <xQueueReceive+0x78>
 8000c32:	2300      	movs	r3, #0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10b      	bne.n	8000c50 <xQueueReceive+0x94>
    __asm volatile
 8000c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	61bb      	str	r3, [r7, #24]
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c50:	f002 fb90 	bl	8003374 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01f      	beq.n	8000ca0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c64:	f000 f9af 	bl	8000fc6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c6e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00f      	beq.n	8000c98 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c7a:	3310      	adds	r3, #16
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 f81f 	bl	8001cc0 <xTaskRemoveFromEventList>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c88:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <xQueueReceive+0x1c0>)
 8000c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c98:	f002 fb9e 	bl	80033d8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e069      	b.n	8000d74 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ca6:	f002 fb97 	bl	80033d8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e062      	b.n	8000d74 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d106      	bne.n	8000cc2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f8db 	bl	8001e74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cc2:	f002 fb89 	bl	80033d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cc6:	f000 fce5 	bl	8001694 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cca:	f002 fb53 	bl	8003374 <vPortEnterCritical>
 8000cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cda:	d103      	bne.n	8000ce4 <xQueueReceive+0x128>
 8000cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d103      	bne.n	8000cfa <xQueueReceive+0x13e>
 8000cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000cfa:	f002 fb6d 	bl	80033d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cfe:	1d3a      	adds	r2, r7, #4
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f8ca 	bl	8001ea0 <xTaskCheckForTimeOut>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d123      	bne.n	8000d5a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d14:	f000 f9cf 	bl	80010b6 <prvIsQueueEmpty>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d017      	beq.n	8000d4e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	3324      	adds	r3, #36	@ 0x24
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 ff5e 	bl	8001be8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d2e:	f000 f970 	bl	8001012 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d32:	f000 fcbd 	bl	80016b0 <xTaskResumeAll>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d189      	bne.n	8000c50 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <xQueueReceive+0x1c0>)
 8000d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	e780      	b.n	8000c50 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d50:	f000 f95f 	bl	8001012 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d54:	f000 fcac 	bl	80016b0 <xTaskResumeAll>
 8000d58:	e77a      	b.n	8000c50 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d5c:	f000 f959 	bl	8001012 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d60:	f000 fca6 	bl	80016b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d66:	f000 f9a6 	bl	80010b6 <prvIsQueueEmpty>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f43f af6f 	beq.w	8000c50 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000d72:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	@ 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	e000ed04 	.word	0xe000ed04

08000d80 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b090      	sub	sp, #64	@ 0x40
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8000d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10b      	bne.n	8000dae <xQueueReceiveFromISR+0x2e>
    __asm volatile
 8000d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d9a:	f383 8811 	msr	BASEPRI, r3
 8000d9e:	f3bf 8f6f 	isb	sy
 8000da2:	f3bf 8f4f 	dsb	sy
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	e7fd      	b.n	8000daa <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <xQueueReceiveFromISR+0x3c>
 8000db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <xQueueReceiveFromISR+0x40>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <xQueueReceiveFromISR+0x42>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10b      	bne.n	8000dde <xQueueReceiveFromISR+0x5e>
    __asm volatile
 8000dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dca:	f383 8811 	msr	BASEPRI, r3
 8000dce:	f3bf 8f6f 	isb	sy
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	623b      	str	r3, [r7, #32]
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000dde:	f002 fbad 	bl	800353c <vPortValidateInterruptPriority>
    __asm volatile
 8000de2:	f3ef 8211 	mrs	r2, BASEPRI
 8000de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dea:	f383 8811 	msr	BASEPRI, r3
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f3bf 8f4f 	dsb	sy
 8000df6:	61fa      	str	r2, [r7, #28]
 8000df8:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8000dfa:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d047      	beq.n	8000e9a <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8000e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e18:	f000 f8d5 	bl	8000fc6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e22:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8000e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d112      	bne.n	8000e54 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d02e      	beq.n	8000e94 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e38:	3310      	adds	r3, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 ff40 	bl	8001cc0 <xTaskRemoveFromEventList>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d026      	beq.n	8000e94 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d023      	beq.n	8000e94 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e01f      	b.n	8000e94 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8000e54:	f000 fd44 	bl	80018e0 <uxTaskGetNumberOfTasks>
 8000e58:	62b8      	str	r0, [r7, #40]	@ 0x28
 8000e5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d917      	bls.n	8000e94 <xQueueReceiveFromISR+0x114>
 8000e64:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000e68:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e6a:	d10b      	bne.n	8000e84 <xQueueReceiveFromISR+0x104>
    __asm volatile
 8000e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e70:	f383 8811 	msr	BASEPRI, r3
 8000e74:	f3bf 8f6f 	isb	sy
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	617b      	str	r3, [r7, #20]
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <xQueueReceiveFromISR+0x100>
 8000e84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	b25a      	sxtb	r2, r3
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8000e94:	2301      	movs	r3, #1
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e98:	e001      	b.n	8000e9e <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea0:	613b      	str	r3, [r7, #16]
    __asm volatile
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f383 8811 	msr	BASEPRI, r3
}
 8000ea8:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8000eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3740      	adds	r7, #64	@ 0x40
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10b      	bne.n	8000eda <uxQueueMessagesWaiting+0x26>
    __asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	60bb      	str	r3, [r7, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	e7fd      	b.n	8000ed6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000eda:	f002 fa4b 	bl	8003374 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000ee4:	f002 fa78 	bl	80033d8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f06:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10d      	bne.n	8000f2c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d14d      	bne.n	8000fb4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 f903 	bl	8002128 <xTaskPriorityDisinherit>
 8000f22:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	e043      	b.n	8000fb4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d119      	bne.n	8000f66 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6858      	ldr	r0, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	f006 fded 	bl	8007b1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	441a      	add	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d32b      	bcc.n	8000fb4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	e026      	b.n	8000fb4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68d8      	ldr	r0, [r3, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	f006 fdd3 	bl	8007b1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	425b      	negs	r3, r3
 8000f80:	441a      	add	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d207      	bcs.n	8000fa2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	441a      	add	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d105      	bne.n	8000fb4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000fbc:	697b      	ldr	r3, [r7, #20]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d018      	beq.n	800100a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	441a      	add	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d303      	bcc.n	8000ffa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68d9      	ldr	r1, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	461a      	mov	r2, r3
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f006 fd89 	bl	8007b1c <memcpy>
    }
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800101a:	f002 f9ab 	bl	8003374 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001024:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001026:	e011      	b.n	800104c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	2b00      	cmp	r3, #0
 800102e:	d012      	beq.n	8001056 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3324      	adds	r3, #36	@ 0x24
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fe43 	bl	8001cc0 <xTaskRemoveFromEventList>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001040:	f000 ff96 	bl	8001f70 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3b01      	subs	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dce9      	bgt.n	8001028 <prvUnlockQueue+0x16>
 8001054:	e000      	b.n	8001058 <prvUnlockQueue+0x46>
                    break;
 8001056:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	22ff      	movs	r2, #255	@ 0xff
 800105c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001060:	f002 f9ba 	bl	80033d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001064:	f002 f986 	bl	8003374 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800106e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001070:	e011      	b.n	8001096 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d012      	beq.n	80010a0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3310      	adds	r3, #16
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fe1e 	bl	8001cc0 <xTaskRemoveFromEventList>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800108a:	f000 ff71 	bl	8001f70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	3b01      	subs	r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dce9      	bgt.n	8001072 <prvUnlockQueue+0x60>
 800109e:	e000      	b.n	80010a2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80010a0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	22ff      	movs	r2, #255	@ 0xff
 80010a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80010aa:	f002 f995 	bl	80033d8 <vPortExitCritical>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010be:	f002 f959 	bl	8003374 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e001      	b.n	80010d4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010d4:	f002 f980 	bl	80033d8 <vPortExitCritical>

    return xReturn;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010ea:	f002 f943 	bl	8003374 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d102      	bne.n	8001100 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e001      	b.n	8001104 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001104:	f002 f968 	bl	80033d8 <vPortExitCritical>

    return xReturn;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001112:	b480      	push	{r7}
 8001114:	b087      	sub	sp, #28
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <xQueueIsQueueFullFromISR+0x2a>
    __asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	60fb      	str	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001144:	429a      	cmp	r2, r3
 8001146:	d102      	bne.n	800114e <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e001      	b.n	8001152 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
 8001152:	697b      	ldr	r3, [r7, #20]
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60fb      	str	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d024      	beq.n	80011dc <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e01e      	b.n	80011d6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001198:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <vQueueAddToRegistry+0x9c>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d105      	bne.n	80011b4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <vQueueAddToRegistry+0x9c>)
 80011ae:	4413      	add	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
                    break;
 80011b2:	e013      	b.n	80011dc <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10a      	bne.n	80011d0 <vQueueAddToRegistry+0x70>
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <vQueueAddToRegistry+0x9c>)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <vQueueAddToRegistry+0x9c>)
 80011cc:	4413      	add	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b07      	cmp	r3, #7
 80011da:	d9dd      	bls.n	8001198 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000003c 	.word	0x2000003c

08001200 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001210:	f002 f8b0 	bl	8003374 <vPortEnterCritical>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d103      	bne.n	800122a <vQueueWaitForMessageRestricted+0x2a>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001230:	b25b      	sxtb	r3, r3
 8001232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001236:	d103      	bne.n	8001240 <vQueueWaitForMessageRestricted+0x40>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001240:	f002 f8ca 	bl	80033d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3324      	adds	r3, #36	@ 0x24
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fced 	bl	8001c34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff fed9 	bl	8001012 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af04      	add	r7, sp, #16
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 f9a0 	bl	80035c0 <pvPortMalloc>
 8001280:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001288:	2058      	movs	r0, #88	@ 0x58
 800128a:	f002 f999 	bl	80035c0 <pvPortMalloc>
 800128e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001296:	2258      	movs	r2, #88	@ 0x58
 8001298:	2100      	movs	r1, #0
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f006 fc12 	bl	8007ac4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a6:	e005      	b.n	80012b4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80012a8:	6938      	ldr	r0, [r7, #16]
 80012aa:	f002 fabb 	bl	8003824 <vPortFree>
 80012ae:	e001      	b.n	80012b4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00d      	beq.n	80012d6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80012ba:	2300      	movs	r3, #0
 80012bc:	9303      	str	r3, [sp, #12]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f828 	bl	8001326 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80012d6:	697b      	ldr	r3, [r7, #20]
    }
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff ffb3 	bl	8001268 <prvCreateTask>
 8001302:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800130a:	6938      	ldr	r0, [r7, #16]
 800130c:	f000 f89c 	bl	8001448 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e002      	b.n	800131c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800131c:	697b      	ldr	r3, [r7, #20]
    }
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b088      	sub	sp, #32
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001336:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	21a5      	movs	r1, #165	@ 0xa5
 8001340:	f006 fbc0 	bl	8007ac4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800134e:	3b01      	subs	r3, #1
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f023 0307 	bic.w	r3, r3, #7
 800135c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	617b      	str	r3, [r7, #20]
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01e      	beq.n	80013c4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e012      	b.n	80013b2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	7819      	ldrb	r1, [r3, #0]
 8001394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	3334      	adds	r3, #52	@ 0x34
 800139c:	460a      	mov	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d9e9      	bls.n	800138c <prvInitialiseNewTask+0x66>
 80013b8:	e000      	b.n	80013bc <prvInitialiseNewTask+0x96>
            {
                break;
 80013ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80013c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d90b      	bls.n	80013e2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80013ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013ce:	f383 8811 	msr	BASEPRI, r3
 80013d2:	f3bf 8f6f 	isb	sy
 80013d6:	f3bf 8f4f 	dsb	sy
 80013da:	613b      	str	r3, [r7, #16]
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	e7fd      	b.n	80013de <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80013e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d901      	bls.n	80013ec <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80013e8:	2304      	movs	r3, #4
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80013ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80013f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fa:	3304      	adds	r3, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8b1 	bl	8000564 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001404:	3318      	adds	r3, #24
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8ac 	bl	8000564 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800140c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800140e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001410:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001414:	f1c3 0205 	rsb	r2, r3, #5
 8001418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800141c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	68f9      	ldr	r1, [r7, #12]
 8001426:	69b8      	ldr	r0, [r7, #24]
 8001428:	f001 fe26 	bl	8003078 <pxPortInitialiseStack>
 800142c:	4602      	mov	r2, r0
 800142e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001430:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800143c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001450:	f001 ff90 	bl	8003374 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001454:	4b41      	ldr	r3, [pc, #260]	@ (800155c <prvAddNewTaskToReadyList+0x114>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a40      	ldr	r2, [pc, #256]	@ (800155c <prvAddNewTaskToReadyList+0x114>)
 800145c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800145e:	4b40      	ldr	r3, [pc, #256]	@ (8001560 <prvAddNewTaskToReadyList+0x118>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001466:	4a3e      	ldr	r2, [pc, #248]	@ (8001560 <prvAddNewTaskToReadyList+0x118>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800146c:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <prvAddNewTaskToReadyList+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d110      	bne.n	8001496 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001474:	f000 fda0 	bl	8001fb8 <prvInitialiseTaskLists>
 8001478:	e00d      	b.n	8001496 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800147a:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <prvAddNewTaskToReadyList+0x11c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001482:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <prvAddNewTaskToReadyList+0x118>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	429a      	cmp	r2, r3
 800148e:	d802      	bhi.n	8001496 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001490:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <prvAddNewTaskToReadyList+0x118>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001496:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <prvAddNewTaskToReadyList+0x120>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a32      	ldr	r2, [pc, #200]	@ (8001568 <prvAddNewTaskToReadyList+0x120>)
 800149e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <prvAddNewTaskToReadyList+0x120>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	2201      	movs	r2, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <prvAddNewTaskToReadyList+0x124>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <prvAddNewTaskToReadyList+0x124>)
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014be:	492c      	ldr	r1, [pc, #176]	@ (8001570 <prvAddNewTaskToReadyList+0x128>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3304      	adds	r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	3204      	adds	r2, #4
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1d1a      	adds	r2, r3, #4
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <prvAddNewTaskToReadyList+0x128>)
 80014fe:	441a      	add	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001508:	4919      	ldr	r1, [pc, #100]	@ (8001570 <prvAddNewTaskToReadyList+0x128>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800151a:	1c59      	adds	r1, r3, #1
 800151c:	4814      	ldr	r0, [pc, #80]	@ (8001570 <prvAddNewTaskToReadyList+0x128>)
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800152a:	f001 ff55 	bl	80033d8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <prvAddNewTaskToReadyList+0x11c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00e      	beq.n	8001554 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <prvAddNewTaskToReadyList+0x118>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <prvAddNewTaskToReadyList+0x10c>
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <prvAddNewTaskToReadyList+0x12c>)
 8001546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000154 	.word	0x20000154
 8001560:	2000007c 	.word	0x2000007c
 8001564:	20000160 	.word	0x20000160
 8001568:	20000170 	.word	0x20000170
 800156c:	2000015c 	.word	0x2000015c
 8001570:	20000080 	.word	0x20000080
 8001574:	e000ed04 	.word	0xe000ed04

08001578 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e011      	b.n	80015b0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800158c:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <prvCreateIdleTasks+0x88>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4413      	add	r3, r2
 8001592:	7819      	ldrb	r1, [r3, #0]
 8001594:	1d3a      	adds	r2, r7, #4
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	4413      	add	r3, r2
 800159a:	460a      	mov	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800159e:	1d3a      	adds	r2, r7, #4
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4413      	add	r3, r2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b09      	cmp	r3, #9
 80015b4:	ddea      	ble.n	800158c <prvCreateIdleTasks+0x14>
 80015b6:	e000      	b.n	80015ba <prvCreateIdleTasks+0x42>
        {
            break;
 80015b8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e015      	b.n	80015ec <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <prvCreateIdleTasks+0x8c>)
 80015c2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <prvCreateIdleTasks+0x90>)
 80015ca:	4413      	add	r3, r2
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2282      	movs	r2, #130	@ 0x82
 80015d8:	6938      	ldr	r0, [r7, #16]
 80015da:	f7ff fe81 	bl	80012e0 <xTaskCreate>
 80015de:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dde6      	ble.n	80015c0 <prvCreateIdleTasks+0x48>
 80015f2:	e000      	b.n	80015f6 <prvCreateIdleTasks+0x7e>
        {
            break;
 80015f4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80015f6:	69fb      	ldr	r3, [r7, #28]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08007b50 	.word	0x08007b50
 8001604:	08001f89 	.word	0x08001f89
 8001608:	20000178 	.word	0x20000178

0800160c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001612:	f7ff ffb1 	bl	8001578 <prvCreateIdleTasks>
 8001616:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800161e:	f001 f9c9 	bl	80029b4 <xTimerCreateTimerTask>
 8001622:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d116      	bne.n	8001658 <vTaskStartScheduler+0x4c>
    __asm volatile
 800162a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	60bb      	str	r3, [r7, #8]
}
 800163c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <vTaskStartScheduler+0x78>)
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <vTaskStartScheduler+0x7c>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <vTaskStartScheduler+0x80>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001652:	f001 fd9f 	bl	8003194 <xPortStartScheduler>
 8001656:	e00f      	b.n	8001678 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	d10b      	bne.n	8001678 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001664:	f383 8811 	msr	BASEPRI, r3
 8001668:	f3bf 8f6f 	isb	sy
 800166c:	f3bf 8f4f 	dsb	sy
 8001670:	607b      	str	r3, [r7, #4]
}
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <vTaskStartScheduler+0x84>)
 800167a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000174 	.word	0x20000174
 8001688:	20000160 	.word	0x20000160
 800168c:	20000158 	.word	0x20000158
 8001690:	20000000 	.word	0x20000000

08001694 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <vTaskSuspendAll+0x18>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a03      	ldr	r2, [pc, #12]	@ (80016ac <vTaskSuspendAll+0x18>)
 80016a0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	2000017c 	.word	0x2000017c

080016b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80016be:	f001 fe59 	bl	8003374 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80016c6:	4b75      	ldr	r3, [pc, #468]	@ (800189c <xTaskResumeAll+0x1ec>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10b      	bne.n	80016e6 <xTaskResumeAll+0x36>
    __asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	603b      	str	r3, [r7, #0]
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80016e6:	4b6d      	ldr	r3, [pc, #436]	@ (800189c <xTaskResumeAll+0x1ec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a6b      	ldr	r2, [pc, #428]	@ (800189c <xTaskResumeAll+0x1ec>)
 80016ee:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80016f0:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <xTaskResumeAll+0x1ec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 80ca 	bne.w	800188e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016fa:	4b69      	ldr	r3, [pc, #420]	@ (80018a0 <xTaskResumeAll+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80c5 	beq.w	800188e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001704:	e08e      	b.n	8001824 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001706:	4b67      	ldr	r3, [pc, #412]	@ (80018a4 <xTaskResumeAll+0x1f4>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	6a12      	ldr	r2, [r2, #32]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	69d2      	ldr	r2, [r2, #28]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3318      	adds	r3, #24
 8001730:	429a      	cmp	r2, r3
 8001732:	d103      	bne.n	800173c <xTaskResumeAll+0x8c>
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	6892      	ldr	r2, [r2, #8]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	429a      	cmp	r2, r3
 8001770:	d103      	bne.n	800177a <xTaskResumeAll+0xca>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	2201      	movs	r2, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <xTaskResumeAll+0x1f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	4a43      	ldr	r2, [pc, #268]	@ (80018a8 <xTaskResumeAll+0x1f8>)
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a0:	4942      	ldr	r1, [pc, #264]	@ (80018ac <xTaskResumeAll+0x1fc>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	3204      	adds	r2, #4
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	1d1a      	adds	r2, r3, #4
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4a33      	ldr	r2, [pc, #204]	@ (80018ac <xTaskResumeAll+0x1fc>)
 80017e0:	441a      	add	r2, r3
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ea:	4930      	ldr	r1, [pc, #192]	@ (80018ac <xTaskResumeAll+0x1fc>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	482b      	ldr	r0, [pc, #172]	@ (80018ac <xTaskResumeAll+0x1fc>)
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4403      	add	r3, r0
 800180a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <xTaskResumeAll+0x200>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	429a      	cmp	r2, r3
 8001818:	d904      	bls.n	8001824 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800181a:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <xTaskResumeAll+0x204>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2101      	movs	r1, #1
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <xTaskResumeAll+0x1f4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f af6c 	bne.w	8001706 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001834:	f000 fc3e 	bl	80020b4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <xTaskResumeAll+0x208>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001844:	f000 f858 	bl	80018f8 <xTaskIncrementTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800184e:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <xTaskResumeAll+0x204>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2101      	movs	r1, #1
 8001854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3b01      	subs	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ef      	bne.n	8001844 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <xTaskResumeAll+0x208>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <xTaskResumeAll+0x204>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <xTaskResumeAll+0x200>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <xTaskResumeAll+0x20c>)
 8001880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800188e:	f001 fda3 	bl	80033d8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001892:	69bb      	ldr	r3, [r7, #24]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000017c 	.word	0x2000017c
 80018a0:	20000154 	.word	0x20000154
 80018a4:	20000114 	.word	0x20000114
 80018a8:	2000015c 	.word	0x2000015c
 80018ac:	20000080 	.word	0x20000080
 80018b0:	2000007c 	.word	0x2000007c
 80018b4:	20000168 	.word	0x20000168
 80018b8:	20000164 	.word	0x20000164
 80018bc:	e000ed04 	.word	0xe000ed04

080018c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <xTaskGetTickCount+0x1c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000158 	.word	0x20000158

080018e0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <uxTaskGetNumberOfTasks+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000154 	.word	0x20000154

080018f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001902:	4b7f      	ldr	r3, [pc, #508]	@ (8001b00 <xTaskIncrementTick+0x208>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80ef 	bne.w	8001aea <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800190c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b04 <xTaskIncrementTick+0x20c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001914:	4a7b      	ldr	r2, [pc, #492]	@ (8001b04 <xTaskIncrementTick+0x20c>)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d121      	bne.n	8001964 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001920:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <xTaskIncrementTick+0x210>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <xTaskIncrementTick+0x4a>
    __asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	607b      	str	r3, [r7, #4]
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	e7fd      	b.n	800193e <xTaskIncrementTick+0x46>
 8001942:	4b71      	ldr	r3, [pc, #452]	@ (8001b08 <xTaskIncrementTick+0x210>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	4b70      	ldr	r3, [pc, #448]	@ (8001b0c <xTaskIncrementTick+0x214>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <xTaskIncrementTick+0x210>)
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <xTaskIncrementTick+0x214>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b6e      	ldr	r3, [pc, #440]	@ (8001b10 <xTaskIncrementTick+0x218>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a6c      	ldr	r2, [pc, #432]	@ (8001b10 <xTaskIncrementTick+0x218>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	f000 fba8 	bl	80020b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001964:	4b6b      	ldr	r3, [pc, #428]	@ (8001b14 <xTaskIncrementTick+0x21c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a3a      	ldr	r2, [r7, #32]
 800196a:	429a      	cmp	r2, r3
 800196c:	f0c0 80a8 	bcc.w	8001ac0 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001970:	4b65      	ldr	r3, [pc, #404]	@ (8001b08 <xTaskIncrementTick+0x210>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d104      	bne.n	8001984 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800197a:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <xTaskIncrementTick+0x21c>)
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	601a      	str	r2, [r3, #0]
                    break;
 8001982:	e09d      	b.n	8001ac0 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001984:	4b60      	ldr	r3, [pc, #384]	@ (8001b08 <xTaskIncrementTick+0x210>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d203      	bcs.n	80019a4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800199c:	4a5d      	ldr	r2, [pc, #372]	@ (8001b14 <xTaskIncrementTick+0x21c>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	6013      	str	r3, [r2, #0]
                        break;
 80019a2:	e08d      	b.n	8001ac0 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	6892      	ldr	r2, [r2, #8]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	3304      	adds	r3, #4
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d103      	bne.n	80019d2 <xTaskIncrementTick+0xda>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01e      	beq.n	8001a28 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	6a12      	ldr	r2, [r2, #32]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	69d2      	ldr	r2, [r2, #28]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d103      	bne.n	8001a18 <xTaskIncrementTick+0x120>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	4b39      	ldr	r3, [pc, #228]	@ (8001b18 <xTaskIncrementTick+0x220>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	4a38      	ldr	r2, [pc, #224]	@ (8001b18 <xTaskIncrementTick+0x220>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3e:	4937      	ldr	r1, [pc, #220]	@ (8001b1c <xTaskIncrementTick+0x224>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	3204      	adds	r2, #4
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1d1a      	adds	r2, r3, #4
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <xTaskIncrementTick+0x224>)
 8001a7e:	441a      	add	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a88:	4924      	ldr	r1, [pc, #144]	@ (8001b1c <xTaskIncrementTick+0x224>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	481f      	ldr	r0, [pc, #124]	@ (8001b1c <xTaskIncrementTick+0x224>)
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4403      	add	r3, r0
 8001aa8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <xTaskIncrementTick+0x228>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f67f af5b 	bls.w	8001970 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001abe:	e757      	b.n	8001970 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <xTaskIncrementTick+0x228>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac6:	4915      	ldr	r1, [pc, #84]	@ (8001b1c <xTaskIncrementTick+0x224>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d901      	bls.n	8001adc <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <xTaskIncrementTick+0x22c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e004      	b.n	8001af4 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <xTaskIncrementTick+0x230>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <xTaskIncrementTick+0x230>)
 8001af2:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3728      	adds	r7, #40	@ 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000017c 	.word	0x2000017c
 8001b04:	20000158 	.word	0x20000158
 8001b08:	2000010c 	.word	0x2000010c
 8001b0c:	20000110 	.word	0x20000110
 8001b10:	2000016c 	.word	0x2000016c
 8001b14:	20000174 	.word	0x20000174
 8001b18:	2000015c 	.word	0x2000015c
 8001b1c:	20000080 	.word	0x20000080
 8001b20:	2000007c 	.word	0x2000007c
 8001b24:	20000168 	.word	0x20000168
 8001b28:	20000164 	.word	0x20000164

08001b2c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001b32:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <vTaskSwitchContext+0xa8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b3a:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <vTaskSwitchContext+0xac>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001b40:	e041      	b.n	8001bc6 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <vTaskSwitchContext+0xac>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <vTaskSwitchContext+0xb0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	f1c3 031f 	rsb	r3, r3, #31
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4920      	ldr	r1, [pc, #128]	@ (8001be0 <vTaskSwitchContext+0xb4>)
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <vTaskSwitchContext+0x5e>
    __asm volatile
 8001b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b76:	f383 8811 	msr	BASEPRI, r3
 8001b7a:	f3bf 8f6f 	isb	sy
 8001b7e:	f3bf 8f4f 	dsb	sy
 8001b82:	607b      	str	r3, [r7, #4]
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <vTaskSwitchContext+0x5a>
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <vTaskSwitchContext+0xb4>)
 8001b96:	4413      	add	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	3308      	adds	r3, #8
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d103      	bne.n	8001bb8 <vTaskSwitchContext+0x8c>
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <vTaskSwitchContext+0xb8>)
 8001bc0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <vTaskSwitchContext+0xb8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
    }
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000017c 	.word	0x2000017c
 8001bd8:	20000168 	.word	0x20000168
 8001bdc:	2000015c 	.word	0x2000015c
 8001be0:	20000080 	.word	0x20000080
 8001be4:	2000007c 	.word	0x2000007c

08001be8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	60fb      	str	r3, [r7, #12]
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c10:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <vTaskPlaceOnEventList+0x48>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3318      	adds	r3, #24
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fcb0 	bl	800057e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f000 fe45 	bl	80028b0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000007c 	.word	0x2000007c

08001c34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	613b      	str	r3, [r7, #16]
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	61da      	str	r2, [r3, #28]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6892      	ldr	r2, [r2, #8]
 8001c74:	621a      	str	r2, [r3, #32]
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	3218      	adds	r2, #24
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f103 0218 	add.w	r2, r3, #24
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <vTaskPlaceOnEventListRestricted+0x88>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f000 fdfe 	bl	80028b0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000007c 	.word	0x2000007c

08001cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b08b      	sub	sp, #44	@ 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10b      	bne.n	8001cee <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	60fb      	str	r3, [r7, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	e7fd      	b.n	8001cea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	6a12      	ldr	r2, [r2, #32]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	69d2      	ldr	r2, [r2, #28]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	3318      	adds	r3, #24
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d103      	bne.n	8001d1c <xTaskRemoveFromEventList+0x5c>
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <xTaskRemoveFromEventList+0x19c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d160      	bne.n	8001df6 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	6892      	ldr	r2, [r2, #8]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	3304      	adds	r3, #4
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d103      	bne.n	8001d62 <xTaskRemoveFromEventList+0xa2>
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <xTaskRemoveFromEventList+0x1a0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4a37      	ldr	r2, [pc, #220]	@ (8001e60 <xTaskRemoveFromEventList+0x1a0>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	4936      	ldr	r1, [pc, #216]	@ (8001e64 <xTaskRemoveFromEventList+0x1a4>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3304      	adds	r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	3204      	adds	r2, #4
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	1d1a      	adds	r2, r3, #4
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <xTaskRemoveFromEventList+0x1a4>)
 8001dc8:	441a      	add	r2, r3
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd2:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <xTaskRemoveFromEventList+0x1a4>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a3a      	ldr	r2, [r7, #32]
 8001de2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001de4:	1c59      	adds	r1, r3, #1
 8001de6:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <xTaskRemoveFromEventList+0x1a4>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4403      	add	r3, r0
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	e01b      	b.n	8001e2e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <xTaskRemoveFromEventList+0x1a8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	61da      	str	r2, [r3, #28]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	621a      	str	r2, [r3, #32]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	6a3a      	ldr	r2, [r7, #32]
 8001e10:	3218      	adds	r2, #24
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f103 0218 	add.w	r2, r3, #24
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <xTaskRemoveFromEventList+0x1a8>)
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <xTaskRemoveFromEventList+0x1a8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <xTaskRemoveFromEventList+0x1a8>)
 8001e2c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <xTaskRemoveFromEventList+0x1ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d905      	bls.n	8001e48 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <xTaskRemoveFromEventList+0x1b0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e001      	b.n	8001e4c <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	372c      	adds	r7, #44	@ 0x2c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000017c 	.word	0x2000017c
 8001e60:	2000015c 	.word	0x2000015c
 8001e64:	20000080 	.word	0x20000080
 8001e68:	20000114 	.word	0x20000114
 8001e6c:	2000007c 	.word	0x2000007c
 8001e70:	20000168 	.word	0x20000168

08001e74 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <vTaskInternalSetTimeOutState+0x24>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <vTaskInternalSetTimeOutState+0x28>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	2000016c 	.word	0x2000016c
 8001e9c:	20000158 	.word	0x20000158

08001ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	613b      	str	r3, [r7, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10b      	bne.n	8001ee6 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	60fb      	str	r3, [r7, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001ee6:	f001 fa45 	bl	8003374 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <xTaskCheckForTimeOut+0xc8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d102      	bne.n	8001f0a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e026      	b.n	8001f58 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <xTaskCheckForTimeOut+0xcc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d00a      	beq.n	8001f2c <xTaskCheckForTimeOut+0x8c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d305      	bcc.n	8001f2c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20b      	bcs.n	8001f4e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff96 	bl	8001e74 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e004      	b.n	8001f58 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f58:	f001 fa3e 	bl	80033d8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000158 	.word	0x20000158
 8001f6c:	2000016c 	.word	0x2000016c

08001f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <vTaskMissedYield+0x14>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	20000168 	.word	0x20000168

08001f88 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f90:	f000 f852 	bl	8002038 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <prvIdleTask+0x28>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d9f9      	bls.n	8001f90 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <prvIdleTask+0x2c>)
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001fac:	e7f0      	b.n	8001f90 <prvIdleTask+0x8>
 8001fae:	bf00      	nop
 8001fb0:	20000080 	.word	0x20000080
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	e00c      	b.n	8001fde <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <prvInitialiseTaskLists+0x60>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe faa6 	bl	8000524 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d9ef      	bls.n	8001fc4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <prvInitialiseTaskLists+0x64>)
 8001fe6:	f7fe fa9d 	bl	8000524 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001fea:	480d      	ldr	r0, [pc, #52]	@ (8002020 <prvInitialiseTaskLists+0x68>)
 8001fec:	f7fe fa9a 	bl	8000524 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <prvInitialiseTaskLists+0x6c>)
 8001ff2:	f7fe fa97 	bl	8000524 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001ff6:	480c      	ldr	r0, [pc, #48]	@ (8002028 <prvInitialiseTaskLists+0x70>)
 8001ff8:	f7fe fa94 	bl	8000524 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ffc:	480b      	ldr	r0, [pc, #44]	@ (800202c <prvInitialiseTaskLists+0x74>)
 8001ffe:	f7fe fa91 	bl	8000524 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <prvInitialiseTaskLists+0x78>)
 8002004:	4a05      	ldr	r2, [pc, #20]	@ (800201c <prvInitialiseTaskLists+0x64>)
 8002006:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002008:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <prvInitialiseTaskLists+0x7c>)
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <prvInitialiseTaskLists+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000080 	.word	0x20000080
 800201c:	200000e4 	.word	0x200000e4
 8002020:	200000f8 	.word	0x200000f8
 8002024:	20000114 	.word	0x20000114
 8002028:	20000128 	.word	0x20000128
 800202c:	20000140 	.word	0x20000140
 8002030:	2000010c 	.word	0x2000010c
 8002034:	20000110 	.word	0x20000110

08002038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800203e:	e019      	b.n	8002074 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002040:	f001 f998 	bl	8003374 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002044:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <prvCheckTasksWaitingTermination+0x50>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe facd 	bl	80005f0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <prvCheckTasksWaitingTermination+0x54>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <prvCheckTasksWaitingTermination+0x54>)
 800205e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002068:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800206a:	f001 f9b5 	bl	80033d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f810 	bl	8002094 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e1      	bne.n	8002040 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000128 	.word	0x20000128
 800208c:	20000154 	.word	0x20000154
 8002090:	2000013c 	.word	0x2000013c

08002094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fbbf 	bl	8003824 <vPortFree>
            vPortFree( pxTCB );
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 fbbc 	bl	8003824 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <prvResetNextTaskUnblockTime+0x30>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <prvResetNextTaskUnblockTime+0x34>)
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020ca:	e005      	b.n	80020d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <prvResetNextTaskUnblockTime+0x30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <prvResetNextTaskUnblockTime+0x34>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000010c 	.word	0x2000010c
 80020e8:	20000174 	.word	0x20000174

080020ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <xTaskGetSchedulerState+0x34>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e008      	b.n	8002112 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <xTaskGetSchedulerState+0x38>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002108:	2302      	movs	r3, #2
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8002112:	687b      	ldr	r3, [r7, #4]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20000160 	.word	0x20000160
 8002124:	2000017c 	.word	0x2000017c

08002128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8090 	beq.w	8002260 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002140:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <xTaskPriorityDisinherit+0x144>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	429a      	cmp	r2, r3
 8002148:	d00b      	beq.n	8002162 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800214a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	613b      	str	r3, [r7, #16]
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	e7fd      	b.n	800215e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800216a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	60fb      	str	r3, [r7, #12]
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	429a      	cmp	r2, r3
 8002196:	d063      	beq.n	8002260 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d15f      	bne.n	8002260 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fa23 	bl	80005f0 <uxListRemove>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002270 <xTaskPriorityDisinherit+0x148>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4013      	ands	r3, r2
 80021c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002270 <xTaskPriorityDisinherit+0x148>)
 80021c4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	f1c3 0205 	rsb	r2, r3, #5
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	2201      	movs	r2, #1
 80021e0:	409a      	lsls	r2, r3
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <xTaskPriorityDisinherit+0x148>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	4a21      	ldr	r2, [pc, #132]	@ (8002270 <xTaskPriorityDisinherit+0x148>)
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f0:	4920      	ldr	r1, [pc, #128]	@ (8002274 <xTaskPriorityDisinherit+0x14c>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	3204      	adds	r2, #4
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1d1a      	adds	r2, r3, #4
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <xTaskPriorityDisinherit+0x14c>)
 8002230:	441a      	add	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223a:	490e      	ldr	r1, [pc, #56]	@ (8002274 <xTaskPriorityDisinherit+0x14c>)
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	4809      	ldr	r0, [pc, #36]	@ (8002274 <xTaskPriorityDisinherit+0x14c>)
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002260:	69fb      	ldr	r3, [r7, #28]
    }
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000007c 	.word	0x2000007c
 8002270:	2000015c 	.word	0x2000015c
 8002274:	20000080 	.word	0x20000080

08002278 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	613b      	str	r3, [r7, #16]
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80022a8:	f7ff f9f4 	bl	8001694 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80022ac:	f001 f862 	bl	8003374 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80022b0:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	3354      	adds	r3, #84	@ 0x54
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d018      	beq.n	80022f4 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	3214      	adds	r2, #20
 80022ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	43d2      	mvns	r2, r2
 80022d2:	4011      	ands	r1, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	3214      	adds	r2, #20
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	3354      	adds	r3, #84	@ 0x54
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80022f4:	f001 f870 	bl	80033d8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d103      	bne.n	8002306 <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022fe:	2101      	movs	r1, #1
 8002300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002302:	f000 fad5 	bl	80028b0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002306:	f7ff f9d3 	bl	80016b0 <xTaskResumeAll>
 800230a:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10a      	bne.n	8002328 <xTaskGenericNotifyWait+0xb0>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <xTaskGenericNotifyWait+0x120>)
 800231a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002328:	f001 f824 	bl	8003374 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8002332:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	3214      	adds	r2, #20
 800233a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4413      	add	r3, r2
 800234a:	3354      	adds	r3, #84	@ 0x54
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d002      	beq.n	800235a <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e00e      	b.n	8002378 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	3214      	adds	r2, #20
 8002362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	43d2      	mvns	r2, r2
 800236a:	4011      	ands	r1, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	3214      	adds	r2, #20
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <xTaskGenericNotifyWait+0x11c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	3354      	adds	r3, #84	@ 0x54
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002386:	f001 f827 	bl	80033d8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 800238a:	69fb      	ldr	r3, [r7, #28]
    }
 800238c:	4618      	mov	r0, r3
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000007c 	.word	0x2000007c
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	@ 0x38
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80023aa:	2301      	movs	r3, #1
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <xTaskGenericNotify+0x30>
    __asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	623b      	str	r3, [r7, #32]
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <xTaskGenericNotify+0x4e>
    __asm volatile
 80023d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	61fb      	str	r3, [r7, #28]
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	e7fd      	b.n	80023e6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80023ee:	f000 ffc1 	bl	8003374 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80023f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	3214      	adds	r2, #20
 80023fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002404:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4413      	add	r3, r2
 800240c:	3354      	adds	r3, #84	@ 0x54
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	3354      	adds	r3, #84	@ 0x54
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d83b      	bhi.n	800249e <xTaskGenericNotify+0x102>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <xTaskGenericNotify+0x90>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	080024bf 	.word	0x080024bf
 8002430:	08002441 	.word	0x08002441
 8002434:	0800245d 	.word	0x0800245d
 8002438:	08002475 	.word	0x08002475
 800243c:	08002483 	.word	0x08002483
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	3214      	adds	r2, #20
 8002446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	3214      	adds	r2, #20
 8002456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800245a:	e033      	b.n	80024c4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	3214      	adds	r2, #20
 8002462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	3214      	adds	r2, #20
 800246e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002472:	e027      	b.n	80024c4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	3214      	adds	r2, #20
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002480:	e020      	b.n	80024c4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002486:	2b02      	cmp	r3, #2
 8002488:	d006      	beq.n	8002498 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	3214      	adds	r2, #20
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002496:	e015      	b.n	80024c4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8002498:	2300      	movs	r3, #0
 800249a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800249c:	e012      	b.n	80024c4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800249e:	4b4e      	ldr	r3, [pc, #312]	@ (80025d8 <xTaskGenericNotify+0x23c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <xTaskGenericNotify+0x126>
    __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	61bb      	str	r3, [r7, #24]
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <xTaskGenericNotify+0x11e>
                    break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <xTaskGenericNotify+0x128>

                    break;
 80024c2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80024c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d17e      	bne.n	80025ca <xTaskGenericNotify+0x22e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	3304      	adds	r3, #4
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d103      	bne.n	80024fa <xTaskGenericNotify+0x15e>
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800250a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	2201      	movs	r2, #1
 8002510:	409a      	lsls	r2, r3
 8002512:	4b32      	ldr	r3, [pc, #200]	@ (80025dc <xTaskGenericNotify+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <xTaskGenericNotify+0x240>)
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002520:	492f      	ldr	r1, [pc, #188]	@ (80025e0 <xTaskGenericNotify+0x244>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3304      	adds	r3, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002546:	3204      	adds	r2, #4
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254c:	1d1a      	adds	r2, r3, #4
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4a20      	ldr	r2, [pc, #128]	@ (80025e0 <xTaskGenericNotify+0x244>)
 8002560:	441a      	add	r2, r3
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256a:	491d      	ldr	r1, [pc, #116]	@ (80025e0 <xTaskGenericNotify+0x244>)
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800257a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	4818      	ldr	r0, [pc, #96]	@ (80025e0 <xTaskGenericNotify+0x244>)
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4403      	add	r3, r0
 800258a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <xTaskGenericNotify+0x210>
    __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	617b      	str	r3, [r7, #20]
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xTaskGenericNotify+0x20c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80025ac:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <xTaskGenericNotify+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d207      	bcs.n	80025ca <xTaskGenericNotify+0x22e>
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <xTaskGenericNotify+0x24c>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025ca:	f000 ff05 	bl	80033d8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 80025ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80025d0:	4618      	mov	r0, r3
 80025d2:	3738      	adds	r7, #56	@ 0x38
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000158 	.word	0x20000158
 80025dc:	2000015c 	.word	0x2000015c
 80025e0:	20000080 	.word	0x20000080
 80025e4:	2000007c 	.word	0x2000007c
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b092      	sub	sp, #72	@ 0x48
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80025fa:	2301      	movs	r3, #1
 80025fc:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 8002622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	e7fd      	b.n	8002636 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800263a:	f000 ff7f 	bl	800353c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm volatile
 8002642:	f3ef 8211 	mrs	r2, BASEPRI
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	623a      	str	r2, [r7, #32]
 8002658:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 800265a:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800265e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	3214      	adds	r2, #20
 800266a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800266e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002670:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4413      	add	r3, r2
 8002678:	3354      	adds	r3, #84	@ 0x54
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4413      	add	r3, r2
 8002686:	3354      	adds	r3, #84	@ 0x54
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d83b      	bhi.n	800270a <xTaskGenericNotifyFromISR+0x11e>
 8002692:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <xTaskGenericNotifyFromISR+0xac>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	0800272b 	.word	0x0800272b
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026c9 	.word	0x080026c9
 80026a4:	080026e1 	.word	0x080026e1
 80026a8:	080026ef 	.word	0x080026ef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80026ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	3214      	adds	r2, #20
 80026b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	3214      	adds	r2, #20
 80026c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026c6:	e033      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80026c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	3214      	adds	r2, #20
 80026ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d2:	1c59      	adds	r1, r3, #1
 80026d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	3214      	adds	r2, #20
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026de:	e027      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80026e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	3214      	adds	r2, #20
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026ec:	e020      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80026ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d006      	beq.n	8002704 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80026f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	3214      	adds	r2, #20
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002702:	e015      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8002704:	2300      	movs	r3, #0
 8002706:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8002708:	e012      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800270a:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <xTaskGenericNotifyFromISR+0x2a8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <xTaskGenericNotifyFromISR+0x142>
    __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	61bb      	str	r3, [r7, #24]
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	e7fd      	b.n	8002726 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800272e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002730:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 80a1 	bne.w	800287c <xTaskGenericNotifyFromISR+0x290>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <xTaskGenericNotifyFromISR+0x16e>
    __asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	617b      	str	r3, [r7, #20]
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	e7fd      	b.n	8002756 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800275a:	4b4f      	ldr	r3, [pc, #316]	@ (8002898 <xTaskGenericNotifyFromISR+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d160      	bne.n	8002824 <xTaskGenericNotifyFromISR+0x238>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
 8002768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800276e:	68d2      	ldr	r2, [r2, #12]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002778:	6892      	ldr	r2, [r2, #8]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002782:	3304      	adds	r3, #4
 8002784:	429a      	cmp	r2, r3
 8002786:	d103      	bne.n	8002790 <xTaskGenericNotifyFromISR+0x1a4>
 8002788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
 8002796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	2201      	movs	r2, #1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	4b3c      	ldr	r3, [pc, #240]	@ (800289c <xTaskGenericNotifyFromISR+0x2b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	4a3b      	ldr	r2, [pc, #236]	@ (800289c <xTaskGenericNotifyFromISR+0x2b0>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b6:	493a      	ldr	r1, [pc, #232]	@ (80028a0 <xTaskGenericNotifyFromISR+0x2b4>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3304      	adds	r3, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027dc:	3204      	adds	r2, #4
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <xTaskGenericNotifyFromISR+0x2b4>)
 80027f6:	441a      	add	r2, r3
 80027f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fa:	615a      	str	r2, [r3, #20]
 80027fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002800:	4927      	ldr	r1, [pc, #156]	@ (80028a0 <xTaskGenericNotifyFromISR+0x2b4>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002810:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	4822      	ldr	r0, [pc, #136]	@ (80028a0 <xTaskGenericNotifyFromISR+0x2b4>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	6019      	str	r1, [r3, #0]
 8002822:	e01b      	b.n	800285c <xTaskGenericNotifyFromISR+0x270>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <xTaskGenericNotifyFromISR+0x2b8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
 800282a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800282e:	61da      	str	r2, [r3, #28]
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800283e:	3218      	adds	r2, #24
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002844:	f103 0218 	add.w	r2, r3, #24
 8002848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800284e:	4a15      	ldr	r2, [pc, #84]	@ (80028a4 <xTaskGenericNotifyFromISR+0x2b8>)
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <xTaskGenericNotifyFromISR+0x2b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <xTaskGenericNotifyFromISR+0x2b8>)
 800285a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <xTaskGenericNotifyFromISR+0x2bc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	429a      	cmp	r2, r3
 8002868:	d908      	bls.n	800287c <xTaskGenericNotifyFromISR+0x290>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800286a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <xTaskGenericNotifyFromISR+0x28a>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8002870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <xTaskGenericNotifyFromISR+0x2c0>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f383 8811 	msr	BASEPRI, r3
}
 8002886:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8002888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800288a:	4618      	mov	r0, r3
 800288c:	3748      	adds	r7, #72	@ 0x48
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000158 	.word	0x20000158
 8002898:	2000017c 	.word	0x2000017c
 800289c:	2000015c 	.word	0x2000015c
 80028a0:	20000080 	.word	0x20000080
 80028a4:	20000114 	.word	0x20000114
 80028a8:	2000007c 	.word	0x2000007c
 80028ac:	20000168 	.word	0x20000168

080028b0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <prvAddCurrentTaskToDelayedList+0xe8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80028c0:	4b36      	ldr	r3, [pc, #216]	@ (800299c <prvAddCurrentTaskToDelayedList+0xec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80028c6:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028cc:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3304      	adds	r3, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe8c 	bl	80005f0 <uxListRemove>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	2201      	movs	r2, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4013      	ands	r3, r2
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80028f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d124      	bne.n	8002948 <prvAddCurrentTaskToDelayedList+0x98>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d021      	beq.n	8002948 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	3204      	adds	r2, #4
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1d1a      	adds	r2, r3, #4
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <prvAddCurrentTaskToDelayedList+0xfc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002946:	e022      	b.n	800298e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f7fd fe08 	bl	800057e <vListInsert>
}
 800296e:	e00e      	b.n	800298e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3304      	adds	r3, #4
 8002976:	4619      	mov	r1, r3
 8002978:	69b8      	ldr	r0, [r7, #24]
 800297a:	f7fd fe00 	bl	800057e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800297e:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <prvAddCurrentTaskToDelayedList+0x100>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	429a      	cmp	r2, r3
 8002986:	d202      	bcs.n	800298e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002988:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <prvAddCurrentTaskToDelayedList+0x100>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000158 	.word	0x20000158
 800299c:	2000010c 	.word	0x2000010c
 80029a0:	20000110 	.word	0x20000110
 80029a4:	2000007c 	.word	0x2000007c
 80029a8:	2000015c 	.word	0x2000015c
 80029ac:	20000140 	.word	0x20000140
 80029b0:	20000174 	.word	0x20000174

080029b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80029be:	f000 fb03 	bl	8002fc8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <xTimerCreateTimerTask+0x58>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <xTimerCreateTimerTask+0x5c>)
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2302      	movs	r3, #2
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2300      	movs	r3, #0
 80029d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029d8:	490e      	ldr	r1, [pc, #56]	@ (8002a14 <xTimerCreateTimerTask+0x60>)
 80029da:	480f      	ldr	r0, [pc, #60]	@ (8002a18 <xTimerCreateTimerTask+0x64>)
 80029dc:	f7fe fc80 	bl	80012e0 <xTaskCreate>
 80029e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	603b      	str	r3, [r7, #0]
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002a00:	687b      	ldr	r3, [r7, #4]
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200001b0 	.word	0x200001b0
 8002a10:	200001b4 	.word	0x200001b4
 8002a14:	08007b58 	.word	0x08007b58
 8002a18:	08002c1d 	.word	0x08002c1d

08002a1c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002a2a:	202c      	movs	r0, #44	@ 0x2c
 8002a2c:	f000 fdc8 	bl	80035c0 <pvPortMalloc>
 8002a30:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f805 	bl	8002a5e <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 8002a54:	697b      	ldr	r3, [r7, #20]
        }
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <prvInitialiseNewTimer+0x2c>
    __asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	617b      	str	r3, [r7, #20]
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8002a8a:	f000 fa9d 	bl	8002fc8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd5a 	bl	8000564 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8002ac8:	bf00      	nop
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	@ 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <xTimerGenericCommandFromTask+0x30>
    __asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	623b      	str	r3, [r7, #32]
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002b00:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <xTimerGenericCommandFromTask+0xa4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02f      	beq.n	8002b68 <xTimerGenericCommandFromTask+0x98>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	dd0b      	ble.n	8002b32 <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	61fb      	str	r3, [r7, #28]
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <xTimerGenericCommandFromTask+0x5e>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	dc17      	bgt.n	8002b68 <xTimerGenericCommandFromTask+0x98>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b38:	f7ff fad8 	bl	80020ec <xTaskGetSchedulerState>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d109      	bne.n	8002b56 <xTimerGenericCommandFromTask+0x86>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <xTimerGenericCommandFromTask+0xa4>)
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	f107 0110 	add.w	r1, r7, #16
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b4e:	f7fd fe7d 	bl	800084c <xQueueGenericSend>
 8002b52:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b54:	e008      	b.n	8002b68 <xTimerGenericCommandFromTask+0x98>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <xTimerGenericCommandFromTask+0xa4>)
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	f107 0110 	add.w	r1, r7, #16
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2200      	movs	r2, #0
 8002b62:	f7fd fe73 	bl	800084c <xQueueGenericSend>
 8002b66:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3728      	adds	r7, #40	@ 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200001b0 	.word	0x200001b0

08002b78 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002b84:	e008      	b.n	8002b98 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	18d1      	adds	r1, r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f8df 	bl	8002d68 <prvInsertTimerInActiveList>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ea      	bne.n	8002b86 <prvReloadTimer+0xe>
        }
    }
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <prvProcessExpiredTimer+0x5c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fd0b 	bl	80005f0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ffc3 	bl	8002b78 <prvReloadTimer>
 8002bf2:	e008      	b.n	8002c06 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	4798      	blx	r3
    }
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001a8 	.word	0x200001a8

08002c1c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f859 	bl	8002ce0 <prvGetNextExpireTime>
 8002c2e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4619      	mov	r1, r3
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f805 	bl	8002c44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002c3a:	f000 f8d7 	bl	8002dec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c3e:	bf00      	nop
 8002c40:	e7f0      	b.n	8002c24 <prvTimerTask+0x8>
	...

08002c44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002c4e:	f7fe fd21 	bl	8001694 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f866 	bl	8002d28 <prvSampleTimeNow>
 8002c5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d130      	bne.n	8002cc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <prvProcessTimerOrBlockTask+0x3c>
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d806      	bhi.n	8002c80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002c72:	f7fe fd1d 	bl	80016b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff9f 	bl	8002bbc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002c7e:	e024      	b.n	8002cca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002c86:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <prvProcessTimerOrBlockTask+0x90>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <prvProcessTimerOrBlockTask+0x50>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <prvProcessTimerOrBlockTask+0x52>
 8002c94:	2300      	movs	r3, #0
 8002c96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <prvProcessTimerOrBlockTask+0x94>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fe faab 	bl	8001200 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002caa:	f7fe fd01 	bl	80016b0 <xTaskResumeAll>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <prvProcessTimerOrBlockTask+0x98>)
 8002cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	f3bf 8f6f 	isb	sy
    }
 8002cc4:	e001      	b.n	8002cca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002cc6:	f7fe fcf3 	bl	80016b0 <xTaskResumeAll>
    }
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200001ac 	.word	0x200001ac
 8002cd8:	200001b0 	.word	0x200001b0
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <prvGetNextExpireTime+0x44>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <prvGetNextExpireTime+0x16>
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	e000      	b.n	8002cf8 <prvGetNextExpireTime+0x18>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <prvGetNextExpireTime+0x44>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e001      	b.n	8002d14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002d14:	68fb      	ldr	r3, [r7, #12]
    }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200001a8 	.word	0x200001a8

08002d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002d30:	f7fe fdc6 	bl	80018c0 <xTaskGetTickCount>
 8002d34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <prvSampleTimeNow+0x3c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d205      	bcs.n	8002d4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002d40:	f000 f91c 	bl	8002f7c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e002      	b.n	8002d52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002d52:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <prvSampleTimeNow+0x3c>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002d58:	68fb      	ldr	r3, [r7, #12]
    }
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200001b8 	.word	0x200001b8

08002d68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d812      	bhi.n	8002db4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad2      	subs	r2, r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e01b      	b.n	8002dda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <prvInsertTimerInActiveList+0x7c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7fd fbe6 	bl	800057e <vListInsert>
 8002db2:	e012      	b.n	8002dda <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d206      	bcs.n	8002dca <prvInsertTimerInActiveList+0x62>
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e007      	b.n	8002dda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <prvInsertTimerInActiveList+0x80>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7fd fbd2 	bl	800057e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002dda:	697b      	ldr	r3, [r7, #20]
    }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200001ac 	.word	0x200001ac
 8002de8:	200001a8 	.word	0x200001a8

08002dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002dfe:	e0a9      	b.n	8002f54 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f2c0 80a6 	blt.w	8002f54 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fbe9 	bl	80005f0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff81 	bl	8002d28 <prvSampleTimeNow>
 8002e26:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f200 808e 	bhi.w	8002f4e <prvProcessReceivedCommands+0x162>
 8002e32:	a201      	add	r2, pc, #4	@ (adr r2, 8002e38 <prvProcessReceivedCommands+0x4c>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e5d 	.word	0x08002e5d
 8002e40:	08002ec5 	.word	0x08002ec5
 8002e44:	08002ed9 	.word	0x08002ed9
 8002e48:	08002f25 	.word	0x08002f25
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e5d 	.word	0x08002e5d
 8002e54:	08002ec5 	.word	0x08002ec5
 8002e58:	08002ed9 	.word	0x08002ed9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	18d1      	adds	r1, r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	69f8      	ldr	r0, [r7, #28]
 8002e7c:	f7ff ff74 	bl	8002d68 <prvInsertTimerInActiveList>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d065      	beq.n	8002f52 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	69f8      	ldr	r0, [r7, #28]
 8002ea2:	f7ff fe69 	bl	8002b78 <prvReloadTimer>
 8002ea6:	e008      	b.n	8002eba <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	69f8      	ldr	r0, [r7, #28]
 8002ec0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002ec2:	e046      	b.n	8002f52 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002ed6:	e03d      	b.n	8002f54 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	617b      	str	r3, [r7, #20]
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	18d1      	adds	r1, r2, r3
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	69f8      	ldr	r0, [r7, #28]
 8002f1e:	f7ff ff23 	bl	8002d68 <prvInsertTimerInActiveList>
                        break;
 8002f22:	e017      	b.n	8002f54 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002f32:	69f8      	ldr	r0, [r7, #28]
 8002f34:	f000 fc76 	bl	8003824 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002f38:	e00c      	b.n	8002f54 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002f4c:	e002      	b.n	8002f54 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <prvProcessReceivedCommands+0x168>
                        break;
 8002f52:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002f54:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <prvProcessReceivedCommands+0x18c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f107 0108 	add.w	r1, r7, #8
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fe2c 	bl	8000bbc <xQueueReceive>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f af4a 	bne.w	8002e00 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200001b0 	.word	0x200001b0

08002f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f82:	e009      	b.n	8002f98 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <prvSwitchTimerLists+0x44>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	f7ff fe12 	bl	8002bbc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <prvSwitchTimerLists+0x44>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <prvSwitchTimerLists+0x44>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <prvSwitchTimerLists+0x48>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <prvSwitchTimerLists+0x44>)
 8002fae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <prvSwitchTimerLists+0x48>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
    }
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200001a8 	.word	0x200001a8
 8002fc4:	200001ac 	.word	0x200001ac

08002fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002fcc:	f000 f9d2 	bl	8003374 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <prvCheckForValidListAndQueue+0x54>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002fd8:	4811      	ldr	r0, [pc, #68]	@ (8003020 <prvCheckForValidListAndQueue+0x58>)
 8002fda:	f7fd faa3 	bl	8000524 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002fde:	4811      	ldr	r0, [pc, #68]	@ (8003024 <prvCheckForValidListAndQueue+0x5c>)
 8002fe0:	f7fd faa0 	bl	8000524 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <prvCheckForValidListAndQueue+0x60>)
 8002fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8003020 <prvCheckForValidListAndQueue+0x58>)
 8002fe8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <prvCheckForValidListAndQueue+0x64>)
 8002fec:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <prvCheckForValidListAndQueue+0x5c>)
 8002fee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	210c      	movs	r1, #12
 8002ff4:	200a      	movs	r0, #10
 8002ff6:	f7fd fbb7 	bl	8000768 <xQueueGenericCreate>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4a07      	ldr	r2, [pc, #28]	@ (800301c <prvCheckForValidListAndQueue+0x54>)
 8002ffe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <prvCheckForValidListAndQueue+0x54>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <prvCheckForValidListAndQueue+0x54>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4908      	ldr	r1, [pc, #32]	@ (8003030 <prvCheckForValidListAndQueue+0x68>)
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f8a6 	bl	8001160 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003014:	f000 f9e0 	bl	80033d8 <vPortExitCritical>
    }
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200001b0 	.word	0x200001b0
 8003020:	20000180 	.word	0x20000180
 8003024:	20000194 	.word	0x20000194
 8003028:	200001a8 	.word	0x200001a8
 800302c:	200001ac 	.word	0x200001ac
 8003030:	08007b60 	.word	0x08007b60

08003034 <pvTimerGetTimerID>:
        return xReturn;
    }
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <pvTimerGetTimerID+0x2a>
    __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	60fb      	str	r3, [r7, #12]
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800305e:	f000 f989 	bl	8003374 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8003068:	f000 f9b6 	bl	80033d8 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
 800306c:	693b      	ldr	r3, [r7, #16]
    }
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b04      	subs	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003090:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3b04      	subs	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b04      	subs	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030a8:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <pxPortInitialiseStack+0x64>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b14      	subs	r3, #20
 80030b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b04      	subs	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f06f 0202 	mvn.w	r2, #2
 80030c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3b20      	subs	r3, #32
 80030cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	080030e1 	.word	0x080030e1

080030e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <prvTaskExitError+0x58>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d00b      	beq.n	800310c <prvTaskExitError+0x2c>
    __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60fb      	str	r3, [r7, #12]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <prvTaskExitError+0x28>
    __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	60bb      	str	r3, [r7, #8]
}
 800311e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003120:	bf00      	nop
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0fc      	beq.n	8003122 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000004 	.word	0x20000004
 800313c:	00000000 	.word	0x00000000

08003140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <pxCurrentTCBConst2>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314a:	f380 8809 	msr	PSP, r0
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8811 	msr	BASEPRI, r0
 800315a:	4770      	bx	lr
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst2>:
 8003160:	2000007c 	.word	0x2000007c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003168:	4808      	ldr	r0, [pc, #32]	@ (800318c <prvPortStartFirstTask+0x24>)
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	f380 8808 	msr	MSP, r0
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f380 8814 	msr	CONTROL, r0
 800317a:	b662      	cpsie	i
 800317c:	b661      	cpsie	f
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	df00      	svc	0
 8003188:	bf00      	nop
 800318a:	0000      	.short	0x0000
 800318c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop

08003194 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800319a:	4b69      	ldr	r3, [pc, #420]	@ (8003340 <xPortStartScheduler+0x1ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a69      	ldr	r2, [pc, #420]	@ (8003344 <xPortStartScheduler+0x1b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10b      	bne.n	80031bc <xPortStartScheduler+0x28>
    __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031bc:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <xPortStartScheduler+0x1ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a61      	ldr	r2, [pc, #388]	@ (8003348 <xPortStartScheduler+0x1b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10b      	bne.n	80031de <xPortStartScheduler+0x4a>
    __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	623b      	str	r3, [r7, #32]
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	e7fd      	b.n	80031da <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80031de:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <xPortStartScheduler+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	332c      	adds	r3, #44	@ 0x2c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <xPortStartScheduler+0x1bc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <xPortStartScheduler+0x74>
    __asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61fb      	str	r3, [r7, #28]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320a:	3338      	adds	r3, #56	@ 0x38
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a51      	ldr	r2, [pc, #324]	@ (8003354 <xPortStartScheduler+0x1c0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <xPortStartScheduler+0x98>
    __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61bb      	str	r3, [r7, #24]
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003230:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <xPortStartScheduler+0x1c4>)
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	22ff      	movs	r2, #255	@ 0xff
 8003240:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b41      	ldr	r3, [pc, #260]	@ (800335c <xPortStartScheduler+0x1c8>)
 8003256:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003258:	4b40      	ldr	r3, [pc, #256]	@ (800335c <xPortStartScheduler+0x1c8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <xPortStartScheduler+0xe4>
    __asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	617b      	str	r3, [r7, #20]
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003282:	2b00      	cmp	r3, #0
 8003284:	d013      	beq.n	80032ae <xPortStartScheduler+0x11a>
    __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	613b      	str	r3, [r7, #16]
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	e7fd      	b.n	800329a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d0f1      	beq.n	800329e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d103      	bne.n	80032c8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e004      	b.n	80032d2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032d0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032d2:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <xPortStartScheduler+0x1d0>)
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003306:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <xPortStartScheduler+0x1d4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800330e:	f000 f8e5 	bl	80034dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <xPortStartScheduler+0x1d8>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003318:	f000 f904 	bl	8003524 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <xPortStartScheduler+0x1dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <xPortStartScheduler+0x1dc>)
 8003322:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003326:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003328:	f7ff ff1e 	bl	8003168 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800332c:	f7fe fbfe 	bl	8001b2c <vTaskSwitchContext>
    prvTaskExitError();
 8003330:	f7ff fed6 	bl	80030e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3730      	adds	r7, #48	@ 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	410fc271 	.word	0x410fc271
 8003348:	410fc270 	.word	0x410fc270
 800334c:	e000ed08 	.word	0xe000ed08
 8003350:	08003141 	.word	0x08003141
 8003354:	08003431 	.word	0x08003431
 8003358:	e000e400 	.word	0xe000e400
 800335c:	200001bc 	.word	0x200001bc
 8003360:	200001c0 	.word	0x200001c0
 8003364:	e000ed20 	.word	0xe000ed20
 8003368:	e000ed1c 	.word	0xe000ed1c
 800336c:	20000004 	.word	0x20000004
 8003370:	e000ef34 	.word	0xe000ef34

08003374 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
    __asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	607b      	str	r3, [r7, #4]
}
 800338c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <vPortEnterCritical+0x5c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a0e      	ldr	r2, [pc, #56]	@ (80033d0 <vPortEnterCritical+0x5c>)
 8003396:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003398:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <vPortEnterCritical+0x5c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d110      	bne.n	80033c2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <vPortEnterCritical+0x60>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <vPortEnterCritical+0x4e>
    __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	603b      	str	r3, [r7, #0]
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <vPortEnterCritical+0x4a>
    }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000004 	.word	0x20000004
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <vPortExitCritical+0x50>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <vPortExitCritical+0x26>
    __asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	607b      	str	r3, [r7, #4]
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <vPortExitCritical+0x50>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <vPortExitCritical+0x50>)
 8003406:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003408:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <vPortExitCritical+0x50>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <vPortExitCritical+0x44>
 8003410:	2300      	movs	r3, #0
 8003412:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f383 8811 	msr	BASEPRI, r3
}
 800341a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	20000004 	.word	0x20000004
 800342c:	00000000 	.word	0x00000000

08003430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003430:	f3ef 8009 	mrs	r0, PSP
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <pxCurrentTCBConst>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f01e 0f10 	tst.w	lr, #16
 8003440:	bf08      	it	eq
 8003442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344a:	6010      	str	r0, [r2, #0]
 800344c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003454:	f380 8811 	msr	BASEPRI, r0
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f7fe fb64 	bl	8001b2c <vTaskSwitchContext>
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f380 8811 	msr	BASEPRI, r0
 800346c:	bc09      	pop	{r0, r3}
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	6808      	ldr	r0, [r1, #0]
 8003472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003476:	f01e 0f10 	tst.w	lr, #16
 800347a:	bf08      	it	eq
 800347c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003480:	f380 8809 	msr	PSP, r0
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w

08003490 <pxCurrentTCBConst>:
 8003490:	2000007c 	.word	0x2000007c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop

08003498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
    __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	607b      	str	r3, [r7, #4]
}
 80034b0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80034b2:	f7fe fa21 	bl	80018f8 <xTaskIncrementTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <SysTick_Handler+0x40>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f383 8811 	msr	BASEPRI, r3
}
 80034ce:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <vPortSetupTimerInterrupt+0x34>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <vPortSetupTimerInterrupt+0x38>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <vPortSetupTimerInterrupt+0x3c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <vPortSetupTimerInterrupt+0x40>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <vPortSetupTimerInterrupt+0x44>)
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <vPortSetupTimerInterrupt+0x34>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010
 8003514:	e000e018 	.word	0xe000e018
 8003518:	20000010 	.word	0x20000010
 800351c:	10624dd3 	.word	0x10624dd3
 8003520:	e000e014 	.word	0xe000e014

08003524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003534 <vPortEnableVFP+0x10>
 8003528:	6801      	ldr	r1, [r0, #0]
 800352a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800352e:	6001      	str	r1, [r0, #0]
 8003530:	4770      	bx	lr
 8003532:	0000      	.short	0x0000
 8003534:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop

0800353c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003542:	f3ef 8305 	mrs	r3, IPSR
 8003546:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d915      	bls.n	800357a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800354e:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <vPortValidateInterruptPriority+0x74>)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <vPortValidateInterruptPriority+0x78>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	7afa      	ldrb	r2, [r7, #11]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20b      	bcs.n	800357a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	607b      	str	r3, [r7, #4]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800357a:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <vPortValidateInterruptPriority+0x7c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003582:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <vPortValidateInterruptPriority+0x80>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d90b      	bls.n	80035a2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	603b      	str	r3, [r7, #0]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <vPortValidateInterruptPriority+0x62>
    }
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e3f0 	.word	0xe000e3f0
 80035b4:	200001bc 	.word	0x200001bc
 80035b8:	e000ed0c 	.word	0xe000ed0c
 80035bc:	200001c0 	.word	0x200001c0

080035c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	@ 0x38
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d022      	beq.n	8003618 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80035d2:	2308      	movs	r3, #8
 80035d4:	43db      	mvns	r3, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d81b      	bhi.n	8003614 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80035dc:	2208      	movs	r2, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d014      	beq.n	8003618 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	f1c3 0308 	rsb	r3, r3, #8
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	43db      	mvns	r3, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d804      	bhi.n	800360e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	4413      	add	r3, r2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e004      	b.n	8003618 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	e001      	b.n	8003618 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003618:	f7fe f83c 	bl	8001694 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800361c:	4b7a      	ldr	r3, [pc, #488]	@ (8003808 <pvPortMalloc+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003624:	f000 f978 	bl	8003918 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f2c0 80d3 	blt.w	80037d6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80cf 	beq.w	80037d6 <pvPortMalloc+0x216>
 8003638:	4b74      	ldr	r3, [pc, #464]	@ (800380c <pvPortMalloc+0x24c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	f200 80c9 	bhi.w	80037d6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003644:	4b72      	ldr	r3, [pc, #456]	@ (8003810 <pvPortMalloc+0x250>)
 8003646:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003648:	4b71      	ldr	r3, [pc, #452]	@ (8003810 <pvPortMalloc+0x250>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800364e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003650:	4a70      	ldr	r2, [pc, #448]	@ (8003814 <pvPortMalloc+0x254>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d305      	bcc.n	8003662 <pvPortMalloc+0xa2>
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	4a6f      	ldr	r2, [pc, #444]	@ (8003818 <pvPortMalloc+0x258>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d801      	bhi.n	8003662 <pvPortMalloc+0xa2>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <pvPortMalloc+0xa4>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d129      	bne.n	80036bc <pvPortMalloc+0xfc>
    __asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800368a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368c:	4a61      	ldr	r2, [pc, #388]	@ (8003814 <pvPortMalloc+0x254>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d305      	bcc.n	800369e <pvPortMalloc+0xde>
 8003692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003694:	4a60      	ldr	r2, [pc, #384]	@ (8003818 <pvPortMalloc+0x258>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d801      	bhi.n	800369e <pvPortMalloc+0xde>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <pvPortMalloc+0xe0>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <pvPortMalloc+0xfc>
    __asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	61fb      	str	r3, [r7, #28]
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80036bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d903      	bls.n	80036ce <pvPortMalloc+0x10e>
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1d8      	bne.n	8003680 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80036ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003808 <pvPortMalloc+0x248>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d07e      	beq.n	80037d6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	4413      	add	r3, r2
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003814 <pvPortMalloc+0x254>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d305      	bcc.n	80036f6 <pvPortMalloc+0x136>
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <pvPortMalloc+0x258>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d801      	bhi.n	80036f6 <pvPortMalloc+0x136>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <pvPortMalloc+0x138>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <pvPortMalloc+0x154>
    __asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90b      	bls.n	800373e <pvPortMalloc+0x17e>
    __asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	617b      	str	r3, [r7, #20]
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800373e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	2308      	movs	r3, #8
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	429a      	cmp	r2, r3
 800374c:	d924      	bls.n	8003798 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800374e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <pvPortMalloc+0x1b8>
    __asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	613b      	str	r3, [r7, #16]
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003796:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003798:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <pvPortMalloc+0x24c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <pvPortMalloc+0x24c>)
 80037a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037a6:	4b19      	ldr	r3, [pc, #100]	@ (800380c <pvPortMalloc+0x24c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b1c      	ldr	r3, [pc, #112]	@ (800381c <pvPortMalloc+0x25c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d203      	bcs.n	80037ba <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037b2:	4b16      	ldr	r3, [pc, #88]	@ (800380c <pvPortMalloc+0x24c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a19      	ldr	r2, [pc, #100]	@ (800381c <pvPortMalloc+0x25c>)
 80037b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80037c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80037cc:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <pvPortMalloc+0x260>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <pvPortMalloc+0x260>)
 80037d4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80037d6:	f7fd ff6b 	bl	80016b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <pvPortMalloc+0x23c>
    __asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60fb      	str	r3, [r7, #12]
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <pvPortMalloc+0x238>
    return pvReturn;
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3738      	adds	r7, #56	@ 0x38
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20012dcc 	.word	0x20012dcc
 800380c:	20012dd0 	.word	0x20012dd0
 8003810:	20012dc4 	.word	0x20012dc4
 8003814:	200001c4 	.word	0x200001c4
 8003818:	20012dc3 	.word	0x20012dc3
 800381c:	20012dd4 	.word	0x20012dd4
 8003820:	20012dd8 	.word	0x20012dd8

08003824 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d064      	beq.n	8003900 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003836:	2308      	movs	r3, #8
 8003838:	425b      	negs	r3, r3
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	4a30      	ldr	r2, [pc, #192]	@ (8003908 <vPortFree+0xe4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d305      	bcc.n	8003858 <vPortFree+0x34>
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	4a2f      	ldr	r2, [pc, #188]	@ (800390c <vPortFree+0xe8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d801      	bhi.n	8003858 <vPortFree+0x34>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <vPortFree+0x36>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <vPortFree+0x52>
    __asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	617b      	str	r3, [r7, #20]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <vPortFree+0x72>
    __asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	613b      	str	r3, [r7, #16]
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	e7fd      	b.n	8003892 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <vPortFree+0x92>
    __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	60fb      	str	r3, [r7, #12]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0fdb      	lsrs	r3, r3, #31
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01c      	beq.n	8003900 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80038da:	f7fd fedb 	bl	8001694 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <vPortFree+0xec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	4a09      	ldr	r2, [pc, #36]	@ (8003910 <vPortFree+0xec>)
 80038ea:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038ec:	69b8      	ldr	r0, [r7, #24]
 80038ee:	f000 f86d 	bl	80039cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <vPortFree+0xf0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a06      	ldr	r2, [pc, #24]	@ (8003914 <vPortFree+0xf0>)
 80038fa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80038fc:	f7fd fed8 	bl	80016b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003900:	bf00      	nop
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200001c4 	.word	0x200001c4
 800390c:	20012dc3 	.word	0x20012dc3
 8003910:	20012dd0 	.word	0x20012dd0
 8003914:	20012ddc 	.word	0x20012ddc

08003918 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800391e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003922:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003924:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <prvHeapInit+0xa0>)
 8003926:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3307      	adds	r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <prvHeapInit+0xa0>)
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <prvHeapInit+0xa4>)
 8003950:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003952:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <prvHeapInit+0xa4>)
 8003954:	2200      	movs	r2, #0
 8003956:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4413      	add	r3, r2
 800395e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003960:	2208      	movs	r2, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a13      	ldr	r2, [pc, #76]	@ (80039c0 <prvHeapInit+0xa8>)
 8003974:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <prvHeapInit+0xa8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <prvHeapInit+0xa8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003994:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <prvHeapInit+0xa8>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a08      	ldr	r2, [pc, #32]	@ (80039c4 <prvHeapInit+0xac>)
 80039a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <prvHeapInit+0xb0>)
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	200001c4 	.word	0x200001c4
 80039bc:	20012dc4 	.word	0x20012dc4
 80039c0:	20012dcc 	.word	0x20012dcc
 80039c4:	20012dd4 	.word	0x20012dd4
 80039c8:	20012dd0 	.word	0x20012dd0

080039cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <prvInsertBlockIntoFreeList+0xe4>)
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e002      	b.n	80039e0 <prvInsertBlockIntoFreeList+0x14>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d8f7      	bhi.n	80039da <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4a30      	ldr	r2, [pc, #192]	@ (8003ab0 <prvInsertBlockIntoFreeList+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d018      	beq.n	8003a24 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab4 <prvInsertBlockIntoFreeList+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d305      	bcc.n	8003a06 <prvInsertBlockIntoFreeList+0x3a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab8 <prvInsertBlockIntoFreeList+0xec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d801      	bhi.n	8003a06 <prvInsertBlockIntoFreeList+0x3a>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <prvInsertBlockIntoFreeList+0x3c>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60fb      	str	r3, [r7, #12]
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d108      	bne.n	8003a48 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	441a      	add	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	441a      	add	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d118      	bne.n	8003a8e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <prvInsertBlockIntoFreeList+0xf0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d00d      	beq.n	8003a84 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e008      	b.n	8003a96 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003a84:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <prvInsertBlockIntoFreeList+0xf0>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e003      	b.n	8003a96 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d002      	beq.n	8003aa4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20012dc4 	.word	0x20012dc4
 8003ab4:	200001c4 	.word	0x200001c4
 8003ab8:	20012dc3 	.word	0x20012dc3
 8003abc:	20012dcc 	.word	0x20012dcc

08003ac0 <turn_off_all_leds>:
 */

#include "main.h"

void turn_off_all_leds(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin,GPIO_PIN_RESET);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4807      	ldr	r0, [pc, #28]	@ (8003ae8 <turn_off_all_leds+0x28>)
 8003aca:	f001 fa9f 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin,GPIO_PIN_RESET);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	4805      	ldr	r0, [pc, #20]	@ (8003ae8 <turn_off_all_leds+0x28>)
 8003ad4:	f001 fa9a 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2120      	movs	r1, #32
 8003adc:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <turn_off_all_leds+0x28>)
 8003ade:	f001 fa95 	bl	800500c <HAL_GPIO_WritePin>
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40020000 	.word	0x40020000

08003aec <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin,GPIO_PIN_SET);
 8003af0:	2201      	movs	r2, #1
 8003af2:	2101      	movs	r1, #1
 8003af4:	4807      	ldr	r0, [pc, #28]	@ (8003b14 <turn_on_all_leds+0x28>)
 8003af6:	f001 fa89 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin,GPIO_PIN_SET);
 8003afa:	2201      	movs	r2, #1
 8003afc:	2102      	movs	r1, #2
 8003afe:	4805      	ldr	r0, [pc, #20]	@ (8003b14 <turn_on_all_leds+0x28>)
 8003b00:	f001 fa84 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8003b04:	2201      	movs	r2, #1
 8003b06:	2120      	movs	r1, #32
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <turn_on_all_leds+0x28>)
 8003b0a:	f001 fa7f 	bl	800500c <HAL_GPIO_WritePin>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40020000 	.word	0x40020000

08003b18 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin,GPIO_PIN_SET);
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4807      	ldr	r0, [pc, #28]	@ (8003b40 <turn_on_odd_leds+0x28>)
 8003b22:	f001 fa73 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin,GPIO_PIN_RESET);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <turn_on_odd_leds+0x28>)
 8003b2c:	f001 fa6e 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8003b30:	2201      	movs	r2, #1
 8003b32:	2120      	movs	r1, #32
 8003b34:	4802      	ldr	r0, [pc, #8]	@ (8003b40 <turn_on_odd_leds+0x28>)
 8003b36:	f001 fa69 	bl	800500c <HAL_GPIO_WritePin>
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40020000 	.word	0x40020000

08003b44 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin,GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4807      	ldr	r0, [pc, #28]	@ (8003b6c <turn_on_even_leds+0x28>)
 8003b4e:	f001 fa5d 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin,GPIO_PIN_SET);
 8003b52:	2201      	movs	r2, #1
 8003b54:	2102      	movs	r1, #2
 8003b56:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <turn_on_even_leds+0x28>)
 8003b58:	f001 fa58 	bl	800500c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2120      	movs	r1, #32
 8003b60:	4802      	ldr	r0, [pc, #8]	@ (8003b6c <turn_on_even_leds+0x28>)
 8003b62:	f001 fa53 	bl	800500c <HAL_GPIO_WritePin>
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40020000 	.word	0x40020000

08003b70 <LED_control>:
	else
	{}
}*/

void LED_control(int value)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    // Turn OFF all LEDs first
    HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin, GPIO_PIN_RESET);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4817      	ldr	r0, [pc, #92]	@ (8003bdc <LED_control+0x6c>)
 8003b7e:	f001 fa45 	bl	800500c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin, GPIO_PIN_RESET);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2102      	movs	r1, #2
 8003b86:	4815      	ldr	r0, [pc, #84]	@ (8003bdc <LED_control+0x6c>)
 8003b88:	f001 fa40 	bl	800500c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2120      	movs	r1, #32
 8003b90:	4812      	ldr	r0, [pc, #72]	@ (8003bdc <LED_control+0x6c>)
 8003b92:	f001 fa3b 	bl	800500c <HAL_GPIO_WritePin>

    // Turn ON only the selected LED based on the bitmask
    if (value & 0x01)  // Check if bit 0 is set
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <LED_control+0x3a>
        HAL_GPIO_WritePin(Ext_LED_1_GPIO_Port, Ext_LED_1_Pin, GPIO_PIN_SET);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	480d      	ldr	r0, [pc, #52]	@ (8003bdc <LED_control+0x6c>)
 8003ba6:	f001 fa31 	bl	800500c <HAL_GPIO_WritePin>
    if (value & 0x02)  // Check if bit 1 is set
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <LED_control+0x4e>
        HAL_GPIO_WritePin(Ext_LED_2_GPIO_Port, Ext_LED_2_Pin, GPIO_PIN_SET);
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4808      	ldr	r0, [pc, #32]	@ (8003bdc <LED_control+0x6c>)
 8003bba:	f001 fa27 	bl	800500c <HAL_GPIO_WritePin>
    if (value & 0x04)  // Check if bit 2 is set
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <LED_control+0x62>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2120      	movs	r1, #32
 8003bcc:	4803      	ldr	r0, [pc, #12]	@ (8003bdc <LED_control+0x6c>)
 8003bce:	f001 fa1d 	bl	800500c <HAL_GPIO_WritePin>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40020000 	.word	0x40020000

08003be0 <led_effect_stop>:


void led_effect_stop()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af02      	add	r7, sp, #8
	for(int i=0; i<4;i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e00e      	b.n	8003c0a <led_effect_stop+0x2a>
		xTimerStop(timer_handler[i],portMAX_DELAY);
 8003bec:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <led_effect_stop+0x3c>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f7fe ff66 	bl	8002ad0 <xTimerGenericCommandFromTask>
	for(int i=0; i<4;i++)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3301      	adds	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	dded      	ble.n	8003bec <led_effect_stop+0xc>
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20012e6c 	.word	0x20012e6c

08003c20 <led_effect_start>:

void led_effect_start(int val)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8003c28:	f7ff ffda 	bl	8003be0 <led_effect_stop>
	xTimerStart(timer_handler[val-1],portMAX_DELAY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <led_effect_start+0x34>)
 8003c32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c36:	f7fd fe43 	bl	80018c0 <xTaskGetTickCount>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	2101      	movs	r1, #1
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7fe ff42 	bl	8002ad0 <xTimerGenericCommandFromTask>
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd90      	pop	{r4, r7, pc}
 8003c54:	20012e6c 	.word	0x20012e6c

08003c58 <LED_effect1>:


void LED_effect1(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds():turn_on_all_leds();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <LED_effect1+0x28>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	4a06      	ldr	r2, [pc, #24]	@ (8003c80 <LED_effect1+0x28>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <LED_effect1+0x28>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <LED_effect1+0x1e>
 8003c70:	f7ff ff26 	bl	8003ac0 <turn_off_all_leds>

}
 8003c74:	e001      	b.n	8003c7a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds():turn_on_all_leds();
 8003c76:	f7ff ff39 	bl	8003aec <turn_on_all_leds>
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000008 	.word	0x20000008

08003c84 <LED_effect2>:

void LED_effect2(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds():turn_on_odd_leds();
 8003c88:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <LED_effect2+0x28>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f083 0301 	eor.w	r3, r3, #1
 8003c90:	4a06      	ldr	r2, [pc, #24]	@ (8003cac <LED_effect2+0x28>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <LED_effect2+0x28>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <LED_effect2+0x1e>
 8003c9c:	f7ff ff52 	bl	8003b44 <turn_on_even_leds>
}
 8003ca0:	e001      	b.n	8003ca6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds():turn_on_odd_leds();
 8003ca2:	f7ff ff39 	bl	8003b18 <turn_on_odd_leds>
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <LED_effect3>:

void LED_effect3(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 3) );
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <LED_effect3+0x30>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	1c53      	adds	r3, r2, #1
 8003cba:	4909      	ldr	r1, [pc, #36]	@ (8003ce0 <LED_effect3+0x30>)
 8003cbc:	600b      	str	r3, [r1, #0]
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <LED_effect3+0x34>)
 8003cc0:	fb83 3102 	smull	r3, r1, r3, r2
 8003cc4:	17d3      	asrs	r3, r2, #31
 8003cc6:	1ac9      	subs	r1, r1, r3
 8003cc8:	460b      	mov	r3, r1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	440b      	add	r3, r1
 8003cce:	1ad1      	subs	r1, r2, r3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	408b      	lsls	r3, r1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff4b 	bl	8003b70 <LED_control>
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20012de0 	.word	0x20012de0
 8003ce4:	55555556 	.word	0x55555556

08003ce8 <LED_effect4>:

void LED_effect4(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x04 >> (i++ % 3) );
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <LED_effect4+0x30>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	1c53      	adds	r3, r2, #1
 8003cf2:	4909      	ldr	r1, [pc, #36]	@ (8003d18 <LED_effect4+0x30>)
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <LED_effect4+0x34>)
 8003cf8:	fb83 3102 	smull	r3, r1, r3, r2
 8003cfc:	17d3      	asrs	r3, r2, #31
 8003cfe:	1ac9      	subs	r1, r1, r3
 8003d00:	460b      	mov	r3, r1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	440b      	add	r3, r1
 8003d06:	1ad1      	subs	r1, r2, r3
 8003d08:	2304      	movs	r3, #4
 8003d0a:	410b      	asrs	r3, r1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff2f 	bl	8003b70 <LED_control>
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20012de4 	.word	0x20012de4
 8003d1c:	55555556 	.word	0x55555556

08003d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	@ 0x30
 8003d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d26:	f000 fe27 	bl	8004978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d2a:	f000 f919 	bl	8003f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d2e:	f000 f9d9 	bl	80040e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8003d32:	f000 f987 	bl	8004044 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8003d36:	f000 f9ab 	bl	8004090 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &menu_task_handle);
 8003d3a:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <main+0x1dc>)
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	2302      	movs	r3, #2
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	22fa      	movs	r2, #250	@ 0xfa
 8003d46:	496e      	ldr	r1, [pc, #440]	@ (8003f00 <main+0x1e0>)
 8003d48:	486e      	ldr	r0, [pc, #440]	@ (8003f04 <main+0x1e4>)
 8003d4a:	f7fd fac9 	bl	80012e0 <xTaskCreate>
 8003d4e:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d00b      	beq.n	8003d6e <main+0x4e>
    __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <main+0x4a>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &cmd_task_handler);
 8003d6e:	4b66      	ldr	r3, [pc, #408]	@ (8003f08 <main+0x1e8>)
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	2302      	movs	r3, #2
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2300      	movs	r3, #0
 8003d78:	22fa      	movs	r2, #250	@ 0xfa
 8003d7a:	4964      	ldr	r1, [pc, #400]	@ (8003f0c <main+0x1ec>)
 8003d7c:	4864      	ldr	r0, [pc, #400]	@ (8003f10 <main+0x1f0>)
 8003d7e:	f7fd faaf 	bl	80012e0 <xTaskCreate>
 8003d82:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d00b      	beq.n	8003da2 <main+0x82>
    __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	61bb      	str	r3, [r7, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <main+0x7e>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &print_task_handle);
 8003da2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f14 <main+0x1f4>)
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	2302      	movs	r3, #2
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	22fa      	movs	r2, #250	@ 0xfa
 8003dae:	495a      	ldr	r1, [pc, #360]	@ (8003f18 <main+0x1f8>)
 8003db0:	485a      	ldr	r0, [pc, #360]	@ (8003f1c <main+0x1fc>)
 8003db2:	f7fd fa95 	bl	80012e0 <xTaskCreate>
 8003db6:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d00b      	beq.n	8003dd6 <main+0xb6>
    __asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	617b      	str	r3, [r7, #20]
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	e7fd      	b.n	8003dd2 <main+0xb2>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &led_task_handle);
 8003dd6:	4b52      	ldr	r3, [pc, #328]	@ (8003f20 <main+0x200>)
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	2302      	movs	r3, #2
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	22fa      	movs	r2, #250	@ 0xfa
 8003de2:	4950      	ldr	r1, [pc, #320]	@ (8003f24 <main+0x204>)
 8003de4:	4850      	ldr	r0, [pc, #320]	@ (8003f28 <main+0x208>)
 8003de6:	f7fd fa7b 	bl	80012e0 <xTaskCreate>
 8003dea:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d00b      	beq.n	8003e0a <main+0xea>
    __asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	613b      	str	r3, [r7, #16]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <main+0xe6>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 8003e0a:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <main+0x20c>)
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	2302      	movs	r3, #2
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	22fa      	movs	r2, #250	@ 0xfa
 8003e16:	4946      	ldr	r1, [pc, #280]	@ (8003f30 <main+0x210>)
 8003e18:	4846      	ldr	r0, [pc, #280]	@ (8003f34 <main+0x214>)
 8003e1a:	f7fd fa61 	bl	80012e0 <xTaskCreate>
 8003e1e:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d00b      	beq.n	8003e3e <main+0x11e>
    __asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <main+0x11a>

  //Create Queues

  q_data = xQueueCreate(10,sizeof(char));
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2101      	movs	r1, #1
 8003e42:	200a      	movs	r0, #10
 8003e44:	f7fc fc90 	bl	8000768 <xQueueGenericCreate>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f38 <main+0x218>)
 8003e4c:	6013      	str	r3, [r2, #0]

  configASSERT(q_data != NULL);
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <main+0x218>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <main+0x14e>
    __asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60bb      	str	r3, [r7, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <main+0x14a>

  q_print = xQueueCreate(10,sizeof(size_t));
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2104      	movs	r1, #4
 8003e72:	200a      	movs	r0, #10
 8003e74:	f7fc fc78 	bl	8000768 <xQueueGenericCreate>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <main+0x21c>)
 8003e7c:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8003e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f3c <main+0x21c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <main+0x17e>
    __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	607b      	str	r3, [r7, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <main+0x17a>

  //create Software timers which are provided by FreeRTOS API's
  for(int i=0;i<4;i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea2:	e013      	b.n	8003ecc <main+0x1ac>
  timer_handler[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_timer_callback_func);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <main+0x220>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003eb6:	4823      	ldr	r0, [pc, #140]	@ (8003f44 <main+0x224>)
 8003eb8:	f7fe fdb0 	bl	8002a1c <xTimerCreate>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4922      	ldr	r1, [pc, #136]	@ (8003f48 <main+0x228>)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<4;i++)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	dde8      	ble.n	8003ea4 <main+0x184>

  //Create Timer for RTC timer handler
  rtc_timer = xTimerCreate("rtc_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)5, rtc_timer_callback_func);
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <main+0x22c>)
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003ede:	481c      	ldr	r0, [pc, #112]	@ (8003f50 <main+0x230>)
 8003ee0:	f7fe fd9c 	bl	8002a1c <xTimerCreate>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <main+0x234>)
 8003ee8:	6013      	str	r3, [r2, #0]

  //call UART receive with Interrupt before starting the scheduler
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8003eea:	2201      	movs	r2, #1
 8003eec:	491a      	ldr	r1, [pc, #104]	@ (8003f58 <main+0x238>)
 8003eee:	481b      	ldr	r0, [pc, #108]	@ (8003f5c <main+0x23c>)
 8003ef0:	f002 fe6d 	bl	8006bce <HAL_UART_Receive_IT>

  //Start scheduler

  vTaskStartScheduler();
 8003ef4:	f7fd fb8a 	bl	800160c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <main+0x1d8>
 8003efc:	20012e50 	.word	0x20012e50
 8003f00:	08007b68 	.word	0x08007b68
 8003f04:	080045a9 	.word	0x080045a9
 8003f08:	20012e54 	.word	0x20012e54
 8003f0c:	08007b74 	.word	0x08007b74
 8003f10:	08004691 	.word	0x08004691
 8003f14:	20012e58 	.word	0x20012e58
 8003f18:	08007b80 	.word	0x08007b80
 8003f1c:	080047a5 	.word	0x080047a5
 8003f20:	20012e5c 	.word	0x20012e5c
 8003f24:	08007b8c 	.word	0x08007b8c
 8003f28:	080047e5 	.word	0x080047e5
 8003f2c:	20012e60 	.word	0x20012e60
 8003f30:	08007b98 	.word	0x08007b98
 8003f34:	08004911 	.word	0x08004911
 8003f38:	20012e64 	.word	0x20012e64
 8003f3c:	20012e68 	.word	0x20012e68
 8003f40:	080041d5 	.word	0x080041d5
 8003f44:	08007ba4 	.word	0x08007ba4
 8003f48:	20012e6c 	.word	0x20012e6c
 8003f4c:	080041c1 	.word	0x080041c1
 8003f50:	08007bb0 	.word	0x08007bb0
 8003f54:	20012e7c 	.word	0x20012e7c
 8003f58:	20012e81 	.word	0x20012e81
 8003f5c:	20012e08 	.word	0x20012e08

08003f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b094      	sub	sp, #80	@ 0x50
 8003f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	2234      	movs	r2, #52	@ 0x34
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fda8 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f74:	f107 0308 	add.w	r3, r7, #8
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	4b2c      	ldr	r3, [pc, #176]	@ (800403c <SystemClock_Config+0xdc>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800403c <SystemClock_Config+0xdc>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f94:	4b29      	ldr	r3, [pc, #164]	@ (800403c <SystemClock_Config+0xdc>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <SystemClock_Config+0xe0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <SystemClock_Config+0xe0>)
 8003fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <SystemClock_Config+0xe0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fcc:	2310      	movs	r3, #16
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003fdc:	2310      	movs	r3, #16
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003fe0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003fea:	2302      	movs	r3, #2
 8003fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fec8 	bl	8005d8c <HAL_RCC_OscConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004002:	f000 f96b 	bl	80042dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004006:	230f      	movs	r3, #15
 8004008:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800400a:	2302      	movs	r3, #2
 800400c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	2102      	movs	r1, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f80c 	bl	8005040 <HAL_RCC_ClockConfig>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800402e:	f000 f955 	bl	80042dc <Error_Handler>
  }
}
 8004032:	bf00      	nop
 8004034:	3750      	adds	r7, #80	@ 0x50
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40007000 	.word	0x40007000

08004044 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004048:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <MX_RTC_Init+0x44>)
 800404a:	4a10      	ldr	r2, [pc, #64]	@ (800408c <MX_RTC_Init+0x48>)
 800404c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800404e:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <MX_RTC_Init+0x44>)
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <MX_RTC_Init+0x44>)
 8004056:	227f      	movs	r2, #127	@ 0x7f
 8004058:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <MX_RTC_Init+0x44>)
 800405c:	22ff      	movs	r2, #255	@ 0xff
 800405e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <MX_RTC_Init+0x44>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004066:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <MX_RTC_Init+0x44>)
 8004068:	2200      	movs	r2, #0
 800406a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <MX_RTC_Init+0x44>)
 800406e:	2200      	movs	r2, #0
 8004070:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004072:	4805      	ldr	r0, [pc, #20]	@ (8004088 <MX_RTC_Init+0x44>)
 8004074:	f002 f928 	bl	80062c8 <HAL_RTC_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800407e:	f000 f92d 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20012de8 	.word	0x20012de8
 800408c:	40002800 	.word	0x40002800

08004090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004094:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 8004096:	4a12      	ldr	r2, [pc, #72]	@ (80040e0 <MX_USART2_UART_Init+0x50>)
 8004098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800409a:	4b10      	ldr	r3, [pc, #64]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 800409c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040a8:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040b4:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040b6:	220c      	movs	r2, #12
 80040b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c0:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040c6:	4805      	ldr	r0, [pc, #20]	@ (80040dc <MX_USART2_UART_Init+0x4c>)
 80040c8:	f002 fca6 	bl	8006a18 <HAL_UART_Init>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040d2:	f000 f903 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20012e08 	.word	0x20012e08
 80040e0:	40004400 	.word	0x40004400

080040e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	@ 0x28
 80040e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6313      	str	r3, [r2, #48]	@ 0x30
 800410a:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b26      	ldr	r3, [pc, #152]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004124:	6313      	str	r3, [r2, #48]	@ 0x30
 8004126:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6313      	str	r3, [r2, #48]	@ 0x30
 8004142:	4b1c      	ldr	r3, [pc, #112]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <MX_GPIO_Init+0xd0>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	2123      	movs	r1, #35	@ 0x23
 800416e:	4812      	ldr	r0, [pc, #72]	@ (80041b8 <MX_GPIO_Init+0xd4>)
 8004170:	f000 ff4c 	bl	800500c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800417a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800417e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4619      	mov	r1, r3
 800418a:	480c      	ldr	r0, [pc, #48]	@ (80041bc <MX_GPIO_Init+0xd8>)
 800418c:	f000 fdaa 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ext_LED_1_Pin Ext_LED_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Ext_LED_1_Pin|Ext_LED_2_Pin|LD2_Pin;
 8004190:	2323      	movs	r3, #35	@ 0x23
 8004192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004194:	2301      	movs	r3, #1
 8004196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419c:	2300      	movs	r3, #0
 800419e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	4619      	mov	r1, r3
 80041a6:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <MX_GPIO_Init+0xd4>)
 80041a8:	f000 fd9c 	bl	8004ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041ac:	bf00      	nop
 80041ae:	3728      	adds	r7, #40	@ 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020800 	.word	0x40020800

080041c0 <rtc_timer_callback_func>:

/* USER CODE BEGIN 4 */

void rtc_timer_callback_func(TimerHandle_t xTimer)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <led_timer_callback_func>:

void led_timer_callback_func(TimerHandle_t xTimer)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	int id;
	id = (int)pvTimerGetTimerID(xTimer);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fe ff29 	bl	8003034 <pvTimerGetTimerID>
 80041e2:	4603      	mov	r3, r0
 80041e4:	60fb      	str	r3, [r7, #12]

	switch(id)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d816      	bhi.n	800421c <led_timer_callback_func+0x48>
 80041ee:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <led_timer_callback_func+0x20>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004205 	.word	0x08004205
 80041f8:	0800420b 	.word	0x0800420b
 80041fc:	08004211 	.word	0x08004211
 8004200:	08004217 	.word	0x08004217
	{
		case 1:
			LED_effect1();
 8004204:	f7ff fd28 	bl	8003c58 <LED_effect1>
			break;
 8004208:	e008      	b.n	800421c <led_timer_callback_func+0x48>
		case 2:
			LED_effect2();
 800420a:	f7ff fd3b 	bl	8003c84 <LED_effect2>
			break;
 800420e:	e005      	b.n	800421c <led_timer_callback_func+0x48>
		case 3:
			LED_effect3();
 8004210:	f7ff fd4e 	bl	8003cb0 <LED_effect3>
			break;
 8004214:	e002      	b.n	800421c <led_timer_callback_func+0x48>
		case 4:
			LED_effect4();
 8004216:	f7ff fd67 	bl	8003ce8 <LED_effect4>
			break;
 800421a:	bf00      	nop

	}
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
	uint8_t deleted_data;
	BaseType_t status;
	status = xQueueIsQueueFullFromISR(q_data);
 800422c:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <HAL_UART_RxCpltCallback+0x84>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc ff6e 	bl	8001112 <xQueueIsQueueFullFromISR>
 8004236:	60f8      	str	r0, [r7, #12]

	if(!status)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_UART_RxCpltCallback+0x2a>
	{
		/*Queue is not full */

		/*Enqueue data byte */
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 800423e:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <HAL_UART_RxCpltCallback+0x84>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	2200      	movs	r2, #0
 8004246:	4919      	ldr	r1, [pc, #100]	@ (80042ac <HAL_UART_RxCpltCallback+0x88>)
 8004248:	f7fc fc02 	bl	8000a50 <xQueueGenericSendFromISR>
 800424c:	e013      	b.n	8004276 <HAL_UART_RxCpltCallback+0x52>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 800424e:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <HAL_UART_RxCpltCallback+0x88>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b0a      	cmp	r3, #10
 8004256:	d10e      	bne.n	8004276 <HAL_UART_RxCpltCallback+0x52>
		{
			/*make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void *)&deleted_data, NULL);
 8004258:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <HAL_UART_RxCpltCallback+0x84>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f107 010b 	add.w	r1, r7, #11
 8004260:	2200      	movs	r2, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fd8c 	bl	8000d80 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <HAL_UART_RxCpltCallback+0x84>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	2200      	movs	r2, #0
 8004270:	490e      	ldr	r1, [pc, #56]	@ (80042ac <HAL_UART_RxCpltCallback+0x88>)
 8004272:	f7fc fbed 	bl	8000a50 <xQueueGenericSendFromISR>
		}
	}


	/*send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_UART_RxCpltCallback+0x88>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b0a      	cmp	r3, #10
 800427e:	d10a      	bne.n	8004296 <HAL_UART_RxCpltCallback+0x72>
	{
		xTaskNotifyFromISR(cmd_task_handler,0,eNoAction,NULL);
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_UART_RxCpltCallback+0x8c>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	2300      	movs	r3, #0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2300      	movs	r3, #0
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	f7fe f9ab 	bl	80025ec <xTaskGenericNotifyFromISR>
	}


	/*Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8004296:	2201      	movs	r2, #1
 8004298:	4904      	ldr	r1, [pc, #16]	@ (80042ac <HAL_UART_RxCpltCallback+0x88>)
 800429a:	4806      	ldr	r0, [pc, #24]	@ (80042b4 <HAL_UART_RxCpltCallback+0x90>)
 800429c:	f002 fc97 	bl	8006bce <HAL_UART_Receive_IT>


}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20012e64 	.word	0x20012e64
 80042ac:	20012e81 	.word	0x20012e81
 80042b0:	20012e54 	.word	0x20012e54
 80042b4:	20012e08 	.word	0x20012e08

080042b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042ca:	f000 fb77 	bl	80049bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40001000 	.word	0x40001000

080042dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e0:	b672      	cpsid	i
}
 80042e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <Error_Handler+0x8>

080042e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_MspInit+0x4c>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004334 <HAL_MspInit+0x4c>)
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <HAL_MspInit+0x4c>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_MspInit+0x4c>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	4a08      	ldr	r2, [pc, #32]	@ (8004334 <HAL_MspInit+0x4c>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	@ 0x40
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_MspInit+0x4c>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800

08004338 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b09a      	sub	sp, #104	@ 0x68
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004340:	f107 030c 	add.w	r3, r7, #12
 8004344:	225c      	movs	r2, #92	@ 0x5c
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f003 fbbb 	bl	8007ac4 <memset>
  if(hrtc->Instance==RTC)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0c      	ldr	r2, [pc, #48]	@ (8004384 <HAL_RTC_MspInit+0x4c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004358:	2320      	movs	r3, #32
 800435a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800435c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004360:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4618      	mov	r0, r3
 8004368:	f000 ffb6 	bl	80052d8 <HAL_RCCEx_PeriphCLKConfig>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004372:	f7ff ffb3 	bl	80042dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004376:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <HAL_RTC_MspInit+0x50>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800437c:	bf00      	nop
 800437e:	3768      	adds	r7, #104	@ 0x68
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40002800 	.word	0x40002800
 8004388:	42470e3c 	.word	0x42470e3c

0800438c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <HAL_UART_MspInit+0x94>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d133      	bne.n	8004416 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043da:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_UART_MspInit+0x98>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043e6:	230c      	movs	r3, #12
 80043e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043f6:	2307      	movs	r3, #7
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	4619      	mov	r1, r3
 8004400:	4809      	ldr	r0, [pc, #36]	@ (8004428 <HAL_UART_MspInit+0x9c>)
 8004402:	f000 fc6f 	bl	8004ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2106      	movs	r1, #6
 800440a:	2026      	movs	r0, #38	@ 0x26
 800440c:	f000 fbae 	bl	8004b6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004410:	2026      	movs	r0, #38	@ 0x26
 8004412:	f000 fbc7 	bl	8004ba4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	@ 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40004400 	.word	0x40004400
 8004424:	40023800 	.word	0x40023800
 8004428:	40020000 	.word	0x40020000

0800442c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	@ 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	4b33      	ldr	r3, [pc, #204]	@ (8004510 <HAL_InitTick+0xe4>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	4a32      	ldr	r2, [pc, #200]	@ (8004510 <HAL_InitTick+0xe4>)
 8004446:	f043 0310 	orr.w	r3, r3, #16
 800444a:	6413      	str	r3, [r2, #64]	@ 0x40
 800444c:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <HAL_InitTick+0xe4>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004458:	f107 0210 	add.w	r2, r7, #16
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 ff06 	bl	8005274 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004472:	f000 fed7 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 8004476:	6378      	str	r0, [r7, #52]	@ 0x34
 8004478:	e004      	b.n	8004484 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800447a:	f000 fed3 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 800447e:	4603      	mov	r3, r0
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	4a23      	ldr	r2, [pc, #140]	@ (8004514 <HAL_InitTick+0xe8>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0c9b      	lsrs	r3, r3, #18
 800448e:	3b01      	subs	r3, #1
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004492:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <HAL_InitTick+0xec>)
 8004494:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_InitTick+0xf0>)
 8004496:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <HAL_InitTick+0xec>)
 800449a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800449e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004518 <HAL_InitTick+0xec>)
 80044a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80044a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004518 <HAL_InitTick+0xec>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004518 <HAL_InitTick+0xec>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b2:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <HAL_InitTick+0xec>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80044b8:	4817      	ldr	r0, [pc, #92]	@ (8004518 <HAL_InitTick+0xec>)
 80044ba:	f002 f80b 	bl	80064d4 <HAL_TIM_Base_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80044c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11b      	bne.n	8004504 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80044cc:	4812      	ldr	r0, [pc, #72]	@ (8004518 <HAL_InitTick+0xec>)
 80044ce:	f002 f85b 	bl	8006588 <HAL_TIM_Base_Start_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80044d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044e0:	2036      	movs	r0, #54	@ 0x36
 80044e2:	f000 fb5f 	bl	8004ba4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b0f      	cmp	r3, #15
 80044ea:	d808      	bhi.n	80044fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80044ec:	2200      	movs	r2, #0
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	2036      	movs	r0, #54	@ 0x36
 80044f2:	f000 fb3b 	bl	8004b6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <HAL_InitTick+0xf4>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e002      	b.n	8004504 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004504:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004508:	4618      	mov	r0, r3
 800450a:	3738      	adds	r7, #56	@ 0x38
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	431bde83 	.word	0x431bde83
 8004518:	20012e84 	.word	0x20012e84
 800451c:	40001000 	.word	0x40001000
 8004520:	20000018 	.word	0x20000018

08004524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <NMI_Handler+0x4>

0800452c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <HardFault_Handler+0x4>

08004534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <MemManage_Handler+0x4>

0800453c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <BusFault_Handler+0x4>

08004544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <UsageFault_Handler+0x4>

0800454c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <USART2_IRQHandler+0x10>)
 8004562:	f002 fb59 	bl	8006c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20012e08 	.word	0x20012e08

08004570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004574:	4802      	ldr	r0, [pc, #8]	@ (8004580 <TIM6_DAC_IRQHandler+0x10>)
 8004576:	f002 f877 	bl	8006668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20012e84 	.word	0x20012e84

08004584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <SystemInit+0x20>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458e:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <SystemInit+0x20>)
 8004590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <menu_task>:
void process_cmd(command_t *cmd);

char *invalid_msg = "____________Invalid Option_____________\n";

void menu_task(void *parameter)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	char *menu_msg = "**********************Menu**************************\n"
 80045b0:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <menu_task+0xd0>)
 80045b2:	60bb      	str	r3, [r7, #8]
					  "Enter you choice here:";

	while(1)
	{
		//Send Menu message
		xQueueSend(q_print,&menu_msg,portMAX_DELAY);
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <menu_task+0xd4>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	f107 0108 	add.w	r1, r7, #8
 80045bc:	2300      	movs	r3, #0
 80045be:	f04f 32ff 	mov.w	r2, #4294967295
 80045c2:	f7fc f943 	bl	800084c <xQueueGenericSend>

		//Wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80045c6:	f107 030c 	add.w	r3, r7, #12
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	9200      	str	r2, [sp, #0]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2100      	movs	r1, #0
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fd fe4f 	bl	8002278 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	617b      	str	r3, [r7, #20]
		if(cmd->len == 1)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	7a9b      	ldrb	r3, [r3, #10]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d133      	bne.n	800464e <menu_task+0xa6>
		{
			option = cmd->payload[0]-48; /*input comes as ASCII characters, we subtract 48 (ASCII code of '0') \
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	3b30      	subs	r3, #48	@ 0x30
 80045ec:	613b      	str	r3, [r7, #16]
										to convert it into an integer.*/
			switch(option)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d035      	beq.n	8004660 <menu_task+0xb8>
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	dc20      	bgt.n	800463c <menu_task+0x94>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <menu_task+0x60>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d00d      	beq.n	8004622 <menu_task+0x7a>
 8004606:	e019      	b.n	800463c <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <menu_task+0xd8>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_task_handle,0,eNoAction);
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <menu_task+0xdc>)
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	2200      	movs	r2, #0
 800461a:	2100      	movs	r1, #0
 800461c:	f7fd febe 	bl	800239c <xTaskGenericNotify>
					break;
 8004620:	e01f      	b.n	8004662 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 8004622:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <menu_task+0xd8>)
 8004624:	2202      	movs	r2, #2
 8004626:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_task_handle,0,eNoAction);
 8004628:	4b17      	ldr	r3, [pc, #92]	@ (8004688 <menu_task+0xe0>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	f7fd feb1 	bl	800239c <xTaskGenericNotify>
					break;
 800463a:	e012      	b.n	8004662 <menu_task+0xba>
				case 2:
					break;
				default:
					xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 800463c:	4b0f      	ldr	r3, [pc, #60]	@ (800467c <menu_task+0xd4>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	f04f 32ff 	mov.w	r2, #4294967295
 8004646:	4911      	ldr	r1, [pc, #68]	@ (800468c <menu_task+0xe4>)
 8004648:	f7fc f900 	bl	800084c <xQueueGenericSend>
					continue;
 800464c:	e012      	b.n	8004674 <menu_task+0xcc>
			}

		}
		else
		{
			xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <menu_task+0xd4>)
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	490c      	ldr	r1, [pc, #48]	@ (800468c <menu_task+0xe4>)
 800465a:	f7fc f8f7 	bl	800084c <xQueueGenericSend>
			continue;
 800465e:	e009      	b.n	8004674 <menu_task+0xcc>
					break;
 8004660:	bf00      	nop
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	2200      	movs	r2, #0
 800466c:	2100      	movs	r1, #0
 800466e:	2000      	movs	r0, #0
 8004670:	f7fd fe02 	bl	8002278 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&menu_msg,portMAX_DELAY);
 8004674:	e79e      	b.n	80045b4 <menu_task+0xc>
 8004676:	bf00      	nop
 8004678:	08007be8 	.word	0x08007be8
 800467c:	20012e68 	.word	0x20012e68
 8004680:	20012e80 	.word	0x20012e80
 8004684:	20012e5c 	.word	0x20012e5c
 8004688:	20012e60 	.word	0x20012e60
 800468c:	20000014 	.word	0x20000014

08004690 <cmd_handler_task>:
	}
}
void cmd_handler_task(void *parameter)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	6078      	str	r0, [r7, #4]
		/*
		 * implement notify wait
		 * process the user data(command) stored in input data queue
		 * Notify the command to relevant task
		 * */
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(100));
 8004698:	2364      	movs	r3, #100	@ 0x64
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2300      	movs	r3, #0
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fd fde8 	bl	8002278 <xTaskGenericNotifyWait>
 80046a8:	6178      	str	r0, [r7, #20]

		if(status == pdTRUE)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d1f3      	bne.n	8004698 <cmd_handler_task+0x8>
		{
			process_cmd(&cmd);
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f801 	bl	80046bc <process_cmd>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(100));
 80046ba:	e7ed      	b.n	8004698 <cmd_handler_task+0x8>

080046bc <process_cmd>:
		}
	}
}

void process_cmd(command_t *cmd)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
	extract_cmd(cmd);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f835 	bl	8004734 <extract_cmd>

	switch(curr_state)
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <process_cmd+0x6c>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	dc24      	bgt.n	800471c <process_cmd+0x60>
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	da18      	bge.n	8004708 <process_cmd+0x4c>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <process_cmd+0x24>
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d00a      	beq.n	80046f4 <process_cmd+0x38>
		case sRtcReport:
			xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

		default:
		break;
 80046de:	e01d      	b.n	800471c <process_cmd+0x60>
			xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 80046e0:	4b12      	ldr	r3, [pc, #72]	@ (800472c <process_cmd+0x70>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2303      	movs	r3, #3
 80046ec:	2100      	movs	r1, #0
 80046ee:	f7fd fe55 	bl	800239c <xTaskGenericNotify>
			break;
 80046f2:	e014      	b.n	800471e <process_cmd+0x62>
			xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 80046f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <process_cmd+0x74>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2303      	movs	r3, #3
 8004700:	2100      	movs	r1, #0
 8004702:	f7fd fe4b 	bl	800239c <xTaskGenericNotify>
		break;
 8004706:	e00a      	b.n	800471e <process_cmd+0x62>
			xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <process_cmd+0x74>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	2300      	movs	r3, #0
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2303      	movs	r3, #3
 8004714:	2100      	movs	r1, #0
 8004716:	f7fd fe41 	bl	800239c <xTaskGenericNotify>
		break;
 800471a:	e000      	b.n	800471e <process_cmd+0x62>
		break;
 800471c:	bf00      	nop
	}
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20012e80 	.word	0x20012e80
 800472c:	20012e50 	.word	0x20012e50
 8004730:	20012e5c 	.word	0x20012e5c

08004734 <extract_cmd>:

int extract_cmd(command_t *cmd)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <extract_cmd+0x6c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fc fbb7 	bl	8000eb4 <uxQueueMessagesWaiting>
 8004746:	4603      	mov	r3, r0
 8004748:	613b      	str	r3, [r7, #16]

	if(!status) return -1;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <extract_cmd+0x22>
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e020      	b.n	8004798 <extract_cmd+0x64>

	uint8_t i;

	do
	{
		status = xQueueReceive(q_data, &item, 0);
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <extract_cmd+0x6c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f107 010f 	add.w	r1, r7, #15
 800475e:	2200      	movs	r2, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f7fc fa2b 	bl	8000bbc <xQueueReceive>
 8004766:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d106      	bne.n	800477c <extract_cmd+0x48>
			cmd->payload[i++] = item;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	75fa      	strb	r2, [r7, #23]
 8004774:	461a      	mov	r2, r3
 8004776:	7bf9      	ldrb	r1, [r7, #15]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b0a      	cmp	r3, #10
 8004780:	d1e9      	bne.n	8004756 <extract_cmd+0x22>

	cmd->payload[i-1] = '\0';
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	3b01      	subs	r3, #1
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	3b01      	subs	r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	729a      	strb	r2, [r3, #10]

	return 0;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20012e64 	.word	0x20012e64

080047a4 <print_task>:


void print_task(void *parameter)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <print_task+0x38>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f107 010c 	add.w	r1, r7, #12
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc f9ff 	bl	8000bbc <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char*)msg), HAL_MAX_DELAY);
 80047be:	68fc      	ldr	r4, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fd2e 	bl	8000224 <strlen>
 80047c8:	4603      	mov	r3, r0
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	4621      	mov	r1, r4
 80047d2:	4803      	ldr	r0, [pc, #12]	@ (80047e0 <print_task+0x3c>)
 80047d4:	f002 f970 	bl	8006ab8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80047d8:	bf00      	nop
 80047da:	e7e7      	b.n	80047ac <print_task+0x8>
 80047dc:	20012e68 	.word	0x20012e68
 80047e0:	20012e08 	.word	0x20012e08

080047e4 <led_task>:
	}
}
void led_task(void *parameter)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* led_msg = "========================\n"
 80047ec:	4b3e      	ldr	r3, [pc, #248]	@ (80048e8 <led_task+0x104>)
 80047ee:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		 /*Wait for notification (Notify wait) from the menu task to handle Led_task */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	2200      	movs	r2, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fd fd3b 	bl	8002278 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&led_msg,portMAX_DELAY);
 8004802:	4b3a      	ldr	r3, [pc, #232]	@ (80048ec <led_task+0x108>)
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	f107 010c 	add.w	r1, r7, #12
 800480a:	2300      	movs	r3, #0
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	f7fc f81c 	bl	800084c <xQueueGenericSend>

		/*wait for LED command (Notify wait)from command task after user enters the command */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	9200      	str	r2, [sp, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2000      	movs	r0, #0
 8004824:	f7fd fd28 	bl	8002278 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	7a9b      	ldrb	r3, [r3, #10]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d843      	bhi.n	80048bc <led_task+0xd8>
		{
			if(!strcmp((char*)cmd->payload,"none"))
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	492e      	ldr	r1, [pc, #184]	@ (80048f0 <led_task+0x10c>)
 8004838:	4618      	mov	r0, r3
 800483a:	f7fb fce9 	bl	8000210 <strcmp>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <led_task+0x66>
				led_effect_stop();
 8004844:	f7ff f9cc 	bl	8003be0 <led_effect_stop>
 8004848:	e040      	b.n	80048cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4929      	ldr	r1, [pc, #164]	@ (80048f4 <led_task+0x110>)
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fcde 	bl	8000210 <strcmp>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <led_task+0x7e>
				led_effect_start(1);
 800485a:	2001      	movs	r0, #1
 800485c:	f7ff f9e0 	bl	8003c20 <led_effect_start>
 8004860:	e034      	b.n	80048cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4924      	ldr	r1, [pc, #144]	@ (80048f8 <led_task+0x114>)
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fcd2 	bl	8000210 <strcmp>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <led_task+0x96>
				led_effect_start(2);
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff f9d4 	bl	8003c20 <led_effect_start>
 8004878:	e028      	b.n	80048cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	491f      	ldr	r1, [pc, #124]	@ (80048fc <led_task+0x118>)
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fcc6 	bl	8000210 <strcmp>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <led_task+0xae>
				led_effect_start(3);
 800488a:	2003      	movs	r0, #3
 800488c:	f7ff f9c8 	bl	8003c20 <led_effect_start>
 8004890:	e01c      	b.n	80048cc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	491a      	ldr	r1, [pc, #104]	@ (8004900 <led_task+0x11c>)
 8004896:	4618      	mov	r0, r3
 8004898:	f7fb fcba 	bl	8000210 <strcmp>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <led_task+0xc6>
				led_effect_start(4);
 80048a2:	2004      	movs	r0, #4
 80048a4:	f7ff f9bc 	bl	8003c20 <led_effect_start>
 80048a8:	e010      	b.n	80048cc <led_task+0xe8>
			else
				/*print invalid message */
				xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <led_task+0x108>)
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	4913      	ldr	r1, [pc, #76]	@ (8004904 <led_task+0x120>)
 80048b6:	f7fb ffc9 	bl	800084c <xQueueGenericSend>
 80048ba:	e007      	b.n	80048cc <led_task+0xe8>
		}else
			/*print invalid message */
			xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <led_task+0x108>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	490f      	ldr	r1, [pc, #60]	@ (8004904 <led_task+0x120>)
 80048c8:	f7fb ffc0 	bl	800084c <xQueueGenericSend>

		/*update state variable */
		curr_state = sMainMenu;
 80048cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <led_task+0x124>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task again */
		xTaskNotify(menu_task_handle,0,eNoAction);
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <led_task+0x128>)
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	2200      	movs	r2, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	f7fd fd5c 	bl	800239c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80048e4:	e784      	b.n	80047f0 <led_task+0xc>
 80048e6:	bf00      	nop
 80048e8:	08007c98 	.word	0x08007c98
 80048ec:	20012e68 	.word	0x20012e68
 80048f0:	08007d10 	.word	0x08007d10
 80048f4:	08007d18 	.word	0x08007d18
 80048f8:	08007d1c 	.word	0x08007d1c
 80048fc:	08007d20 	.word	0x08007d20
 8004900:	08007d24 	.word	0x08007d24
 8004904:	20000014 	.word	0x20000014
 8004908:	20012e80 	.word	0x20012e80
 800490c:	20012e50 	.word	0x20012e50

08004910 <rtc_task>:

	}

}
void rtc_task(void *parameter)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]


		}//while super loop end
#endif

}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800495c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004928:	f7ff fe2c 	bl	8004584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800492c:	480c      	ldr	r0, [pc, #48]	@ (8004960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800492e:	490d      	ldr	r1, [pc, #52]	@ (8004964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004930:	4a0d      	ldr	r2, [pc, #52]	@ (8004968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004934:	e002      	b.n	800493c <LoopCopyDataInit>

08004936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800493a:	3304      	adds	r3, #4

0800493c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800493c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800493e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004940:	d3f9      	bcc.n	8004936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004942:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004944:	4c0a      	ldr	r4, [pc, #40]	@ (8004970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004948:	e001      	b.n	800494e <LoopFillZerobss>

0800494a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800494a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800494c:	3204      	adds	r2, #4

0800494e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800494e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004950:	d3fb      	bcc.n	800494a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004952:	f003 f8bf 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004956:	f7ff f9e3 	bl	8003d20 <main>
  bx  lr    
 800495a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800495c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004964:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8004968:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 800496c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8004970:	20012ed0 	.word	0x20012ed0

08004974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004974:	e7fe      	b.n	8004974 <ADC_IRQHandler>
	...

08004978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_Init+0x40>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0d      	ldr	r2, [pc, #52]	@ (80049b8 <HAL_Init+0x40>)
 8004982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_Init+0x40>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <HAL_Init+0x40>)
 800498e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004994:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <HAL_Init+0x40>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a07      	ldr	r2, [pc, #28]	@ (80049b8 <HAL_Init+0x40>)
 800499a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800499e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049a0:	2003      	movs	r0, #3
 80049a2:	f000 f8d8 	bl	8004b56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049a6:	200f      	movs	r0, #15
 80049a8:	f7ff fd40 	bl	800442c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049ac:	f7ff fc9c 	bl	80042e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00

080049bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_IncTick+0x20>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_IncTick+0x24>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_IncTick+0x24>)
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000001c 	.word	0x2000001c
 80049e0:	20012ecc 	.word	0x20012ecc

080049e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return uwTick;
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <HAL_GetTick+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20012ecc 	.word	0x20012ecc

080049fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <__NVIC_SetPriorityGrouping+0x44>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a2e:	4a04      	ldr	r2, [pc, #16]	@ (8004a40 <__NVIC_SetPriorityGrouping+0x44>)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	60d3      	str	r3, [r2, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	e000ed00 	.word	0xe000ed00

08004a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <__NVIC_GetPriorityGrouping+0x18>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	f003 0307 	and.w	r3, r3, #7
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	db0b      	blt.n	8004a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	f003 021f 	and.w	r2, r3, #31
 8004a78:	4907      	ldr	r1, [pc, #28]	@ (8004a98 <__NVIC_EnableIRQ+0x38>)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2001      	movs	r0, #1
 8004a82:	fa00 f202 	lsl.w	r2, r0, r2
 8004a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000e100 	.word	0xe000e100

08004a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db0a      	blt.n	8004ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	490c      	ldr	r1, [pc, #48]	@ (8004ae8 <__NVIC_SetPriority+0x4c>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	0112      	lsls	r2, r2, #4
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac4:	e00a      	b.n	8004adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4908      	ldr	r1, [pc, #32]	@ (8004aec <__NVIC_SetPriority+0x50>)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	0112      	lsls	r2, r2, #4
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	440b      	add	r3, r1
 8004ada:	761a      	strb	r2, [r3, #24]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000e100 	.word	0xe000e100
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f1c3 0307 	rsb	r3, r3, #7
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	bf28      	it	cs
 8004b0e:	2304      	movcs	r3, #4
 8004b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d902      	bls.n	8004b20 <NVIC_EncodePriority+0x30>
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3b03      	subs	r3, #3
 8004b1e:	e000      	b.n	8004b22 <NVIC_EncodePriority+0x32>
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	401a      	ands	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b38:	f04f 31ff 	mov.w	r1, #4294967295
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	43d9      	mvns	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b48:	4313      	orrs	r3, r2
         );
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3724      	adds	r7, #36	@ 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff4c 	bl	80049fc <__NVIC_SetPriorityGrouping>
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b7e:	f7ff ff61 	bl	8004a44 <__NVIC_GetPriorityGrouping>
 8004b82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	6978      	ldr	r0, [r7, #20]
 8004b8a:	f7ff ffb1 	bl	8004af0 <NVIC_EncodePriority>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff ff80 	bl	8004a9c <__NVIC_SetPriority>
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff54 	bl	8004a60 <__NVIC_EnableIRQ>
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bce:	f7ff ff09 	bl	80049e4 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d008      	beq.n	8004bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	@ 0x80
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e052      	b.n	8004c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0216 	bic.w	r2, r2, #22
 8004c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_DMA_Abort+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0208 	bic.w	r2, r2, #8
 8004c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c42:	e013      	b.n	8004c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c44:	f7ff fece 	bl	80049e4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d90c      	bls.n	8004c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e015      	b.n	8004c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e4      	bne.n	8004c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	223f      	movs	r2, #63	@ 0x3f
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e00c      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	@ 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e165      	b.n	8004fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8154 	bne.w	8004fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d005      	beq.n	8004d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d130      	bne.n	8004d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 0201 	and.w	r2, r3, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d017      	beq.n	8004dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ae 	beq.w	8004fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e86:	4a58      	ldr	r2, [pc, #352]	@ (8004fe8 <HAL_GPIO_Init+0x304>)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4f      	ldr	r2, [pc, #316]	@ (8004fec <HAL_GPIO_Init+0x308>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x21a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff0 <HAL_GPIO_Init+0x30c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x216>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff4 <HAL_GPIO_Init+0x310>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x212>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8004ff8 <HAL_GPIO_Init+0x314>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x20e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <HAL_GPIO_Init+0x318>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x20a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <HAL_GPIO_Init+0x31c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x206>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a49      	ldr	r2, [pc, #292]	@ (8005004 <HAL_GPIO_Init+0x320>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x202>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e00c      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00a      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e008      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e004      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004efe:	2300      	movs	r3, #0
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	f002 0203 	and.w	r2, r2, #3
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4093      	lsls	r3, r2
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f10:	4935      	ldr	r1, [pc, #212]	@ (8004fe8 <HAL_GPIO_Init+0x304>)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f42:	4a31      	ldr	r2, [pc, #196]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f48:	4b2f      	ldr	r3, [pc, #188]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f6c:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f72:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f96:	4a1c      	ldr	r2, [pc, #112]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc0:	4a11      	ldr	r2, [pc, #68]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	f67f ae96 	bls.w	8004d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40020000 	.word	0x40020000
 8004ff0:	40020400 	.word	0x40020400
 8004ff4:	40020800 	.word	0x40020800
 8004ff8:	40020c00 	.word	0x40020c00
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40021400 	.word	0x40021400
 8005004:	40021800 	.word	0x40021800
 8005008:	40013c00 	.word	0x40013c00

0800500c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
 8005018:	4613      	mov	r3, r2
 800501a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800501c:	787b      	ldrb	r3, [r7, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005028:	e003      	b.n	8005032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	041a      	lsls	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	619a      	str	r2, [r3, #24]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cc      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b68      	ldr	r3, [pc, #416]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90c      	bls.n	800507c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b65      	ldr	r3, [pc, #404]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b63      	ldr	r3, [pc, #396]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0b8      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b59      	ldr	r3, [pc, #356]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a58      	ldr	r2, [pc, #352]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800509e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ac:	4b53      	ldr	r3, [pc, #332]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a52      	ldr	r2, [pc, #328]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b50      	ldr	r3, [pc, #320]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	494d      	ldr	r1, [pc, #308]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d044      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b47      	ldr	r3, [pc, #284]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d119      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e07f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d003      	beq.n	80050fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b3f      	ldr	r3, [pc, #252]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e067      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b37      	ldr	r3, [pc, #220]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4934      	ldr	r1, [pc, #208]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7ff fc58 	bl	80049e4 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7ff fc54 	bl	80049e4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e04f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2b      	ldr	r3, [pc, #172]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b25      	ldr	r3, [pc, #148]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20c      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b22      	ldr	r3, [pc, #136]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e032      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b19      	ldr	r3, [pc, #100]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4916      	ldr	r1, [pc, #88]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b2:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490e      	ldr	r1, [pc, #56]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051c6:	f000 fbb1 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490a      	ldr	r1, [pc, #40]	@ (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a09      	ldr	r2, [pc, #36]	@ (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051e2:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff f920 	bl	800442c <HAL_InitTick>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00
 80051fc:	40023800 	.word	0x40023800
 8005200:	08007d28 	.word	0x08007d28
 8005204:	20000010 	.word	0x20000010
 8005208:	20000018 	.word	0x20000018

0800520c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005210:	4b03      	ldr	r3, [pc, #12]	@ (8005220 <HAL_RCC_GetHCLKFreq+0x14>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000010 	.word	0x20000010

08005224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005228:	f7ff fff0 	bl	800520c <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0a9b      	lsrs	r3, r3, #10
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4903      	ldr	r1, [pc, #12]	@ (8005248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40023800 	.word	0x40023800
 8005248:	08007d38 	.word	0x08007d38

0800524c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005250:	f7ff ffdc 	bl	800520c <HAL_RCC_GetHCLKFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	4b05      	ldr	r3, [pc, #20]	@ (800526c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0b5b      	lsrs	r3, r3, #13
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4903      	ldr	r1, [pc, #12]	@ (8005270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005262:	5ccb      	ldrb	r3, [r1, r3]
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	08007d38 	.word	0x08007d38

08005274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	220f      	movs	r2, #15
 8005282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005284:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005290:	4b0f      	ldr	r3, [pc, #60]	@ (80052d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800529c:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <HAL_RCC_GetClockConfig+0x5c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052a8:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	08db      	lsrs	r3, r3, #3
 80052ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052b6:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <HAL_RCC_GetClockConfig+0x60>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40023c00 	.word	0x40023c00

080052d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005310:	4b6f      	ldr	r3, [pc, #444]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005316:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	496c      	ldr	r1, [pc, #432]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800532e:	2301      	movs	r3, #1
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800533e:	4b64      	ldr	r3, [pc, #400]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005344:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	4960      	ldr	r1, [pc, #384]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800535c:	2301      	movs	r3, #1
 800535e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800536c:	4b58      	ldr	r3, [pc, #352]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	4955      	ldr	r1, [pc, #340]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800538a:	d101      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800538c:	2301      	movs	r3, #1
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053a8:	4b49      	ldr	r3, [pc, #292]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b6:	4946      	ldr	r1, [pc, #280]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c6:	d101      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80053c8:	2301      	movs	r3, #1
 80053ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80053d4:	2301      	movs	r3, #1
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 808a 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	4a38      	ldr	r2, [pc, #224]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053f6:	4b36      	ldr	r3, [pc, #216]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005402:	4b34      	ldr	r3, [pc, #208]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800540c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800540e:	f7ff fae9 	bl	80049e4 <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005416:	f7ff fae5 	bl	80049e4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e278      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005428:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005434:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	429a      	cmp	r2, r3
 8005450:	d028      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005452:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800545c:	4b1e      	ldr	r3, [pc, #120]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005462:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005468:	4a19      	ldr	r2, [pc, #100]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800546e:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d114      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800547a:	f7ff fab3 	bl	80049e4 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7ff faaf 	bl	80049e4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e240      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b0:	d114      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c6:	4902      	ldr	r1, [pc, #8]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]
 80054cc:	e00c      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40007000 	.word	0x40007000
 80054d8:	42470e40 	.word	0x42470e40
 80054dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a49      	ldr	r2, [pc, #292]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054e6:	6093      	str	r3, [r2, #8]
 80054e8:	4b47      	ldr	r3, [pc, #284]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f4:	4944      	ldr	r1, [pc, #272]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800550c:	4b3f      	ldr	r3, [pc, #252]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800550e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800551c:	4b3a      	ldr	r3, [pc, #232]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800551e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	4937      	ldr	r1, [pc, #220]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800553e:	4b32      	ldr	r3, [pc, #200]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005544:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554c:	492e      	ldr	r1, [pc, #184]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d011      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005560:	4b29      	ldr	r3, [pc, #164]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005566:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556e:	4926      	ldr	r1, [pc, #152]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800557e:	d101      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005580:	2301      	movs	r3, #1
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005596:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	491a      	ldr	r1, [pc, #104]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c0:	4911      	ldr	r1, [pc, #68]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d0:	d101      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80055d2:	2301      	movs	r3, #1
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d005      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e4:	f040 80ff 	bne.w	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055e8:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055ee:	f7ff f9f9 	bl	80049e4 <HAL_GetTick>
 80055f2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f4:	e00e      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055f6:	f7ff f9f5 	bl	80049e4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d907      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e188      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005608:	40023800 	.word	0x40023800
 800560c:	424711e0 	.word	0x424711e0
 8005610:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005614:	4b7e      	ldr	r3, [pc, #504]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ea      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800563c:	2b00      	cmp	r3, #0
 800563e:	d028      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d124      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005648:	4b71      	ldr	r3, [pc, #452]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800564a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	3301      	adds	r3, #1
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800565a:	4b6d      	ldr	r3, [pc, #436]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800565c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005660:	0e1b      	lsrs	r3, r3, #24
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	431a      	orrs	r2, r3
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	3b01      	subs	r3, #1
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	431a      	orrs	r2, r3
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	071b      	lsls	r3, r3, #28
 800568a:	4961      	ldr	r1, [pc, #388]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d035      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056bc:	d130      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80056be:	4b54      	ldr	r3, [pc, #336]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	3301      	adds	r3, #1
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d6:	0f1b      	lsrs	r3, r3, #28
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	019b      	lsls	r3, r3, #6
 80056e8:	431a      	orrs	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	3b01      	subs	r3, #1
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	071b      	lsls	r3, r3, #28
 8005700:	4943      	ldr	r1, [pc, #268]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005708:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800570e:	f023 021f 	bic.w	r2, r3, #31
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	3b01      	subs	r3, #1
 8005718:	493d      	ldr	r1, [pc, #244]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d029      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005734:	d124      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005736:	4b36      	ldr	r3, [pc, #216]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005748:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574e:	0f1b      	lsrs	r3, r3, #28
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	019b      	lsls	r3, r3, #6
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	3b01      	subs	r3, #1
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	431a      	orrs	r2, r3
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	431a      	orrs	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	071b      	lsls	r3, r3, #28
 8005778:	4925      	ldr	r1, [pc, #148]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	3b01      	subs	r3, #1
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	071b      	lsls	r3, r3, #28
 80057b2:	4917      	ldr	r1, [pc, #92]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057ba:	4b16      	ldr	r3, [pc, #88]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c0:	f7ff f910 	bl	80049e4 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057c8:	f7ff f90c 	bl	80049e4 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e09f      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 8095 	bne.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057f4:	f7ff f8f6 	bl	80049e4 <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057fa:	e00f      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057fc:	f7ff f8f2 	bl	80049e4 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d908      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e085      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	42470068 	.word	0x42470068
 8005818:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800581c:	4b41      	ldr	r3, [pc, #260]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005828:	d0e8      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d127      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005852:	4b34      	ldr	r3, [pc, #208]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	431a      	orrs	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	3b01      	subs	r3, #1
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	061b      	lsls	r3, r3, #24
 8005880:	4928      	ldr	r1, [pc, #160]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005888:	4b26      	ldr	r3, [pc, #152]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800588e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	3b01      	subs	r3, #1
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	4922      	ldr	r1, [pc, #136]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b6:	d118      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	0e1b      	lsrs	r3, r3, #24
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	019b      	lsls	r3, r3, #6
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	4910      	ldr	r1, [pc, #64]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f0:	f7ff f878 	bl	80049e4 <HAL_GetTick>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f8:	f7ff f874 	bl	80049e4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e007      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005916:	d1ef      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3730      	adds	r7, #48	@ 0x30
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	42470070 	.word	0x42470070

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b0ae      	sub	sp, #184	@ 0xb8
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005952:	4bcb      	ldr	r3, [pc, #812]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b0c      	cmp	r3, #12
 800595c:	f200 8206 	bhi.w	8005d6c <HAL_RCC_GetSysClockFreq+0x440>
 8005960:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	0800599d 	.word	0x0800599d
 800596c:	08005d6d 	.word	0x08005d6d
 8005970:	08005d6d 	.word	0x08005d6d
 8005974:	08005d6d 	.word	0x08005d6d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	08005d6d 	.word	0x08005d6d
 8005980:	08005d6d 	.word	0x08005d6d
 8005984:	08005d6d 	.word	0x08005d6d
 8005988:	080059ad 	.word	0x080059ad
 800598c:	08005d6d 	.word	0x08005d6d
 8005990:	08005d6d 	.word	0x08005d6d
 8005994:	08005d6d 	.word	0x08005d6d
 8005998:	08005b9d 	.word	0x08005b9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800599c:	4bb9      	ldr	r3, [pc, #740]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x358>)
 800599e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059a2:	e1e7      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059a4:	4bb8      	ldr	r3, [pc, #736]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059aa:	e1e3      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ac:	4bb4      	ldr	r3, [pc, #720]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059b8:	4bb1      	ldr	r3, [pc, #708]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d071      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c4:	4bae      	ldr	r3, [pc, #696]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	099b      	lsrs	r3, r3, #6
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	0159      	lsls	r1, r3, #5
 80059f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fc:	0150      	lsls	r0, r2, #5
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4621      	mov	r1, r4
 8005a04:	1a51      	subs	r1, r2, r1
 8005a06:	6439      	str	r1, [r7, #64]	@ 0x40
 8005a08:	4629      	mov	r1, r5
 8005a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	4641      	mov	r1, r8
 8005a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a26:	4641      	mov	r1, r8
 8005a28:	018a      	lsls	r2, r1, #6
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	1a51      	subs	r1, r2, r1
 8005a2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a30:	4649      	mov	r1, r9
 8005a32:	eb63 0301 	sbc.w	r3, r3, r1
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005a44:	4649      	mov	r1, r9
 8005a46:	00cb      	lsls	r3, r1, #3
 8005a48:	4641      	mov	r1, r8
 8005a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4e:	4641      	mov	r1, r8
 8005a50:	00ca      	lsls	r2, r1, #3
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	4603      	mov	r3, r0
 8005a58:	4622      	mov	r2, r4
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5e:	462b      	mov	r3, r5
 8005a60:	460a      	mov	r2, r1
 8005a62:	eb42 0303 	adc.w	r3, r2, r3
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a74:	4629      	mov	r1, r5
 8005a76:	024b      	lsls	r3, r1, #9
 8005a78:	4621      	mov	r1, r4
 8005a7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a7e:	4621      	mov	r1, r4
 8005a80:	024a      	lsls	r2, r1, #9
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a98:	f7fa fbcc 	bl	8000234 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa6:	e067      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa8:	4b75      	ldr	r3, [pc, #468]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ab4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ac6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005aca:	4622      	mov	r2, r4
 8005acc:	462b      	mov	r3, r5
 8005ace:	f04f 0000 	mov.w	r0, #0
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	0159      	lsls	r1, r3, #5
 8005ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005adc:	0150      	lsls	r0, r2, #5
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	1a51      	subs	r1, r2, r1
 8005ae6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ae8:	4629      	mov	r1, r5
 8005aea:	eb63 0301 	sbc.w	r3, r3, r1
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005afc:	4649      	mov	r1, r9
 8005afe:	018b      	lsls	r3, r1, #6
 8005b00:	4641      	mov	r1, r8
 8005b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b06:	4641      	mov	r1, r8
 8005b08:	018a      	lsls	r2, r1, #6
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b10:	4649      	mov	r1, r9
 8005b12:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2a:	4692      	mov	sl, r2
 8005b2c:	469b      	mov	fp, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	eb1a 0303 	adds.w	r3, sl, r3
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	462b      	mov	r3, r5
 8005b38:	eb4b 0303 	adc.w	r3, fp, r3
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	028b      	lsls	r3, r1, #10
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b54:	4621      	mov	r1, r4
 8005b56:	028a      	lsls	r2, r1, #10
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b60:	2200      	movs	r2, #0
 8005b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b64:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005b6a:	f7fa fb63 	bl	8000234 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4613      	mov	r3, r2
 8005b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b78:	4b41      	ldr	r3, [pc, #260]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	3301      	adds	r3, #1
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b9a:	e0eb      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b9c:	4b38      	ldr	r3, [pc, #224]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ba8:	4b35      	ldr	r3, [pc, #212]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d06b      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb4:	4b32      	ldr	r3, [pc, #200]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	2200      	movs	r2, #0
 8005bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc8:	2300      	movs	r3, #0
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005be2:	0150      	lsls	r0, r2, #5
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4621      	mov	r1, r4
 8005bea:	1a51      	subs	r1, r2, r1
 8005bec:	61b9      	str	r1, [r7, #24]
 8005bee:	4629      	mov	r1, r5
 8005bf0:	eb63 0301 	sbc.w	r3, r3, r1
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c02:	4659      	mov	r1, fp
 8005c04:	018b      	lsls	r3, r1, #6
 8005c06:	4651      	mov	r1, sl
 8005c08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	018a      	lsls	r2, r1, #6
 8005c10:	4651      	mov	r1, sl
 8005c12:	ebb2 0801 	subs.w	r8, r2, r1
 8005c16:	4659      	mov	r1, fp
 8005c18:	eb63 0901 	sbc.w	r9, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c30:	4690      	mov	r8, r2
 8005c32:	4699      	mov	r9, r3
 8005c34:	4623      	mov	r3, r4
 8005c36:	eb18 0303 	adds.w	r3, r8, r3
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	eb49 0303 	adc.w	r3, r9, r3
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c50:	4629      	mov	r1, r5
 8005c52:	024b      	lsls	r3, r1, #9
 8005c54:	4621      	mov	r1, r4
 8005c56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	024a      	lsls	r2, r1, #9
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c66:	2200      	movs	r2, #0
 8005c68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c70:	f7fa fae0 	bl	8000234 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c7e:	e065      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x420>
 8005c80:	40023800 	.word	0x40023800
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	2200      	movs	r2, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	4611      	mov	r1, r2
 8005c98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ca2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	464b      	mov	r3, r9
 8005caa:	f04f 0000 	mov.w	r0, #0
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	0159      	lsls	r1, r3, #5
 8005cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb8:	0150      	lsls	r0, r2, #5
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	1a51      	subs	r1, r2, r1
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005cd8:	4659      	mov	r1, fp
 8005cda:	018b      	lsls	r3, r1, #6
 8005cdc:	4651      	mov	r1, sl
 8005cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	018a      	lsls	r2, r1, #6
 8005ce6:	4651      	mov	r1, sl
 8005ce8:	1a54      	subs	r4, r2, r1
 8005cea:	4659      	mov	r1, fp
 8005cec:	eb63 0501 	sbc.w	r5, r3, r1
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	00eb      	lsls	r3, r5, #3
 8005cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cfe:	00e2      	lsls	r2, r4, #3
 8005d00:	4614      	mov	r4, r2
 8005d02:	461d      	mov	r5, r3
 8005d04:	4643      	mov	r3, r8
 8005d06:	18e3      	adds	r3, r4, r3
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	eb45 0303 	adc.w	r3, r5, r3
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d1e:	4629      	mov	r1, r5
 8005d20:	028b      	lsls	r3, r1, #10
 8005d22:	4621      	mov	r1, r4
 8005d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d28:	4621      	mov	r1, r4
 8005d2a:	028a      	lsls	r2, r1, #10
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d34:	2200      	movs	r2, #0
 8005d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d3e:	f7fa fa79 	bl	8000234 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4613      	mov	r3, r2
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0f1b      	lsrs	r3, r3, #28
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	37b8      	adds	r7, #184	@ 0xb8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	00f42400 	.word	0x00f42400

08005d8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e28d      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8083 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005dac:	4b94      	ldr	r3, [pc, #592]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 030c 	and.w	r3, r3, #12
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d019      	beq.n	8005dec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005db8:	4b91      	ldr	r3, [pc, #580]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dd0:	d00c      	beq.n	8005dec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d112      	bne.n	8005e04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dde:	4b88      	ldr	r3, [pc, #544]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dea:	d10b      	bne.n	8005e04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dec:	4b84      	ldr	r3, [pc, #528]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d05b      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x124>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d157      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e25a      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0c:	d106      	bne.n	8005e1c <HAL_RCC_OscConfig+0x90>
 8005e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7b      	ldr	r2, [pc, #492]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e01d      	b.n	8005e58 <HAL_RCC_OscConfig+0xcc>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0xb4>
 8005e26:	4b76      	ldr	r3, [pc, #472]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a75      	ldr	r2, [pc, #468]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4b73      	ldr	r3, [pc, #460]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a72      	ldr	r2, [pc, #456]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e00b      	b.n	8005e58 <HAL_RCC_OscConfig+0xcc>
 8005e40:	4b6f      	ldr	r3, [pc, #444]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a6e      	ldr	r2, [pc, #440]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6b      	ldr	r2, [pc, #428]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d013      	beq.n	8005e88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fe fdc0 	bl	80049e4 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fe fdbc 	bl	80049e4 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	@ 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e21f      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7a:	4b61      	ldr	r3, [pc, #388]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0xdc>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe fdac 	bl	80049e4 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fe fda8 	bl	80049e4 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	@ 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e20b      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea2:	4b57      	ldr	r3, [pc, #348]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x104>
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d06f      	beq.n	8005f9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ebe:	4b50      	ldr	r3, [pc, #320]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d017      	beq.n	8005efa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005eca:	4b4d      	ldr	r3, [pc, #308]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d105      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ee2:	4b47      	ldr	r3, [pc, #284]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005eea:	2b0c      	cmp	r3, #12
 8005eec:	d11c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eee:	4b44      	ldr	r3, [pc, #272]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d116      	bne.n	8005f28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efa:	4b41      	ldr	r3, [pc, #260]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <HAL_RCC_OscConfig+0x186>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e1d3      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f12:	4b3b      	ldr	r3, [pc, #236]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4937      	ldr	r1, [pc, #220]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f26:	e03a      	b.n	8005f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d020      	beq.n	8005f72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f30:	4b34      	ldr	r3, [pc, #208]	@ (8006004 <HAL_RCC_OscConfig+0x278>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f36:	f7fe fd55 	bl	80049e4 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fe fd51 	bl	80049e4 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e1b4      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f50:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5c:	4b28      	ldr	r3, [pc, #160]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	4925      	ldr	r1, [pc, #148]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
 8005f70:	e015      	b.n	8005f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <HAL_RCC_OscConfig+0x278>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fe fd34 	bl	80049e4 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f80:	f7fe fd30 	bl	80049e4 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e193      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f92:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d036      	beq.n	8006018 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb2:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fe fd14 	bl	80049e4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc0:	f7fe fd10 	bl	80049e4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e173      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <HAL_RCC_OscConfig+0x274>)
 8005fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x234>
 8005fde:	e01b      	b.n	8006018 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe0:	4b09      	ldr	r3, [pc, #36]	@ (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe6:	f7fe fcfd 	bl	80049e4 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fec:	e00e      	b.n	800600c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fee:	f7fe fcf9 	bl	80049e4 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d907      	bls.n	800600c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e15c      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
 8006000:	40023800 	.word	0x40023800
 8006004:	42470000 	.word	0x42470000
 8006008:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	4b8a      	ldr	r3, [pc, #552]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800600e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ea      	bne.n	8005fee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8097 	beq.w	8006154 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602a:	4b83      	ldr	r3, [pc, #524]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	4b7f      	ldr	r3, [pc, #508]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	4a7e      	ldr	r2, [pc, #504]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006044:	6413      	str	r3, [r2, #64]	@ 0x40
 8006046:	4b7c      	ldr	r3, [pc, #496]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006052:	2301      	movs	r3, #1
 8006054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006056:	4b79      	ldr	r3, [pc, #484]	@ (800623c <HAL_RCC_OscConfig+0x4b0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d118      	bne.n	8006094 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006062:	4b76      	ldr	r3, [pc, #472]	@ (800623c <HAL_RCC_OscConfig+0x4b0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a75      	ldr	r2, [pc, #468]	@ (800623c <HAL_RCC_OscConfig+0x4b0>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800606c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606e:	f7fe fcb9 	bl	80049e4 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fe fcb5 	bl	80049e4 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e118      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	4b6c      	ldr	r3, [pc, #432]	@ (800623c <HAL_RCC_OscConfig+0x4b0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d106      	bne.n	80060aa <HAL_RCC_OscConfig+0x31e>
 800609c:	4b66      	ldr	r3, [pc, #408]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a8:	e01c      	b.n	80060e4 <HAL_RCC_OscConfig+0x358>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0x340>
 80060b2:	4b61      	ldr	r3, [pc, #388]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	4a60      	ldr	r2, [pc, #384]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060be:	4b5e      	ldr	r3, [pc, #376]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c2:	4a5d      	ldr	r2, [pc, #372]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ca:	e00b      	b.n	80060e4 <HAL_RCC_OscConfig+0x358>
 80060cc:	4b5a      	ldr	r3, [pc, #360]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	4a59      	ldr	r2, [pc, #356]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d8:	4b57      	ldr	r3, [pc, #348]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060dc:	4a56      	ldr	r2, [pc, #344]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80060de:	f023 0304 	bic.w	r3, r3, #4
 80060e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d015      	beq.n	8006118 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ec:	f7fe fc7a 	bl	80049e4 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f2:	e00a      	b.n	800610a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f4:	f7fe fc76 	bl	80049e4 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0d7      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610a:	4b4b      	ldr	r3, [pc, #300]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ee      	beq.n	80060f4 <HAL_RCC_OscConfig+0x368>
 8006116:	e014      	b.n	8006142 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fe fc64 	bl	80049e4 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611e:	e00a      	b.n	8006136 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fe fc60 	bl	80049e4 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e0c1      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006136:	4b40      	ldr	r3, [pc, #256]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ee      	bne.n	8006120 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d105      	bne.n	8006154 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006148:	4b3b      	ldr	r3, [pc, #236]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	4a3a      	ldr	r2, [pc, #232]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 800614e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006152:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80ad 	beq.w	80062b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800615e:	4b36      	ldr	r3, [pc, #216]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b08      	cmp	r3, #8
 8006168:	d060      	beq.n	800622c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d145      	bne.n	80061fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006172:	4b33      	ldr	r3, [pc, #204]	@ (8006240 <HAL_RCC_OscConfig+0x4b4>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fe fc34 	bl	80049e4 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fe fc30 	bl	80049e4 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e093      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	019b      	lsls	r3, r3, #6
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	3b01      	subs	r3, #1
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	491b      	ldr	r1, [pc, #108]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <HAL_RCC_OscConfig+0x4b4>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fe fc05 	bl	80049e4 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061de:	f7fe fc01 	bl	80049e4 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e064      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f0:	4b11      	ldr	r3, [pc, #68]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f0      	beq.n	80061de <HAL_RCC_OscConfig+0x452>
 80061fc:	e05c      	b.n	80062b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fe:	4b10      	ldr	r3, [pc, #64]	@ (8006240 <HAL_RCC_OscConfig+0x4b4>)
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fe fbee 	bl	80049e4 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620c:	f7fe fbea 	bl	80049e4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e04d      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621e:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <HAL_RCC_OscConfig+0x4ac>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0x480>
 800622a:	e045      	b.n	80062b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d107      	bne.n	8006244 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e040      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
 8006238:	40023800 	.word	0x40023800
 800623c:	40007000 	.word	0x40007000
 8006240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006244:	4b1f      	ldr	r3, [pc, #124]	@ (80062c4 <HAL_RCC_OscConfig+0x538>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d030      	beq.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d129      	bne.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626a:	429a      	cmp	r2, r3
 800626c:	d122      	bne.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800627a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800627c:	4293      	cmp	r3, r2
 800627e:	d119      	bne.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	3b01      	subs	r3, #1
 800628e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006290:	429a      	cmp	r2, r3
 8006292:	d10f      	bne.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40023800 	.word	0x40023800

080062c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e073      	b.n	80063c6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	7f5b      	ldrb	r3, [r3, #29]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe f822 	bl	8004338 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b10      	cmp	r3, #16
 8006306:	d055      	beq.n	80063b4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	22ca      	movs	r2, #202	@ 0xca
 800630e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2253      	movs	r2, #83	@ 0x53
 8006316:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f87f 	bl	800641c <RTC_EnterInitMode>
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d12c      	bne.n	8006382 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6919      	ldr	r1, [r3, #16]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	041a      	lsls	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f886 	bl	800648a <RTC_ExitInitMode>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d110      	bne.n	80063aa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006396:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80063b2:	e001      	b.n	80063b8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006418 <HAL_RTC_WaitForSynchro+0x48>)
 80063e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063e4:	f7fe fafe 	bl	80049e4 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063ea:	e009      	b.n	8006400 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063ec:	f7fe fafa 	bl	80049e4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063fa:	d901      	bls.n	8006400 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e007      	b.n	8006410 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0ee      	beq.n	80063ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	00017f5f 	.word	0x00017f5f

0800641c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d122      	bne.n	8006480 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006448:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800644a:	f7fe facb 	bl	80049e4 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006450:	e00c      	b.n	800646c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006452:	f7fe fac7 	bl	80049e4 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006460:	d904      	bls.n	800646c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2204      	movs	r2, #4
 8006466:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <RTC_EnterInitMode+0x64>
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d1e8      	bne.n	8006452 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff8b 	bl	80063d0 <HAL_RTC_WaitForSynchro>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e041      	b.n	800656a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f839 	bl	8006572 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 f9c0 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e04e      	b.n	800663e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a23      	ldr	r2, [pc, #140]	@ (800664c <HAL_TIM_Base_Start_IT+0xc4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d022      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	d01d      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <HAL_TIM_Base_Start_IT+0xc8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1e      	ldr	r2, [pc, #120]	@ (8006654 <HAL_TIM_Base_Start_IT+0xcc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <HAL_TIM_Base_Start_IT+0xd0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	@ (800665c <HAL_TIM_Base_Start_IT+0xd4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a19      	ldr	r2, [pc, #100]	@ (8006660 <HAL_TIM_Base_Start_IT+0xd8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a18      	ldr	r2, [pc, #96]	@ (8006664 <HAL_TIM_Base_Start_IT+0xdc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d111      	bne.n	800662c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d010      	beq.n	800663c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	e007      	b.n	800663c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40010400 	.word	0x40010400
 8006660:	40014000 	.word	0x40014000
 8006664:	40001800 	.word	0x40001800

08006668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d020      	beq.n	80066cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01b      	beq.n	80066cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0202 	mvn.w	r2, #2
 800669c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8d2 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 80066b8:	e005      	b.n	80066c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8c4 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8d5 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d020      	beq.n	8006718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01b      	beq.n	8006718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0204 	mvn.w	r2, #4
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8ac 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f89e 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8af 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d020      	beq.n	8006764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01b      	beq.n	8006764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0208 	mvn.w	r2, #8
 8006734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f886 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f878 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f889 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	2b00      	cmp	r3, #0
 800676c:	d020      	beq.n	80067b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0210 	mvn.w	r2, #16
 8006780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2208      	movs	r2, #8
 8006786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f860 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 800679c:	e005      	b.n	80067aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f852 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f863 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0201 	mvn.w	r2, #1
 80067cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fd fd72 	bl	80042b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f906 	bl	8006a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f834 	bl	8006884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0220 	mvn.w	r2, #32
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8d8 	bl	80069f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a46      	ldr	r2, [pc, #280]	@ (80069c4 <TIM_Base_SetConfig+0x12c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b6:	d00f      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a43      	ldr	r2, [pc, #268]	@ (80069c8 <TIM_Base_SetConfig+0x130>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a42      	ldr	r2, [pc, #264]	@ (80069cc <TIM_Base_SetConfig+0x134>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a41      	ldr	r2, [pc, #260]	@ (80069d0 <TIM_Base_SetConfig+0x138>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a40      	ldr	r2, [pc, #256]	@ (80069d4 <TIM_Base_SetConfig+0x13c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a35      	ldr	r2, [pc, #212]	@ (80069c4 <TIM_Base_SetConfig+0x12c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d02b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f8:	d027      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a32      	ldr	r2, [pc, #200]	@ (80069c8 <TIM_Base_SetConfig+0x130>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d023      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a31      	ldr	r2, [pc, #196]	@ (80069cc <TIM_Base_SetConfig+0x134>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a30      	ldr	r2, [pc, #192]	@ (80069d0 <TIM_Base_SetConfig+0x138>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2f      	ldr	r2, [pc, #188]	@ (80069d4 <TIM_Base_SetConfig+0x13c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d017      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2e      	ldr	r2, [pc, #184]	@ (80069d8 <TIM_Base_SetConfig+0x140>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2d      	ldr	r2, [pc, #180]	@ (80069dc <TIM_Base_SetConfig+0x144>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2c      	ldr	r2, [pc, #176]	@ (80069e0 <TIM_Base_SetConfig+0x148>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2b      	ldr	r2, [pc, #172]	@ (80069e4 <TIM_Base_SetConfig+0x14c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2a      	ldr	r2, [pc, #168]	@ (80069e8 <TIM_Base_SetConfig+0x150>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a29      	ldr	r2, [pc, #164]	@ (80069ec <TIM_Base_SetConfig+0x154>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a10      	ldr	r2, [pc, #64]	@ (80069c4 <TIM_Base_SetConfig+0x12c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a12      	ldr	r2, [pc, #72]	@ (80069d4 <TIM_Base_SetConfig+0x13c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d105      	bne.n	80069b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f023 0201 	bic.w	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	611a      	str	r2, [r3, #16]
  }
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800
 80069e4:	40001800 	.word	0x40001800
 80069e8:	40001c00 	.word	0x40001c00
 80069ec:	40002000 	.word	0x40002000

080069f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e042      	b.n	8006ab0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fd fca4 	bl	800438c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	@ 0x24
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fdbd 	bl	80075dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695a      	ldr	r2, [r3, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d175      	bne.n	8006bc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_UART_Transmit+0x2c>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e06e      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	@ 0x21
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fd ff75 	bl	80049e4 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b10:	d108      	bne.n	8006b24 <HAL_UART_Transmit+0x6c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e003      	b.n	8006b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b2c:	e02e      	b.n	8006b8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	@ 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fb1f 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e03a      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e007      	b.n	8006b7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1cb      	bne.n	8006b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2140      	movs	r1, #64	@ 0x40
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 faeb 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e006      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d112      	bne.n	8006c0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_UART_Receive_IT+0x26>
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e00b      	b.n	8006c10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	461a      	mov	r2, r3
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb12 	bl	800722e <UART_Start_Receive_IT>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	e000      	b.n	8006c10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10f      	bne.n	8006c7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_UART_IRQHandler+0x66>
 8006c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fbf2 	bl	8007460 <UART_Receive_IT>
      return;
 8006c7c:	e25b      	b.n	8007136 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80de 	beq.w	8006e44 <HAL_UART_IRQHandler+0x22c>
 8006c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80d1 	beq.w	8006e44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xae>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	f043 0201 	orr.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00b      	beq.n	8006cea <HAL_UART_IRQHandler+0xd2>
 8006cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	f043 0202 	orr.w	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_UART_IRQHandler+0xf6>
 8006cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d011      	beq.n	8006d3e <HAL_UART_IRQHandler+0x126>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	f043 0208 	orr.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 81f2 	beq.w	800712c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_UART_IRQHandler+0x14e>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb7d 	bl	8007460 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d70:	2b40      	cmp	r3, #64	@ 0x40
 8006d72:	bf0c      	ite	eq
 8006d74:	2301      	moveq	r3, #1
 8006d76:	2300      	movne	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d103      	bne.n	8006d92 <HAL_UART_IRQHandler+0x17a>
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04f      	beq.n	8006e32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa85 	bl	80072a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d141      	bne.n	8006e2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3314      	adds	r3, #20
 8006dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1d9      	bne.n	8006da6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d013      	beq.n	8006e22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8006ff8 <HAL_UART_IRQHandler+0x3e0>)
 8006e00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd ff4a 	bl	8004ca0 <HAL_DMA_Abort_IT>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e00e      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f994 	bl	8007150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e00a      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f990 	bl	8007150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	e006      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f98c 	bl	8007150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e3e:	e175      	b.n	800712c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	bf00      	nop
    return;
 8006e42:	e173      	b.n	800712c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f040 814f 	bne.w	80070ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8148 	beq.w	80070ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8141 	beq.w	80070ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	f040 80b6 	bne.w	8006ffc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8145 	beq.w	8007130 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f080 813e 	bcs.w	8007130 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec6:	f000 8088 	beq.w	8006fda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ef6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d9      	bne.n	8006eca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e1      	bne.n	8006f16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e3      	bne.n	8006f52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006faa:	f023 0310 	bic.w	r3, r3, #16
 8006fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e3      	bne.n	8006f98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fd fdf3 	bl	8004bc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8b7 	bl	8007164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ff6:	e09b      	b.n	8007130 <HAL_UART_IRQHandler+0x518>
 8006ff8:	08007369 	.word	0x08007369
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 808e 	beq.w	8007134 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8089 	beq.w	8007134 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	330c      	adds	r3, #12
 8007028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007046:	647a      	str	r2, [r7, #68]	@ 0x44
 8007048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800704c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e3      	bne.n	8007022 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3314      	adds	r3, #20
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	623b      	str	r3, [r7, #32]
   return(result);
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3314      	adds	r3, #20
 800707a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800707e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e3      	bne.n	800705a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0310 	bic.w	r3, r3, #16
 80070b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070c4:	61fa      	str	r2, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	617b      	str	r3, [r7, #20]
   return(result);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e3      	bne.n	80070a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f83d 	bl	8007164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070ea:	e023      	b.n	8007134 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <HAL_UART_IRQHandler+0x4f4>
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f943 	bl	8007390 <UART_Transmit_IT>
    return;
 800710a:	e014      	b.n	8007136 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <HAL_UART_IRQHandler+0x51e>
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f983 	bl	8007430 <UART_EndTransmit_IT>
    return;
 800712a:	e004      	b.n	8007136 <HAL_UART_IRQHandler+0x51e>
    return;
 800712c:	bf00      	nop
 800712e:	e002      	b.n	8007136 <HAL_UART_IRQHandler+0x51e>
      return;
 8007130:	bf00      	nop
 8007132:	e000      	b.n	8007136 <HAL_UART_IRQHandler+0x51e>
      return;
 8007134:	bf00      	nop
  }
}
 8007136:	37e8      	adds	r7, #232	@ 0xe8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	e03b      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007194:	d037      	beq.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007196:	f7fd fc25 	bl	80049e4 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	6a3a      	ldr	r2, [r7, #32]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <UART_WaitOnFlagUntilTimeout+0x30>
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e03a      	b.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d023      	beq.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d020      	beq.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d01d      	beq.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d116      	bne.n	8007206 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f857 	bl	80072a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2208      	movs	r2, #8
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e00f      	b.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4013      	ands	r3, r2
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	bf0c      	ite	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	2300      	movne	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	429a      	cmp	r2, r3
 8007222:	d0b4      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	88fa      	ldrh	r2, [r7, #6]
 800724c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2222      	movs	r2, #34	@ 0x22
 8007258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007272:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0220 	orr.w	r2, r2, #32
 8007292:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b095      	sub	sp, #84	@ 0x54
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80072cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007300:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e5      	bne.n	80072de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	2b01      	cmp	r3, #1
 8007318:	d119      	bne.n	800734e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60bb      	str	r3, [r7, #8]
   return(result);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f023 0310 	bic.w	r3, r3, #16
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800733a:	61ba      	str	r2, [r7, #24]
 800733c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	613b      	str	r3, [r7, #16]
   return(result);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800735c:	bf00      	nop
 800735e:	3754      	adds	r7, #84	@ 0x54
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff fee4 	bl	8007150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b21      	cmp	r3, #33	@ 0x21
 80073a2:	d13e      	bne.n	8007422 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ac:	d114      	bne.n	80073d8 <UART_Transmit_IT+0x48>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d110      	bne.n	80073d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	1c9a      	adds	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]
 80073d6:	e008      	b.n	80073ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	1c59      	adds	r1, r3, #1
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6211      	str	r1, [r2, #32]
 80073e2:	781a      	ldrb	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4619      	mov	r1, r3
 80073f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800740c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800741c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007446:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fe73 	bl	800713c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08c      	sub	sp, #48	@ 0x30
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b22      	cmp	r3, #34	@ 0x22
 8007472:	f040 80ae 	bne.w	80075d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747e:	d117      	bne.n	80074b0 <UART_Receive_IT+0x50>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d113      	bne.n	80074b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80074ae:	e026      	b.n	80074fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c2:	d007      	beq.n	80074d4 <UART_Receive_IT+0x74>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <UART_Receive_IT+0x82>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e008      	b.n	80074f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29b      	uxth	r3, r3
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4619      	mov	r1, r3
 800750c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800750e:	2b00      	cmp	r3, #0
 8007510:	d15d      	bne.n	80075ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0220 	bic.w	r2, r2, #32
 8007520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	2b01      	cmp	r3, #1
 8007556:	d135      	bne.n	80075c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	613b      	str	r3, [r7, #16]
   return(result);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f023 0310 	bic.w	r3, r3, #16
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757e:	623a      	str	r2, [r7, #32]
 8007580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	69f9      	ldr	r1, [r7, #28]
 8007584:	6a3a      	ldr	r2, [r7, #32]
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	61bb      	str	r3, [r7, #24]
   return(result);
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e5      	bne.n	800755e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b10      	cmp	r3, #16
 800759e:	d10a      	bne.n	80075b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff fdd1 	bl	8007164 <HAL_UARTEx_RxEventCallback>
 80075c2:	e002      	b.n	80075ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fc fe2d 	bl	8004224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e002      	b.n	80075d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	@ 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e0:	b0c0      	sub	sp, #256	@ 0x100
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f8:	68d9      	ldr	r1, [r3, #12]
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	ea40 0301 	orr.w	r3, r0, r1
 8007604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	431a      	orrs	r2, r3
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	431a      	orrs	r2, r3
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007634:	f021 010c 	bic.w	r1, r1, #12
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007642:	430b      	orrs	r3, r1
 8007644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007656:	6999      	ldr	r1, [r3, #24]
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	ea40 0301 	orr.w	r3, r0, r1
 8007662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b8f      	ldr	r3, [pc, #572]	@ (80078a8 <UART_SetConfig+0x2cc>)
 800766c:	429a      	cmp	r2, r3
 800766e:	d005      	beq.n	800767c <UART_SetConfig+0xa0>
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b8d      	ldr	r3, [pc, #564]	@ (80078ac <UART_SetConfig+0x2d0>)
 8007678:	429a      	cmp	r2, r3
 800767a:	d104      	bne.n	8007686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fd fde6 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 8007680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007684:	e003      	b.n	800768e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007686:	f7fd fdcd 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 800768a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007698:	f040 810c 	bne.w	80078b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800769c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076ae:	4622      	mov	r2, r4
 80076b0:	462b      	mov	r3, r5
 80076b2:	1891      	adds	r1, r2, r2
 80076b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076b6:	415b      	adcs	r3, r3
 80076b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076be:	4621      	mov	r1, r4
 80076c0:	eb12 0801 	adds.w	r8, r2, r1
 80076c4:	4629      	mov	r1, r5
 80076c6:	eb43 0901 	adc.w	r9, r3, r1
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076de:	4690      	mov	r8, r2
 80076e0:	4699      	mov	r9, r3
 80076e2:	4623      	mov	r3, r4
 80076e4:	eb18 0303 	adds.w	r3, r8, r3
 80076e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076ec:	462b      	mov	r3, r5
 80076ee:	eb49 0303 	adc.w	r3, r9, r3
 80076f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800770a:	460b      	mov	r3, r1
 800770c:	18db      	adds	r3, r3, r3
 800770e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007710:	4613      	mov	r3, r2
 8007712:	eb42 0303 	adc.w	r3, r2, r3
 8007716:	657b      	str	r3, [r7, #84]	@ 0x54
 8007718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800771c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007720:	f7f8 fd88 	bl	8000234 <__aeabi_uldivmod>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4b61      	ldr	r3, [pc, #388]	@ (80078b0 <UART_SetConfig+0x2d4>)
 800772a:	fba3 2302 	umull	r2, r3, r3, r2
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	011c      	lsls	r4, r3, #4
 8007732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007736:	2200      	movs	r2, #0
 8007738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800773c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007744:	4642      	mov	r2, r8
 8007746:	464b      	mov	r3, r9
 8007748:	1891      	adds	r1, r2, r2
 800774a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800774c:	415b      	adcs	r3, r3
 800774e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007754:	4641      	mov	r1, r8
 8007756:	eb12 0a01 	adds.w	sl, r2, r1
 800775a:	4649      	mov	r1, r9
 800775c:	eb43 0b01 	adc.w	fp, r3, r1
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800776c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007774:	4692      	mov	sl, r2
 8007776:	469b      	mov	fp, r3
 8007778:	4643      	mov	r3, r8
 800777a:	eb1a 0303 	adds.w	r3, sl, r3
 800777e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007782:	464b      	mov	r3, r9
 8007784:	eb4b 0303 	adc.w	r3, fp, r3
 8007788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800779c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077a0:	460b      	mov	r3, r1
 80077a2:	18db      	adds	r3, r3, r3
 80077a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a6:	4613      	mov	r3, r2
 80077a8:	eb42 0303 	adc.w	r3, r2, r3
 80077ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077b6:	f7f8 fd3d 	bl	8000234 <__aeabi_uldivmod>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	4b3b      	ldr	r3, [pc, #236]	@ (80078b0 <UART_SetConfig+0x2d4>)
 80077c2:	fba3 2301 	umull	r2, r3, r3, r1
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	2264      	movs	r2, #100	@ 0x64
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	1acb      	subs	r3, r1, r3
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077d6:	4b36      	ldr	r3, [pc, #216]	@ (80078b0 <UART_SetConfig+0x2d4>)
 80077d8:	fba3 2302 	umull	r2, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077e4:	441c      	add	r4, r3
 80077e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	1891      	adds	r1, r2, r2
 80077fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007800:	415b      	adcs	r3, r3
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007808:	4641      	mov	r1, r8
 800780a:	1851      	adds	r1, r2, r1
 800780c:	6339      	str	r1, [r7, #48]	@ 0x30
 800780e:	4649      	mov	r1, r9
 8007810:	414b      	adcs	r3, r1
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007820:	4659      	mov	r1, fp
 8007822:	00cb      	lsls	r3, r1, #3
 8007824:	4651      	mov	r1, sl
 8007826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782a:	4651      	mov	r1, sl
 800782c:	00ca      	lsls	r2, r1, #3
 800782e:	4610      	mov	r0, r2
 8007830:	4619      	mov	r1, r3
 8007832:	4603      	mov	r3, r0
 8007834:	4642      	mov	r2, r8
 8007836:	189b      	adds	r3, r3, r2
 8007838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800783c:	464b      	mov	r3, r9
 800783e:	460a      	mov	r2, r1
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800785c:	460b      	mov	r3, r1
 800785e:	18db      	adds	r3, r3, r3
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007862:	4613      	mov	r3, r2
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800786a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800786e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007872:	f7f8 fcdf 	bl	8000234 <__aeabi_uldivmod>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <UART_SetConfig+0x2d4>)
 800787c:	fba3 1302 	umull	r1, r3, r3, r2
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	2164      	movs	r1, #100	@ 0x64
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	3332      	adds	r3, #50	@ 0x32
 800788e:	4a08      	ldr	r2, [pc, #32]	@ (80078b0 <UART_SetConfig+0x2d4>)
 8007890:	fba2 2303 	umull	r2, r3, r2, r3
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	f003 0207 	and.w	r2, r3, #7
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4422      	add	r2, r4
 80078a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078a4:	e106      	b.n	8007ab4 <UART_SetConfig+0x4d8>
 80078a6:	bf00      	nop
 80078a8:	40011000 	.word	0x40011000
 80078ac:	40011400 	.word	0x40011400
 80078b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	1891      	adds	r1, r2, r2
 80078cc:	6239      	str	r1, [r7, #32]
 80078ce:	415b      	adcs	r3, r3
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078d6:	4641      	mov	r1, r8
 80078d8:	1854      	adds	r4, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb43 0501 	adc.w	r5, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	00eb      	lsls	r3, r5, #3
 80078ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ee:	00e2      	lsls	r2, r4, #3
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	4643      	mov	r3, r8
 80078f6:	18e3      	adds	r3, r4, r3
 80078f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078fc:	464b      	mov	r3, r9
 80078fe:	eb45 0303 	adc.w	r3, r5, r3
 8007902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007922:	4629      	mov	r1, r5
 8007924:	008b      	lsls	r3, r1, #2
 8007926:	4621      	mov	r1, r4
 8007928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800792c:	4621      	mov	r1, r4
 800792e:	008a      	lsls	r2, r1, #2
 8007930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007934:	f7f8 fc7e 	bl	8000234 <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4b60      	ldr	r3, [pc, #384]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 800793e:	fba3 2302 	umull	r2, r3, r3, r2
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	011c      	lsls	r4, r3, #4
 8007946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794a:	2200      	movs	r2, #0
 800794c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	1891      	adds	r1, r2, r2
 800795e:	61b9      	str	r1, [r7, #24]
 8007960:	415b      	adcs	r3, r3
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007968:	4641      	mov	r1, r8
 800796a:	1851      	adds	r1, r2, r1
 800796c:	6139      	str	r1, [r7, #16]
 800796e:	4649      	mov	r1, r9
 8007970:	414b      	adcs	r3, r1
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007980:	4659      	mov	r1, fp
 8007982:	00cb      	lsls	r3, r1, #3
 8007984:	4651      	mov	r1, sl
 8007986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800798a:	4651      	mov	r1, sl
 800798c:	00ca      	lsls	r2, r1, #3
 800798e:	4610      	mov	r0, r2
 8007990:	4619      	mov	r1, r3
 8007992:	4603      	mov	r3, r0
 8007994:	4642      	mov	r2, r8
 8007996:	189b      	adds	r3, r3, r2
 8007998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800799c:	464b      	mov	r3, r9
 800799e:	460a      	mov	r2, r1
 80079a0:	eb42 0303 	adc.w	r3, r2, r3
 80079a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079c0:	4649      	mov	r1, r9
 80079c2:	008b      	lsls	r3, r1, #2
 80079c4:	4641      	mov	r1, r8
 80079c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ca:	4641      	mov	r1, r8
 80079cc:	008a      	lsls	r2, r1, #2
 80079ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079d2:	f7f8 fc2f 	bl	8000234 <__aeabi_uldivmod>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	4b38      	ldr	r3, [pc, #224]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 80079de:	fba3 2301 	umull	r2, r3, r3, r1
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2264      	movs	r2, #100	@ 0x64
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	1acb      	subs	r3, r1, r3
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	3332      	adds	r3, #50	@ 0x32
 80079f0:	4a33      	ldr	r2, [pc, #204]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079fc:	441c      	add	r4, r3
 80079fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a02:	2200      	movs	r2, #0
 8007a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	1891      	adds	r1, r2, r2
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	415b      	adcs	r3, r3
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	1851      	adds	r1, r2, r1
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	4649      	mov	r1, r9
 8007a24:	414b      	adcs	r3, r1
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a34:	4659      	mov	r1, fp
 8007a36:	00cb      	lsls	r3, r1, #3
 8007a38:	4651      	mov	r1, sl
 8007a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a3e:	4651      	mov	r1, sl
 8007a40:	00ca      	lsls	r2, r1, #3
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	4642      	mov	r2, r8
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a4e:	464b      	mov	r3, r9
 8007a50:	460a      	mov	r2, r1
 8007a52:	eb42 0303 	adc.w	r3, r2, r3
 8007a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a70:	4649      	mov	r1, r9
 8007a72:	008b      	lsls	r3, r1, #2
 8007a74:	4641      	mov	r1, r8
 8007a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	008a      	lsls	r2, r1, #2
 8007a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a82:	f7f8 fbd7 	bl	8000234 <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 8007a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	2164      	movs	r1, #100	@ 0x64
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	3332      	adds	r3, #50	@ 0x32
 8007a9e:	4a08      	ldr	r2, [pc, #32]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 8007aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	f003 020f 	and.w	r2, r3, #15
 8007aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4422      	add	r2, r4
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007aba:	46bd      	mov	sp, r7
 8007abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac0:	51eb851f 	.word	0x51eb851f

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8007b0c <__libc_init_array+0x38>)
 8007ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b10 <__libc_init_array+0x3c>)
 8007ada:	1b64      	subs	r4, r4, r5
 8007adc:	10a4      	asrs	r4, r4, #2
 8007ade:	2600      	movs	r6, #0
 8007ae0:	42a6      	cmp	r6, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8007b14 <__libc_init_array+0x40>)
 8007ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8007b18 <__libc_init_array+0x44>)
 8007ae8:	f000 f826 	bl	8007b38 <_init>
 8007aec:	1b64      	subs	r4, r4, r5
 8007aee:	10a4      	asrs	r4, r4, #2
 8007af0:	2600      	movs	r6, #0
 8007af2:	42a6      	cmp	r6, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afc:	4798      	blx	r3
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b06:	4798      	blx	r3
 8007b08:	3601      	adds	r6, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	08007d48 	.word	0x08007d48
 8007b10:	08007d48 	.word	0x08007d48
 8007b14:	08007d48 	.word	0x08007d48
 8007b18:	08007d4c 	.word	0x08007d4c

08007b1c <memcpy>:
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b24:	d100      	bne.n	8007b28 <memcpy+0xc>
 8007b26:	4770      	bx	lr
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b32:	4291      	cmp	r1, r2
 8007b34:	d1f9      	bne.n	8007b2a <memcpy+0xe>
 8007b36:	bd10      	pop	{r4, pc}

08007b38 <_init>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr

08007b44 <_fini>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr
