
Sample_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007418  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080075e8  080075e8  000085e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800777c  0800777c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007784  08007784  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007784  08007784  00008784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007788  08007788  00008788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800778c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  2000006c  080077f8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  080077f8  00009644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b38  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339e  00000000  00000000  0001ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00021f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff5  00000000  00000000  00023440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026192  00000000  00000000  00024435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019020  00000000  00000000  0004a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef21a  00000000  00000000  000635e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  00152844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00158378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075d0 	.word	0x080075d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080075d0 	.word	0x080075d0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f20 	.word	0x20012f20
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	TaskHandle_t task1_handle = NULL;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task2_handle = NULL;
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fad3 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f857 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8c1 	bl	80007dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT (Cyclic Clock Counter)
  DWT_CTRL |= (1 << 0);
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <main+0xa4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <main+0xa4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000666:	4820      	ldr	r0, [pc, #128]	@ (80006e8 <main+0xa8>)
 8000668:	f006 fa18 	bl	8006a9c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800066c:	f004 fa46 	bl	8004afc <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start(); // this is initialized in SEGGER_UART_Init();

  status = xTaskCreate(task1_handler, "Task_1", 200, "Task_1 Executed", 2, &task1_handle);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <main+0xac>)
 800067c:	22c8      	movs	r2, #200	@ 0xc8
 800067e:	491c      	ldr	r1, [pc, #112]	@ (80006f0 <main+0xb0>)
 8000680:	481c      	ldr	r0, [pc, #112]	@ (80006f4 <main+0xb4>)
 8000682:	f002 fa08 	bl	8002a96 <xTaskCreate>
 8000686:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d00b      	beq.n	80006a6 <main+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x62>

  status = xTaskCreate(task2_handler, "Task_2", 200, "Task_2 Executed", 2, &task2_handle);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <main+0xb8>)
 80006b0:	22c8      	movs	r2, #200	@ 0xc8
 80006b2:	4912      	ldr	r1, [pc, #72]	@ (80006fc <main+0xbc>)
 80006b4:	4812      	ldr	r0, [pc, #72]	@ (8000700 <main+0xc0>)
 80006b6:	f002 f9ee 	bl	8002a96 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00b      	beq.n	80006da <main+0x9a>
    __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60fb      	str	r3, [r7, #12]
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	e7fd      	b.n	80006d6 <main+0x96>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80006da:	f002 fb83 	bl	8002de4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	bf00      	nop
 80006e0:	e7fd      	b.n	80006de <main+0x9e>
 80006e2:	bf00      	nop
 80006e4:	e0001000 	.word	0xe0001000
 80006e8:	0007a120 	.word	0x0007a120
 80006ec:	080075e8 	.word	0x080075e8
 80006f0:	080075f8 	.word	0x080075f8
 80006f4:	080008d9 	.word	0x080008d9
 80006f8:	08007600 	.word	0x08007600
 80006fc:	08007610 	.word	0x08007610
 8000700:	08000915 	.word	0x08000915

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	@ 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fadc 	bl	8006cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd4>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000774:	2310      	movs	r3, #16
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f86c 	bl	800186c <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079a:	f000 f8eb 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fced 	bl	800119c <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007c8:	f000 f8d4 	bl	8000974 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	@ 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b35      	ldr	r3, [pc, #212]	@ (80008cc <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a34      	ldr	r2, [pc, #208]	@ (80008cc <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a2d      	ldr	r2, [pc, #180]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a26      	ldr	r2, [pc, #152]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <MX_GPIO_Init+0xf4>)
 8000868:	f000 fc7e 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_GPIO_Init+0xf8>)
 8000884:	f000 fadc 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000898:	2307      	movs	r3, #7
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <MX_GPIO_Init+0xf4>)
 80008a4:	f000 facc 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_GPIO_Init+0xf4>)
 80008c0:	f000 fabe 	bl	8000e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	@ 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <task1_handler>:

/* USER CODE BEGIN 4 */

void task1_handler(void *parameter)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	@ 0x70
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\r\n",(char*)parameter);
		snprintf(msg,100,"%s\r\n",(char*)parameter);
 80008e0:	f107 000c 	add.w	r0, r7, #12
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a09      	ldr	r2, [pc, #36]	@ (800090c <task1_handler+0x34>)
 80008e8:	2164      	movs	r1, #100	@ 0x64
 80008ea:	f006 f9ad 	bl	8006c48 <sniprintf>
		SEGGER_SYSVIEW_Print(msg);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 ff42 	bl	800677c <SEGGER_SYSVIEW_Print>
		taskYIELD();
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <task1_handler+0x38>)
 80008fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\r\n",(char*)parameter);
 8000908:	bf00      	nop
 800090a:	e7e9      	b.n	80008e0 <task1_handler+0x8>
 800090c:	08007618 	.word	0x08007618
 8000910:	e000ed04 	.word	0xe000ed04

08000914 <task2_handler>:
	}
}

void task2_handler(void *parameter)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	@ 0x70
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\r\n",(char*)parameter);
		snprintf(msg,100,"%s\r\n",(char*)parameter);
 800091c:	f107 000c 	add.w	r0, r7, #12
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <task2_handler+0x34>)
 8000924:	2164      	movs	r1, #100	@ 0x64
 8000926:	f006 f98f 	bl	8006c48 <sniprintf>
		SEGGER_SYSVIEW_Print(msg);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4618      	mov	r0, r3
 8000930:	f005 ff24 	bl	800677c <SEGGER_SYSVIEW_Print>
		taskYIELD();
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <task2_handler+0x38>)
 8000936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\r\n",(char*)parameter);
 8000944:	bf00      	nop
 8000946:	e7e9      	b.n	800091c <task2_handler+0x8>
 8000948:	08007618 	.word	0x08007618
 800094c:	e000ed04 	.word	0xe000ed04

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 f96b 	bl	8000c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40001000 	.word	0x40001000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue(); //for Segger system view as we are calling SEGGER_SYSVIEW_Conf() this before scheduler starts
 80009be:	f003 fc61 	bl	8004284 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	@ 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a32      	ldr	r2, [pc, #200]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 0210 	add.w	r2, r7, #16
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fcce 	bl	80013a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a16:	f000 fcb3 	bl	8001380 <HAL_RCC_GetPCLK1Freq>
 8000a1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a1c:	e004      	b.n	8000a28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a1e:	f000 fcaf 	bl	8001380 <HAL_RCC_GetPCLK1Freq>
 8000a22:	4603      	mov	r3, r0
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <HAL_InitTick+0xe8>)
 8000a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a30:	0c9b      	lsrs	r3, r3, #18
 8000a32:	3b01      	subs	r3, #1
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HAL_InitTick+0xec>)
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <HAL_InitTick+0xec>)
 8000a3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <HAL_InitTick+0xec>)
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_InitTick+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_InitTick+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_InitTick+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a5c:	4817      	ldr	r0, [pc, #92]	@ (8000abc <HAL_InitTick+0xec>)
 8000a5e:	f001 f9a3 	bl	8001da8 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11b      	bne.n	8000aa8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a70:	4812      	ldr	r0, [pc, #72]	@ (8000abc <HAL_InitTick+0xec>)
 8000a72:	f001 f9f3 	bl	8001e5c <HAL_TIM_Base_Start_IT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d111      	bne.n	8000aa8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	@ 0x36
 8000a86:	f000 f9cd 	bl	8000e24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d808      	bhi.n	8000aa2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f000 f9a9 	bl	8000dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_InitTick+0xf4>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	e002      	b.n	8000aa8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3738      	adds	r7, #56	@ 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20000088 	.word	0x20000088
 8000ac0:	40001000 	.word	0x40001000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM6_DAC_IRQHandler+0x10>)
 8000b06:	f001 fa19 	bl	8001f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000088 	.word	0x20000088

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f006 f8cc 	bl	8006ce0 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20020000 	.word	0x20020000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	20014648 	.word	0x20014648

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba8:	f7ff ffea 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f006 f88b 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fd33 	bl	8000640 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000be8:	0800778c 	.word	0x0800778c
  ldr r2, =_sbss
 8000bec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bf0:	20014644 	.word	0x20014644

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f8d8 	bl	8000dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fed2 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fea8 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	200000d4 	.word	0x200000d4

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200000d4 	.word	0x200000d4

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff4c 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfe:	f7ff ff61 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	6978      	ldr	r0, [r7, #20]
 8000e0a:	f7ff ffb1 	bl	8000d70 <NVIC_EncodePriority>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff80 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff54 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e165      	b.n	8001128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8154 	bne.w	8001122 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80ae 	beq.w	8001122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b5d      	ldr	r3, [pc, #372]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a5c      	ldr	r2, [pc, #368]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a58      	ldr	r2, [pc, #352]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	@ (8001148 <HAL_GPIO_Init+0x308>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x21a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	@ (800114c <HAL_GPIO_Init+0x30c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x216>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_GPIO_Init+0x310>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x212>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	@ (8001154 <HAL_GPIO_Init+0x314>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x20e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <HAL_GPIO_Init+0x318>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x20a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	@ (800115c <HAL_GPIO_Init+0x31c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x206>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <HAL_GPIO_Init+0x320>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x202>
 800103e:	2306      	movs	r3, #6
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001042:	2307      	movs	r3, #7
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800105a:	2300      	movs	r3, #0
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106c:	4935      	ldr	r1, [pc, #212]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b3a      	ldr	r3, [pc, #232]	@ (8001164 <HAL_GPIO_Init+0x324>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f67f ae96 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40013800 	.word	0x40013800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40021400 	.word	0x40021400
 8001160:	40021800 	.word	0x40021800
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0cc      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b68      	ldr	r3, [pc, #416]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d90c      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b63      	ldr	r3, [pc, #396]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0b8      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f0:	4b59      	ldr	r3, [pc, #356]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a58      	ldr	r2, [pc, #352]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001214:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	494d      	ldr	r1, [pc, #308]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	4313      	orrs	r3, r2
 8001224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d044      	beq.n	80012bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d119      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e07f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001256:	2b03      	cmp	r3, #3
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125a:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e06f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e067      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4934      	ldr	r1, [pc, #208]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff fcea 	bl	8000c64 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff fce6 	bl	8000c64 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e04f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 020c 	and.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d1eb      	bne.n	8001294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d20c      	bcs.n	80012e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e032      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4916      	ldr	r1, [pc, #88]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	490e      	ldr	r1, [pc, #56]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001322:	f000 f873 	bl	800140c <HAL_RCC_GetSysClockFreq>
 8001326:	4602      	mov	r2, r0
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	490a      	ldr	r1, [pc, #40]	@ (800135c <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_RCC_ClockConfig+0x1c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fb44 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00
 8001358:	40023800 	.word	0x40023800
 800135c:	08007704 	.word	0x08007704
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_RCC_GetHCLKFreq+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001384:	f7ff fff0 	bl	8001368 <HAL_RCC_GetHCLKFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0a9b      	lsrs	r3, r3, #10
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4903      	ldr	r1, [pc, #12]	@ (80013a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08007714 	.word	0x08007714

080013a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	220f      	movs	r2, #15
 80013b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <HAL_RCC_GetClockConfig+0x60>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 020f 	and.w	r2, r3, #15
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001410:	b0ae      	sub	sp, #184	@ 0xb8
 8001412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001432:	4bcb      	ldr	r3, [pc, #812]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b0c      	cmp	r3, #12
 800143c:	f200 8206 	bhi.w	800184c <HAL_RCC_GetSysClockFreq+0x440>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	0800147d 	.word	0x0800147d
 800144c:	0800184d 	.word	0x0800184d
 8001450:	0800184d 	.word	0x0800184d
 8001454:	0800184d 	.word	0x0800184d
 8001458:	08001485 	.word	0x08001485
 800145c:	0800184d 	.word	0x0800184d
 8001460:	0800184d 	.word	0x0800184d
 8001464:	0800184d 	.word	0x0800184d
 8001468:	0800148d 	.word	0x0800148d
 800146c:	0800184d 	.word	0x0800184d
 8001470:	0800184d 	.word	0x0800184d
 8001474:	0800184d 	.word	0x0800184d
 8001478:	0800167d 	.word	0x0800167d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147c:	4bb9      	ldr	r3, [pc, #740]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x358>)
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001482:	e1e7      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001484:	4bb8      	ldr	r3, [pc, #736]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800148a:	e1e3      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148c:	4bb4      	ldr	r3, [pc, #720]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001498:	4bb1      	ldr	r3, [pc, #708]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d071      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a4:	4bae      	ldr	r3, [pc, #696]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014ca:	4622      	mov	r2, r4
 80014cc:	462b      	mov	r3, r5
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	0159      	lsls	r1, r3, #5
 80014d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014dc:	0150      	lsls	r0, r2, #5
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4621      	mov	r1, r4
 80014e4:	1a51      	subs	r1, r2, r1
 80014e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80014e8:	4629      	mov	r1, r5
 80014ea:	eb63 0301 	sbc.w	r3, r3, r1
 80014ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014fc:	4649      	mov	r1, r9
 80014fe:	018b      	lsls	r3, r1, #6
 8001500:	4641      	mov	r1, r8
 8001502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001506:	4641      	mov	r1, r8
 8001508:	018a      	lsls	r2, r1, #6
 800150a:	4641      	mov	r1, r8
 800150c:	1a51      	subs	r1, r2, r1
 800150e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001510:	4649      	mov	r1, r9
 8001512:	eb63 0301 	sbc.w	r3, r3, r1
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001524:	4649      	mov	r1, r9
 8001526:	00cb      	lsls	r3, r1, #3
 8001528:	4641      	mov	r1, r8
 800152a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800152e:	4641      	mov	r1, r8
 8001530:	00ca      	lsls	r2, r1, #3
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	4603      	mov	r3, r0
 8001538:	4622      	mov	r2, r4
 800153a:	189b      	adds	r3, r3, r2
 800153c:	633b      	str	r3, [r7, #48]	@ 0x30
 800153e:	462b      	mov	r3, r5
 8001540:	460a      	mov	r2, r1
 8001542:	eb42 0303 	adc.w	r3, r2, r3
 8001546:	637b      	str	r3, [r7, #52]	@ 0x34
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001554:	4629      	mov	r1, r5
 8001556:	024b      	lsls	r3, r1, #9
 8001558:	4621      	mov	r1, r4
 800155a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800155e:	4621      	mov	r1, r4
 8001560:	024a      	lsls	r2, r1, #9
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800156a:	2200      	movs	r2, #0
 800156c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001574:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001578:	f7fe feea 	bl	8000350 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4613      	mov	r3, r2
 8001582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001586:	e067      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	2200      	movs	r2, #0
 8001590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001594:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800159c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015a2:	2300      	movs	r3, #0
 80015a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015aa:	4622      	mov	r2, r4
 80015ac:	462b      	mov	r3, r5
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	0159      	lsls	r1, r3, #5
 80015b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015bc:	0150      	lsls	r0, r2, #5
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4621      	mov	r1, r4
 80015c4:	1a51      	subs	r1, r2, r1
 80015c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015c8:	4629      	mov	r1, r5
 80015ca:	eb63 0301 	sbc.w	r3, r3, r1
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015dc:	4649      	mov	r1, r9
 80015de:	018b      	lsls	r3, r1, #6
 80015e0:	4641      	mov	r1, r8
 80015e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015e6:	4641      	mov	r1, r8
 80015e8:	018a      	lsls	r2, r1, #6
 80015ea:	4641      	mov	r1, r8
 80015ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80015f0:	4649      	mov	r1, r9
 80015f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001602:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800160a:	4692      	mov	sl, r2
 800160c:	469b      	mov	fp, r3
 800160e:	4623      	mov	r3, r4
 8001610:	eb1a 0303 	adds.w	r3, sl, r3
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	462b      	mov	r3, r5
 8001618:	eb4b 0303 	adc.w	r3, fp, r3
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800162a:	4629      	mov	r1, r5
 800162c:	028b      	lsls	r3, r1, #10
 800162e:	4621      	mov	r1, r4
 8001630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001634:	4621      	mov	r1, r4
 8001636:	028a      	lsls	r2, r1, #10
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001640:	2200      	movs	r2, #0
 8001642:	673b      	str	r3, [r7, #112]	@ 0x70
 8001644:	677a      	str	r2, [r7, #116]	@ 0x74
 8001646:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800164a:	f7fe fe81 	bl	8000350 <__aeabi_uldivmod>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4613      	mov	r3, r2
 8001654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001658:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800166a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800166e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800167a:	e0eb      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800167c:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001688:	4b35      	ldr	r3, [pc, #212]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d06b      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800169e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80016a8:	2300      	movs	r3, #0
 80016aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80016ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	0159      	lsls	r1, r3, #5
 80016be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c2:	0150      	lsls	r0, r2, #5
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4621      	mov	r1, r4
 80016ca:	1a51      	subs	r1, r2, r1
 80016cc:	61b9      	str	r1, [r7, #24]
 80016ce:	4629      	mov	r1, r5
 80016d0:	eb63 0301 	sbc.w	r3, r3, r1
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016e2:	4659      	mov	r1, fp
 80016e4:	018b      	lsls	r3, r1, #6
 80016e6:	4651      	mov	r1, sl
 80016e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ec:	4651      	mov	r1, sl
 80016ee:	018a      	lsls	r2, r1, #6
 80016f0:	4651      	mov	r1, sl
 80016f2:	ebb2 0801 	subs.w	r8, r2, r1
 80016f6:	4659      	mov	r1, fp
 80016f8:	eb63 0901 	sbc.w	r9, r3, r1
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001710:	4690      	mov	r8, r2
 8001712:	4699      	mov	r9, r3
 8001714:	4623      	mov	r3, r4
 8001716:	eb18 0303 	adds.w	r3, r8, r3
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	462b      	mov	r3, r5
 800171e:	eb49 0303 	adc.w	r3, r9, r3
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001730:	4629      	mov	r1, r5
 8001732:	024b      	lsls	r3, r1, #9
 8001734:	4621      	mov	r1, r4
 8001736:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800173a:	4621      	mov	r1, r4
 800173c:	024a      	lsls	r2, r1, #9
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001746:	2200      	movs	r2, #0
 8001748:	65bb      	str	r3, [r7, #88]	@ 0x58
 800174a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800174c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001750:	f7fe fdfe 	bl	8000350 <__aeabi_uldivmod>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4613      	mov	r3, r2
 800175a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800175e:	e065      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x420>
 8001760:	40023800 	.word	0x40023800
 8001764:	00f42400 	.word	0x00f42400
 8001768:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x458>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	2200      	movs	r2, #0
 8001774:	4618      	mov	r0, r3
 8001776:	4611      	mov	r1, r2
 8001778:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
 800177e:	2300      	movs	r3, #0
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
 8001782:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001786:	4642      	mov	r2, r8
 8001788:	464b      	mov	r3, r9
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	0159      	lsls	r1, r3, #5
 8001794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001798:	0150      	lsls	r0, r2, #5
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4641      	mov	r1, r8
 80017a0:	1a51      	subs	r1, r2, r1
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	4649      	mov	r1, r9
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017b8:	4659      	mov	r1, fp
 80017ba:	018b      	lsls	r3, r1, #6
 80017bc:	4651      	mov	r1, sl
 80017be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c2:	4651      	mov	r1, sl
 80017c4:	018a      	lsls	r2, r1, #6
 80017c6:	4651      	mov	r1, sl
 80017c8:	1a54      	subs	r4, r2, r1
 80017ca:	4659      	mov	r1, fp
 80017cc:	eb63 0501 	sbc.w	r5, r3, r1
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	00eb      	lsls	r3, r5, #3
 80017da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	4614      	mov	r4, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4643      	mov	r3, r8
 80017e6:	18e3      	adds	r3, r4, r3
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	464b      	mov	r3, r9
 80017ec:	eb45 0303 	adc.w	r3, r5, r3
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fe:	4629      	mov	r1, r5
 8001800:	028b      	lsls	r3, r1, #10
 8001802:	4621      	mov	r1, r4
 8001804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001808:	4621      	mov	r1, r4
 800180a:	028a      	lsls	r2, r1, #10
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001814:	2200      	movs	r2, #0
 8001816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001818:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800181a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800181e:	f7fe fd97 	bl	8000350 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x458>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0f1b      	lsrs	r3, r3, #28
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800183a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800183e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800184a:	e003      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x45c>)
 800184e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001858:	4618      	mov	r0, r3
 800185a:	37b8      	adds	r7, #184	@ 0xb8
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	00f42400 	.word	0x00f42400

0800186c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e28d      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8083 	beq.w	8001992 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800188c:	4b94      	ldr	r3, [pc, #592]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d019      	beq.n	80018cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001898:	4b91      	ldr	r3, [pc, #580]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
        || \
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018a4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b84      	ldr	r3, [pc, #528]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x124>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e25a      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x90>
 80018ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xcc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0xb4>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a72      	ldr	r2, [pc, #456]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xcc>
 8001920:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f990 	bl	8000c64 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f98c 	bl	8000c64 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	@ 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e21f      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b61      	ldr	r3, [pc, #388]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xdc>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f97c 	bl	8000c64 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff f978 	bl	8000c64 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e20b      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b57      	ldr	r3, [pc, #348]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x104>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d06f      	beq.n	8001a7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800199e:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d017      	beq.n	80019da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019aa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x186>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1d3      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4937      	ldr	r1, [pc, #220]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_OscConfig+0x278>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f925 	bl	8000c64 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f921 	bl	8000c64 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1b4      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4925      	ldr	r1, [pc, #148]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x278>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff f904 	bl	8000c64 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff f900 	bl	8000c64 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e193      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f8e4 	bl	8000c64 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f8e0 	bl	8000c64 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e173      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x234>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8cd 	bl	8000c64 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00e      	b.n	8001aec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff f8c9 	bl	8000c64 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d907      	bls.n	8001aec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e15c      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b8a      	ldr	r3, [pc, #552]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ea      	bne.n	8001ace <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8097 	beq.w	8001c34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b83      	ldr	r3, [pc, #524]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b7c      	ldr	r3, [pc, #496]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b79      	ldr	r3, [pc, #484]	@ (8001d1c <HAL_RCC_OscConfig+0x4b0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b76      	ldr	r3, [pc, #472]	@ (8001d1c <HAL_RCC_OscConfig+0x4b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a75      	ldr	r2, [pc, #468]	@ (8001d1c <HAL_RCC_OscConfig+0x4b0>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f889 	bl	8000c64 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff f885 	bl	8000c64 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e118      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b6c      	ldr	r3, [pc, #432]	@ (8001d1c <HAL_RCC_OscConfig+0x4b0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x31e>
 8001b7c:	4b66      	ldr	r3, [pc, #408]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a65      	ldr	r2, [pc, #404]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x358>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x340>
 8001b92:	4b61      	ldr	r3, [pc, #388]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	4a60      	ldr	r2, [pc, #384]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x358>
 8001bac:	4b5a      	ldr	r3, [pc, #360]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a59      	ldr	r2, [pc, #356]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4a56      	ldr	r2, [pc, #344]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f84a 	bl	8000c64 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f846 	bl	8000c64 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0d7      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ee      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x368>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f834 	bl	8000c64 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff f830 	bl	8000c64 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0c1      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80ad 	beq.w	8001d98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3e:	4b36      	ldr	r3, [pc, #216]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d060      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d145      	bne.n	8001cde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b33      	ldr	r3, [pc, #204]	@ (8001d20 <HAL_RCC_OscConfig+0x4b4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f804 	bl	8000c64 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f800 	bl	8000c64 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e093      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	071b      	lsls	r3, r3, #28
 8001caa:	491b      	ldr	r1, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x4b4>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7fe ffd5 	bl	8000c64 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7fe ffd1 	bl	8000c64 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e064      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x452>
 8001cdc:	e05c      	b.n	8001d98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_OscConfig+0x4b4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffbe 	bl	8000c64 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ffba 	bl	8000c64 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e04d      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x480>
 8001d0a:	e045      	b.n	8001d98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e040      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <HAL_RCC_OscConfig+0x538>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d030      	beq.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d129      	bne.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d122      	bne.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d119      	bne.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d10f      	bne.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e041      	b.n	8001e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f839 	bl	8001e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f9c0 	bl	800216c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d001      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e04e      	b.n	8001f12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d022      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	d01d      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d018      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00e      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d004      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d010      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efe:	e007      	b.n	8001f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40001800 	.word	0x40001800

08001f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d020      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0202 	mvn.w	r2, #2
 8001f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8d2 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8c4 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8d5 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0204 	mvn.w	r2, #4
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8ac 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89e 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8af 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0208 	mvn.w	r2, #8
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2204      	movs	r2, #4
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f886 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f878 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f889 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0210 	mvn.w	r2, #16
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2208      	movs	r2, #8
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f860 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f852 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f863 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0201 	mvn.w	r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fc54 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f906 	bl	80022d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f834 	bl	8002158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0220 	mvn.w	r2, #32
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8d8 	bl	80022c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <TIM_Base_SetConfig+0x12c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218a:	d00f      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a43      	ldr	r2, [pc, #268]	@ (800229c <TIM_Base_SetConfig+0x130>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00b      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a42      	ldr	r2, [pc, #264]	@ (80022a0 <TIM_Base_SetConfig+0x134>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <TIM_Base_SetConfig+0x138>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d003      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a40      	ldr	r2, [pc, #256]	@ (80022a8 <TIM_Base_SetConfig+0x13c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d108      	bne.n	80021be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <TIM_Base_SetConfig+0x12c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021cc:	d027      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a32      	ldr	r2, [pc, #200]	@ (800229c <TIM_Base_SetConfig+0x130>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d023      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a31      	ldr	r2, [pc, #196]	@ (80022a0 <TIM_Base_SetConfig+0x134>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <TIM_Base_SetConfig+0x138>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2f      	ldr	r2, [pc, #188]	@ (80022a8 <TIM_Base_SetConfig+0x13c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d017      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2e      	ldr	r2, [pc, #184]	@ (80022ac <TIM_Base_SetConfig+0x140>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2d      	ldr	r2, [pc, #180]	@ (80022b0 <TIM_Base_SetConfig+0x144>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00f      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2c      	ldr	r2, [pc, #176]	@ (80022b4 <TIM_Base_SetConfig+0x148>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2b      	ldr	r2, [pc, #172]	@ (80022b8 <TIM_Base_SetConfig+0x14c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2a      	ldr	r2, [pc, #168]	@ (80022bc <TIM_Base_SetConfig+0x150>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a29      	ldr	r2, [pc, #164]	@ (80022c0 <TIM_Base_SetConfig+0x154>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d108      	bne.n	8002230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <TIM_Base_SetConfig+0x12c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_Base_SetConfig+0xf8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a12      	ldr	r2, [pc, #72]	@ (80022a8 <TIM_Base_SetConfig+0x13c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d103      	bne.n	800226c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f023 0201 	bic.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]
  }
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40014000 	.word	0x40014000
 80022b0:	40014400 	.word	0x40014400
 80022b4:	40014800 	.word	0x40014800
 80022b8:	40001800 	.word	0x40001800
 80022bc:	40001c00 	.word	0x40001c00
 80022c0:	40002000 	.word	0x40002000

080022c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0208 	add.w	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0208 	add.w	r2, r3, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002320:	f240 1019 	movw	r0, #281	@ 0x119
 8002324:	f003 ff5e 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800233e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002342:	f003 ff4f 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d103      	bne.n	800236e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e00c      	b.n	8002388 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3308      	adds	r3, #8
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e002      	b.n	800237c <vListInsert+0x2e>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d2f6      	bcs.n	8002376 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80023b4:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80023b8:	f003 ff14 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6892      	ldr	r2, [r2, #8]
 80023da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d103      	bne.n	80023f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002412:	f003 ff23 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <xQueueGenericReset+0x30>
    __asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	60fb      	str	r3, [r7, #12]
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	e7fd      	b.n	800244e <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d052      	beq.n	80024fe <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d04e      	beq.n	80024fe <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	2100      	movs	r1, #0
 800246a:	fba3 2302 	umull	r2, r3, r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d000      	beq.n	8002474 <xQueueGenericReset+0x52>
 8002472:	2101      	movs	r1, #1
 8002474:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d141      	bne.n	80024fe <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800247a:	f001 ff83 	bl	8004384 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	6939      	ldr	r1, [r7, #16]
 8002488:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	441a      	add	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2200      	movs	r2, #0
 8002498:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	441a      	add	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	22ff      	movs	r2, #255	@ 0xff
 80024be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	22ff      	movs	r2, #255	@ 0xff
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00f      	beq.n	80024f8 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	3310      	adds	r3, #16
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fff1 	bl	80034c4 <xTaskRemoveFromEventList>
 80024e2:	e009      	b.n	80024f8 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	3310      	adds	r3, #16
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff feff 	bl	80022ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3324      	adds	r3, #36	@ 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fefa 	bl	80022ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024f8:	f001 ff76 	bl	80043e8 <vPortExitCritical>
 80024fc:	e001      	b.n	8002502 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <xQueueGenericReset+0xfe>
    __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	60bb      	str	r3, [r7, #8]
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	4619      	mov	r1, r3
 8002524:	2096      	movs	r0, #150	@ 0x96
 8002526:	f003 fe99 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800252a:	697b      	ldr	r3, [r7, #20]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02e      	beq.n	80025aa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800254c:	2100      	movs	r1, #0
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	fba3 2302 	umull	r2, r3, r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d000      	beq.n	800255c <xQueueGenericCreate+0x28>
 800255a:	2101      	movs	r1, #1
 800255c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d123      	bne.n	80025aa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800256a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800256e:	d81c      	bhi.n	80025aa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	3350      	adds	r3, #80	@ 0x50
 800257e:	4618      	mov	r0, r3
 8002580:	f002 f82e 	bl	80045e0 <pvPortMalloc>
 8002584:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01d      	beq.n	80025c8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3350      	adds	r3, #80	@ 0x50
 8002594:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002596:	79fa      	ldrb	r2, [r7, #7]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f81e 	bl	80025e4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80025a8:	e00e      	b.n	80025c8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <xQueueGenericCreate+0x94>
    __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	613b      	str	r3, [r7, #16]
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 ffe0 	bl	8006590 <SEGGER_SYSVIEW_ShrinkId>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	2098      	movs	r0, #152	@ 0x98
 80025d6:	f003 fe41 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80025da:	69fb      	ldr	r3, [r7, #28]
    }
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e002      	b.n	8002606 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002612:	2101      	movs	r1, #1
 8002614:	69b8      	ldr	r0, [r7, #24]
 8002616:	f7ff ff04 	bl	8002422 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	@ 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <xQueueReceive+0x32>
    __asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	623b      	str	r3, [r7, #32]
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <xQueueReceive+0x40>
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueReceive+0x44>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueReceive+0x46>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <xQueueReceive+0x62>
    __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	61fb      	str	r3, [r7, #28]
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268e:	f001 f935 	bl	80038fc <xTaskGetSchedulerState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <xQueueReceive+0x72>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <xQueueReceive+0x76>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <xQueueReceive+0x78>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <xQueueReceive+0x94>
    __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	61bb      	str	r3, [r7, #24]
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026c0:	f001 fe60 	bl	8004384 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d4:	f000 f88e 	bl	80027f4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	3310      	adds	r3, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fee9 	bl	80034c4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026f2:	f001 fe79 	bl	80043e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80026f6:	2101      	movs	r1, #1
 80026f8:	20a4      	movs	r0, #164	@ 0xa4
 80026fa:	f003 fdaf 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80026fe:	2301      	movs	r3, #1
 8002700:	e071      	b.n	80027e6 <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002708:	f001 fe6e 	bl	80043e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800270c:	2100      	movs	r1, #0
 800270e:	20a4      	movs	r0, #164	@ 0xa4
 8002710:	f003 fda4 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002714:	2300      	movs	r3, #0
 8002716:	e066      	b.n	80027e6 <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	4618      	mov	r0, r3
 8002724:	f000 ffae 	bl	8003684 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800272c:	f001 fe5c 	bl	80043e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002730:	f000 fbb2 	bl	8002e98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002734:	f001 fe26 	bl	8004384 <vPortEnterCritical>
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800273e:	b25b      	sxtb	r3, r3
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d103      	bne.n	800274e <xQueueReceive+0x122>
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002754:	b25b      	sxtb	r3, r3
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d103      	bne.n	8002764 <xQueueReceive+0x138>
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002764:	f001 fe40 	bl	80043e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002768:	1d3a      	adds	r2, r7, #4
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 ff9f 	bl	80036b4 <xTaskCheckForTimeOut>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d123      	bne.n	80027c4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800277c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800277e:	f000 f8b1 	bl	80028e4 <prvIsQueueEmpty>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	3324      	adds	r3, #36	@ 0x24
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fe25 	bl	80033e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002798:	f000 f852 	bl	8002840 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800279c:	f000 fb8a 	bl	8002eb4 <xTaskResumeAll>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d18c      	bne.n	80026c0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80027a6:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <xQueueReceive+0x1c4>)
 80027a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	e783      	b.n	80026c0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027ba:	f000 f841 	bl	8002840 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027be:	f000 fb79 	bl	8002eb4 <xTaskResumeAll>
 80027c2:	e77d      	b.n	80026c0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c6:	f000 f83b 	bl	8002840 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027ca:	f000 fb73 	bl	8002eb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027d0:	f000 f888 	bl	80028e4 <prvIsQueueEmpty>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f43f af72 	beq.w	80026c0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027dc:	2100      	movs	r1, #0
 80027de:	20a4      	movs	r0, #164	@ 0xa4
 80027e0:	f003 fd3c 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80027e4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3730      	adds	r7, #48	@ 0x30
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d018      	beq.n	8002838 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	441a      	add	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	d303      	bcc.n	8002828 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68d9      	ldr	r1, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	461a      	mov	r2, r3
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	f004 fa80 	bl	8006d38 <memcpy>
    }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002848:	f001 fd9c 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002852:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002854:	e011      	b.n	800287a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3324      	adds	r3, #36	@ 0x24
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fe2e 	bl	80034c4 <xTaskRemoveFromEventList>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800286e:	f000 ff8d 	bl	800378c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	3b01      	subs	r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	dce9      	bgt.n	8002856 <prvUnlockQueue+0x16>
 8002882:	e000      	b.n	8002886 <prvUnlockQueue+0x46>
                    break;
 8002884:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	22ff      	movs	r2, #255	@ 0xff
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800288e:	f001 fdab 	bl	80043e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002892:	f001 fd77 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800289c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800289e:	e011      	b.n	80028c4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe09 	bl	80034c4 <xTaskRemoveFromEventList>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028b8:	f000 ff68 	bl	800378c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028bc:	7bbb      	ldrb	r3, [r7, #14]
 80028be:	3b01      	subs	r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	dce9      	bgt.n	80028a0 <prvUnlockQueue+0x60>
 80028cc:	e000      	b.n	80028d0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028ce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	22ff      	movs	r2, #255	@ 0xff
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028d8:	f001 fd86 	bl	80043e8 <vPortExitCritical>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028ec:	f001 fd4a 	bl	8004384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e001      	b.n	8002902 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002902:	f001 fd71 	bl	80043e8 <vPortExitCritical>

    return xReturn;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60fb      	str	r3, [r7, #12]
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d024      	beq.n	800298c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e01e      	b.n	8002986 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002948:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <vQueueAddToRegistry+0x9c>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d105      	bne.n	8002964 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <vQueueAddToRegistry+0x9c>)
 800295e:	4413      	add	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
                    break;
 8002962:	e013      	b.n	800298c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <vQueueAddToRegistry+0x70>
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <vQueueAddToRegistry+0x9c>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <vQueueAddToRegistry+0x9c>)
 800297c:	4413      	add	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b07      	cmp	r3, #7
 800298a:	d9dd      	bls.n	8002948 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800299e:	20b6      	movs	r0, #182	@ 0xb6
 80029a0:	f003 fc20 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200000d8 	.word	0x200000d8

080029b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029c0:	f001 fce0 	bl	8004384 <vPortEnterCritical>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d103      	bne.n	80029da <vQueueWaitForMessageRestricted+0x2a>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d103      	bne.n	80029f0 <vQueueWaitForMessageRestricted+0x40>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f0:	f001 fcfa 	bl	80043e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3324      	adds	r3, #36	@ 0x24
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd13 	bl	8003430 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff18 	bl	8002840 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002a10:	20b9      	movs	r0, #185	@ 0xb9
 8002a12:	f003 fbe7 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b08a      	sub	sp, #40	@ 0x28
 8002a22:	af04      	add	r7, sp, #16
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fdd5 	bl	80045e0 <pvPortMalloc>
 8002a36:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002a3e:	2058      	movs	r0, #88	@ 0x58
 8002a40:	f001 fdce 	bl	80045e0 <pvPortMalloc>
 8002a44:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a4c:	2258      	movs	r2, #88	@ 0x58
 8002a4e:	2100      	movs	r1, #0
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f004 f93d 	bl	8006cd0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a5c:	e005      	b.n	8002a6a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a5e:	6938      	ldr	r0, [r7, #16]
 8002a60:	f001 fef0 	bl	8004844 <vPortFree>
 8002a64:	e001      	b.n	8002a6a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a70:	2300      	movs	r3, #0
 8002a72:	9303      	str	r3, [sp, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f82d 	bl	8002ae6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a8c:	697b      	ldr	r3, [r7, #20]
    }
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af02      	add	r7, sp, #8
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ffb3 	bl	8002a1e <prvCreateTask>
 8002ab8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002ac0:	6938      	ldr	r0, [r7, #16]
 8002ac2:	f000 f8a1 	bl	8002c08 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e002      	b.n	8002ad2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	20c2      	movs	r0, #194	@ 0xc2
 8002ad8:	f003 fbc0 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002adc:	697b      	ldr	r3, [r7, #20]
    }
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	21a5      	movs	r1, #165	@ 0xa5
 8002b00:	f004 f8e6 	bl	8006cd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f023 0307 	bic.w	r3, r3, #7
 8002b1c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	617b      	str	r3, [r7, #20]
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01e      	beq.n	8002b84 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e012      	b.n	8002b72 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	7819      	ldrb	r1, [r3, #0]
 8002b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3334      	adds	r3, #52	@ 0x34
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d9e9      	bls.n	8002b4c <prvInitialiseNewTask+0x66>
 8002b78:	e000      	b.n	8002b7c <prvInitialiseNewTask+0x96>
            {
                break;
 8002b7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d90b      	bls.n	8002ba2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	613b      	str	r3, [r7, #16]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d901      	bls.n	8002bac <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fbb7 	bl	8002330 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fbb2 	bl	8002330 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd4:	f1c3 0205 	rsb	r2, r3, #5
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	69b8      	ldr	r0, [r7, #24]
 8002be8:	f001 f9d0 	bl	8003f8c <pxPortInitialiseStack>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bfe:	bf00      	nop
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002c10:	f001 fbb8 	bl	8004384 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002c14:	4b48      	ldr	r3, [pc, #288]	@ (8002d38 <prvAddNewTaskToReadyList+0x130>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <prvAddNewTaskToReadyList+0x130>)
 8002c1c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002c1e:	4b47      	ldr	r3, [pc, #284]	@ (8002d3c <prvAddNewTaskToReadyList+0x134>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002c26:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <prvAddNewTaskToReadyList+0x134>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c2c:	4b42      	ldr	r3, [pc, #264]	@ (8002d38 <prvAddNewTaskToReadyList+0x130>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d110      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002c34:	f000 fdc8 	bl	80037c8 <prvInitialiseTaskLists>
 8002c38:	e00d      	b.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002c3a:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <prvAddNewTaskToReadyList+0x138>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <prvAddNewTaskToReadyList+0x134>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d802      	bhi.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002c50:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <prvAddNewTaskToReadyList+0x134>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002c56:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <prvAddNewTaskToReadyList+0x13c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a39      	ldr	r2, [pc, #228]	@ (8002d44 <prvAddNewTaskToReadyList+0x13c>)
 8002c5e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c60:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <prvAddNewTaskToReadyList+0x13c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <prvAddNewTaskToReadyList+0x94>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fb67 	bl	8006344 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	461d      	mov	r5, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	1ae3      	subs	r3, r4, r3
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	462b      	mov	r3, r5
 8002c98:	f001 ffd2 	bl	8004c40 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fbd4 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <prvAddNewTaskToReadyList+0x140>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <prvAddNewTaskToReadyList+0x140>)
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cba:	4924      	ldr	r1, [pc, #144]	@ (8002d4c <prvAddNewTaskToReadyList+0x144>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	3204      	adds	r2, #4
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1d1a      	adds	r2, r3, #4
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <prvAddNewTaskToReadyList+0x144>)
 8002cfa:	441a      	add	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	615a      	str	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	4911      	ldr	r1, [pc, #68]	@ (8002d4c <prvAddNewTaskToReadyList+0x144>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <prvAddNewTaskToReadyList+0x144>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002d26:	f001 fb5f 	bl	80043e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <prvAddNewTaskToReadyList+0x138>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bdb0      	pop	{r4, r5, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200001f0 	.word	0x200001f0
 8002d3c:	20000118 	.word	0x20000118
 8002d40:	200001fc 	.word	0x200001fc
 8002d44:	2000020c 	.word	0x2000020c
 8002d48:	200001f8 	.word	0x200001f8
 8002d4c:	2000011c 	.word	0x2000011c

08002d50 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	@ 0x28
 8002d54:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002d56:	2301      	movs	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e011      	b.n	8002d88 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002d64:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd8 <prvCreateIdleTasks+0x88>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4413      	add	r3, r2
 8002d6a:	7819      	ldrb	r1, [r3, #0]
 8002d6c:	1d3a      	adds	r2, r7, #4
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4413      	add	r3, r2
 8002d72:	460a      	mov	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002d76:	1d3a      	adds	r2, r7, #4
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b09      	cmp	r3, #9
 8002d8c:	ddea      	ble.n	8002d64 <prvCreateIdleTasks+0x14>
 8002d8e:	e000      	b.n	8002d92 <prvCreateIdleTasks+0x42>
        {
            break;
 8002d90:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e015      	b.n	8002dc4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002d98:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <prvCreateIdleTasks+0x8c>)
 8002d9a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <prvCreateIdleTasks+0x90>)
 8002da2:	4413      	add	r3, r2
 8002da4:	1d39      	adds	r1, r7, #4
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	2282      	movs	r2, #130	@ 0x82
 8002db0:	6938      	ldr	r0, [r7, #16]
 8002db2:	f7ff fe70 	bl	8002a96 <xTaskCreate>
 8002db6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	dde6      	ble.n	8002d98 <prvCreateIdleTasks+0x48>
 8002dca:	e000      	b.n	8002dce <prvCreateIdleTasks+0x7e>
        {
            break;
 8002dcc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002dce:	69fb      	ldr	r3, [r7, #28]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	08007620 	.word	0x08007620
 8002ddc:	080037a5 	.word	0x080037a5
 8002de0:	20000214 	.word	0x20000214

08002de4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002dea:	f7ff ffb1 	bl	8002d50 <prvCreateIdleTasks>
 8002dee:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002df6:	f000 fe31 	bl	8003a5c <xTimerCreateTimerTask>
 8002dfa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d124      	bne.n	8002e4c <vTaskStartScheduler+0x68>
    __asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	60bb      	str	r3, [r7, #8]
}
 8002e14:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <vTaskStartScheduler+0x9c>)
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <vTaskStartScheduler+0xa0>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <vTaskStartScheduler+0xa4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e2a:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <vTaskStartScheduler+0xa8>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <vTaskStartScheduler+0xac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d102      	bne.n	8002e3c <vTaskStartScheduler+0x58>
 8002e36:	f003 fa69 	bl	800630c <SEGGER_SYSVIEW_OnIdle>
 8002e3a:	e004      	b.n	8002e46 <vTaskStartScheduler+0x62>
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <vTaskStartScheduler+0xac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fac1 	bl	80063c8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002e46:	f001 f92d 	bl	80040a4 <xPortStartScheduler>
 8002e4a:	e00f      	b.n	8002e6c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d10b      	bne.n	8002e6c <vTaskStartScheduler+0x88>
    __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	607b      	str	r3, [r7, #4]
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <vTaskStartScheduler+0xb0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002e70:	20cd      	movs	r0, #205	@ 0xcd
 8002e72:	f003 f9b7 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000210 	.word	0x20000210
 8002e84:	200001fc 	.word	0x200001fc
 8002e88:	200001f4 	.word	0x200001f4
 8002e8c:	20000214 	.word	0x20000214
 8002e90:	20000118 	.word	0x20000118
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <vTaskSuspendAll+0x18>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a03      	ldr	r2, [pc, #12]	@ (8002eb0 <vTaskSuspendAll+0x18>)
 8002ea4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002ea6:	20cf      	movs	r0, #207	@ 0xcf
 8002ea8:	f003 f99c 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000218 	.word	0x20000218

08002eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002ec2:	f001 fa5f 	bl	8004384 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002eca:	4b73      	ldr	r3, [pc, #460]	@ (8003098 <xTaskResumeAll+0x1e4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <xTaskResumeAll+0x36>
    __asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	603b      	str	r3, [r7, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	e7fd      	b.n	8002ee6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002eea:	4b6b      	ldr	r3, [pc, #428]	@ (8003098 <xTaskResumeAll+0x1e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a69      	ldr	r2, [pc, #420]	@ (8003098 <xTaskResumeAll+0x1e4>)
 8002ef2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ef4:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <xTaskResumeAll+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f040 80c0 	bne.w	800307e <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002efe:	4b67      	ldr	r3, [pc, #412]	@ (800309c <xTaskResumeAll+0x1e8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80bb 	beq.w	800307e <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f08:	e092      	b.n	8003030 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f0a:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <xTaskResumeAll+0x1ec>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	6a12      	ldr	r2, [r2, #32]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	69d2      	ldr	r2, [r2, #28]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3318      	adds	r3, #24
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d103      	bne.n	8002f40 <xTaskResumeAll+0x8c>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1e5a      	subs	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	6892      	ldr	r2, [r2, #8]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d103      	bne.n	8002f7e <xTaskResumeAll+0xca>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	1e5a      	subs	r2, r3, #1
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fa5b 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	4b41      	ldr	r3, [pc, #260]	@ (80030a4 <xTaskResumeAll+0x1f0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80030a4 <xTaskResumeAll+0x1f0>)
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fac:	493e      	ldr	r1, [pc, #248]	@ (80030a8 <xTaskResumeAll+0x1f4>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	3204      	adds	r2, #4
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	1d1a      	adds	r2, r3, #4
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4a2f      	ldr	r2, [pc, #188]	@ (80030a8 <xTaskResumeAll+0x1f4>)
 8002fec:	441a      	add	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff6:	492c      	ldr	r1, [pc, #176]	@ (80030a8 <xTaskResumeAll+0x1f4>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003008:	1c59      	adds	r1, r3, #1
 800300a:	4827      	ldr	r0, [pc, #156]	@ (80030a8 <xTaskResumeAll+0x1f4>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4403      	add	r3, r0
 8003016:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301c:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <xTaskResumeAll+0x1f8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d904      	bls.n	8003030 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003026:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <xTaskResumeAll+0x1fc>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2101      	movs	r1, #1
 800302c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <xTaskResumeAll+0x1ec>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f af68 	bne.w	8002f0a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003040:	f000 fc40 	bl	80038c4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <xTaskResumeAll+0x200>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003050:	f000 f85a 	bl	8003108 <xTaskIncrementTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800305a:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <xTaskResumeAll+0x1fc>)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2101      	movs	r1, #1
 8003060:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3b01      	subs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ef      	bne.n	8003050 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003070:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <xTaskResumeAll+0x200>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003076:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <xTaskResumeAll+0x1fc>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800307e:	f001 f9b3 	bl	80043e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4619      	mov	r1, r3
 8003086:	20d0      	movs	r0, #208	@ 0xd0
 8003088:	f003 f8e8 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800308c:	697b      	ldr	r3, [r7, #20]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000218 	.word	0x20000218
 800309c:	200001f0 	.word	0x200001f0
 80030a0:	200001b0 	.word	0x200001b0
 80030a4:	200001f8 	.word	0x200001f8
 80030a8:	2000011c 	.word	0x2000011c
 80030ac:	20000118 	.word	0x20000118
 80030b0:	20000204 	.word	0x20000204
 80030b4:	20000200 	.word	0x20000200

080030b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <xTaskGetTickCount+0x20>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	20d1      	movs	r0, #209	@ 0xd1
 80030c8:	f003 f8c8 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200001f4 	.word	0x200001f4

080030dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e2:	f001 fa3b 	bl	800455c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <xTaskGetTickCountFromISR+0x28>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	20d2      	movs	r0, #210	@ 0xd2
 80030f4:	f003 f8b2 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80030f8:	683b      	ldr	r3, [r7, #0]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200001f4 	.word	0x200001f4

08003108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003112:	4b74      	ldr	r3, [pc, #464]	@ (80032e4 <xTaskIncrementTick+0x1dc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 80d4 	bne.w	80032c4 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800311c:	4b72      	ldr	r3, [pc, #456]	@ (80032e8 <xTaskIncrementTick+0x1e0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003124:	4a70      	ldr	r2, [pc, #448]	@ (80032e8 <xTaskIncrementTick+0x1e0>)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d121      	bne.n	8003174 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003130:	4b6e      	ldr	r3, [pc, #440]	@ (80032ec <xTaskIncrementTick+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <xTaskIncrementTick+0x4a>
    __asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	607b      	str	r3, [r7, #4]
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	e7fd      	b.n	800314e <xTaskIncrementTick+0x46>
 8003152:	4b66      	ldr	r3, [pc, #408]	@ (80032ec <xTaskIncrementTick+0x1e4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	4b65      	ldr	r3, [pc, #404]	@ (80032f0 <xTaskIncrementTick+0x1e8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <xTaskIncrementTick+0x1e4>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4a63      	ldr	r2, [pc, #396]	@ (80032f0 <xTaskIncrementTick+0x1e8>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b63      	ldr	r3, [pc, #396]	@ (80032f4 <xTaskIncrementTick+0x1ec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a61      	ldr	r2, [pc, #388]	@ (80032f4 <xTaskIncrementTick+0x1ec>)
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	f000 fba8 	bl	80038c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003174:	4b60      	ldr	r3, [pc, #384]	@ (80032f8 <xTaskIncrementTick+0x1f0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	429a      	cmp	r2, r3
 800317c:	f0c0 80a7 	bcc.w	80032ce <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003180:	4b5a      	ldr	r3, [pc, #360]	@ (80032ec <xTaskIncrementTick+0x1e4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800318a:	4b5b      	ldr	r3, [pc, #364]	@ (80032f8 <xTaskIncrementTick+0x1f0>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	601a      	str	r2, [r3, #0]
                    break;
 8003192:	e09c      	b.n	80032ce <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <xTaskIncrementTick+0x1e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d203      	bcs.n	80031b4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80031ac:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <xTaskIncrementTick+0x1f0>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6013      	str	r3, [r2, #0]
                        break;
 80031b2:	e08c      	b.n	80032ce <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3304      	adds	r3, #4
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d103      	bne.n	80031e2 <xTaskIncrementTick+0xda>
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01e      	beq.n	8003238 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	6a12      	ldr	r2, [r2, #32]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	69d2      	ldr	r2, [r2, #28]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	3318      	adds	r3, #24
 800321c:	429a      	cmp	r2, r3
 800321e:	d103      	bne.n	8003228 <xTaskIncrementTick+0x120>
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	@ 0x28
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 f906 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	4b2c      	ldr	r3, [pc, #176]	@ (80032fc <xTaskIncrementTick+0x1f4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <xTaskIncrementTick+0x1f4>)
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003256:	492a      	ldr	r1, [pc, #168]	@ (8003300 <xTaskIncrementTick+0x1f8>)
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3304      	adds	r3, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	3204      	adds	r2, #4
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4a1a      	ldr	r2, [pc, #104]	@ (8003300 <xTaskIncrementTick+0x1f8>)
 8003296:	441a      	add	r2, r3
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a0:	4917      	ldr	r1, [pc, #92]	@ (8003300 <xTaskIncrementTick+0x1f8>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	4812      	ldr	r0, [pc, #72]	@ (8003300 <xTaskIncrementTick+0x1f8>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c2:	e75d      	b.n	8003180 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <xTaskIncrementTick+0x1fc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003304 <xTaskIncrementTick+0x1fc>)
 80032cc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	4619      	mov	r1, r3
 80032d2:	20db      	movs	r0, #219	@ 0xdb
 80032d4:	f002 ffc2 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	@ 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000218 	.word	0x20000218
 80032e8:	200001f4 	.word	0x200001f4
 80032ec:	200001a8 	.word	0x200001a8
 80032f0:	200001ac 	.word	0x200001ac
 80032f4:	20000208 	.word	0x20000208
 80032f8:	20000210 	.word	0x20000210
 80032fc:	200001f8 	.word	0x200001f8
 8003300:	2000011c 	.word	0x2000011c
 8003304:	20000200 	.word	0x20000200

08003308 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800330e:	4b2e      	ldr	r3, [pc, #184]	@ (80033c8 <vTaskSwitchContext+0xc0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003316:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <vTaskSwitchContext+0xc4>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800331c:	e04f      	b.n	80033be <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800331e:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <vTaskSwitchContext+0xc4>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003324:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <vTaskSwitchContext+0xc8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f1c3 031f 	rsb	r3, r3, #31
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	4926      	ldr	r1, [pc, #152]	@ (80033d4 <vTaskSwitchContext+0xcc>)
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <vTaskSwitchContext+0x5e>
    __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	e7fd      	b.n	8003362 <vTaskSwitchContext+0x5a>
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <vTaskSwitchContext+0xcc>)
 8003372:	4413      	add	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	3308      	adds	r3, #8
 8003388:	429a      	cmp	r2, r3
 800338a:	d103      	bne.n	8003394 <vTaskSwitchContext+0x8c>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a0f      	ldr	r2, [pc, #60]	@ (80033d8 <vTaskSwitchContext+0xd0>)
 800339c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <vTaskSwitchContext+0xd4>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <vTaskSwitchContext+0xd0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d102      	bne.n	80033b0 <vTaskSwitchContext+0xa8>
 80033aa:	f002 ffaf 	bl	800630c <SEGGER_SYSVIEW_OnIdle>
 80033ae:	e004      	b.n	80033ba <vTaskSwitchContext+0xb2>
 80033b0:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <vTaskSwitchContext+0xd0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 f807 	bl	80063c8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <vTaskSwitchContext+0xd0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
    }
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000218 	.word	0x20000218
 80033cc:	20000204 	.word	0x20000204
 80033d0:	200001f8 	.word	0x200001f8
 80033d4:	2000011c 	.word	0x2000011c
 80033d8:	20000118 	.word	0x20000118
 80033dc:	20000214 	.word	0x20000214

080033e0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <vTaskPlaceOnEventList+0x4c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3318      	adds	r3, #24
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe ff9c 	bl	800234e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003416:	2101      	movs	r1, #1
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f000 fa91 	bl	8003940 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800341e:	20e1      	movs	r0, #225	@ 0xe1
 8003420:	f002 fee0 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000118 	.word	0x20000118

08003430 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	613b      	str	r3, [r7, #16]
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	e7fd      	b.n	8003456 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	61da      	str	r2, [r3, #28]
 8003468:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <vTaskPlaceOnEventListRestricted+0x90>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	621a      	str	r2, [r3, #32]
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	3218      	adds	r2, #24
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f103 0218 	add.w	r2, r3, #24
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <vTaskPlaceOnEventListRestricted+0x90>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f000 fa48 	bl	8003940 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80034b0:	20e3      	movs	r0, #227	@ 0xe3
 80034b2:	f002 fe97 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000118 	.word	0x20000118

080034c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60fb      	str	r3, [r7, #12]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	6a12      	ldr	r2, [r2, #32]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	6a3a      	ldr	r2, [r7, #32]
 8003508:	69d2      	ldr	r2, [r2, #28]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	3318      	adds	r3, #24
 8003514:	429a      	cmp	r2, r3
 8003516:	d103      	bne.n	8003520 <xTaskRemoveFromEventList+0x5c>
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003530:	4b4e      	ldr	r3, [pc, #312]	@ (800366c <xTaskRemoveFromEventList+0x1a8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d164      	bne.n	8003602 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	6892      	ldr	r2, [r2, #8]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	3304      	adds	r3, #4
 800355a:	429a      	cmp	r2, r3
 800355c:	d103      	bne.n	8003566 <xTaskRemoveFromEventList+0xa2>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2200      	movs	r2, #0
 800356a:	615a      	str	r2, [r3, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 ff67 	bl	800644c <SEGGER_SYSVIEW_OnTaskStartReady>
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	2201      	movs	r2, #1
 8003584:	409a      	lsls	r2, r3
 8003586:	4b3a      	ldr	r3, [pc, #232]	@ (8003670 <xTaskRemoveFromEventList+0x1ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	4a38      	ldr	r2, [pc, #224]	@ (8003670 <xTaskRemoveFromEventList+0x1ac>)
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003594:	4937      	ldr	r1, [pc, #220]	@ (8003674 <xTaskRemoveFromEventList+0x1b0>)
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	3204      	adds	r2, #4
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	1d1a      	adds	r2, r3, #4
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a28      	ldr	r2, [pc, #160]	@ (8003674 <xTaskRemoveFromEventList+0x1b0>)
 80035d4:	441a      	add	r2, r3
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	615a      	str	r2, [r3, #20]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035de:	4925      	ldr	r1, [pc, #148]	@ (8003674 <xTaskRemoveFromEventList+0x1b0>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	4820      	ldr	r0, [pc, #128]	@ (8003674 <xTaskRemoveFromEventList+0x1b0>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	6019      	str	r1, [r3, #0]
 8003600:	e01b      	b.n	800363a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003602:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <xTaskRemoveFromEventList+0x1b4>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	61da      	str	r2, [r3, #28]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	621a      	str	r2, [r3, #32]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	6a3a      	ldr	r2, [r7, #32]
 800361c:	3218      	adds	r2, #24
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f103 0218 	add.w	r2, r3, #24
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <xTaskRemoveFromEventList+0x1b4>)
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <xTaskRemoveFromEventList+0x1b4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a10      	ldr	r2, [pc, #64]	@ (8003678 <xTaskRemoveFromEventList+0x1b4>)
 8003638:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <xTaskRemoveFromEventList+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	429a      	cmp	r2, r3
 8003646:	d905      	bls.n	8003654 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <xTaskRemoveFromEventList+0x1bc>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e001      	b.n	8003658 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	4619      	mov	r1, r3
 800365c:	20e4      	movs	r0, #228	@ 0xe4
 800365e:	f002 fdfd 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	@ 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000218 	.word	0x20000218
 8003670:	200001f8 	.word	0x200001f8
 8003674:	2000011c 	.word	0x2000011c
 8003678:	200001b0 	.word	0x200001b0
 800367c:	20000118 	.word	0x20000118
 8003680:	20000204 	.word	0x20000204

08003684 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vTaskInternalSetTimeOutState+0x28>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <vTaskInternalSetTimeOutState+0x2c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 800369c:	20e7      	movs	r0, #231	@ 0xe7
 800369e:	f002 fda1 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000208 	.word	0x20000208
 80036b0:	200001f4 	.word	0x200001f4

080036b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60fb      	str	r3, [r7, #12]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80036fa:	f000 fe43 	bl	8004384 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036fe:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <xTaskCheckForTimeOut+0xd0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d102      	bne.n	800371e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e026      	b.n	800376c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <xTaskCheckForTimeOut+0xd4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d00a      	beq.n	8003740 <xTaskCheckForTimeOut+0x8c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	429a      	cmp	r2, r3
 8003732:	d305      	bcc.n	8003740 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e015      	b.n	800376c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	429a      	cmp	r2, r3
 8003748:	d20b      	bcs.n	8003762 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff94 	bl	8003684 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e004      	b.n	800376c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800376c:	f000 fe3c 	bl	80043e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4619      	mov	r1, r3
 8003774:	20e8      	movs	r0, #232	@ 0xe8
 8003776:	f002 fd71 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800377a:	69fb      	ldr	r3, [r7, #28]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200001f4 	.word	0x200001f4
 8003788:	20000208 	.word	0x20000208

0800378c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <vTaskMissedYield+0x14>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003796:	20e9      	movs	r0, #233	@ 0xe9
 8003798:	f002 fd24 	bl	80061e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000204 	.word	0x20000204

080037a4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037ac:	f000 f84c 	bl	8003848 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <prvIdleTask+0x20>)
 80037b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037c0:	bf00      	nop
 80037c2:	e7f3      	b.n	80037ac <prvIdleTask+0x8>
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e00c      	b.n	80037ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <prvInitialiseTaskLists+0x60>)
 80037e0:	4413      	add	r3, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fd82 	bl	80022ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d9ef      	bls.n	80037d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037f4:	480d      	ldr	r0, [pc, #52]	@ (800382c <prvInitialiseTaskLists+0x64>)
 80037f6:	f7fe fd79 	bl	80022ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037fa:	480d      	ldr	r0, [pc, #52]	@ (8003830 <prvInitialiseTaskLists+0x68>)
 80037fc:	f7fe fd76 	bl	80022ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003800:	480c      	ldr	r0, [pc, #48]	@ (8003834 <prvInitialiseTaskLists+0x6c>)
 8003802:	f7fe fd73 	bl	80022ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003806:	480c      	ldr	r0, [pc, #48]	@ (8003838 <prvInitialiseTaskLists+0x70>)
 8003808:	f7fe fd70 	bl	80022ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800380c:	480b      	ldr	r0, [pc, #44]	@ (800383c <prvInitialiseTaskLists+0x74>)
 800380e:	f7fe fd6d 	bl	80022ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003812:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <prvInitialiseTaskLists+0x78>)
 8003814:	4a05      	ldr	r2, [pc, #20]	@ (800382c <prvInitialiseTaskLists+0x64>)
 8003816:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <prvInitialiseTaskLists+0x7c>)
 800381a:	4a05      	ldr	r2, [pc, #20]	@ (8003830 <prvInitialiseTaskLists+0x68>)
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	2000011c 	.word	0x2000011c
 800382c:	20000180 	.word	0x20000180
 8003830:	20000194 	.word	0x20000194
 8003834:	200001b0 	.word	0x200001b0
 8003838:	200001c4 	.word	0x200001c4
 800383c:	200001dc 	.word	0x200001dc
 8003840:	200001a8 	.word	0x200001a8
 8003844:	200001ac 	.word	0x200001ac

08003848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384e:	e019      	b.n	8003884 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003850:	f000 fd98 	bl	8004384 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <prvCheckTasksWaitingTermination+0x50>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fdaf 	bl	80023c4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <prvCheckTasksWaitingTermination+0x54>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	4a0b      	ldr	r2, [pc, #44]	@ (800389c <prvCheckTasksWaitingTermination+0x54>)
 800386e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003878:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800387a:	f000 fdb5 	bl	80043e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f810 	bl	80038a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e1      	bne.n	8003850 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200001c4 	.word	0x200001c4
 800389c:	200001f0 	.word	0x200001f0
 80038a0:	200001d8 	.word	0x200001d8

080038a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 ffc7 	bl	8004844 <vPortFree>
            vPortFree( pxTCB );
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 ffc4 	bl	8004844 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c8:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <prvResetNextTaskUnblockTime+0x30>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <prvResetNextTaskUnblockTime+0x34>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038da:	e005      	b.n	80038e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <prvResetNextTaskUnblockTime+0x30>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <prvResetNextTaskUnblockTime+0x34>)
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200001a8 	.word	0x200001a8
 80038f8:	20000210 	.word	0x20000210

080038fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <xTaskGetSchedulerState+0x3c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800390a:	2301      	movs	r3, #1
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	e008      	b.n	8003922 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <xTaskGetSchedulerState+0x40>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003918:	2302      	movs	r3, #2
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	e001      	b.n	8003922 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	20f5      	movs	r0, #245	@ 0xf5
 8003928:	f002 fc98 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800392c:	687b      	ldr	r3, [r7, #4]
    }
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200001fc 	.word	0x200001fc
 800393c:	20000218 	.word	0x20000218

08003940 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800394a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x100>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003950:	4b3c      	ldr	r3, [pc, #240]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x104>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003956:	4b3c      	ldr	r3, [pc, #240]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x108>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800395c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3304      	adds	r3, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fd2e 	bl	80023c4 <uxListRemove>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800396e:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	2201      	movs	r2, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0x110>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4013      	ands	r3, r2
 8003982:	4a33      	ldr	r2, [pc, #204]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0x110>)
 8003984:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d124      	bne.n	80039d8 <prvAddCurrentTaskToDelayedList+0x98>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003994:	4b2f      	ldr	r3, [pc, #188]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0x114>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	3204      	adds	r2, #4
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	1d1a      	adds	r2, r3, #4
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	4b22      	ldr	r3, [pc, #136]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a23      	ldr	r2, [pc, #140]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0x114>)
 80039c8:	615a      	str	r2, [r3, #20]
 80039ca:	4b22      	ldr	r3, [pc, #136]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0x114>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	4a20      	ldr	r2, [pc, #128]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0x114>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039d6:	e02e      	b.n	8003a36 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039e0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d20d      	bcs.n	8003a0c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2104      	movs	r1, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fd6a 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	f7fe fca2 	bl	800234e <vListInsert>
}
 8003a0a:	e014      	b.n	8003a36 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2104      	movs	r1, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fd5c 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	69b8      	ldr	r0, [r7, #24]
 8003a22:	f7fe fc94 	bl	800234e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <prvAddCurrentTaskToDelayedList+0x118>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d202      	bcs.n	8003a36 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003a30:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <prvAddCurrentTaskToDelayedList+0x118>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6013      	str	r3, [r2, #0]
}
 8003a36:	bf00      	nop
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200001f4 	.word	0x200001f4
 8003a44:	200001a8 	.word	0x200001a8
 8003a48:	200001ac 	.word	0x200001ac
 8003a4c:	20000118 	.word	0x20000118
 8003a50:	200001f8 	.word	0x200001f8
 8003a54:	200001dc 	.word	0x200001dc
 8003a58:	20000210 	.word	0x20000210

08003a5c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a66:	f000 fa5b 	bl	8003f20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <xTimerCreateTimerTask+0x64>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a72:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <xTimerCreateTimerTask+0x68>)
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2302      	movs	r3, #2
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a80:	4911      	ldr	r1, [pc, #68]	@ (8003ac8 <xTimerCreateTimerTask+0x6c>)
 8003a82:	4812      	ldr	r0, [pc, #72]	@ (8003acc <xTimerCreateTimerTask+0x70>)
 8003a84:	f7ff f807 	bl	8002a96 <xTaskCreate>
 8003a88:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	603b      	str	r3, [r7, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003ab0:	f002 fbd4 	bl	800625c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003ab4:	687b      	ldr	r3, [r7, #4]
    }
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000024c 	.word	0x2000024c
 8003ac4:	20000250 	.word	0x20000250
 8003ac8:	08007628 	.word	0x08007628
 8003acc:	08003b75 	.word	0x08003b75

08003ad0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003adc:	e008      	b.n	8003af0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	18d1      	adds	r1, r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f8df 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ea      	bne.n	8003ade <prvReloadTimer+0xe>
        }
    }
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b1e:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <prvProcessExpiredTimer+0x5c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fc49 	bl	80023c4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff ffc3 	bl	8003ad0 <prvReloadTimer>
 8003b4a:	e008      	b.n	8003b5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	4798      	blx	r3
    }
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000244 	.word	0x20000244

08003b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f859 	bl	8003c38 <prvGetNextExpireTime>
 8003b86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f805 	bl	8003b9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b92:	f000 f8d7 	bl	8003d44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b96:	bf00      	nop
 8003b98:	e7f0      	b.n	8003b7c <prvTimerTask+0x8>
	...

08003b9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ba6:	f7ff f977 	bl	8002e98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f866 	bl	8003c80 <prvSampleTimeNow>
 8003bb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d130      	bne.n	8003c1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d806      	bhi.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bca:	f7ff f973 	bl	8002eb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff9f 	bl	8003b14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bd6:	e024      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bde:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <prvProcessTimerOrBlockTask+0x90>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <prvProcessTimerOrBlockTask+0x50>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <prvProcessTimerOrBlockTask+0x52>
 8003bec:	2300      	movs	r3, #0
 8003bee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <prvProcessTimerOrBlockTask+0x94>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fe fed7 	bl	80029b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c02:	f7ff f957 	bl	8002eb4 <xTaskResumeAll>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <prvProcessTimerOrBlockTask+0x98>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
    }
 8003c1c:	e001      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c1e:	f7ff f949 	bl	8002eb4 <xTaskResumeAll>
    }
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000248 	.word	0x20000248
 8003c30:	2000024c 	.word	0x2000024c
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <prvGetNextExpireTime+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <prvGetNextExpireTime+0x16>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	e000      	b.n	8003c50 <prvGetNextExpireTime+0x18>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <prvGetNextExpireTime+0x44>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e001      	b.n	8003c6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000244 	.word	0x20000244

08003c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003c88:	f7ff fa16 	bl	80030b8 <xTaskGetTickCount>
 8003c8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <prvSampleTimeNow+0x3c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d205      	bcs.n	8003ca4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c98:	f000 f91c 	bl	8003ed4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003caa:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <prvSampleTimeNow+0x3c>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000254 	.word	0x20000254

08003cc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d812      	bhi.n	8003d0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e01b      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <prvInsertTimerInActiveList+0x7c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fb22 	bl	800234e <vListInsert>
 8003d0a:	e012      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d206      	bcs.n	8003d22 <prvInsertTimerInActiveList+0x62>
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e007      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <prvInsertTimerInActiveList+0x80>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fb0e 	bl	800234e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d32:	697b      	ldr	r3, [r7, #20]
    }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000248 	.word	0x20000248
 8003d40:	20000244 	.word	0x20000244

08003d44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003d56:	e0a9      	b.n	8003eac <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f2c0 80a6 	blt.w	8003eac <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fb27 	bl	80023c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff81 	bl	8003c80 <prvSampleTimeNow>
 8003d7e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 808e 	bhi.w	8003ea6 <prvProcessReceivedCommands+0x162>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <prvProcessReceivedCommands+0x4c>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003db5 	.word	0x08003db5
 8003d98:	08003e1d 	.word	0x08003e1d
 8003d9c:	08003e31 	.word	0x08003e31
 8003da0:	08003e7d 	.word	0x08003e7d
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003db5 	.word	0x08003db5
 8003dac:	08003e1d 	.word	0x08003e1d
 8003db0:	08003e31 	.word	0x08003e31
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	18d1      	adds	r1, r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	69f8      	ldr	r0, [r7, #28]
 8003dd4:	f7ff ff74 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d065      	beq.n	8003eaa <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4619      	mov	r1, r3
 8003df8:	69f8      	ldr	r0, [r7, #28]
 8003dfa:	f7ff fe69 	bl	8003ad0 <prvReloadTimer>
 8003dfe:	e008      	b.n	8003e12 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	69f8      	ldr	r0, [r7, #28]
 8003e18:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e1a:	e046      	b.n	8003eaa <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e2e:	e03d      	b.n	8003eac <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	617b      	str	r3, [r7, #20]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	18d1      	adds	r1, r2, r3
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	69f8      	ldr	r0, [r7, #28]
 8003e76:	f7ff ff23 	bl	8003cc0 <prvInsertTimerInActiveList>
                        break;
 8003e7a:	e017      	b.n	8003eac <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003e8a:	69f8      	ldr	r0, [r7, #28]
 8003e8c:	f000 fcda 	bl	8004844 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e90:	e00c      	b.n	8003eac <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003ea4:	e002      	b.n	8003eac <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <prvProcessReceivedCommands+0x168>
                        break;
 8003eaa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <prvProcessReceivedCommands+0x18c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f107 0108 	add.w	r1, r7, #8
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fbb8 	bl	800262c <xQueueReceive>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f47f af4a 	bne.w	8003d58 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000024c 	.word	0x2000024c

08003ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eda:	e009      	b.n	8003ef0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <prvSwitchTimerLists+0x44>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eea:	6838      	ldr	r0, [r7, #0]
 8003eec:	f7ff fe12 	bl	8003b14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <prvSwitchTimerLists+0x44>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <prvSwitchTimerLists+0x44>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <prvSwitchTimerLists+0x48>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <prvSwitchTimerLists+0x44>)
 8003f06:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <prvSwitchTimerLists+0x48>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
    }
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000244 	.word	0x20000244
 8003f1c:	20000248 	.word	0x20000248

08003f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f24:	f000 fa2e 	bl	8004384 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <prvCheckForValidListAndQueue+0x54>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d11d      	bne.n	8003f6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f30:	4811      	ldr	r0, [pc, #68]	@ (8003f78 <prvCheckForValidListAndQueue+0x58>)
 8003f32:	f7fe f9db 	bl	80022ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f36:	4811      	ldr	r0, [pc, #68]	@ (8003f7c <prvCheckForValidListAndQueue+0x5c>)
 8003f38:	f7fe f9d8 	bl	80022ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <prvCheckForValidListAndQueue+0x60>)
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f78 <prvCheckForValidListAndQueue+0x58>)
 8003f40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f42:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <prvCheckForValidListAndQueue+0x64>)
 8003f44:	4a0d      	ldr	r2, [pc, #52]	@ (8003f7c <prvCheckForValidListAndQueue+0x5c>)
 8003f46:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003f48:	2200      	movs	r2, #0
 8003f4a:	210c      	movs	r1, #12
 8003f4c:	200a      	movs	r0, #10
 8003f4e:	f7fe faf1 	bl	8002534 <xQueueGenericCreate>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4a07      	ldr	r2, [pc, #28]	@ (8003f74 <prvCheckForValidListAndQueue+0x54>)
 8003f56:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003f58:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <prvCheckForValidListAndQueue+0x54>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f60:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <prvCheckForValidListAndQueue+0x54>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4908      	ldr	r1, [pc, #32]	@ (8003f88 <prvCheckForValidListAndQueue+0x68>)
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fcd2 	bl	8002910 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f6c:	f000 fa3c 	bl	80043e8 <vPortExitCritical>
    }
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	2000024c 	.word	0x2000024c
 8003f78:	2000021c 	.word	0x2000021c
 8003f7c:	20000230 	.word	0x20000230
 8003f80:	20000244 	.word	0x20000244
 8003f84:	20000248 	.word	0x20000248
 8003f88:	08007630 	.word	0x08007630

08003f8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3b04      	subs	r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b04      	subs	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff0 <pxPortInitialiseStack+0x64>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3b14      	subs	r3, #20
 8003fc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f06f 0202 	mvn.w	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3b20      	subs	r3, #32
 8003fe0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	08003ff5 	.word	0x08003ff5

08003ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ffe:	4b13      	ldr	r3, [pc, #76]	@ (800404c <prvTaskExitError+0x58>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d00b      	beq.n	8004020 <prvTaskExitError+0x2c>
    __asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	e7fd      	b.n	800401c <prvTaskExitError+0x28>
    __asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60bb      	str	r3, [r7, #8]
}
 8004032:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004034:	bf00      	nop
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0fc      	beq.n	8004036 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000010 	.word	0x20000010

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	20000118 	.word	0x20000118
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
 800409a:	0000      	.short	0x0000
 800409c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop

080040a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040aa:	4b69      	ldr	r3, [pc, #420]	@ (8004250 <xPortStartScheduler+0x1ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <xPortStartScheduler+0x1b0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10b      	bne.n	80040cc <xPortStartScheduler+0x28>
    __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040cc:	4b60      	ldr	r3, [pc, #384]	@ (8004250 <xPortStartScheduler+0x1ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	@ (8004258 <xPortStartScheduler+0x1b4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10b      	bne.n	80040ee <xPortStartScheduler+0x4a>
    __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	623b      	str	r3, [r7, #32]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80040ee:	4b5b      	ldr	r3, [pc, #364]	@ (800425c <xPortStartScheduler+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80040f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f6:	332c      	adds	r3, #44	@ 0x2c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a59      	ldr	r2, [pc, #356]	@ (8004260 <xPortStartScheduler+0x1bc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <xPortStartScheduler+0x74>
    __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61fb      	str	r3, [r7, #28]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	3338      	adds	r3, #56	@ 0x38
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a51      	ldr	r2, [pc, #324]	@ (8004264 <xPortStartScheduler+0x1c0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <xPortStartScheduler+0x98>
    __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	61bb      	str	r3, [r7, #24]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <xPortStartScheduler+0x1c4>)
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414e:	22ff      	movs	r2, #255	@ 0xff
 8004150:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b41      	ldr	r3, [pc, #260]	@ (800426c <xPortStartScheduler+0x1c8>)
 8004166:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004168:	4b40      	ldr	r3, [pc, #256]	@ (800426c <xPortStartScheduler+0x1c8>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <xPortStartScheduler+0xe4>
    __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	617b      	str	r3, [r7, #20]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d013      	beq.n	80041be <xPortStartScheduler+0x11a>
    __asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	613b      	str	r3, [r7, #16]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b80      	cmp	r3, #128	@ 0x80
 80041c8:	d0f1      	beq.n	80041ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d103      	bne.n	80041d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80041d0:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e004      	b.n	80041e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	4a24      	ldr	r2, [pc, #144]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041e2:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4a21      	ldr	r2, [pc, #132]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004200:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1b      	ldr	r2, [pc, #108]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800420a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <xPortStartScheduler+0x1d0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004216:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004218:	4b17      	ldr	r3, [pc, #92]	@ (8004278 <xPortStartScheduler+0x1d4>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800421e:	f000 f96d 	bl	80044fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <xPortStartScheduler+0x1d8>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004228:	f000 f98c 	bl	8004544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800422c:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <xPortStartScheduler+0x1dc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <xPortStartScheduler+0x1dc>)
 8004232:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004238:	f7ff ff1e 	bl	8004078 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800423c:	f7ff f864 	bl	8003308 <vTaskSwitchContext>
    prvTaskExitError();
 8004240:	f7ff fed8 	bl	8003ff4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3730      	adds	r7, #48	@ 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	410fc271 	.word	0x410fc271
 8004258:	410fc270 	.word	0x410fc270
 800425c:	e000ed08 	.word	0xe000ed08
 8004260:	08004051 	.word	0x08004051
 8004264:	08004441 	.word	0x08004441
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000258 	.word	0x20000258
 8004270:	2000025c 	.word	0x2000025c
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	e000ed1c 	.word	0xe000ed1c
 800427c:	20000010 	.word	0x20000010
 8004280:	e000ef34 	.word	0xe000ef34

08004284 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428a:	4b38      	ldr	r3, [pc, #224]	@ (800436c <vInitPrioGroupValue+0xe8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a38      	ldr	r2, [pc, #224]	@ (8004370 <vInitPrioGroupValue+0xec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10b      	bne.n	80042ac <vInitPrioGroupValue+0x28>
    __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ac:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <vInitPrioGroupValue+0xe8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <vInitPrioGroupValue+0xf0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10b      	bne.n	80042ce <vInitPrioGroupValue+0x4a>
    __asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	60fb      	str	r3, [r7, #12]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <vInitPrioGroupValue+0xf4>)
 80042d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	22ff      	movs	r2, #255	@ 0xff
 80042de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b22      	ldr	r3, [pc, #136]	@ (800437c <vInitPrioGroupValue+0xf8>)
 80042f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b22      	ldr	r3, [pc, #136]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b80      	cmp	r3, #128	@ 0x80
 800431c:	d0ef      	beq.n	80042fe <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431e:	4b18      	ldr	r3, [pc, #96]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00b      	beq.n	8004342 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 800434a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004354:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004356:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00
 8004370:	410fc271 	.word	0x410fc271
 8004374:	410fc270 	.word	0x410fc270
 8004378:	e000e400 	.word	0xe000e400
 800437c:	20000258 	.word	0x20000258
 8004380:	2000025c 	.word	0x2000025c

08004384 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d110      	bne.n	80043d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <vPortEnterCritical+0x60>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vPortEnterCritical+0x4a>
    }
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000010 	.word	0x20000010
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <vPortExitCritical+0x50>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <vPortExitCritical+0x26>
    __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	607b      	str	r3, [r7, #4]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <vPortExitCritical+0x50>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <vPortExitCritical+0x50>)
 8004416:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d105      	bne.n	800442c <vPortExitCritical+0x44>
 8004420:	2300      	movs	r3, #0
 8004422:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800442a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000010 	.word	0x20000010
 800443c:	00000000 	.word	0x00000000

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7fe ff4a 	bl	8003308 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	20000118 	.word	0x20000118
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
    __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80044c2:	f001 fe15 	bl	80060f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044c6:	f7fe fe1f 	bl	8003108 <xTaskIncrementTick>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80044d0:	f001 fe6c 	bl	80061ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <SysTick_Handler+0x50>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e001      	b.n	80044e2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80044de:	f001 fe49 	bl	8006174 <SEGGER_SYSVIEW_RecordExitISR>
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f383 8811 	msr	BASEPRI, r3
}
 80044ec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
 8004552:	0000      	.short	0x0000
 8004554:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop

0800455c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004562:	f3ef 8305 	mrs	r3, IPSR
 8004566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d915      	bls.n	800459a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800456e:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <vPortValidateInterruptPriority+0x74>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004578:	4b16      	ldr	r3, [pc, #88]	@ (80045d4 <vPortValidateInterruptPriority+0x78>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	7afa      	ldrb	r2, [r7, #11]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20b      	bcs.n	800459a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	607b      	str	r3, [r7, #4]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800459a:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <vPortValidateInterruptPriority+0x7c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <vPortValidateInterruptPriority+0x80>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90b      	bls.n	80045c2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	603b      	str	r3, [r7, #0]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <vPortValidateInterruptPriority+0x62>
    }
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e3f0 	.word	0xe000e3f0
 80045d4:	20000258 	.word	0x20000258
 80045d8:	e000ed0c 	.word	0xe000ed0c
 80045dc:	2000025c 	.word	0x2000025c

080045e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	@ 0x38
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d022      	beq.n	8004638 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80045f2:	2308      	movs	r3, #8
 80045f4:	43db      	mvns	r3, r3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d81b      	bhi.n	8004634 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80045fc:	2208      	movs	r2, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	f1c3 0308 	rsb	r3, r3, #8
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	43db      	mvns	r3, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d804      	bhi.n	800462e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	4413      	add	r3, r2
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e004      	b.n	8004638 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	e001      	b.n	8004638 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004638:	f7fe fc2e 	bl	8002e98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800463c:	4b7a      	ldr	r3, [pc, #488]	@ (8004828 <pvPortMalloc+0x248>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004644:	f000 f978 	bl	8004938 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 80d3 	blt.w	80047f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80cf 	beq.w	80047f6 <pvPortMalloc+0x216>
 8004658:	4b74      	ldr	r3, [pc, #464]	@ (800482c <pvPortMalloc+0x24c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	f200 80c9 	bhi.w	80047f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004664:	4b72      	ldr	r3, [pc, #456]	@ (8004830 <pvPortMalloc+0x250>)
 8004666:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004668:	4b71      	ldr	r3, [pc, #452]	@ (8004830 <pvPortMalloc+0x250>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	4a70      	ldr	r2, [pc, #448]	@ (8004834 <pvPortMalloc+0x254>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d305      	bcc.n	8004682 <pvPortMalloc+0xa2>
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	4a6f      	ldr	r2, [pc, #444]	@ (8004838 <pvPortMalloc+0x258>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d801      	bhi.n	8004682 <pvPortMalloc+0xa2>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <pvPortMalloc+0xa4>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d129      	bne.n	80046dc <pvPortMalloc+0xfc>
    __asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	623b      	str	r3, [r7, #32]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80046a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	4a61      	ldr	r2, [pc, #388]	@ (8004834 <pvPortMalloc+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d305      	bcc.n	80046be <pvPortMalloc+0xde>
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	4a60      	ldr	r2, [pc, #384]	@ (8004838 <pvPortMalloc+0x258>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d801      	bhi.n	80046be <pvPortMalloc+0xde>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <pvPortMalloc+0xe0>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <pvPortMalloc+0xfc>
    __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	61fb      	str	r3, [r7, #28]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d903      	bls.n	80046ee <pvPortMalloc+0x10e>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1d8      	bne.n	80046a0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <pvPortMalloc+0x248>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d07e      	beq.n	80047f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4413      	add	r3, r2
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	4a4b      	ldr	r2, [pc, #300]	@ (8004834 <pvPortMalloc+0x254>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d305      	bcc.n	8004716 <pvPortMalloc+0x136>
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	4a4a      	ldr	r2, [pc, #296]	@ (8004838 <pvPortMalloc+0x258>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d801      	bhi.n	8004716 <pvPortMalloc+0x136>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <pvPortMalloc+0x138>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <pvPortMalloc+0x154>
    __asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	61bb      	str	r3, [r7, #24]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90b      	bls.n	800475e <pvPortMalloc+0x17e>
    __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	617b      	str	r3, [r7, #20]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	2308      	movs	r3, #8
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	429a      	cmp	r2, r3
 800476c:	d924      	bls.n	80047b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <pvPortMalloc+0x1b8>
    __asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <pvPortMalloc+0x24c>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <pvPortMalloc+0x24c>)
 80047c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047c6:	4b19      	ldr	r3, [pc, #100]	@ (800482c <pvPortMalloc+0x24c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <pvPortMalloc+0x25c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d203      	bcs.n	80047da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <pvPortMalloc+0x24c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a19      	ldr	r2, [pc, #100]	@ (800483c <pvPortMalloc+0x25c>)
 80047d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80047da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ec:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <pvPortMalloc+0x260>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <pvPortMalloc+0x260>)
 80047f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047f6:	f7fe fb5d 	bl	8002eb4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <pvPortMalloc+0x23c>
    __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <pvPortMalloc+0x238>
    return pvReturn;
 800481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800481e:	4618      	mov	r0, r3
 8004820:	3738      	adds	r7, #56	@ 0x38
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20012e68 	.word	0x20012e68
 800482c:	20012e6c 	.word	0x20012e6c
 8004830:	20012e60 	.word	0x20012e60
 8004834:	20000260 	.word	0x20000260
 8004838:	20012e5f 	.word	0x20012e5f
 800483c:	20012e70 	.word	0x20012e70
 8004840:	20012e74 	.word	0x20012e74

08004844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d064      	beq.n	8004920 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004856:	2308      	movs	r3, #8
 8004858:	425b      	negs	r3, r3
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4a30      	ldr	r2, [pc, #192]	@ (8004928 <vPortFree+0xe4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d305      	bcc.n	8004878 <vPortFree+0x34>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4a2f      	ldr	r2, [pc, #188]	@ (800492c <vPortFree+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d801      	bhi.n	8004878 <vPortFree+0x34>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <vPortFree+0x36>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <vPortFree+0x52>
    __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <vPortFree+0x72>
    __asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	613b      	str	r3, [r7, #16]
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	e7fd      	b.n	80048b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <vPortFree+0x92>
    __asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60fb      	str	r3, [r7, #12]
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	e7fd      	b.n	80048d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	0fdb      	lsrs	r3, r3, #31
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01c      	beq.n	8004920 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d118      	bne.n	8004920 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80048fa:	f7fe facd 	bl	8002e98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <vPortFree+0xec>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4413      	add	r3, r2
 8004908:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <vPortFree+0xec>)
 800490a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800490c:	69b8      	ldr	r0, [r7, #24]
 800490e:	f000 f86d 	bl	80049ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004912:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <vPortFree+0xf0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a06      	ldr	r2, [pc, #24]	@ (8004934 <vPortFree+0xf0>)
 800491a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800491c:	f7fe faca 	bl	8002eb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004920:	bf00      	nop
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000260 	.word	0x20000260
 800492c:	20012e5f 	.word	0x20012e5f
 8004930:	20012e6c 	.word	0x20012e6c
 8004934:	20012e78 	.word	0x20012e78

08004938 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800493e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004942:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004944:	4b24      	ldr	r3, [pc, #144]	@ (80049d8 <prvHeapInit+0xa0>)
 8004946:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3307      	adds	r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <prvHeapInit+0xa0>)
 8004968:	4413      	add	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <prvHeapInit+0xa4>)
 8004970:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004972:	4b1a      	ldr	r3, [pc, #104]	@ (80049dc <prvHeapInit+0xa4>)
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4413      	add	r3, r2
 800497e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004980:	2208      	movs	r2, #8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f023 0307 	bic.w	r3, r3, #7
 800498e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <prvHeapInit+0xa8>)
 8004994:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004996:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <prvHeapInit+0xa8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800499e:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <prvHeapInit+0xa8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <prvHeapInit+0xa8>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a08      	ldr	r2, [pc, #32]	@ (80049e4 <prvHeapInit+0xac>)
 80049c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <prvHeapInit+0xb0>)
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000260 	.word	0x20000260
 80049dc:	20012e60 	.word	0x20012e60
 80049e0:	20012e68 	.word	0x20012e68
 80049e4:	20012e70 	.word	0x20012e70
 80049e8:	20012e6c 	.word	0x20012e6c

080049ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <prvInsertBlockIntoFreeList+0xe4>)
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e002      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x14>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d8f7      	bhi.n	80049fa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <prvInsertBlockIntoFreeList+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <prvInsertBlockIntoFreeList+0xe8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d305      	bcc.n	8004a26 <prvInsertBlockIntoFreeList+0x3a>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad8 <prvInsertBlockIntoFreeList+0xec>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d801      	bhi.n	8004a26 <prvInsertBlockIntoFreeList+0x3a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <prvInsertBlockIntoFreeList+0x3c>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60fb      	str	r3, [r7, #12]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d108      	bne.n	8004a68 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	441a      	add	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	441a      	add	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d118      	bne.n	8004aae <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <prvInsertBlockIntoFreeList+0xf0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d00d      	beq.n	8004aa4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e008      	b.n	8004ab6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <prvInsertBlockIntoFreeList+0xf0>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e003      	b.n	8004ab6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d002      	beq.n	8004ac4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20012e60 	.word	0x20012e60
 8004ad4:	20000260 	.word	0x20000260
 8004ad8:	20012e5f 	.word	0x20012e5f
 8004adc:	20012e68 	.word	0x20012e68

08004ae0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ae4:	4803      	ldr	r0, [pc, #12]	@ (8004af4 <_cbSendSystemDesc+0x14>)
 8004ae6:	f001 faad 	bl	8006044 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004aea:	4803      	ldr	r0, [pc, #12]	@ (8004af8 <_cbSendSystemDesc+0x18>)
 8004aec:	f001 faaa 	bl	8006044 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	08007638 	.word	0x08007638
 8004af8:	08007680 	.word	0x08007680

08004afc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <SEGGER_SYSVIEW_Conf+0x20>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <SEGGER_SYSVIEW_Conf+0x20>)
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b0a:	4a06      	ldr	r2, [pc, #24]	@ (8004b24 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b0c:	f000 ff20 	bl	8005950 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b10:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b14:	f000 ff60 	bl	80059d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	08004ae1 	.word	0x08004ae1
 8004b24:	0800771c 	.word	0x0800771c

08004b28 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	e033      	b.n	8004b9c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b34:	491e      	ldr	r1, [pc, #120]	@ (8004bb0 <_cbSendTaskList+0x88>)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	491a      	ldr	r1, [pc, #104]	@ (8004bb0 <_cbSendTaskList+0x88>)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	3304      	adds	r3, #4
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	4c16      	ldr	r4, [pc, #88]	@ (8004bb0 <_cbSendTaskList+0x88>)
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4423      	add	r3, r4
 8004b64:	3308      	adds	r3, #8
 8004b66:	681c      	ldr	r4, [r3, #0]
 8004b68:	4d11      	ldr	r5, [pc, #68]	@ (8004bb0 <_cbSendTaskList+0x88>)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	442b      	add	r3, r5
 8004b76:	330c      	adds	r3, #12
 8004b78:	681d      	ldr	r5, [r3, #0]
 8004b7a:	4e0d      	ldr	r6, [pc, #52]	@ (8004bb0 <_cbSendTaskList+0x88>)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4433      	add	r3, r6
 8004b88:	3310      	adds	r3, #16
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	462b      	mov	r3, r5
 8004b90:	4622      	mov	r2, r4
 8004b92:	f000 f8bd 	bl	8004d10 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <_cbSendTaskList+0x8c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3c6      	bcc.n	8004b34 <_cbSendTaskList+0xc>
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb0:	20012e7c 	.word	0x20012e7c
 8004bb4:	20012f1c 	.word	0x20012f1c

08004bb8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bc0:	f7fe fa8c 	bl	80030dc <xTaskGetTickCountFromISR>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	469a      	mov	sl, r3
 8004bca:	4693      	mov	fp, r2
 8004bcc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	f04f 0a00 	mov.w	sl, #0
 8004bdc:	f04f 0b00 	mov.w	fp, #0
 8004be0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004be4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004be8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004bec:	4652      	mov	r2, sl
 8004bee:	465b      	mov	r3, fp
 8004bf0:	1a14      	subs	r4, r2, r0
 8004bf2:	eb63 0501 	sbc.w	r5, r3, r1
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	00ab      	lsls	r3, r5, #2
 8004c00:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c04:	00a2      	lsls	r2, r4, #2
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	eb14 0800 	adds.w	r8, r4, r0
 8004c0e:	eb45 0901 	adc.w	r9, r5, r1
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c40 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c4e:	2205      	movs	r2, #5
 8004c50:	492b      	ldr	r1, [pc, #172]	@ (8004d00 <SYSVIEW_AddTask+0xc0>)
 8004c52:	68b8      	ldr	r0, [r7, #8]
 8004c54:	f002 f82c 	bl	8006cb0 <memcmp>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04b      	beq.n	8004cf6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c5e:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b07      	cmp	r3, #7
 8004c64:	d903      	bls.n	8004c6e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c66:	4828      	ldr	r0, [pc, #160]	@ (8004d08 <SYSVIEW_AddTask+0xc8>)
 8004c68:	f001 fde4 	bl	8006834 <SEGGER_SYSVIEW_Warn>
    return;
 8004c6c:	e044      	b.n	8004cf8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c6e:	4b25      	ldr	r3, [pc, #148]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4926      	ldr	r1, [pc, #152]	@ (8004d0c <SYSVIEW_AddTask+0xcc>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c82:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4921      	ldr	r1, [pc, #132]	@ (8004d0c <SYSVIEW_AddTask+0xcc>)
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3304      	adds	r3, #4
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	491b      	ldr	r1, [pc, #108]	@ (8004d0c <SYSVIEW_AddTask+0xcc>)
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3308      	adds	r3, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4916      	ldr	r1, [pc, #88]	@ (8004d0c <SYSVIEW_AddTask+0xcc>)
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4910      	ldr	r1, [pc, #64]	@ (8004d0c <SYSVIEW_AddTask+0xcc>)
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cda:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a08      	ldr	r2, [pc, #32]	@ (8004d04 <SYSVIEW_AddTask+0xc4>)
 8004ce2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f80e 	bl	8004d10 <SYSVIEW_SendTaskInfo>
 8004cf4:	e000      	b.n	8004cf8 <SYSVIEW_AddTask+0xb8>
    return;
 8004cf6:	bf00      	nop

}
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	08007690 	.word	0x08007690
 8004d04:	20012f1c 	.word	0x20012f1c
 8004d08:	08007698 	.word	0x08007698
 8004d0c:	20012e7c 	.word	0x20012e7c

08004d10 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	@ 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	2218      	movs	r2, #24
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 ffd2 	bl	8006cd0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f885 	bl	8005e54 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	@ 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d5a:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <_DoInit+0xa0>)
 8004d5c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d5e:	22a8      	movs	r2, #168	@ 0xa8
 8004d60:	2100      	movs	r1, #0
 8004d62:	6838      	ldr	r0, [r7, #0]
 8004d64:	f001 ffb4 	bl	8006cd0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2203      	movs	r2, #3
 8004d72:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	4a20      	ldr	r2, [pc, #128]	@ (8004df8 <_DoInit+0xa4>)
 8004d78:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <_DoInit+0xa8>)
 8004d7e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d86:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2200      	movs	r2, #0
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <_DoInit+0xa4>)
 8004d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <_DoInit+0xac>)
 8004da4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2210      	movs	r2, #16
 8004daa:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dbe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	e00c      	b.n	8004de2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1c3 030f 	rsb	r3, r3, #15
 8004dce:	4a0d      	ldr	r2, [pc, #52]	@ (8004e04 <_DoInit+0xb0>)
 8004dd0:	5cd1      	ldrb	r1, [r2, r3]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	460a      	mov	r2, r1
 8004dda:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3301      	adds	r3, #1
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b0f      	cmp	r3, #15
 8004de6:	d9ef      	bls.n	8004dc8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004de8:	f3bf 8f5f 	dmb	sy
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20012f20 	.word	0x20012f20
 8004df8:	080076e8 	.word	0x080076e8
 8004dfc:	20012fc8 	.word	0x20012fc8
 8004e00:	200133c8 	.word	0x200133c8
 8004e04:	08007724 	.word	0x08007724

08004e08 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	@ 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e14:	2300      	movs	r3, #0
 8004e16:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d905      	bls.n	8004e38 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	e007      	b.n	8004e48 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	1acb      	subs	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3b01      	subs	r3, #1
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf28      	it	cs
 8004e56:	4613      	movcs	r3, r2
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	bf28      	it	cs
 8004e62:	4613      	movcs	r3, r2
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	6978      	ldr	r0, [r7, #20]
 8004e76:	f001 ff5f 	bl	8006d38 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	4413      	add	r3, r2
 8004e80:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	4413      	add	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	4413      	add	r3, r2
 8004e98:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d101      	bne.n	8004ea8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ea8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1b2      	bne.n	8004e1e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3728      	adds	r7, #40	@ 0x28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d911      	bls.n	8004f0a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	6938      	ldr	r0, [r7, #16]
 8004ef6:	f001 ff1f 	bl	8006d38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004efa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f08:	e01f      	b.n	8004f4a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6938      	ldr	r0, [r7, #16]
 8004f1e:	f001 ff0b 	bl	8006d38 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4413      	add	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f001 fefc 	bl	8006d38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	60da      	str	r2, [r3, #12]
}
 8004f4a:	bf00      	nop
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d808      	bhi.n	8004f80 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad2      	subs	r2, r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e004      	b.n	8004f8a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f8a:	697b      	ldr	r3, [r7, #20]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	@ 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80050a0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b53      	cmp	r3, #83	@ 0x53
 8004fb0:	d001      	beq.n	8004fb6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fb2:	f7ff fecf 	bl	8004d54 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	4613      	mov	r3, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4a37      	ldr	r2, [pc, #220]	@ (80050a0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d92b      	bls.n	800503c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf28      	it	cs
 8004ff6:	4613      	movcs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800500a:	f001 fe95 	bl	8006d38 <memcpy>
    NumBytesRead += NumBytesRem;
 800500e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005034:	429a      	cmp	r2, r3
 8005036:	d101      	bne.n	800503c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	bf28      	it	cs
 800504c:	4613      	movcs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6939      	ldr	r1, [r7, #16]
 8005064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005066:	f001 fe67 	bl	8006d38 <memcpy>
    NumBytesRead += NumBytesRem;
 800506a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005094:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005098:	4618      	mov	r0, r3
 800509a:	3730      	adds	r7, #48	@ 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20012f20 	.word	0x20012f20

080050a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	@ 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050b0:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <SEGGER_RTT_ReadNoLock+0x108>)
 80050b2:	623b      	str	r3, [r7, #32]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b53      	cmp	r3, #83	@ 0x53
 80050bc:	d001      	beq.n	80050c2 <SEGGER_RTT_ReadNoLock+0x1e>
 80050be:	f7ff fe49 	bl	8004d54 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3360      	adds	r3, #96	@ 0x60
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <SEGGER_RTT_ReadNoLock+0x108>)
 80050d0:	4413      	add	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050e4:	2300      	movs	r3, #0
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d92b      	bls.n	8005148 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4293      	cmp	r3, r2
 8005100:	bf28      	it	cs
 8005102:	4613      	movcs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	4413      	add	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	6939      	ldr	r1, [r7, #16]
 8005114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005116:	f001 fe0f 	bl	8006d38 <memcpy>
    NumBytesRead += NumBytesRem;
 800511a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4413      	add	r3, r2
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005140:	429a      	cmp	r2, r3
 8005142:	d101      	bne.n	8005148 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005144:	2300      	movs	r3, #0
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4293      	cmp	r3, r2
 8005156:	bf28      	it	cs
 8005158:	4613      	movcs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d019      	beq.n	8005196 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	4413      	add	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	6939      	ldr	r1, [r7, #16]
 8005170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005172:	f001 fde1 	bl	8006d38 <memcpy>
    NumBytesRead += NumBytesRem;
 8005176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800517e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800518e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3730      	adds	r7, #48	@ 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20012f20 	.word	0x20012f20

080051b0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	3360      	adds	r3, #96	@ 0x60
 80051cc:	4a1f      	ldr	r2, [pc, #124]	@ (800524c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80051ce:	4413      	add	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d029      	beq.n	800522e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d82e      	bhi.n	800523c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d013      	beq.n	800520e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80051e6:	e029      	b.n	800523c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	f7ff feb2 	bl	8004f52 <_GetAvailWriteSpace>
 80051ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d202      	bcs.n	80051fe <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80051fc:	e021      	b.n	8005242 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f7ff fe5b 	bl	8004ec2 <_WriteNoCheck>
    break;
 800520c:	e019      	b.n	8005242 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff fe9f 	bl	8004f52 <_GetAvailWriteSpace>
 8005214:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4293      	cmp	r3, r2
 800521c:	bf28      	it	cs
 800521e:	4613      	movcs	r3, r2
 8005220:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f7ff fe4b 	bl	8004ec2 <_WriteNoCheck>
    break;
 800522c:	e009      	b.n	8005242 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff fde8 	bl	8004e08 <_WriteBlocking>
 8005238:	61f8      	str	r0, [r7, #28]
    break;
 800523a:	e002      	b.n	8005242 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
    break;
 8005240:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005242:	69fb      	ldr	r3, [r7, #28]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20012f20 	.word	0x20012f20

08005250 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800525c:	4b0e      	ldr	r3, [pc, #56]	@ (8005298 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b53      	cmp	r3, #83	@ 0x53
 8005268:	d001      	beq.n	800526e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800526a:	f7ff fd73 	bl	8004d54 <_DoInit>
  SEGGER_RTT_LOCK();
 800526e:	f3ef 8311 	mrs	r3, BASEPRI
 8005272:	f04f 0120 	mov.w	r1, #32
 8005276:	f381 8811 	msr	BASEPRI, r1
 800527a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff ff95 	bl	80051b0 <SEGGER_RTT_WriteDownBufferNoLock>
 8005286:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800528e:	697b      	ldr	r3, [r7, #20]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20012f20 	.word	0x20012f20

0800529c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052aa:	4b3d      	ldr	r3, [pc, #244]	@ (80053a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b53      	cmp	r3, #83	@ 0x53
 80052b6:	d001      	beq.n	80052bc <SEGGER_RTT_AllocUpBuffer+0x20>
 80052b8:	f7ff fd4c 	bl	8004d54 <_DoInit>
  SEGGER_RTT_LOCK();
 80052bc:	f3ef 8311 	mrs	r3, BASEPRI
 80052c0:	f04f 0120 	mov.w	r1, #32
 80052c4:	f381 8811 	msr	BASEPRI, r1
 80052c8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ca:	4b35      	ldr	r3, [pc, #212]	@ (80053a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052cc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052d2:	6939      	ldr	r1, [r7, #16]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3304      	adds	r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	dbeb      	blt.n	80052d2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80052fa:	e000      	b.n	80052fe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80052fc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	429a      	cmp	r2, r3
 8005306:	da3f      	bge.n	8005388 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005308:	6939      	ldr	r1, [r7, #16]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800531c:	6939      	ldr	r1, [r7, #16]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	4613      	mov	r3, r2
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	3304      	adds	r3, #4
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005332:	6939      	ldr	r1, [r7, #16]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	3320      	adds	r3, #32
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	3328      	adds	r3, #40	@ 0x28
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	3324      	adds	r3, #36	@ 0x24
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800536e:	6939      	ldr	r1, [r7, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	440b      	add	r3, r1
 800537c:	332c      	adds	r3, #44	@ 0x2c
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005382:	f3bf 8f5f 	dmb	sy
 8005386:	e002      	b.n	800538e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005394:	69fb      	ldr	r3, [r7, #28]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20012f20 	.word	0x20012f20

080053a4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	@ 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053b2:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b53      	cmp	r3, #83	@ 0x53
 80053be:	d001      	beq.n	80053c4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053c0:	f7ff fcc8 	bl	8004d54 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053c6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d82c      	bhi.n	8005428 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053ce:	f3ef 8311 	mrs	r3, BASEPRI
 80053d2:	f04f 0120 	mov.w	r1, #32
 80053d6:	f381 8811 	msr	BASEPRI, r1
 80053da:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	3360      	adds	r3, #96	@ 0x60
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005416:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005418:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	e002      	b.n	800542e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20012f20 	.word	0x20012f20

0800543c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	60fa      	str	r2, [r7, #12]
 8005452:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d90a      	bls.n	8005470 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800545e:	e007      	b.n	8005470 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	1c53      	adds	r3, r2, #1
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1c59      	adds	r1, r3, #1
 800546a:	60f9      	str	r1, [r7, #12]
 800546c:	7812      	ldrb	r2, [r2, #0]
 800546e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <_EncodeStr+0x46>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1ee      	bne.n	8005460 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	b2da      	uxtb	r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3307      	adds	r3, #7
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ba:	4b34      	ldr	r3, [pc, #208]	@ (800558c <_HandleIncomingPacket+0xd8>)
 80054bc:	7e1b      	ldrb	r3, [r3, #24]
 80054be:	4618      	mov	r0, r3
 80054c0:	1cfb      	adds	r3, r7, #3
 80054c2:	2201      	movs	r2, #1
 80054c4:	4619      	mov	r1, r3
 80054c6:	f7ff fded 	bl	80050a4 <SEGGER_RTT_ReadNoLock>
 80054ca:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d057      	beq.n	8005582 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	2b80      	cmp	r3, #128	@ 0x80
 80054d6:	d031      	beq.n	800553c <_HandleIncomingPacket+0x88>
 80054d8:	2b80      	cmp	r3, #128	@ 0x80
 80054da:	dc40      	bgt.n	800555e <_HandleIncomingPacket+0xaa>
 80054dc:	2b07      	cmp	r3, #7
 80054de:	dc15      	bgt.n	800550c <_HandleIncomingPacket+0x58>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dd3c      	ble.n	800555e <_HandleIncomingPacket+0xaa>
 80054e4:	3b01      	subs	r3, #1
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d839      	bhi.n	800555e <_HandleIncomingPacket+0xaa>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <_HandleIncomingPacket+0x3c>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005513 	.word	0x08005513
 80054f4:	08005519 	.word	0x08005519
 80054f8:	0800551f 	.word	0x0800551f
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552b 	.word	0x0800552b
 8005504:	08005531 	.word	0x08005531
 8005508:	08005537 	.word	0x08005537
 800550c:	2b7f      	cmp	r3, #127	@ 0x7f
 800550e:	d033      	beq.n	8005578 <_HandleIncomingPacket+0xc4>
 8005510:	e025      	b.n	800555e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005512:	f000 fb25 	bl	8005b60 <SEGGER_SYSVIEW_Start>
      break;
 8005516:	e034      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005518:	f000 fbdc 	bl	8005cd4 <SEGGER_SYSVIEW_Stop>
      break;
 800551c:	e031      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800551e:	f000 fdb5 	bl	800608c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005522:	e02e      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005524:	f000 fd7a 	bl	800601c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005528:	e02b      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800552a:	f000 fbf9 	bl	8005d20 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800552e:	e028      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005530:	f001 f8e6 	bl	8006700 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005534:	e025      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005536:	f001 f8c5 	bl	80066c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800553a:	e022      	b.n	8005582 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800553c:	4b13      	ldr	r3, [pc, #76]	@ (800558c <_HandleIncomingPacket+0xd8>)
 800553e:	7e1b      	ldrb	r3, [r3, #24]
 8005540:	4618      	mov	r0, r3
 8005542:	1cfb      	adds	r3, r7, #3
 8005544:	2201      	movs	r2, #1
 8005546:	4619      	mov	r1, r3
 8005548:	f7ff fdac 	bl	80050a4 <SEGGER_RTT_ReadNoLock>
 800554c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f82a 	bl	80065b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800555c:	e00e      	b.n	800557c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	b25b      	sxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	da0c      	bge.n	8005580 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <_HandleIncomingPacket+0xd8>)
 8005568:	7e1b      	ldrb	r3, [r3, #24]
 800556a:	4618      	mov	r0, r3
 800556c:	1cfb      	adds	r3, r7, #3
 800556e:	2201      	movs	r2, #1
 8005570:	4619      	mov	r1, r3
 8005572:	f7ff fd97 	bl	80050a4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005576:	e003      	b.n	8005580 <_HandleIncomingPacket+0xcc>
      break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <_HandleIncomingPacket+0xce>
      break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <_HandleIncomingPacket+0xce>
      break;
 8005580:	bf00      	nop
    }
  }
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200143e0 	.word	0x200143e0

08005590 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005596:	2301      	movs	r3, #1
 8005598:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a4:	4b31      	ldr	r3, [pc, #196]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055aa:	e00b      	b.n	80055c4 <_TrySendOverflowPacket+0x34>
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	09db      	lsrs	r3, r3, #7
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c8:	d8f0      	bhi.n	80055ac <_TrySendOverflowPacket+0x1c>
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055da:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <_TrySendOverflowPacket+0xe0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055e0:	4b22      	ldr	r3, [pc, #136]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	e00b      	b.n	800560c <_TrySendOverflowPacket+0x7c>
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80055fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005610:	d8f0      	bhi.n	80055f4 <_TrySendOverflowPacket+0x64>
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	627a      	str	r2, [r7, #36]	@ 0x24
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005622:	4b12      	ldr	r3, [pc, #72]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	4618      	mov	r0, r3
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	461a      	mov	r2, r3
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	4619      	mov	r1, r3
 8005634:	f7fa fdec 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005638:	4603      	mov	r3, r0
 800563a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005642:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005648:	4b08      	ldr	r3, [pc, #32]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	3b01      	subs	r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e004      	b.n	8005660 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005656:	4b05      	ldr	r3, [pc, #20]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	3301      	adds	r3, #1
 800565c:	4a03      	ldr	r2, [pc, #12]	@ (800566c <_TrySendOverflowPacket+0xdc>)
 800565e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005660:	693b      	ldr	r3, [r7, #16]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3730      	adds	r7, #48	@ 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200143e0 	.word	0x200143e0
 8005670:	e0001004 	.word	0xe0001004

08005674 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005680:	4b98      	ldr	r3, [pc, #608]	@ (80058e4 <_SendPacket+0x270>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d010      	beq.n	80056aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005688:	4b96      	ldr	r3, [pc, #600]	@ (80058e4 <_SendPacket+0x270>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 812d 	beq.w	80058ec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005692:	4b94      	ldr	r3, [pc, #592]	@ (80058e4 <_SendPacket+0x270>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d109      	bne.n	80056ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800569a:	f7ff ff79 	bl	8005590 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800569e:	4b91      	ldr	r3, [pc, #580]	@ (80058e4 <_SendPacket+0x270>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	f040 8124 	bne.w	80058f0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80056a8:	e001      	b.n	80056ae <_SendPacket+0x3a>
    goto Send;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <_SendPacket+0x3c>
Send:
 80056ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b1f      	cmp	r3, #31
 80056b4:	d809      	bhi.n	80056ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056b6:	4b8b      	ldr	r3, [pc, #556]	@ (80058e4 <_SendPacket+0x270>)
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 8115 	bne.w	80058f4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b17      	cmp	r3, #23
 80056ce:	d807      	bhi.n	80056e0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e0c4      	b.n	800586a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ec:	d912      	bls.n	8005714 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	09da      	lsrs	r2, r3, #7
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	3a01      	subs	r2, #1
 8005706:	60fa      	str	r2, [r7, #12]
 8005708:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e006      	b.n	8005722 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3b01      	subs	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b7e      	cmp	r3, #126	@ 0x7e
 8005726:	d807      	bhi.n	8005738 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e098      	b.n	800586a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800573e:	d212      	bcs.n	8005766 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	09da      	lsrs	r2, r3, #7
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	3a01      	subs	r2, #1
 8005758:	60fa      	str	r2, [r7, #12]
 800575a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e081      	b.n	800586a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800576c:	d21d      	bcs.n	80057aa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0b9a      	lsrs	r2, r3, #14
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3b01      	subs	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	09db      	lsrs	r3, r3, #7
 8005782:	b2db      	uxtb	r3, r3
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	3a01      	subs	r2, #1
 8005788:	60fa      	str	r2, [r7, #12]
 800578a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	3a01      	subs	r2, #1
 800579c:	60fa      	str	r2, [r7, #12]
 800579e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e05f      	b.n	800586a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b0:	d228      	bcs.n	8005804 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0d5a      	lsrs	r2, r3, #21
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0b9b      	lsrs	r3, r3, #14
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	3a01      	subs	r2, #1
 80057cc:	60fa      	str	r2, [r7, #12]
 80057ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	09db      	lsrs	r3, r3, #7
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	60fa      	str	r2, [r7, #12]
 80057e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	3a01      	subs	r2, #1
 80057f6:	60fa      	str	r2, [r7, #12]
 80057f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e032      	b.n	800586a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0f1a      	lsrs	r2, r3, #28
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b01      	subs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0d5b      	lsrs	r3, r3, #21
 8005818:	b2db      	uxtb	r3, r3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	3a01      	subs	r2, #1
 800581e:	60fa      	str	r2, [r7, #12]
 8005820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0b9b      	lsrs	r3, r3, #14
 800582e:	b2db      	uxtb	r3, r3
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	3a01      	subs	r2, #1
 8005834:	60fa      	str	r2, [r7, #12]
 8005836:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	09db      	lsrs	r3, r3, #7
 8005844:	b2db      	uxtb	r3, r3
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	3a01      	subs	r2, #1
 800584a:	60fa      	str	r2, [r7, #12]
 800584c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	3a01      	subs	r2, #1
 800585e:	60fa      	str	r2, [r7, #12]
 8005860:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800586a:	4b1f      	ldr	r3, [pc, #124]	@ (80058e8 <_SendPacket+0x274>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005870:	4b1c      	ldr	r3, [pc, #112]	@ (80058e4 <_SendPacket+0x270>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	e00b      	b.n	800589c <_SendPacket+0x228>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	6279      	str	r1, [r7, #36]	@ 0x24
 800588e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a0:	d8f0      	bhi.n	8005884 <_SendPacket+0x210>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058b2:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <_SendPacket+0x270>)
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	4618      	mov	r0, r3
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	f7fa fca5 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058c6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058ce:	4a05      	ldr	r2, [pc, #20]	@ (80058e4 <_SendPacket+0x270>)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	60d3      	str	r3, [r2, #12]
 80058d4:	e00f      	b.n	80058f6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058d6:	4b03      	ldr	r3, [pc, #12]	@ (80058e4 <_SendPacket+0x270>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4b01      	ldr	r3, [pc, #4]	@ (80058e4 <_SendPacket+0x270>)
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e008      	b.n	80058f6 <_SendPacket+0x282>
 80058e4:	200143e0 	.word	0x200143e0
 80058e8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <_SendPacket+0x282>
      goto SendDone;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <_SendPacket+0x282>
      goto SendDone;
 80058f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058f6:	4b14      	ldr	r3, [pc, #80]	@ (8005948 <_SendPacket+0x2d4>)
 80058f8:	7e1b      	ldrb	r3, [r3, #24]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <_SendPacket+0x2d8>)
 80058fe:	460b      	mov	r3, r1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	440b      	add	r3, r1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	336c      	adds	r3, #108	@ 0x6c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <_SendPacket+0x2d4>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4618      	mov	r0, r3
 8005912:	490e      	ldr	r1, [pc, #56]	@ (800594c <_SendPacket+0x2d8>)
 8005914:	4603      	mov	r3, r0
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4403      	add	r3, r0
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3370      	adds	r3, #112	@ 0x70
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d00b      	beq.n	800593e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005926:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <_SendPacket+0x2d4>)
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <_SendPacket+0x2d4>)
 8005930:	2201      	movs	r2, #1
 8005932:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005934:	f7ff fdbe 	bl	80054b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <_SendPacket+0x2d4>)
 800593a:	2200      	movs	r2, #0
 800593c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200143e0 	.word	0x200143e0
 800594c:	20012f20 	.word	0x20012f20

08005950 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800595e:	2300      	movs	r3, #0
 8005960:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005964:	4917      	ldr	r1, [pc, #92]	@ (80059c4 <SEGGER_SYSVIEW_Init+0x74>)
 8005966:	4818      	ldr	r0, [pc, #96]	@ (80059c8 <SEGGER_SYSVIEW_Init+0x78>)
 8005968:	f7ff fc98 	bl	800529c <SEGGER_RTT_AllocUpBuffer>
 800596c:	4603      	mov	r3, r0
 800596e:	b2da      	uxtb	r2, r3
 8005970:	4b16      	ldr	r3, [pc, #88]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005972:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005974:	4b15      	ldr	r3, [pc, #84]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005976:	785a      	ldrb	r2, [r3, #1]
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 800597a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800597c:	4b13      	ldr	r3, [pc, #76]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 800597e:	7e1b      	ldrb	r3, [r3, #24]
 8005980:	4618      	mov	r0, r3
 8005982:	2300      	movs	r3, #0
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2308      	movs	r3, #8
 8005988:	4a11      	ldr	r2, [pc, #68]	@ (80059d0 <SEGGER_SYSVIEW_Init+0x80>)
 800598a:	490f      	ldr	r1, [pc, #60]	@ (80059c8 <SEGGER_SYSVIEW_Init+0x78>)
 800598c:	f7ff fd0a 	bl	80053a4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005990:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005996:	4b0f      	ldr	r3, [pc, #60]	@ (80059d4 <SEGGER_SYSVIEW_Init+0x84>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a0c      	ldr	r2, [pc, #48]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 800599c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800599e:	4a0b      	ldr	r2, [pc, #44]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80059a4:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80059aa:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80059b0:	4a06      	ldr	r2, [pc, #24]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80059b6:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <SEGGER_SYSVIEW_Init+0x7c>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200133d8 	.word	0x200133d8
 80059c8:	080076fc 	.word	0x080076fc
 80059cc:	200143e0 	.word	0x200143e0
 80059d0:	200143d8 	.word	0x200143d8
 80059d4:	e0001004 	.word	0xe0001004

080059d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80059e0:	4a04      	ldr	r2, [pc, #16]	@ (80059f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6113      	str	r3, [r2, #16]
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	200143e0 	.word	0x200143e0

080059f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a00:	f3ef 8311 	mrs	r3, BASEPRI
 8005a04:	f04f 0120 	mov.w	r1, #32
 8005a08:	f381 8811 	msr	BASEPRI, r1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	4808      	ldr	r0, [pc, #32]	@ (8005a30 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005a10:	f7ff fd44 	bl	800549c <_PreparePacket>
 8005a14:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68b8      	ldr	r0, [r7, #8]
 8005a1c:	f7ff fe2a 	bl	8005674 <_SendPacket>
  RECORD_END();
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f383 8811 	msr	BASEPRI, r3
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20014410 	.word	0x20014410

08005a34 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a42:	f04f 0120 	mov.w	r1, #32
 8005a46:	f381 8811 	msr	BASEPRI, r1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	4816      	ldr	r0, [pc, #88]	@ (8005aa8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005a4e:	f7ff fd25 	bl	800549c <_PreparePacket>
 8005a52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e00b      	b.n	8005a7a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	1c59      	adds	r1, r3, #1
 8005a6a:	61f9      	str	r1, [r7, #28]
 8005a6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	09db      	lsrs	r3, r3, #7
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7e:	d8f0      	bhi.n	8005a62 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	61fa      	str	r2, [r7, #28]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	6938      	ldr	r0, [r7, #16]
 8005a96:	f7ff fded 	bl	8005674 <_SendPacket>
  RECORD_END();
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f383 8811 	msr	BASEPRI, r3
}
 8005aa0:	bf00      	nop
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20014410 	.word	0x20014410

08005aac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	@ 0x30
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8005abc:	f04f 0120 	mov.w	r1, #32
 8005ac0:	f381 8811 	msr	BASEPRI, r1
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	4825      	ldr	r0, [pc, #148]	@ (8005b5c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005ac8:	f7ff fce8 	bl	800549c <_PreparePacket>
 8005acc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ada:	e00b      	b.n	8005af4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	1c59      	adds	r1, r3, #1
 8005ae4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ae6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	09db      	lsrs	r3, r3, #7
 8005af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005af8:	d8f0      	bhi.n	8005adc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b08:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	e00b      	b.n	8005b2c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	1c59      	adds	r1, r3, #1
 8005b1c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	09db      	lsrs	r3, r3, #7
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b30:	d8f0      	bhi.n	8005b14 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	69b8      	ldr	r0, [r7, #24]
 8005b48:	f7ff fd94 	bl	8005674 <_SendPacket>
  RECORD_END();
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f383 8811 	msr	BASEPRI, r3
}
 8005b52:	bf00      	nop
 8005b54:	3730      	adds	r7, #48	@ 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20014410 	.word	0x20014410

08005b60 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	@ 0x30
 8005b64:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b66:	4b58      	ldr	r3, [pc, #352]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b70:	f04f 0120 	mov.w	r1, #32
 8005b74:	f381 8811 	msr	BASEPRI, r1
 8005b78:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b7a:	4b53      	ldr	r3, [pc, #332]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4952      	ldr	r1, [pc, #328]	@ (8005ccc <SEGGER_SYSVIEW_Start+0x16c>)
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fa fb44 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b8e:	200a      	movs	r0, #10
 8005b90:	f7ff ff32 	bl	80059f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b94:	f3ef 8311 	mrs	r3, BASEPRI
 8005b98:	f04f 0120 	mov.w	r1, #32
 8005b9c:	f381 8811 	msr	BASEPRI, r1
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	484b      	ldr	r0, [pc, #300]	@ (8005cd0 <SEGGER_SYSVIEW_Start+0x170>)
 8005ba4:	f7ff fc7a 	bl	800549c <_PreparePacket>
 8005ba8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb2:	4b45      	ldr	r3, [pc, #276]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb8:	e00b      	b.n	8005bd2 <SEGGER_SYSVIEW_Start+0x72>
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <SEGGER_SYSVIEW_Start+0x5a>
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bec:	4b36      	ldr	r3, [pc, #216]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	e00b      	b.n	8005c0c <SEGGER_SYSVIEW_Start+0xac>
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	09db      	lsrs	r3, r3, #7
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c10:	d8f0      	bhi.n	8005bf4 <SEGGER_SYSVIEW_Start+0x94>
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	4b28      	ldr	r3, [pc, #160]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e00b      	b.n	8005c46 <SEGGER_SYSVIEW_Start+0xe6>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	61f9      	str	r1, [r7, #28]
 8005c38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	09db      	lsrs	r3, r3, #7
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c4a:	d8f0      	bhi.n	8005c2e <SEGGER_SYSVIEW_Start+0xce>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	61fa      	str	r2, [r7, #28]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e00b      	b.n	8005c7e <SEGGER_SYSVIEW_Start+0x11e>
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	6179      	str	r1, [r7, #20]
 8005c70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	09db      	lsrs	r3, r3, #7
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c82:	d8f0      	bhi.n	8005c66 <SEGGER_SYSVIEW_Start+0x106>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	617a      	str	r2, [r7, #20]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c94:	2218      	movs	r2, #24
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fceb 	bl	8005674 <_SendPacket>
      RECORD_END();
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ca4:	4b08      	ldr	r3, [pc, #32]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <SEGGER_SYSVIEW_Start+0x168>)
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005cb2:	f000 f9eb 	bl	800608c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005cb6:	f000 f9b1 	bl	800601c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cba:	f000 fd21 	bl	8006700 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005cbe:	bf00      	nop
 8005cc0:	3730      	adds	r7, #48	@ 0x30
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200143e0 	.word	0x200143e0
 8005ccc:	08007738 	.word	0x08007738
 8005cd0:	20014410 	.word	0x20014410

08005cd4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cda:	f3ef 8311 	mrs	r3, BASEPRI
 8005cde:	f04f 0120 	mov.w	r1, #32
 8005ce2:	f381 8811 	msr	BASEPRI, r1
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	480b      	ldr	r0, [pc, #44]	@ (8005d18 <SEGGER_SYSVIEW_Stop+0x44>)
 8005cea:	f7ff fbd7 	bl	800549c <_PreparePacket>
 8005cee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005cf8:	220b      	movs	r2, #11
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f7ff fcb9 	bl	8005674 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d02:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f383 8811 	msr	BASEPRI, r3
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20014410 	.word	0x20014410
 8005d1c:	200143e0 	.word	0x200143e0

08005d20 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	@ 0x30
 8005d24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d26:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2a:	f04f 0120 	mov.w	r1, #32
 8005d2e:	f381 8811 	msr	BASEPRI, r1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	4845      	ldr	r0, [pc, #276]	@ (8005e4c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d36:	f7ff fbb1 	bl	800549c <_PreparePacket>
 8005d3a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d44:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d4a:	e00b      	b.n	8005d64 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d68:	d8f0      	bhi.n	8005d4c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7e:	4b34      	ldr	r3, [pc, #208]	@ (8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	e00b      	b.n	8005d9e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005da2:	d8f0      	bhi.n	8005d86 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	4b25      	ldr	r3, [pc, #148]	@ (8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	61f9      	str	r1, [r7, #28]
 8005dca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	61fa      	str	r2, [r7, #28]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	e00b      	b.n	8005e10 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	6179      	str	r1, [r7, #20]
 8005e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	617a      	str	r2, [r7, #20]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e26:	2218      	movs	r2, #24
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	68b8      	ldr	r0, [r7, #8]
 8005e2c:	f7ff fc22 	bl	8005674 <_SendPacket>
  RECORD_END();
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e36:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e3e:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	4798      	blx	r3
  }
}
 8005e44:	bf00      	nop
 8005e46:	3730      	adds	r7, #48	@ 0x30
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20014410 	.word	0x20014410
 8005e50:	200143e0 	.word	0x200143e0

08005e54 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b092      	sub	sp, #72	@ 0x48
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e60:	f04f 0120 	mov.w	r1, #32
 8005e64:	f381 8811 	msr	BASEPRI, r1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	486a      	ldr	r0, [pc, #424]	@ (8006014 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e6c:	f7ff fb16 	bl	800549c <_PreparePacket>
 8005e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b66      	ldr	r3, [pc, #408]	@ (8006018 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e86:	e00b      	b.n	8005ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	6479      	str	r1, [r7, #68]	@ 0x44
 8005e92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9c:	09db      	lsrs	r3, r3, #7
 8005e9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ea4:	d8f0      	bhi.n	8005e88 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ec0:	e00b      	b.n	8005eda <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ede:	d8f0      	bhi.n	8005ec2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fa9f 	bl	800543c <_EncodeStr>
 8005efe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f00:	2209      	movs	r2, #9
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	6938      	ldr	r0, [r7, #16]
 8005f06:	f7ff fbb5 	bl	8005674 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b40      	ldr	r3, [pc, #256]	@ (8006018 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	6379      	str	r1, [r7, #52]	@ 0x34
 8005f2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	e00b      	b.n	8005fac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	09db      	lsrs	r3, r3, #7
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fb0:	d8f0      	bhi.n	8005f94 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e00b      	b.n	8005fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	61f9      	str	r1, [r7, #28]
 8005fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	09db      	lsrs	r3, r3, #7
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fea:	d8f0      	bhi.n	8005fce <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005ffc:	2215      	movs	r2, #21
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7ff fb37 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	bf00      	nop
 800600e:	3748      	adds	r7, #72	@ 0x48
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20014410 	.word	0x20014410
 8006018:	200143e0 	.word	0x200143e0

0800601c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006020:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006032:	4b03      	ldr	r3, [pc, #12]	@ (8006040 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4798      	blx	r3
  }
}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200143e0 	.word	0x200143e0

08006044 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800604c:	f3ef 8311 	mrs	r3, BASEPRI
 8006050:	f04f 0120 	mov.w	r1, #32
 8006054:	f381 8811 	msr	BASEPRI, r1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	480b      	ldr	r0, [pc, #44]	@ (8006088 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800605c:	f7ff fa1e 	bl	800549c <_PreparePacket>
 8006060:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006062:	2280      	movs	r2, #128	@ 0x80
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	6938      	ldr	r0, [r7, #16]
 8006068:	f7ff f9e8 	bl	800543c <_EncodeStr>
 800606c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800606e:	220e      	movs	r2, #14
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	6938      	ldr	r0, [r7, #16]
 8006074:	f7ff fafe 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20014410 	.word	0x20014410

0800608c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006092:	4b15      	ldr	r3, [pc, #84]	@ (80060e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01a      	beq.n	80060d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800609a:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d015      	beq.n	80060d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4798      	blx	r3
 80060ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	000a      	movs	r2, r1
 80060c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060c2:	4613      	mov	r3, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	4621      	mov	r1, r4
 80060c8:	200d      	movs	r0, #13
 80060ca:	f7ff fcef 	bl	8005aac <SEGGER_SYSVIEW_RecordU32x2>
 80060ce:	e006      	b.n	80060de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80060d0:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	200c      	movs	r0, #12
 80060d8:	f7ff fcac 	bl	8005a34 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200143e0 	.word	0x200143e0
 80060ec:	e0001004 	.word	0xe0001004

080060f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060f6:	f3ef 8311 	mrs	r3, BASEPRI
 80060fa:	f04f 0120 	mov.w	r1, #32
 80060fe:	f381 8811 	msr	BASEPRI, r1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	4819      	ldr	r0, [pc, #100]	@ (800616c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006106:	f7ff f9c9 	bl	800549c <_PreparePacket>
 800610a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e00b      	b.n	800613c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6179      	str	r1, [r7, #20]
 800612e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006140:	d8f0      	bhi.n	8006124 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006152:	2202      	movs	r2, #2
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	68b8      	ldr	r0, [r7, #8]
 8006158:	f7ff fa8c 	bl	8005674 <_SendPacket>
  RECORD_END();
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20014410 	.word	0x20014410
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	4807      	ldr	r0, [pc, #28]	@ (80061a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800618a:	f7ff f987 	bl	800549c <_PreparePacket>
 800618e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006190:	2203      	movs	r2, #3
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6838      	ldr	r0, [r7, #0]
 8006196:	f7ff fa6d 	bl	8005674 <_SendPacket>
  RECORD_END();
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f383 8811 	msr	BASEPRI, r3
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20014410 	.word	0x20014410

080061ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061b2:	f3ef 8311 	mrs	r3, BASEPRI
 80061b6:	f04f 0120 	mov.w	r1, #32
 80061ba:	f381 8811 	msr	BASEPRI, r1
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	4807      	ldr	r0, [pc, #28]	@ (80061e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80061c2:	f7ff f96b 	bl	800549c <_PreparePacket>
 80061c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80061c8:	2212      	movs	r2, #18
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6838      	ldr	r0, [r7, #0]
 80061ce:	f7ff fa51 	bl	8005674 <_SendPacket>
  RECORD_END();
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f383 8811 	msr	BASEPRI, r3
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20014410 	.word	0x20014410

080061e4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061ec:	f3ef 8311 	mrs	r3, BASEPRI
 80061f0:	f04f 0120 	mov.w	r1, #32
 80061f4:	f381 8811 	msr	BASEPRI, r1
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	4817      	ldr	r0, [pc, #92]	@ (8006258 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80061fc:	f7ff f94e 	bl	800549c <_PreparePacket>
 8006200:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	61f9      	str	r1, [r7, #28]
 800621a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b7f      	cmp	r3, #127	@ 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	61fa      	str	r2, [r7, #28]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800623e:	221c      	movs	r2, #28
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	6938      	ldr	r0, [r7, #16]
 8006244:	f7ff fa16 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20014410 	.word	0x20014410

0800625c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	@ 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	f04f 0120 	mov.w	r1, #32
 800626e:	f381 8811 	msr	BASEPRI, r1
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	4824      	ldr	r0, [pc, #144]	@ (8006308 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006276:	f7ff f911 	bl	800549c <_PreparePacket>
 800627a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	623b      	str	r3, [r7, #32]
 8006288:	e00b      	b.n	80062a2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	6279      	str	r1, [r7, #36]	@ 0x24
 8006294:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	09db      	lsrs	r3, r3, #7
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a6:	d8f0      	bhi.n	800628a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	61f9      	str	r1, [r7, #28]
 80062cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	61fa      	str	r2, [r7, #28]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80062f0:	221c      	movs	r2, #28
 80062f2:	68f9      	ldr	r1, [r7, #12]
 80062f4:	6938      	ldr	r0, [r7, #16]
 80062f6:	f7ff f9bd 	bl	8005674 <_SendPacket>
  RECORD_END();
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f383 8811 	msr	BASEPRI, r3
}
 8006300:	bf00      	nop
 8006302:	3728      	adds	r7, #40	@ 0x28
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20014410 	.word	0x20014410

0800630c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006312:	f3ef 8311 	mrs	r3, BASEPRI
 8006316:	f04f 0120 	mov.w	r1, #32
 800631a:	f381 8811 	msr	BASEPRI, r1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	4807      	ldr	r0, [pc, #28]	@ (8006340 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006322:	f7ff f8bb 	bl	800549c <_PreparePacket>
 8006326:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006328:	2211      	movs	r2, #17
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6838      	ldr	r0, [r7, #0]
 800632e:	f7ff f9a1 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f383 8811 	msr	BASEPRI, r3
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20014410 	.word	0x20014410

08006344 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800634c:	f3ef 8311 	mrs	r3, BASEPRI
 8006350:	f04f 0120 	mov.w	r1, #32
 8006354:	f381 8811 	msr	BASEPRI, r1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	4819      	ldr	r0, [pc, #100]	@ (80063c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800635c:	f7ff f89e 	bl	800549c <_PreparePacket>
 8006360:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006366:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e00b      	b.n	8006392 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	61f9      	str	r1, [r7, #28]
 8006384:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b7f      	cmp	r3, #127	@ 0x7f
 8006396:	d8f0      	bhi.n	800637a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	61fa      	str	r2, [r7, #28]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80063a8:	2208      	movs	r2, #8
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	6938      	ldr	r0, [r7, #16]
 80063ae:	f7ff f961 	bl	8005674 <_SendPacket>
  RECORD_END();
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f383 8811 	msr	BASEPRI, r3
}
 80063b8:	bf00      	nop
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20014410 	.word	0x20014410
 80063c4:	200143e0 	.word	0x200143e0

080063c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063d0:	f3ef 8311 	mrs	r3, BASEPRI
 80063d4:	f04f 0120 	mov.w	r1, #32
 80063d8:	f381 8811 	msr	BASEPRI, r1
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	4819      	ldr	r0, [pc, #100]	@ (8006444 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80063e0:	f7ff f85c 	bl	800549c <_PreparePacket>
 80063e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063ea:	4b17      	ldr	r3, [pc, #92]	@ (8006448 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	61f9      	str	r1, [r7, #28]
 8006408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b7f      	cmp	r3, #127	@ 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800642c:	2204      	movs	r2, #4
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f7ff f91f 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f383 8811 	msr	BASEPRI, r3
}
 800643c:	bf00      	nop
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20014410 	.word	0x20014410
 8006448:	200143e0 	.word	0x200143e0

0800644c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006454:	f3ef 8311 	mrs	r3, BASEPRI
 8006458:	f04f 0120 	mov.w	r1, #32
 800645c:	f381 8811 	msr	BASEPRI, r1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	4819      	ldr	r0, [pc, #100]	@ (80064c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006464:	f7ff f81a 	bl	800549c <_PreparePacket>
 8006468:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800646e:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	61f9      	str	r1, [r7, #28]
 800648c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b7f      	cmp	r3, #127	@ 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	61fa      	str	r2, [r7, #28]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80064b0:	2206      	movs	r2, #6
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	6938      	ldr	r0, [r7, #16]
 80064b6:	f7ff f8dd 	bl	8005674 <_SendPacket>
  RECORD_END();
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f383 8811 	msr	BASEPRI, r3
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20014410 	.word	0x20014410
 80064cc:	200143e0 	.word	0x200143e0

080064d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064da:	f3ef 8311 	mrs	r3, BASEPRI
 80064de:	f04f 0120 	mov.w	r1, #32
 80064e2:	f381 8811 	msr	BASEPRI, r1
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	4827      	ldr	r0, [pc, #156]	@ (8006588 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80064ea:	f7fe ffd7 	bl	800549c <_PreparePacket>
 80064ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064f4:	4b25      	ldr	r3, [pc, #148]	@ (800658c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e00b      	b.n	8006520 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	6279      	str	r1, [r7, #36]	@ 0x24
 8006512:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	09db      	lsrs	r3, r3, #7
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b7f      	cmp	r3, #127	@ 0x7f
 8006524:	d8f0      	bhi.n	8006508 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	627a      	str	r2, [r7, #36]	@ 0x24
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	61f9      	str	r1, [r7, #28]
 800654a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b7f      	cmp	r3, #127	@ 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	61fa      	str	r2, [r7, #28]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800656e:	2207      	movs	r2, #7
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f7ff f87e 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bf00      	nop
 8006580:	3728      	adds	r7, #40	@ 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20014410 	.word	0x20014410
 800658c:	200143e0 	.word	0x200143e0

08006590 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	1ad3      	subs	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	200143e0 	.word	0x200143e0

080065b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	@ 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80065ba:	4b40      	ldr	r3, [pc, #256]	@ (80066bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d077      	beq.n	80066b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80065c2:	4b3e      	ldr	r3, [pc, #248]	@ (80066bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80065c8:	2300      	movs	r3, #0
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065cc:	e008      	b.n	80065e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80065ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	3301      	adds	r3, #1
 80065de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d3f2      	bcc.n	80065ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80065e8:	e000      	b.n	80065ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80065ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d055      	beq.n	800669e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065f2:	f3ef 8311 	mrs	r3, BASEPRI
 80065f6:	f04f 0120 	mov.w	r1, #32
 80065fa:	f381 8811 	msr	BASEPRI, r1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	482f      	ldr	r0, [pc, #188]	@ (80066c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006602:	f7fe ff4b 	bl	800549c <_PreparePacket>
 8006606:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	e00b      	b.n	800662e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	1c59      	adds	r1, r3, #1
 800661e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006620:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	09db      	lsrs	r3, r3, #7
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	2b7f      	cmp	r3, #127	@ 0x7f
 8006632:	d8f0      	bhi.n	8006616 <SEGGER_SYSVIEW_SendModule+0x66>
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	627a      	str	r2, [r7, #36]	@ 0x24
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e00b      	b.n	8006668 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	61f9      	str	r1, [r7, #28]
 800665a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	09db      	lsrs	r3, r3, #7
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b7f      	cmp	r3, #127	@ 0x7f
 800666c:	d8f0      	bhi.n	8006650 <SEGGER_SYSVIEW_SendModule+0xa0>
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	61fa      	str	r2, [r7, #28]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2280      	movs	r2, #128	@ 0x80
 8006684:	4619      	mov	r1, r3
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fe fed8 	bl	800543c <_EncodeStr>
 800668c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800668e:	2216      	movs	r2, #22
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	6938      	ldr	r0, [r7, #16]
 8006694:	f7fe ffee 	bl	8005674 <_SendPacket>
      RECORD_END();
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4798      	blx	r3
    }
  }
}
 80066b2:	bf00      	nop
 80066b4:	3730      	adds	r7, #48	@ 0x30
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20014408 	.word	0x20014408
 80066c0:	20014410 	.word	0x20014410

080066c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80066ca:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80066d2:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f2      	bne.n	80066d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20014408 	.word	0x20014408

08006700 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006706:	f3ef 8311 	mrs	r3, BASEPRI
 800670a:	f04f 0120 	mov.w	r1, #32
 800670e:	f381 8811 	msr	BASEPRI, r1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	4817      	ldr	r0, [pc, #92]	@ (8006774 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006716:	f7fe fec1 	bl	800549c <_PreparePacket>
 800671a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	e00b      	b.n	8006744 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	6179      	str	r1, [r7, #20]
 8006736:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	09db      	lsrs	r3, r3, #7
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b7f      	cmp	r3, #127	@ 0x7f
 8006748:	d8f0      	bhi.n	800672c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	617a      	str	r2, [r7, #20]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800675a:	221b      	movs	r2, #27
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	68b8      	ldr	r0, [r7, #8]
 8006760:	f7fe ff88 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f383 8811 	msr	BASEPRI, r3
}
 800676a:	bf00      	nop
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20014410 	.word	0x20014410
 8006778:	2001440c 	.word	0x2001440c

0800677c <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006784:	f3ef 8311 	mrs	r3, BASEPRI
 8006788:	f04f 0120 	mov.w	r1, #32
 800678c:	f381 8811 	msr	BASEPRI, r1
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	4827      	ldr	r0, [pc, #156]	@ (8006830 <SEGGER_SYSVIEW_Print+0xb4>)
 8006794:	f7fe fe82 	bl	800549c <_PreparePacket>
 8006798:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f7fe fe4c 	bl	800543c <_EncodeStr>
 80067a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	2300      	movs	r3, #0
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e00b      	b.n	80067c8 <SEGGER_SYSVIEW_Print+0x4c>
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80067ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80067cc:	d8f0      	bhi.n	80067b0 <SEGGER_SYSVIEW_Print+0x34>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e00b      	b.n	8006800 <SEGGER_SYSVIEW_Print+0x84>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	1c59      	adds	r1, r3, #1
 80067f0:	61f9      	str	r1, [r7, #28]
 80067f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	09db      	lsrs	r3, r3, #7
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b7f      	cmp	r3, #127	@ 0x7f
 8006804:	d8f0      	bhi.n	80067e8 <SEGGER_SYSVIEW_Print+0x6c>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	61fa      	str	r2, [r7, #28]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006816:	221a      	movs	r2, #26
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	6938      	ldr	r0, [r7, #16]
 800681c:	f7fe ff2a 	bl	8005674 <_SendPacket>
  RECORD_END();
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f383 8811 	msr	BASEPRI, r3
}
 8006826:	bf00      	nop
 8006828:	3728      	adds	r7, #40	@ 0x28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20014410 	.word	0x20014410

08006834 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800683c:	f3ef 8311 	mrs	r3, BASEPRI
 8006840:	f04f 0120 	mov.w	r1, #32
 8006844:	f381 8811 	msr	BASEPRI, r1
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	4827      	ldr	r0, [pc, #156]	@ (80068e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800684c:	f7fe fe26 	bl	800549c <_PreparePacket>
 8006850:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006852:	2280      	movs	r2, #128	@ 0x80
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f7fe fdf0 	bl	800543c <_EncodeStr>
 800685c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
 8006862:	2301      	movs	r3, #1
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	e00b      	b.n	8006880 <SEGGER_SYSVIEW_Warn+0x4c>
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	6279      	str	r1, [r7, #36]	@ 0x24
 8006872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	623b      	str	r3, [r7, #32]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	2b7f      	cmp	r3, #127	@ 0x7f
 8006884:	d8f0      	bhi.n	8006868 <SEGGER_SYSVIEW_Warn+0x34>
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	627a      	str	r2, [r7, #36]	@ 0x24
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	2300      	movs	r3, #0
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_Warn+0x84>
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	61f9      	str	r1, [r7, #28]
 80068aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068ce:	221a      	movs	r2, #26
 80068d0:	68f9      	ldr	r1, [r7, #12]
 80068d2:	6938      	ldr	r0, [r7, #16]
 80068d4:	f7fe fece 	bl	8005674 <_SendPacket>
  RECORD_END();
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
 80068e0:	3728      	adds	r7, #40	@ 0x28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20014410 	.word	0x20014410

080068ec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80068f0:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80068f2:	7e1b      	ldrb	r3, [r3, #24]
 80068f4:	4619      	mov	r1, r3
 80068f6:	4a13      	ldr	r2, [pc, #76]	@ (8006944 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80068f8:	460b      	mov	r3, r1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	440b      	add	r3, r1
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4413      	add	r3, r2
 8006902:	336c      	adds	r3, #108	@ 0x6c
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4b0e      	ldr	r3, [pc, #56]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006908:	7e1b      	ldrb	r3, [r3, #24]
 800690a:	4618      	mov	r0, r3
 800690c:	490d      	ldr	r1, [pc, #52]	@ (8006944 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800690e:	4603      	mov	r3, r0
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4403      	add	r3, r0
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	440b      	add	r3, r1
 8006918:	3370      	adds	r3, #112	@ 0x70
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d00b      	beq.n	8006938 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006922:	789b      	ldrb	r3, [r3, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d107      	bne.n	8006938 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800692a:	2201      	movs	r2, #1
 800692c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800692e:	f7fe fdc1 	bl	80054b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006932:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006934:	2200      	movs	r2, #0
 8006936:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006938:	4b01      	ldr	r3, [pc, #4]	@ (8006940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800693a:	781b      	ldrb	r3, [r3, #0]
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200143e0 	.word	0x200143e0
 8006944:	20012f20 	.word	0x20012f20

08006948 <__NVIC_EnableIRQ>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006956:	2b00      	cmp	r3, #0
 8006958:	db0b      	blt.n	8006972 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	f003 021f 	and.w	r2, r3, #31
 8006960:	4907      	ldr	r1, [pc, #28]	@ (8006980 <__NVIC_EnableIRQ+0x38>)
 8006962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	2001      	movs	r0, #1
 800696a:	fa00 f202 	lsl.w	r2, r0, r2
 800696e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000e100 	.word	0xe000e100

08006984 <__NVIC_SetPriority>:
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	6039      	str	r1, [r7, #0]
 800698e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006994:	2b00      	cmp	r3, #0
 8006996:	db0a      	blt.n	80069ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	490c      	ldr	r1, [pc, #48]	@ (80069d0 <__NVIC_SetPriority+0x4c>)
 800699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a2:	0112      	lsls	r2, r2, #4
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	440b      	add	r3, r1
 80069a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069ac:	e00a      	b.n	80069c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	4908      	ldr	r1, [pc, #32]	@ (80069d4 <__NVIC_SetPriority+0x50>)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	3b04      	subs	r3, #4
 80069bc:	0112      	lsls	r2, r2, #4
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	440b      	add	r3, r1
 80069c2:	761a      	strb	r2, [r3, #24]
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	e000e100 	.word	0xe000e100
 80069d4:	e000ed00 	.word	0xe000ed00

080069d8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80069de:	f7ff ff85 	bl	80068ec <SEGGER_SYSVIEW_IsStarted>
 80069e2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80069ea:	f7ff f8b9 	bl	8005b60 <SEGGER_SYSVIEW_Start>
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8006a02:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <_cbOnUARTRx+0x3c>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d806      	bhi.n	8006a18 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <_cbOnUARTRx+0x3c>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <_cbOnUARTRx+0x3c>)
 8006a14:	701a      	strb	r2, [r3, #0]
    goto Done;
 8006a16:	e009      	b.n	8006a2c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8006a18:	f7ff ffde 	bl	80069d8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <_cbOnUARTRx+0x3c>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4618      	mov	r0, r3
 8006a22:	1dfb      	adds	r3, r7, #7
 8006a24:	2201      	movs	r2, #1
 8006a26:	4619      	mov	r1, r3
 8006a28:	f7fe fc12 	bl	8005250 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8006a2c:	bf00      	nop
}
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000014 	.word	0x20000014

08006a38 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8006a40:	4b14      	ldr	r3, [pc, #80]	@ (8006a94 <_cbOnUARTTx+0x5c>)
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d80f      	bhi.n	8006a68 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8006a48:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <_cbOnUARTTx+0x5c>)
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b12      	ldr	r3, [pc, #72]	@ (8006a98 <_cbOnUARTTx+0x60>)
 8006a50:	5c9a      	ldrb	r2, [r3, r2]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8006a56:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <_cbOnUARTTx+0x5c>)
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <_cbOnUARTTx+0x5c>)
 8006a60:	705a      	strb	r2, [r3, #1]
    r = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
    goto Done;
 8006a66:	e00f      	b.n	8006a88 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <_cbOnUARTTx+0x5c>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fa91 	bl	8004f98 <SEGGER_RTT_ReadUpBufferNoLock>
 8006a76:	4603      	mov	r3, r0
 8006a78:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da02      	bge.n	8006a86 <_cbOnUARTTx+0x4e>
    r = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e000      	b.n	8006a88 <_cbOnUARTTx+0x50>
  }
Done:
 8006a86:	bf00      	nop
  return r;
 8006a88:	68fb      	ldr	r3, [r7, #12]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000014 	.word	0x20000014
 8006a98:	08007744 	.word	0x08007744

08006a9c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006aa4:	4a04      	ldr	r2, [pc, #16]	@ (8006ab8 <SEGGER_UART_init+0x1c>)
 8006aa6:	4905      	ldr	r1, [pc, #20]	@ (8006abc <SEGGER_UART_init+0x20>)
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f853 	bl	8006b54 <HIF_UART_Init>
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	080069f9 	.word	0x080069f9
 8006abc:	08006a39 	.word	0x08006a39

08006ac0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8006ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8006b40 <USART2_IRQHandler+0x80>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d011      	beq.n	8006afa <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8006ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b44 <USART2_IRQHandler+0x84>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 030b 	and.w	r3, r3, #11
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006ae8:	4b17      	ldr	r3, [pc, #92]	@ (8006b48 <USART2_IRQHandler+0x88>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8006af0:	4b15      	ldr	r3, [pc, #84]	@ (8006b48 <USART2_IRQHandler+0x88>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	4610      	mov	r0, r2
 8006af8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01a      	beq.n	8006b3a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006b04:	4b11      	ldr	r3, [pc, #68]	@ (8006b4c <USART2_IRQHandler+0x8c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b4c <USART2_IRQHandler+0x8c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	1dfa      	adds	r2, r7, #7
 8006b12:	4610      	mov	r0, r2
 8006b14:	4798      	blx	r3
 8006b16:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <USART2_IRQHandler+0x90>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a0b      	ldr	r2, [pc, #44]	@ (8006b50 <USART2_IRQHandler+0x90>)
 8006b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e006      	b.n	8006b3a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006b2c:	4b04      	ldr	r3, [pc, #16]	@ (8006b40 <USART2_IRQHandler+0x80>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8006b30:	79fa      	ldrb	r2, [r7, #7]
 8006b32:	4b04      	ldr	r3, [pc, #16]	@ (8006b44 <USART2_IRQHandler+0x84>)
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e000      	b.n	8006b3a <USART2_IRQHandler+0x7a>
      return;
 8006b38:	bf00      	nop
    }
  }
}
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004404 	.word	0x40004404
 8006b48:	200144f4 	.word	0x200144f4
 8006b4c:	200144f8 	.word	0x200144f8
 8006b50:	4000440c 	.word	0x4000440c

08006b54 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8006b60:	4b2e      	ldr	r3, [pc, #184]	@ (8006c1c <HIF_UART_Init+0xc8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a2d      	ldr	r2, [pc, #180]	@ (8006c1c <HIF_UART_Init+0xc8>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b6a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8006b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8006c20 <HIF_UART_Init+0xcc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2b      	ldr	r2, [pc, #172]	@ (8006c20 <HIF_UART_Init+0xcc>)
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8006b78:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <HIF_UART_Init+0xd0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b84:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8006b8c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8006b8e:	4a25      	ldr	r2, [pc, #148]	@ (8006c24 <HIF_UART_Init+0xd0>)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8006b94:	4b24      	ldr	r3, [pc, #144]	@ (8006c28 <HIF_UART_Init+0xd4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006ba8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8006baa:	4a1f      	ldr	r2, [pc, #124]	@ (8006c28 <HIF_UART_Init+0xd4>)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <HIF_UART_Init+0xd8>)
 8006bb2:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8006bb6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <HIF_UART_Init+0xdc>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c34 <HIF_UART_Init+0xe0>)
 8006bc0:	2280      	movs	r2, #128	@ 0x80
 8006bc2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8006bca:	4a1b      	ldr	r2, [pc, #108]	@ (8006c38 <HIF_UART_Init+0xe4>)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be2:	d302      	bcc.n	8006bea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8006be4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8006be8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	4a11      	ldr	r2, [pc, #68]	@ (8006c3c <HIF_UART_Init+0xe8>)
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8006bfa:	4a11      	ldr	r2, [pc, #68]	@ (8006c40 <HIF_UART_Init+0xec>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8006c00:	4a10      	ldr	r2, [pc, #64]	@ (8006c44 <HIF_UART_Init+0xf0>)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8006c06:	2106      	movs	r1, #6
 8006c08:	2026      	movs	r0, #38	@ 0x26
 8006c0a:	f7ff febb 	bl	8006984 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8006c0e:	2026      	movs	r0, #38	@ 0x26
 8006c10:	f7ff fe9a 	bl	8006948 <__NVIC_EnableIRQ>
}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023840 	.word	0x40023840
 8006c20:	40023830 	.word	0x40023830
 8006c24:	40020020 	.word	0x40020020
 8006c28:	40020000 	.word	0x40020000
 8006c2c:	4000440c 	.word	0x4000440c
 8006c30:	40004410 	.word	0x40004410
 8006c34:	40004414 	.word	0x40004414
 8006c38:	0501bd00 	.word	0x0501bd00
 8006c3c:	40004408 	.word	0x40004408
 8006c40:	200144f4 	.word	0x200144f4
 8006c44:	200144f8 	.word	0x200144f8

08006c48 <sniprintf>:
 8006c48:	b40c      	push	{r2, r3}
 8006c4a:	b530      	push	{r4, r5, lr}
 8006c4c:	4b17      	ldr	r3, [pc, #92]	@ (8006cac <sniprintf+0x64>)
 8006c4e:	1e0c      	subs	r4, r1, #0
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	b09d      	sub	sp, #116	@ 0x74
 8006c54:	da08      	bge.n	8006c68 <sniprintf+0x20>
 8006c56:	238b      	movs	r3, #139	@ 0x8b
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	b01d      	add	sp, #116	@ 0x74
 8006c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c64:	b002      	add	sp, #8
 8006c66:	4770      	bx	lr
 8006c68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c70:	bf14      	ite	ne
 8006c72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c76:	4623      	moveq	r3, r4
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c80:	9002      	str	r0, [sp, #8]
 8006c82:	9006      	str	r0, [sp, #24]
 8006c84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c8a:	ab21      	add	r3, sp, #132	@ 0x84
 8006c8c:	a902      	add	r1, sp, #8
 8006c8e:	4628      	mov	r0, r5
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	f000 f9b3 	bl	8006ffc <_svfiprintf_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	bfbc      	itt	lt
 8006c9a:	238b      	movlt	r3, #139	@ 0x8b
 8006c9c:	602b      	strlt	r3, [r5, #0]
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	d0dd      	beq.n	8006c5e <sniprintf+0x16>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e7d9      	b.n	8006c5e <sniprintf+0x16>
 8006caa:	bf00      	nop
 8006cac:	2000001c 	.word	0x2000001c

08006cb0 <memcmp>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	3901      	subs	r1, #1
 8006cb4:	4402      	add	r2, r0
 8006cb6:	4290      	cmp	r0, r2
 8006cb8:	d101      	bne.n	8006cbe <memcmp+0xe>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e005      	b.n	8006cca <memcmp+0x1a>
 8006cbe:	7803      	ldrb	r3, [r0, #0]
 8006cc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d001      	beq.n	8006ccc <memcmp+0x1c>
 8006cc8:	1b18      	subs	r0, r3, r4
 8006cca:	bd10      	pop	{r4, pc}
 8006ccc:	3001      	adds	r0, #1
 8006cce:	e7f2      	b.n	8006cb6 <memcmp+0x6>

08006cd0 <memset>:
 8006cd0:	4402      	add	r2, r0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d100      	bne.n	8006cda <memset+0xa>
 8006cd8:	4770      	bx	lr
 8006cda:	f803 1b01 	strb.w	r1, [r3], #1
 8006cde:	e7f9      	b.n	8006cd4 <memset+0x4>

08006ce0 <__errno>:
 8006ce0:	4b01      	ldr	r3, [pc, #4]	@ (8006ce8 <__errno+0x8>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	2000001c 	.word	0x2000001c

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4d0d      	ldr	r5, [pc, #52]	@ (8006d24 <__libc_init_array+0x38>)
 8006cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8006d28 <__libc_init_array+0x3c>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8006d2c <__libc_init_array+0x40>)
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8006d30 <__libc_init_array+0x44>)
 8006d00:	f000 fc66 	bl	80075d0 <_init>
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	2600      	movs	r6, #0
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08007784 	.word	0x08007784
 8006d28:	08007784 	.word	0x08007784
 8006d2c:	08007784 	.word	0x08007784
 8006d30:	08007788 	.word	0x08007788

08006d34 <__retarget_lock_acquire_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <__retarget_lock_release_recursive>:
 8006d36:	4770      	bx	lr

08006d38 <memcpy>:
 8006d38:	440a      	add	r2, r1
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d40:	d100      	bne.n	8006d44 <memcpy+0xc>
 8006d42:	4770      	bx	lr
 8006d44:	b510      	push	{r4, lr}
 8006d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4e:	4291      	cmp	r1, r2
 8006d50:	d1f9      	bne.n	8006d46 <memcpy+0xe>
 8006d52:	bd10      	pop	{r4, pc}

08006d54 <_free_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4605      	mov	r5, r0
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d041      	beq.n	8006de0 <_free_r+0x8c>
 8006d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d60:	1f0c      	subs	r4, r1, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfb8      	it	lt
 8006d66:	18e4      	addlt	r4, r4, r3
 8006d68:	f000 f8e0 	bl	8006f2c <__malloc_lock>
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006de4 <_free_r+0x90>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	b933      	cbnz	r3, 8006d80 <_free_r+0x2c>
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	6014      	str	r4, [r2, #0]
 8006d76:	4628      	mov	r0, r5
 8006d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d7c:	f000 b8dc 	b.w	8006f38 <__malloc_unlock>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d908      	bls.n	8006d96 <_free_r+0x42>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	e7ed      	b.n	8006d72 <_free_r+0x1e>
 8006d96:	461a      	mov	r2, r3
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b10b      	cbz	r3, 8006da0 <_free_r+0x4c>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d9fa      	bls.n	8006d96 <_free_r+0x42>
 8006da0:	6811      	ldr	r1, [r2, #0]
 8006da2:	1850      	adds	r0, r2, r1
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d10b      	bne.n	8006dc0 <_free_r+0x6c>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	4401      	add	r1, r0
 8006dac:	1850      	adds	r0, r2, r1
 8006dae:	4283      	cmp	r3, r0
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	d1e0      	bne.n	8006d76 <_free_r+0x22>
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	6053      	str	r3, [r2, #4]
 8006dba:	4408      	add	r0, r1
 8006dbc:	6010      	str	r0, [r2, #0]
 8006dbe:	e7da      	b.n	8006d76 <_free_r+0x22>
 8006dc0:	d902      	bls.n	8006dc8 <_free_r+0x74>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	e7d6      	b.n	8006d76 <_free_r+0x22>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	1821      	adds	r1, r4, r0
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf04      	itt	eq
 8006dd0:	6819      	ldreq	r1, [r3, #0]
 8006dd2:	685b      	ldreq	r3, [r3, #4]
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	bf04      	itt	eq
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6054      	str	r4, [r2, #4]
 8006dde:	e7ca      	b.n	8006d76 <_free_r+0x22>
 8006de0:	bd38      	pop	{r3, r4, r5, pc}
 8006de2:	bf00      	nop
 8006de4:	20014640 	.word	0x20014640

08006de8 <sbrk_aligned>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4e0f      	ldr	r6, [pc, #60]	@ (8006e28 <sbrk_aligned+0x40>)
 8006dec:	460c      	mov	r4, r1
 8006dee:	6831      	ldr	r1, [r6, #0]
 8006df0:	4605      	mov	r5, r0
 8006df2:	b911      	cbnz	r1, 8006dfa <sbrk_aligned+0x12>
 8006df4:	f000 fba6 	bl	8007544 <_sbrk_r>
 8006df8:	6030      	str	r0, [r6, #0]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f000 fba1 	bl	8007544 <_sbrk_r>
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d103      	bne.n	8006e0e <sbrk_aligned+0x26>
 8006e06:	f04f 34ff 	mov.w	r4, #4294967295
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	1cc4      	adds	r4, r0, #3
 8006e10:	f024 0403 	bic.w	r4, r4, #3
 8006e14:	42a0      	cmp	r0, r4
 8006e16:	d0f8      	beq.n	8006e0a <sbrk_aligned+0x22>
 8006e18:	1a21      	subs	r1, r4, r0
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 fb92 	bl	8007544 <_sbrk_r>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d1f2      	bne.n	8006e0a <sbrk_aligned+0x22>
 8006e24:	e7ef      	b.n	8006e06 <sbrk_aligned+0x1e>
 8006e26:	bf00      	nop
 8006e28:	2001463c 	.word	0x2001463c

08006e2c <_malloc_r>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	1ccd      	adds	r5, r1, #3
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	4606      	mov	r6, r0
 8006e42:	db01      	blt.n	8006e48 <_malloc_r+0x1c>
 8006e44:	42a9      	cmp	r1, r5
 8006e46:	d904      	bls.n	8006e52 <_malloc_r+0x26>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f28 <_malloc_r+0xfc>
 8006e56:	f000 f869 	bl	8006f2c <__malloc_lock>
 8006e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5e:	461c      	mov	r4, r3
 8006e60:	bb44      	cbnz	r4, 8006eb4 <_malloc_r+0x88>
 8006e62:	4629      	mov	r1, r5
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7ff ffbf 	bl	8006de8 <sbrk_aligned>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	d158      	bne.n	8006f22 <_malloc_r+0xf6>
 8006e70:	f8d8 4000 	ldr.w	r4, [r8]
 8006e74:	4627      	mov	r7, r4
 8006e76:	2f00      	cmp	r7, #0
 8006e78:	d143      	bne.n	8006f02 <_malloc_r+0xd6>
 8006e7a:	2c00      	cmp	r4, #0
 8006e7c:	d04b      	beq.n	8006f16 <_malloc_r+0xea>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	4639      	mov	r1, r7
 8006e82:	4630      	mov	r0, r6
 8006e84:	eb04 0903 	add.w	r9, r4, r3
 8006e88:	f000 fb5c 	bl	8007544 <_sbrk_r>
 8006e8c:	4581      	cmp	r9, r0
 8006e8e:	d142      	bne.n	8006f16 <_malloc_r+0xea>
 8006e90:	6821      	ldr	r1, [r4, #0]
 8006e92:	1a6d      	subs	r5, r5, r1
 8006e94:	4629      	mov	r1, r5
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7ff ffa6 	bl	8006de8 <sbrk_aligned>
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d03a      	beq.n	8006f16 <_malloc_r+0xea>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	442b      	add	r3, r5
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	bb62      	cbnz	r2, 8006f08 <_malloc_r+0xdc>
 8006eae:	f8c8 7000 	str.w	r7, [r8]
 8006eb2:	e00f      	b.n	8006ed4 <_malloc_r+0xa8>
 8006eb4:	6822      	ldr	r2, [r4, #0]
 8006eb6:	1b52      	subs	r2, r2, r5
 8006eb8:	d420      	bmi.n	8006efc <_malloc_r+0xd0>
 8006eba:	2a0b      	cmp	r2, #11
 8006ebc:	d917      	bls.n	8006eee <_malloc_r+0xc2>
 8006ebe:	1961      	adds	r1, r4, r5
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	6025      	str	r5, [r4, #0]
 8006ec4:	bf18      	it	ne
 8006ec6:	6059      	strne	r1, [r3, #4]
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	bf08      	it	eq
 8006ecc:	f8c8 1000 	streq.w	r1, [r8]
 8006ed0:	5162      	str	r2, [r4, r5]
 8006ed2:	604b      	str	r3, [r1, #4]
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f82f 	bl	8006f38 <__malloc_unlock>
 8006eda:	f104 000b 	add.w	r0, r4, #11
 8006ede:	1d23      	adds	r3, r4, #4
 8006ee0:	f020 0007 	bic.w	r0, r0, #7
 8006ee4:	1ac2      	subs	r2, r0, r3
 8006ee6:	bf1c      	itt	ne
 8006ee8:	1a1b      	subne	r3, r3, r0
 8006eea:	50a3      	strne	r3, [r4, r2]
 8006eec:	e7af      	b.n	8006e4e <_malloc_r+0x22>
 8006eee:	6862      	ldr	r2, [r4, #4]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	bf0c      	ite	eq
 8006ef4:	f8c8 2000 	streq.w	r2, [r8]
 8006ef8:	605a      	strne	r2, [r3, #4]
 8006efa:	e7eb      	b.n	8006ed4 <_malloc_r+0xa8>
 8006efc:	4623      	mov	r3, r4
 8006efe:	6864      	ldr	r4, [r4, #4]
 8006f00:	e7ae      	b.n	8006e60 <_malloc_r+0x34>
 8006f02:	463c      	mov	r4, r7
 8006f04:	687f      	ldr	r7, [r7, #4]
 8006f06:	e7b6      	b.n	8006e76 <_malloc_r+0x4a>
 8006f08:	461a      	mov	r2, r3
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d1fb      	bne.n	8006f08 <_malloc_r+0xdc>
 8006f10:	2300      	movs	r3, #0
 8006f12:	6053      	str	r3, [r2, #4]
 8006f14:	e7de      	b.n	8006ed4 <_malloc_r+0xa8>
 8006f16:	230c      	movs	r3, #12
 8006f18:	6033      	str	r3, [r6, #0]
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f000 f80c 	bl	8006f38 <__malloc_unlock>
 8006f20:	e794      	b.n	8006e4c <_malloc_r+0x20>
 8006f22:	6005      	str	r5, [r0, #0]
 8006f24:	e7d6      	b.n	8006ed4 <_malloc_r+0xa8>
 8006f26:	bf00      	nop
 8006f28:	20014640 	.word	0x20014640

08006f2c <__malloc_lock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	@ (8006f34 <__malloc_lock+0x8>)
 8006f2e:	f7ff bf01 	b.w	8006d34 <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	20014638 	.word	0x20014638

08006f38 <__malloc_unlock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	@ (8006f40 <__malloc_unlock+0x8>)
 8006f3a:	f7ff befc 	b.w	8006d36 <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20014638 	.word	0x20014638

08006f44 <__ssputs_r>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	688e      	ldr	r6, [r1, #8]
 8006f4a:	461f      	mov	r7, r3
 8006f4c:	42be      	cmp	r6, r7
 8006f4e:	680b      	ldr	r3, [r1, #0]
 8006f50:	4682      	mov	sl, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	4690      	mov	r8, r2
 8006f56:	d82d      	bhi.n	8006fb4 <__ssputs_r+0x70>
 8006f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f60:	d026      	beq.n	8006fb0 <__ssputs_r+0x6c>
 8006f62:	6965      	ldr	r5, [r4, #20]
 8006f64:	6909      	ldr	r1, [r1, #16]
 8006f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f6a:	eba3 0901 	sub.w	r9, r3, r1
 8006f6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f72:	1c7b      	adds	r3, r7, #1
 8006f74:	444b      	add	r3, r9
 8006f76:	106d      	asrs	r5, r5, #1
 8006f78:	429d      	cmp	r5, r3
 8006f7a:	bf38      	it	cc
 8006f7c:	461d      	movcc	r5, r3
 8006f7e:	0553      	lsls	r3, r2, #21
 8006f80:	d527      	bpl.n	8006fd2 <__ssputs_r+0x8e>
 8006f82:	4629      	mov	r1, r5
 8006f84:	f7ff ff52 	bl	8006e2c <_malloc_r>
 8006f88:	4606      	mov	r6, r0
 8006f8a:	b360      	cbz	r0, 8006fe6 <__ssputs_r+0xa2>
 8006f8c:	6921      	ldr	r1, [r4, #16]
 8006f8e:	464a      	mov	r2, r9
 8006f90:	f7ff fed2 	bl	8006d38 <memcpy>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	6126      	str	r6, [r4, #16]
 8006fa2:	6165      	str	r5, [r4, #20]
 8006fa4:	444e      	add	r6, r9
 8006fa6:	eba5 0509 	sub.w	r5, r5, r9
 8006faa:	6026      	str	r6, [r4, #0]
 8006fac:	60a5      	str	r5, [r4, #8]
 8006fae:	463e      	mov	r6, r7
 8006fb0:	42be      	cmp	r6, r7
 8006fb2:	d900      	bls.n	8006fb6 <__ssputs_r+0x72>
 8006fb4:	463e      	mov	r6, r7
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	4632      	mov	r2, r6
 8006fba:	4641      	mov	r1, r8
 8006fbc:	f000 faa8 	bl	8007510 <memmove>
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	1b9b      	subs	r3, r3, r6
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	4433      	add	r3, r6
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	f000 fac6 	bl	8007564 <_realloc_r>
 8006fd8:	4606      	mov	r6, r0
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d1e0      	bne.n	8006fa0 <__ssputs_r+0x5c>
 8006fde:	6921      	ldr	r1, [r4, #16]
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	f7ff feb7 	bl	8006d54 <_free_r>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	f8ca 3000 	str.w	r3, [sl]
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e7e9      	b.n	8006fce <__ssputs_r+0x8a>
	...

08006ffc <_svfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	4698      	mov	r8, r3
 8007002:	898b      	ldrh	r3, [r1, #12]
 8007004:	061b      	lsls	r3, r3, #24
 8007006:	b09d      	sub	sp, #116	@ 0x74
 8007008:	4607      	mov	r7, r0
 800700a:	460d      	mov	r5, r1
 800700c:	4614      	mov	r4, r2
 800700e:	d510      	bpl.n	8007032 <_svfiprintf_r+0x36>
 8007010:	690b      	ldr	r3, [r1, #16]
 8007012:	b973      	cbnz	r3, 8007032 <_svfiprintf_r+0x36>
 8007014:	2140      	movs	r1, #64	@ 0x40
 8007016:	f7ff ff09 	bl	8006e2c <_malloc_r>
 800701a:	6028      	str	r0, [r5, #0]
 800701c:	6128      	str	r0, [r5, #16]
 800701e:	b930      	cbnz	r0, 800702e <_svfiprintf_r+0x32>
 8007020:	230c      	movs	r3, #12
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	b01d      	add	sp, #116	@ 0x74
 800702a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702e:	2340      	movs	r3, #64	@ 0x40
 8007030:	616b      	str	r3, [r5, #20]
 8007032:	2300      	movs	r3, #0
 8007034:	9309      	str	r3, [sp, #36]	@ 0x24
 8007036:	2320      	movs	r3, #32
 8007038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800703c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007040:	2330      	movs	r3, #48	@ 0x30
 8007042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071e0 <_svfiprintf_r+0x1e4>
 8007046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800704a:	f04f 0901 	mov.w	r9, #1
 800704e:	4623      	mov	r3, r4
 8007050:	469a      	mov	sl, r3
 8007052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007056:	b10a      	cbz	r2, 800705c <_svfiprintf_r+0x60>
 8007058:	2a25      	cmp	r2, #37	@ 0x25
 800705a:	d1f9      	bne.n	8007050 <_svfiprintf_r+0x54>
 800705c:	ebba 0b04 	subs.w	fp, sl, r4
 8007060:	d00b      	beq.n	800707a <_svfiprintf_r+0x7e>
 8007062:	465b      	mov	r3, fp
 8007064:	4622      	mov	r2, r4
 8007066:	4629      	mov	r1, r5
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff ff6b 	bl	8006f44 <__ssputs_r>
 800706e:	3001      	adds	r0, #1
 8007070:	f000 80a7 	beq.w	80071c2 <_svfiprintf_r+0x1c6>
 8007074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007076:	445a      	add	r2, fp
 8007078:	9209      	str	r2, [sp, #36]	@ 0x24
 800707a:	f89a 3000 	ldrb.w	r3, [sl]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 809f 	beq.w	80071c2 <_svfiprintf_r+0x1c6>
 8007084:	2300      	movs	r3, #0
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800708e:	f10a 0a01 	add.w	sl, sl, #1
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	9307      	str	r3, [sp, #28]
 8007096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800709a:	931a      	str	r3, [sp, #104]	@ 0x68
 800709c:	4654      	mov	r4, sl
 800709e:	2205      	movs	r2, #5
 80070a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a4:	484e      	ldr	r0, [pc, #312]	@ (80071e0 <_svfiprintf_r+0x1e4>)
 80070a6:	f7f9 f903 	bl	80002b0 <memchr>
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	b9d8      	cbnz	r0, 80070e6 <_svfiprintf_r+0xea>
 80070ae:	06d0      	lsls	r0, r2, #27
 80070b0:	bf44      	itt	mi
 80070b2:	2320      	movmi	r3, #32
 80070b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b8:	0711      	lsls	r1, r2, #28
 80070ba:	bf44      	itt	mi
 80070bc:	232b      	movmi	r3, #43	@ 0x2b
 80070be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070c2:	f89a 3000 	ldrb.w	r3, [sl]
 80070c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070c8:	d015      	beq.n	80070f6 <_svfiprintf_r+0xfa>
 80070ca:	9a07      	ldr	r2, [sp, #28]
 80070cc:	4654      	mov	r4, sl
 80070ce:	2000      	movs	r0, #0
 80070d0:	f04f 0c0a 	mov.w	ip, #10
 80070d4:	4621      	mov	r1, r4
 80070d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070da:	3b30      	subs	r3, #48	@ 0x30
 80070dc:	2b09      	cmp	r3, #9
 80070de:	d94b      	bls.n	8007178 <_svfiprintf_r+0x17c>
 80070e0:	b1b0      	cbz	r0, 8007110 <_svfiprintf_r+0x114>
 80070e2:	9207      	str	r2, [sp, #28]
 80070e4:	e014      	b.n	8007110 <_svfiprintf_r+0x114>
 80070e6:	eba0 0308 	sub.w	r3, r0, r8
 80070ea:	fa09 f303 	lsl.w	r3, r9, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	9304      	str	r3, [sp, #16]
 80070f2:	46a2      	mov	sl, r4
 80070f4:	e7d2      	b.n	800709c <_svfiprintf_r+0xa0>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	1d19      	adds	r1, r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	9103      	str	r1, [sp, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfbb      	ittet	lt
 8007102:	425b      	neglt	r3, r3
 8007104:	f042 0202 	orrlt.w	r2, r2, #2
 8007108:	9307      	strge	r3, [sp, #28]
 800710a:	9307      	strlt	r3, [sp, #28]
 800710c:	bfb8      	it	lt
 800710e:	9204      	strlt	r2, [sp, #16]
 8007110:	7823      	ldrb	r3, [r4, #0]
 8007112:	2b2e      	cmp	r3, #46	@ 0x2e
 8007114:	d10a      	bne.n	800712c <_svfiprintf_r+0x130>
 8007116:	7863      	ldrb	r3, [r4, #1]
 8007118:	2b2a      	cmp	r3, #42	@ 0x2a
 800711a:	d132      	bne.n	8007182 <_svfiprintf_r+0x186>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1d1a      	adds	r2, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9203      	str	r2, [sp, #12]
 8007124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007128:	3402      	adds	r4, #2
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071f0 <_svfiprintf_r+0x1f4>
 8007130:	7821      	ldrb	r1, [r4, #0]
 8007132:	2203      	movs	r2, #3
 8007134:	4650      	mov	r0, sl
 8007136:	f7f9 f8bb 	bl	80002b0 <memchr>
 800713a:	b138      	cbz	r0, 800714c <_svfiprintf_r+0x150>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	eba0 000a 	sub.w	r0, r0, sl
 8007142:	2240      	movs	r2, #64	@ 0x40
 8007144:	4082      	lsls	r2, r0
 8007146:	4313      	orrs	r3, r2
 8007148:	3401      	adds	r4, #1
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007150:	4824      	ldr	r0, [pc, #144]	@ (80071e4 <_svfiprintf_r+0x1e8>)
 8007152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007156:	2206      	movs	r2, #6
 8007158:	f7f9 f8aa 	bl	80002b0 <memchr>
 800715c:	2800      	cmp	r0, #0
 800715e:	d036      	beq.n	80071ce <_svfiprintf_r+0x1d2>
 8007160:	4b21      	ldr	r3, [pc, #132]	@ (80071e8 <_svfiprintf_r+0x1ec>)
 8007162:	bb1b      	cbnz	r3, 80071ac <_svfiprintf_r+0x1b0>
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	3307      	adds	r3, #7
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	3308      	adds	r3, #8
 800716e:	9303      	str	r3, [sp, #12]
 8007170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007172:	4433      	add	r3, r6
 8007174:	9309      	str	r3, [sp, #36]	@ 0x24
 8007176:	e76a      	b.n	800704e <_svfiprintf_r+0x52>
 8007178:	fb0c 3202 	mla	r2, ip, r2, r3
 800717c:	460c      	mov	r4, r1
 800717e:	2001      	movs	r0, #1
 8007180:	e7a8      	b.n	80070d4 <_svfiprintf_r+0xd8>
 8007182:	2300      	movs	r3, #0
 8007184:	3401      	adds	r4, #1
 8007186:	9305      	str	r3, [sp, #20]
 8007188:	4619      	mov	r1, r3
 800718a:	f04f 0c0a 	mov.w	ip, #10
 800718e:	4620      	mov	r0, r4
 8007190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007194:	3a30      	subs	r2, #48	@ 0x30
 8007196:	2a09      	cmp	r2, #9
 8007198:	d903      	bls.n	80071a2 <_svfiprintf_r+0x1a6>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0c6      	beq.n	800712c <_svfiprintf_r+0x130>
 800719e:	9105      	str	r1, [sp, #20]
 80071a0:	e7c4      	b.n	800712c <_svfiprintf_r+0x130>
 80071a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a6:	4604      	mov	r4, r0
 80071a8:	2301      	movs	r3, #1
 80071aa:	e7f0      	b.n	800718e <_svfiprintf_r+0x192>
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <_svfiprintf_r+0x1f0>)
 80071b4:	a904      	add	r1, sp, #16
 80071b6:	4638      	mov	r0, r7
 80071b8:	f3af 8000 	nop.w
 80071bc:	1c42      	adds	r2, r0, #1
 80071be:	4606      	mov	r6, r0
 80071c0:	d1d6      	bne.n	8007170 <_svfiprintf_r+0x174>
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	065b      	lsls	r3, r3, #25
 80071c6:	f53f af2d 	bmi.w	8007024 <_svfiprintf_r+0x28>
 80071ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071cc:	e72c      	b.n	8007028 <_svfiprintf_r+0x2c>
 80071ce:	ab03      	add	r3, sp, #12
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	462a      	mov	r2, r5
 80071d4:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <_svfiprintf_r+0x1f0>)
 80071d6:	a904      	add	r1, sp, #16
 80071d8:	4638      	mov	r0, r7
 80071da:	f000 f879 	bl	80072d0 <_printf_i>
 80071de:	e7ed      	b.n	80071bc <_svfiprintf_r+0x1c0>
 80071e0:	08007748 	.word	0x08007748
 80071e4:	08007752 	.word	0x08007752
 80071e8:	00000000 	.word	0x00000000
 80071ec:	08006f45 	.word	0x08006f45
 80071f0:	0800774e 	.word	0x0800774e

080071f4 <_printf_common>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	4616      	mov	r6, r2
 80071fa:	4698      	mov	r8, r3
 80071fc:	688a      	ldr	r2, [r1, #8]
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007204:	4293      	cmp	r3, r2
 8007206:	bfb8      	it	lt
 8007208:	4613      	movlt	r3, r2
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007210:	4607      	mov	r7, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b10a      	cbz	r2, 800721a <_printf_common+0x26>
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	0699      	lsls	r1, r3, #26
 800721e:	bf42      	ittt	mi
 8007220:	6833      	ldrmi	r3, [r6, #0]
 8007222:	3302      	addmi	r3, #2
 8007224:	6033      	strmi	r3, [r6, #0]
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	f015 0506 	ands.w	r5, r5, #6
 800722c:	d106      	bne.n	800723c <_printf_common+0x48>
 800722e:	f104 0a19 	add.w	sl, r4, #25
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dc26      	bgt.n	800728a <_printf_common+0x96>
 800723c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	3b00      	subs	r3, #0
 8007244:	bf18      	it	ne
 8007246:	2301      	movne	r3, #1
 8007248:	0692      	lsls	r2, r2, #26
 800724a:	d42b      	bmi.n	80072a4 <_printf_common+0xb0>
 800724c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007250:	4641      	mov	r1, r8
 8007252:	4638      	mov	r0, r7
 8007254:	47c8      	blx	r9
 8007256:	3001      	adds	r0, #1
 8007258:	d01e      	beq.n	8007298 <_printf_common+0xa4>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	6922      	ldr	r2, [r4, #16]
 800725e:	f003 0306 	and.w	r3, r3, #6
 8007262:	2b04      	cmp	r3, #4
 8007264:	bf02      	ittt	eq
 8007266:	68e5      	ldreq	r5, [r4, #12]
 8007268:	6833      	ldreq	r3, [r6, #0]
 800726a:	1aed      	subeq	r5, r5, r3
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	bf0c      	ite	eq
 8007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007274:	2500      	movne	r5, #0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfc4      	itt	gt
 800727a:	1a9b      	subgt	r3, r3, r2
 800727c:	18ed      	addgt	r5, r5, r3
 800727e:	2600      	movs	r6, #0
 8007280:	341a      	adds	r4, #26
 8007282:	42b5      	cmp	r5, r6
 8007284:	d11a      	bne.n	80072bc <_printf_common+0xc8>
 8007286:	2000      	movs	r0, #0
 8007288:	e008      	b.n	800729c <_printf_common+0xa8>
 800728a:	2301      	movs	r3, #1
 800728c:	4652      	mov	r2, sl
 800728e:	4641      	mov	r1, r8
 8007290:	4638      	mov	r0, r7
 8007292:	47c8      	blx	r9
 8007294:	3001      	adds	r0, #1
 8007296:	d103      	bne.n	80072a0 <_printf_common+0xac>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7c6      	b.n	8007232 <_printf_common+0x3e>
 80072a4:	18e1      	adds	r1, r4, r3
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	2030      	movs	r0, #48	@ 0x30
 80072aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072ae:	4422      	add	r2, r4
 80072b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072b8:	3302      	adds	r3, #2
 80072ba:	e7c7      	b.n	800724c <_printf_common+0x58>
 80072bc:	2301      	movs	r3, #1
 80072be:	4622      	mov	r2, r4
 80072c0:	4641      	mov	r1, r8
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c8      	blx	r9
 80072c6:	3001      	adds	r0, #1
 80072c8:	d0e6      	beq.n	8007298 <_printf_common+0xa4>
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7d9      	b.n	8007282 <_printf_common+0x8e>
	...

080072d0 <_printf_i>:
 80072d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	7e0f      	ldrb	r7, [r1, #24]
 80072d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072d8:	2f78      	cmp	r7, #120	@ 0x78
 80072da:	4691      	mov	r9, r2
 80072dc:	4680      	mov	r8, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	469a      	mov	sl, r3
 80072e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072e6:	d807      	bhi.n	80072f8 <_printf_i+0x28>
 80072e8:	2f62      	cmp	r7, #98	@ 0x62
 80072ea:	d80a      	bhi.n	8007302 <_printf_i+0x32>
 80072ec:	2f00      	cmp	r7, #0
 80072ee:	f000 80d2 	beq.w	8007496 <_printf_i+0x1c6>
 80072f2:	2f58      	cmp	r7, #88	@ 0x58
 80072f4:	f000 80b9 	beq.w	800746a <_printf_i+0x19a>
 80072f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007300:	e03a      	b.n	8007378 <_printf_i+0xa8>
 8007302:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007306:	2b15      	cmp	r3, #21
 8007308:	d8f6      	bhi.n	80072f8 <_printf_i+0x28>
 800730a:	a101      	add	r1, pc, #4	@ (adr r1, 8007310 <_printf_i+0x40>)
 800730c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007310:	08007369 	.word	0x08007369
 8007314:	0800737d 	.word	0x0800737d
 8007318:	080072f9 	.word	0x080072f9
 800731c:	080072f9 	.word	0x080072f9
 8007320:	080072f9 	.word	0x080072f9
 8007324:	080072f9 	.word	0x080072f9
 8007328:	0800737d 	.word	0x0800737d
 800732c:	080072f9 	.word	0x080072f9
 8007330:	080072f9 	.word	0x080072f9
 8007334:	080072f9 	.word	0x080072f9
 8007338:	080072f9 	.word	0x080072f9
 800733c:	0800747d 	.word	0x0800747d
 8007340:	080073a7 	.word	0x080073a7
 8007344:	08007437 	.word	0x08007437
 8007348:	080072f9 	.word	0x080072f9
 800734c:	080072f9 	.word	0x080072f9
 8007350:	0800749f 	.word	0x0800749f
 8007354:	080072f9 	.word	0x080072f9
 8007358:	080073a7 	.word	0x080073a7
 800735c:	080072f9 	.word	0x080072f9
 8007360:	080072f9 	.word	0x080072f9
 8007364:	0800743f 	.word	0x0800743f
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6032      	str	r2, [r6, #0]
 8007370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007374:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007378:	2301      	movs	r3, #1
 800737a:	e09d      	b.n	80074b8 <_printf_i+0x1e8>
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	6820      	ldr	r0, [r4, #0]
 8007380:	1d19      	adds	r1, r3, #4
 8007382:	6031      	str	r1, [r6, #0]
 8007384:	0606      	lsls	r6, r0, #24
 8007386:	d501      	bpl.n	800738c <_printf_i+0xbc>
 8007388:	681d      	ldr	r5, [r3, #0]
 800738a:	e003      	b.n	8007394 <_printf_i+0xc4>
 800738c:	0645      	lsls	r5, r0, #25
 800738e:	d5fb      	bpl.n	8007388 <_printf_i+0xb8>
 8007390:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007394:	2d00      	cmp	r5, #0
 8007396:	da03      	bge.n	80073a0 <_printf_i+0xd0>
 8007398:	232d      	movs	r3, #45	@ 0x2d
 800739a:	426d      	negs	r5, r5
 800739c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a0:	4859      	ldr	r0, [pc, #356]	@ (8007508 <_printf_i+0x238>)
 80073a2:	230a      	movs	r3, #10
 80073a4:	e011      	b.n	80073ca <_printf_i+0xfa>
 80073a6:	6821      	ldr	r1, [r4, #0]
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	0608      	lsls	r0, r1, #24
 80073ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80073b0:	d402      	bmi.n	80073b8 <_printf_i+0xe8>
 80073b2:	0649      	lsls	r1, r1, #25
 80073b4:	bf48      	it	mi
 80073b6:	b2ad      	uxthmi	r5, r5
 80073b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80073ba:	4853      	ldr	r0, [pc, #332]	@ (8007508 <_printf_i+0x238>)
 80073bc:	6033      	str	r3, [r6, #0]
 80073be:	bf14      	ite	ne
 80073c0:	230a      	movne	r3, #10
 80073c2:	2308      	moveq	r3, #8
 80073c4:	2100      	movs	r1, #0
 80073c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ca:	6866      	ldr	r6, [r4, #4]
 80073cc:	60a6      	str	r6, [r4, #8]
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	bfa2      	ittt	ge
 80073d2:	6821      	ldrge	r1, [r4, #0]
 80073d4:	f021 0104 	bicge.w	r1, r1, #4
 80073d8:	6021      	strge	r1, [r4, #0]
 80073da:	b90d      	cbnz	r5, 80073e0 <_printf_i+0x110>
 80073dc:	2e00      	cmp	r6, #0
 80073de:	d04b      	beq.n	8007478 <_printf_i+0x1a8>
 80073e0:	4616      	mov	r6, r2
 80073e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073e6:	fb03 5711 	mls	r7, r3, r1, r5
 80073ea:	5dc7      	ldrb	r7, [r0, r7]
 80073ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073f0:	462f      	mov	r7, r5
 80073f2:	42bb      	cmp	r3, r7
 80073f4:	460d      	mov	r5, r1
 80073f6:	d9f4      	bls.n	80073e2 <_printf_i+0x112>
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d10b      	bne.n	8007414 <_printf_i+0x144>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	07df      	lsls	r7, r3, #31
 8007400:	d508      	bpl.n	8007414 <_printf_i+0x144>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	6861      	ldr	r1, [r4, #4]
 8007406:	4299      	cmp	r1, r3
 8007408:	bfde      	ittt	le
 800740a:	2330      	movle	r3, #48	@ 0x30
 800740c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007410:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007414:	1b92      	subs	r2, r2, r6
 8007416:	6122      	str	r2, [r4, #16]
 8007418:	f8cd a000 	str.w	sl, [sp]
 800741c:	464b      	mov	r3, r9
 800741e:	aa03      	add	r2, sp, #12
 8007420:	4621      	mov	r1, r4
 8007422:	4640      	mov	r0, r8
 8007424:	f7ff fee6 	bl	80071f4 <_printf_common>
 8007428:	3001      	adds	r0, #1
 800742a:	d14a      	bne.n	80074c2 <_printf_i+0x1f2>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b004      	add	sp, #16
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f043 0320 	orr.w	r3, r3, #32
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	4833      	ldr	r0, [pc, #204]	@ (800750c <_printf_i+0x23c>)
 8007440:	2778      	movs	r7, #120	@ 0x78
 8007442:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	6831      	ldr	r1, [r6, #0]
 800744a:	061f      	lsls	r7, r3, #24
 800744c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007450:	d402      	bmi.n	8007458 <_printf_i+0x188>
 8007452:	065f      	lsls	r7, r3, #25
 8007454:	bf48      	it	mi
 8007456:	b2ad      	uxthmi	r5, r5
 8007458:	6031      	str	r1, [r6, #0]
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	bf44      	itt	mi
 800745e:	f043 0320 	orrmi.w	r3, r3, #32
 8007462:	6023      	strmi	r3, [r4, #0]
 8007464:	b11d      	cbz	r5, 800746e <_printf_i+0x19e>
 8007466:	2310      	movs	r3, #16
 8007468:	e7ac      	b.n	80073c4 <_printf_i+0xf4>
 800746a:	4827      	ldr	r0, [pc, #156]	@ (8007508 <_printf_i+0x238>)
 800746c:	e7e9      	b.n	8007442 <_printf_i+0x172>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f023 0320 	bic.w	r3, r3, #32
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	e7f6      	b.n	8007466 <_printf_i+0x196>
 8007478:	4616      	mov	r6, r2
 800747a:	e7bd      	b.n	80073f8 <_printf_i+0x128>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	6961      	ldr	r1, [r4, #20]
 8007482:	1d18      	adds	r0, r3, #4
 8007484:	6030      	str	r0, [r6, #0]
 8007486:	062e      	lsls	r6, r5, #24
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	d501      	bpl.n	8007490 <_printf_i+0x1c0>
 800748c:	6019      	str	r1, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0x1c6>
 8007490:	0668      	lsls	r0, r5, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0x1bc>
 8007494:	8019      	strh	r1, [r3, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	4616      	mov	r6, r2
 800749c:	e7bc      	b.n	8007418 <_printf_i+0x148>
 800749e:	6833      	ldr	r3, [r6, #0]
 80074a0:	1d1a      	adds	r2, r3, #4
 80074a2:	6032      	str	r2, [r6, #0]
 80074a4:	681e      	ldr	r6, [r3, #0]
 80074a6:	6862      	ldr	r2, [r4, #4]
 80074a8:	2100      	movs	r1, #0
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7f8 ff00 	bl	80002b0 <memchr>
 80074b0:	b108      	cbz	r0, 80074b6 <_printf_i+0x1e6>
 80074b2:	1b80      	subs	r0, r0, r6
 80074b4:	6060      	str	r0, [r4, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	2300      	movs	r3, #0
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c0:	e7aa      	b.n	8007418 <_printf_i+0x148>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	4632      	mov	r2, r6
 80074c6:	4649      	mov	r1, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	47d0      	blx	sl
 80074cc:	3001      	adds	r0, #1
 80074ce:	d0ad      	beq.n	800742c <_printf_i+0x15c>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	d413      	bmi.n	80074fe <_printf_i+0x22e>
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	4298      	cmp	r0, r3
 80074dc:	bfb8      	it	lt
 80074de:	4618      	movlt	r0, r3
 80074e0:	e7a6      	b.n	8007430 <_printf_i+0x160>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d09d      	beq.n	800742c <_printf_i+0x15c>
 80074f0:	3501      	adds	r5, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf2      	bgt.n	80074e2 <_printf_i+0x212>
 80074fc:	e7eb      	b.n	80074d6 <_printf_i+0x206>
 80074fe:	2500      	movs	r5, #0
 8007500:	f104 0619 	add.w	r6, r4, #25
 8007504:	e7f5      	b.n	80074f2 <_printf_i+0x222>
 8007506:	bf00      	nop
 8007508:	08007759 	.word	0x08007759
 800750c:	0800776a 	.word	0x0800776a

08007510 <memmove>:
 8007510:	4288      	cmp	r0, r1
 8007512:	b510      	push	{r4, lr}
 8007514:	eb01 0402 	add.w	r4, r1, r2
 8007518:	d902      	bls.n	8007520 <memmove+0x10>
 800751a:	4284      	cmp	r4, r0
 800751c:	4623      	mov	r3, r4
 800751e:	d807      	bhi.n	8007530 <memmove+0x20>
 8007520:	1e43      	subs	r3, r0, #1
 8007522:	42a1      	cmp	r1, r4
 8007524:	d008      	beq.n	8007538 <memmove+0x28>
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752e:	e7f8      	b.n	8007522 <memmove+0x12>
 8007530:	4402      	add	r2, r0
 8007532:	4601      	mov	r1, r0
 8007534:	428a      	cmp	r2, r1
 8007536:	d100      	bne.n	800753a <memmove+0x2a>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007542:	e7f7      	b.n	8007534 <memmove+0x24>

08007544 <_sbrk_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	@ (8007560 <_sbrk_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7f9 fae0 	bl	8000b14 <_sbrk>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_sbrk_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_sbrk_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20014634 	.word	0x20014634

08007564 <_realloc_r>:
 8007564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007568:	4680      	mov	r8, r0
 800756a:	4615      	mov	r5, r2
 800756c:	460c      	mov	r4, r1
 800756e:	b921      	cbnz	r1, 800757a <_realloc_r+0x16>
 8007570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	4611      	mov	r1, r2
 8007576:	f7ff bc59 	b.w	8006e2c <_malloc_r>
 800757a:	b92a      	cbnz	r2, 8007588 <_realloc_r+0x24>
 800757c:	f7ff fbea 	bl	8006d54 <_free_r>
 8007580:	2400      	movs	r4, #0
 8007582:	4620      	mov	r0, r4
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	f000 f81a 	bl	80075c0 <_malloc_usable_size_r>
 800758c:	4285      	cmp	r5, r0
 800758e:	4606      	mov	r6, r0
 8007590:	d802      	bhi.n	8007598 <_realloc_r+0x34>
 8007592:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007596:	d8f4      	bhi.n	8007582 <_realloc_r+0x1e>
 8007598:	4629      	mov	r1, r5
 800759a:	4640      	mov	r0, r8
 800759c:	f7ff fc46 	bl	8006e2c <_malloc_r>
 80075a0:	4607      	mov	r7, r0
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0ec      	beq.n	8007580 <_realloc_r+0x1c>
 80075a6:	42b5      	cmp	r5, r6
 80075a8:	462a      	mov	r2, r5
 80075aa:	4621      	mov	r1, r4
 80075ac:	bf28      	it	cs
 80075ae:	4632      	movcs	r2, r6
 80075b0:	f7ff fbc2 	bl	8006d38 <memcpy>
 80075b4:	4621      	mov	r1, r4
 80075b6:	4640      	mov	r0, r8
 80075b8:	f7ff fbcc 	bl	8006d54 <_free_r>
 80075bc:	463c      	mov	r4, r7
 80075be:	e7e0      	b.n	8007582 <_realloc_r+0x1e>

080075c0 <_malloc_usable_size_r>:
 80075c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c4:	1f18      	subs	r0, r3, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bfbc      	itt	lt
 80075ca:	580b      	ldrlt	r3, [r1, r0]
 80075cc:	18c0      	addlt	r0, r0, r3
 80075ce:	4770      	bx	lr

080075d0 <_init>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr

080075dc <_fini>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	bf00      	nop
 80075e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e2:	bc08      	pop	{r3}
 80075e4:	469e      	mov	lr, r3
 80075e6:	4770      	bx	lr
