
Speedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009980  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d6c  08009d6c  0000b064  2**0
                  CONTENTS
  4 .ARM          00000008  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d74  08009d74  0000b064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d74  08009d74  0000ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08009d7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013054  20000064  08009de0  0000b064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200130b8  08009de0  0000b0b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019833  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c4  00000000  00000000  000248c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00028190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001220  00000000  00000000  00029898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023050  00000000  00000000  0002aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d018  00000000  00000000  0004db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6075  00000000  00000000  0006ab20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006748  00000000  00000000  00150bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00157320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b38 	.word	0x08009b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08009b38 	.word	0x08009b38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f103 0208 	add.w	r2, r3, #8
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0208 	add.w	r2, r3, #8
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10b      	bne.n	8000700 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d05d      	beq.n	80007c2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800070a:	2b00      	cmp	r3, #0
 800070c:	d059      	beq.n	80007c2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000716:	2100      	movs	r1, #0
 8000718:	fba3 2302 	umull	r2, r3, r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d000      	beq.n	8000722 <xQueueGenericReset+0x52>
 8000720:	2101      	movs	r1, #1
 8000722:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000724:	2b00      	cmp	r3, #0
 8000726:	d14c      	bne.n	80007c2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000728:	f002 fd0c 	bl	8003144 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000734:	6939      	ldr	r1, [r7, #16]
 8000736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000738:	fb01 f303 	mul.w	r3, r1, r3
 800073c:	441a      	add	r2, r3
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2200      	movs	r2, #0
 8000746:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000758:	3b01      	subs	r3, #1
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	441a      	add	r2, r3
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	22ff      	movs	r2, #255	@ 0xff
 800076c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	22ff      	movs	r2, #255	@ 0xff
 8000774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d114      	bne.n	80007a8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d01a      	beq.n	80007bc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	3310      	adds	r3, #16
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fbf4 	bl	8001f78 <xTaskRemoveFromEventList>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d012      	beq.n	80007bc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <xQueueGenericReset+0x120>)
 8000798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	f3bf 8f4f 	dsb	sy
 80007a2:	f3bf 8f6f 	isb	sy
 80007a6:	e009      	b.n	80007bc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff feff 	bl	80005b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3324      	adds	r3, #36	@ 0x24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fefa 	bl	80005b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007bc:	f002 fcf4 	bl	80031a8 <vPortExitCritical>
 80007c0:	e001      	b.n	80007c6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10b      	bne.n	80007e4 <xQueueGenericReset+0x114>
    __asm volatile
 80007cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d0:	f383 8811 	msr	BASEPRI, r3
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	f3bf 8f4f 	dsb	sy
 80007dc:	60bb      	str	r3, [r7, #8]
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80007e4:	697b      	ldr	r3, [r7, #20]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d02e      	beq.n	800086a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800080c:	2100      	movs	r1, #0
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	fba3 2302 	umull	r2, r3, r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <xQueueGenericCreate+0x28>
 800081a:	2101      	movs	r1, #1
 800081c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800081e:	2b00      	cmp	r3, #0
 8000820:	d123      	bne.n	800086a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800082a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800082e:	d81c      	bhi.n	800086a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	3350      	adds	r3, #80	@ 0x50
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fda6 	bl	8003390 <pvPortMalloc>
 8000844:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d01d      	beq.n	8000888 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3350      	adds	r3, #80	@ 0x50
 8000854:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f815 	bl	8000892 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000868:	e00e      	b.n	8000888 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10b      	bne.n	8000888 <xQueueGenericCreate+0x94>
    __asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	613b      	str	r3, [r7, #16]
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000888:	69fb      	ldr	r3, [r7, #28]
    }
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e002      	b.n	80008b4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c0:	2101      	movs	r1, #1
 80008c2:	69b8      	ldr	r0, [r7, #24]
 80008c4:	f7ff ff04 	bl	80006d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80008ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10b      	bne.n	800090c <xQueueGenericSend+0x34>
    __asm volatile
 80008f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	f3bf 8f6f 	isb	sy
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <xQueueGenericSend+0x42>
 8000912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <xQueueGenericSend+0x46>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <xQueueGenericSend+0x48>
 800091e:	2300      	movs	r3, #0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10b      	bne.n	800093c <xQueueGenericSend+0x64>
    __asm volatile
 8000924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d103      	bne.n	800094a <xQueueGenericSend+0x72>
 8000942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <xQueueGenericSend+0x76>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <xQueueGenericSend+0x78>
 800094e:	2300      	movs	r3, #0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <xQueueGenericSend+0x94>
    __asm volatile
 8000954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000958:	f383 8811 	msr	BASEPRI, r3
 800095c:	f3bf 8f6f 	isb	sy
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	623b      	str	r3, [r7, #32]
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800096c:	f001 fd1a 	bl	80023a4 <xTaskGetSchedulerState>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <xQueueGenericSend+0xa4>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <xQueueGenericSend+0xa8>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <xQueueGenericSend+0xaa>
 8000980:	2300      	movs	r3, #0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10b      	bne.n	800099e <xQueueGenericSend+0xc6>
    __asm volatile
 8000986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	61fb      	str	r3, [r7, #28]
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800099e:	f002 fbd1 	bl	8003144 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d302      	bcc.n	80009b4 <xQueueGenericSend+0xdc>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d129      	bne.n	8000a08 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ba:	f000 fbe7 	bl	800118c <prvCopyDataToQueue>
 80009be:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d010      	beq.n	80009ea <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ca:	3324      	adds	r3, #36	@ 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fad3 	bl	8001f78 <xTaskRemoveFromEventList>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009d8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad8 <xQueueGenericSend+0x200>)
 80009da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	e00a      	b.n	8000a00 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009f0:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <xQueueGenericSend+0x200>)
 80009f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a00:	f002 fbd2 	bl	80031a8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e063      	b.n	8000ad0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a0e:	f002 fbcb 	bl	80031a8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e05c      	b.n	8000ad0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fb83 	bl	800212c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2a:	f002 fbbd 	bl	80031a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a2e:	f000 ff8d 	bl	800194c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a32:	f002 fb87 	bl	8003144 <vPortEnterCritical>
 8000a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a42:	d103      	bne.n	8000a4c <xQueueGenericSend+0x174>
 8000a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x18a>
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a62:	f002 fba1 	bl	80031a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a66:	1d3a      	adds	r2, r7, #4
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb72 	bl	8002158 <xTaskCheckForTimeOut>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d124      	bne.n	8000ac4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a7c:	f000 fc7e 	bl	800137c <prvIsQueueFull>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d018      	beq.n	8000ab8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a88:	3310      	adds	r3, #16
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fa06 	bl	8001ea0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a96:	f000 fc09 	bl	80012ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a9a:	f000 ff65 	bl	8001968 <xTaskResumeAll>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f47f af7c 	bne.w	800099e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <xQueueGenericSend+0x200>)
 8000aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	f3bf 8f6f 	isb	sy
 8000ab6:	e772      	b.n	800099e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aba:	f000 fbf7 	bl	80012ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000abe:	f000 ff53 	bl	8001968 <xTaskResumeAll>
 8000ac2:	e76c      	b.n	800099e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac6:	f000 fbf1 	bl	80012ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aca:	f000 ff4d 	bl	8001968 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000ace:	2300      	movs	r3, #0
        }
    }
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3738      	adds	r7, #56	@ 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b092      	sub	sp, #72	@ 0x48
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8000af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000af8:	f383 8811 	msr	BASEPRI, r3
 8000afc:	f3bf 8f6f 	isb	sy
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <xQueueGenericSendFromISR+0x3e>
 8000b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <xQueueGenericSendFromISR+0x42>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <xQueueGenericSendFromISR+0x44>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10b      	bne.n	8000b3c <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d103      	bne.n	8000b4a <xQueueGenericSendFromISR+0x6e>
 8000b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <xQueueGenericSendFromISR+0x72>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <xQueueGenericSendFromISR+0x74>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8000b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b58:	f383 8811 	msr	BASEPRI, r3
 8000b5c:	f3bf 8f6f 	isb	sy
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6c:	f002 fbce 	bl	800330c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000b70:	f3ef 8211 	mrs	r2, BASEPRI
 8000b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	623a      	str	r2, [r7, #32]
 8000b86:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d302      	bcc.n	8000b9e <xQueueGenericSendFromISR+0xc2>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d147      	bne.n	8000c2e <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ba4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000bb4:	f000 faea 	bl	800118c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bb8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d112      	bne.n	8000be8 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d02e      	beq.n	8000c28 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bcc:	3324      	adds	r3, #36	@ 0x24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f9d2 	bl	8001f78 <xTaskRemoveFromEventList>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d026      	beq.n	8000c28 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d023      	beq.n	8000c28 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e01f      	b.n	8000c28 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000be8:	f000 ffd6 	bl	8001b98 <uxTaskGetNumberOfTasks>
 8000bec:	6338      	str	r0, [r7, #48]	@ 0x30
 8000bee:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d917      	bls.n	8000c28 <xQueueGenericSendFromISR+0x14c>
 8000bf8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bfe:	d10b      	bne.n	8000c18 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8000c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c04:	f383 8811 	msr	BASEPRI, r3
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	61bb      	str	r3, [r7, #24]
}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <xQueueGenericSendFromISR+0x138>
 8000c18:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000c2c:	e001      	b.n	8000c32 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000c3c:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8000c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3748      	adds	r7, #72	@ 0x48
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	@ 0x40
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10b      	bne.n	8000c74 <xQueueGiveFromISR+0x2c>
    __asm volatile
 8000c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00b      	beq.n	8000c94 <xQueueGiveFromISR+0x4c>
    __asm volatile
 8000c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	623b      	str	r3, [r7, #32]
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <xQueueGiveFromISR+0x5c>
 8000c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <xQueueGiveFromISR+0x60>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <xQueueGiveFromISR+0x62>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10b      	bne.n	8000cc6 <xQueueGiveFromISR+0x7e>
    __asm volatile
 8000cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	61fb      	str	r3, [r7, #28]
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	e7fd      	b.n	8000cc2 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cc6:	f002 fb21 	bl	800330c <vPortValidateInterruptPriority>
    __asm volatile
 8000cca:	f3ef 8211 	mrs	r2, BASEPRI
 8000cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd2:	f383 8811 	msr	BASEPRI, r3
 8000cd6:	f3bf 8f6f 	isb	sy
 8000cda:	f3bf 8f4f 	dsb	sy
 8000cde:	61ba      	str	r2, [r7, #24]
 8000ce0:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8000ce2:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d243      	bcs.n	8000d7e <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000d08:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d112      	bne.n	8000d38 <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d02e      	beq.n	8000d78 <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d1c:	3324      	adds	r3, #36	@ 0x24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 f92a 	bl	8001f78 <xTaskRemoveFromEventList>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d026      	beq.n	8000d78 <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d023      	beq.n	8000d78 <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e01f      	b.n	8000d78 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000d38:	f000 ff2e 	bl	8001b98 <uxTaskGetNumberOfTasks>
 8000d3c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8000d3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d917      	bls.n	8000d78 <xQueueGiveFromISR+0x130>
 8000d48:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d4e:	d10b      	bne.n	8000d68 <xQueueGiveFromISR+0x120>
    __asm volatile
 8000d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d54:	f383 8811 	msr	BASEPRI, r3
 8000d58:	f3bf 8f6f 	isb	sy
 8000d5c:	f3bf 8f4f 	dsb	sy
 8000d60:	613b      	str	r3, [r7, #16]
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <xQueueGiveFromISR+0x11c>
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d7c:	e001      	b.n	8000d82 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d84:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f383 8811 	msr	BASEPRI, r3
}
 8000d8c:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 8000d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3740      	adds	r7, #64	@ 0x40
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <xQueueReceive+0x32>
    __asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	623b      	str	r3, [r7, #32]
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	e7fd      	b.n	8000dc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <xQueueReceive+0x40>
 8000dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <xQueueReceive+0x44>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <xQueueReceive+0x46>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10b      	bne.n	8000dfa <xQueueReceive+0x62>
    __asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	61fb      	str	r3, [r7, #28]
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	e7fd      	b.n	8000df6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dfa:	f001 fad3 	bl	80023a4 <xTaskGetSchedulerState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <xQueueReceive+0x72>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <xQueueReceive+0x76>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <xQueueReceive+0x78>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <xQueueReceive+0x94>
    __asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	61bb      	str	r3, [r7, #24]
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e2c:	f002 f98a 	bl	8003144 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01f      	beq.n	8000e7c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e40:	f000 fa0e 	bl	8001260 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	1e5a      	subs	r2, r3, #1
 8000e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00f      	beq.n	8000e74 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e56:	3310      	adds	r3, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 f88d 	bl	8001f78 <xTaskRemoveFromEventList>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000e64:	4b3c      	ldr	r3, [pc, #240]	@ (8000f58 <xQueueReceive+0x1c0>)
 8000e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	f3bf 8f4f 	dsb	sy
 8000e70:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000e74:	f002 f998 	bl	80031a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e069      	b.n	8000f50 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e82:	f002 f991 	bl	80031a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e062      	b.n	8000f50 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 f949 	bl	800212c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e9e:	f002 f983 	bl	80031a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ea2:	f000 fd53 	bl	800194c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ea6:	f002 f94d 	bl	8003144 <vPortEnterCritical>
 8000eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb6:	d103      	bne.n	8000ec0 <xQueueReceive+0x128>
 8000eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d103      	bne.n	8000ed6 <xQueueReceive+0x13e>
 8000ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ed6:	f002 f967 	bl	80031a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f938 	bl	8002158 <xTaskCheckForTimeOut>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d123      	bne.n	8000f36 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ef0:	f000 fa2e 	bl	8001350 <prvIsQueueEmpty>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d017      	beq.n	8000f2a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efc:	3324      	adds	r3, #36	@ 0x24
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 ffcc 	bl	8001ea0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f0a:	f000 f9cf 	bl	80012ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000f0e:	f000 fd2b 	bl	8001968 <xTaskResumeAll>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d189      	bne.n	8000e2c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <xQueueReceive+0x1c0>)
 8000f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	e780      	b.n	8000e2c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f2c:	f000 f9be 	bl	80012ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000f30:	f000 fd1a 	bl	8001968 <xTaskResumeAll>
 8000f34:	e77a      	b.n	8000e2c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f38:	f000 f9b8 	bl	80012ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000f3c:	f000 fd14 	bl	8001968 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f42:	f000 fa05 	bl	8001350 <prvIsQueueEmpty>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f43f af6f 	beq.w	8000e2c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000f4e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3730      	adds	r7, #48	@ 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	e000ed04 	.word	0xe000ed04

08000f5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10b      	bne.n	8000f90 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f7c:	f383 8811 	msr	BASEPRI, r3
 8000f80:	f3bf 8f6f 	isb	sy
 8000f84:	f3bf 8f4f 	dsb	sy
 8000f88:	61bb      	str	r3, [r7, #24]
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8000f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	617b      	str	r3, [r7, #20]
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fb0:	f001 f9f8 	bl	80023a4 <xTaskGetSchedulerState>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <xQueueSemaphoreTake+0x64>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <xQueueSemaphoreTake+0x68>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <xQueueSemaphoreTake+0x6a>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <xQueueSemaphoreTake+0x86>
    __asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	613b      	str	r3, [r7, #16]
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	e7fd      	b.n	8000fde <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000fe2:	f002 f8af 	bl	8003144 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fea:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d024      	beq.n	800103c <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001002:	f001 fbf1 	bl	80027e8 <pvTaskIncrementMutexHeldCount>
 8001006:	4602      	mov	r2, r0
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00f      	beq.n	8001034 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	3310      	adds	r3, #16
 8001018:	4618      	mov	r0, r3
 800101a:	f000 ffad 	bl	8001f78 <xTaskRemoveFromEventList>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001024:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <xQueueSemaphoreTake+0x1fc>)
 8001026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	f3bf 8f4f 	dsb	sy
 8001030:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001034:	f002 f8b8 	bl	80031a8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8001038:	2301      	movs	r3, #1
 800103a:	e089      	b.n	8001150 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001042:	f002 f8b1 	bl	80031a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8001046:	2300      	movs	r3, #0
 8001048:	e082      	b.n	8001150 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	2b00      	cmp	r3, #0
 800104e:	d106      	bne.n	800105e <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4618      	mov	r0, r3
 8001056:	f001 f869 	bl	800212c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800105a:	2301      	movs	r3, #1
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800105e:	f002 f8a3 	bl	80031a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001062:	f000 fc73 	bl	800194c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001066:	f002 f86d 	bl	8003144 <vPortEnterCritical>
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001076:	d103      	bne.n	8001080 <xQueueSemaphoreTake+0x124>
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001086:	b25b      	sxtb	r3, r3
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d103      	bne.n	8001096 <xQueueSemaphoreTake+0x13a>
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001096:	f002 f887 	bl	80031a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800109a:	463a      	mov	r2, r7
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f858 	bl	8002158 <xTaskCheckForTimeOut>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d132      	bne.n	8001114 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010b0:	f000 f94e 	bl	8001350 <prvIsQueueEmpty>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d026      	beq.n	8001108 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d109      	bne.n	80010d6 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 80010c2:	f002 f83f 	bl	8003144 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f988 	bl	80023e0 <xTaskPriorityInherit>
 80010d0:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80010d2:	f002 f869 	bl	80031a8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	3324      	adds	r3, #36	@ 0x24
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fede 	bl	8001ea0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80010e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010e6:	f000 f8e1 	bl	80012ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80010ea:	f000 fc3d 	bl	8001968 <xTaskResumeAll>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f47f af76 	bne.w	8000fe2 <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <xQueueSemaphoreTake+0x1fc>)
 80010f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	f3bf 8f4f 	dsb	sy
 8001102:	f3bf 8f6f 	isb	sy
 8001106:	e76c      	b.n	8000fe2 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800110a:	f000 f8cf 	bl	80012ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800110e:	f000 fc2b 	bl	8001968 <xTaskResumeAll>
 8001112:	e766      	b.n	8000fe2 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001116:	f000 f8c9 	bl	80012ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800111a:	f000 fc25 	bl	8001968 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800111e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001120:	f000 f916 	bl	8001350 <prvIsQueueEmpty>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f43f af5b 	beq.w	8000fe2 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800112c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00d      	beq.n	800114e <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8001132:	f002 f807 	bl	8003144 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001136:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001138:	f000 f810 	bl	800115c <prvGetDisinheritPriorityAfterTimeout>
 800113c:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	69f9      	ldr	r1, [r7, #28]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fa93 	bl	8002670 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800114a:	f002 f82d 	bl	80031a8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800114e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001150:	4618      	mov	r0, r3
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	e000ed04 	.word	0xe000ed04

0800115c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1c3 0305 	rsb	r3, r3, #5
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e001      	b.n	800117e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800117e:	68fb      	ldr	r3, [r7, #12]
    }
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d14d      	bne.n	800124e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f9b2 	bl	8002520 <xTaskPriorityDisinherit>
 80011bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e043      	b.n	800124e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d119      	bne.n	8001200 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6858      	ldr	r0, [r3, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	461a      	mov	r2, r3
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	f008 f862 	bl	80092a0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	441a      	add	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d32b      	bcc.n	800124e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	e026      	b.n	800124e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	68d8      	ldr	r0, [r3, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	461a      	mov	r2, r3
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	f008 f848 	bl	80092a0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	425b      	negs	r3, r3
 800121a:	441a      	add	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	425b      	negs	r3, r3
 8001236:	441a      	add	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d105      	bne.n	800124e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	3b01      	subs	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001256:	697b      	ldr	r3, [r7, #20]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d018      	beq.n	80012a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	441a      	add	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	429a      	cmp	r2, r3
 800128a:	d303      	bcc.n	8001294 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68d9      	ldr	r1, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	461a      	mov	r2, r3
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f007 fffe 	bl	80092a0 <memcpy>
    }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80012b4:	f001 ff46 	bl	8003144 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012c0:	e011      	b.n	80012e6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d012      	beq.n	80012f0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3324      	adds	r3, #36	@ 0x24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fe52 	bl	8001f78 <xTaskRemoveFromEventList>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80012da:	f000 ffa5 	bl	8002228 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dce9      	bgt.n	80012c2 <prvUnlockQueue+0x16>
 80012ee:	e000      	b.n	80012f2 <prvUnlockQueue+0x46>
                    break;
 80012f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	22ff      	movs	r2, #255	@ 0xff
 80012f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80012fa:	f001 ff55 	bl	80031a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80012fe:	f001 ff21 	bl	8003144 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001308:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800130a:	e011      	b.n	8001330 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3310      	adds	r3, #16
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fe2d 	bl	8001f78 <xTaskRemoveFromEventList>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001324:	f000 ff80 	bl	8002228 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	3b01      	subs	r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dce9      	bgt.n	800130c <prvUnlockQueue+0x60>
 8001338:	e000      	b.n	800133c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800133a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22ff      	movs	r2, #255	@ 0xff
 8001340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001344:	f001 ff30 	bl	80031a8 <vPortExitCritical>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001358:	f001 fef4 	bl	8003144 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e001      	b.n	800136e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800136e:	f001 ff1b 	bl	80031a8 <vPortExitCritical>

    return xReturn;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001384:	f001 fede 	bl	8003144 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001390:	429a      	cmp	r2, r3
 8001392:	d102      	bne.n	800139a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e001      	b.n	800139e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800139e:	f001 ff03 	bl	80031a8 <vPortExitCritical>

    return xReturn;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80013c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c4:	f383 8811 	msr	BASEPRI, r3
 80013c8:	f3bf 8f6f 	isb	sy
 80013cc:	f3bf 8f4f 	dsb	sy
 80013d0:	60fb      	str	r3, [r7, #12]
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d024      	beq.n	8001428 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e01e      	b.n	8001422 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80013e4:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <vQueueAddToRegistry+0x9c>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d105      	bne.n	8001400 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4a13      	ldr	r2, [pc, #76]	@ (8001448 <vQueueAddToRegistry+0x9c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
                    break;
 80013fe:	e013      	b.n	8001428 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <vQueueAddToRegistry+0x70>
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <vQueueAddToRegistry+0x9c>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d104      	bne.n	800141c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <vQueueAddToRegistry+0x9c>)
 8001418:	4413      	add	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b07      	cmp	r3, #7
 8001426:	d9dd      	bls.n	80013e4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000080 	.word	0x20000080

0800144c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800145c:	f001 fe72 	bl	8003144 <vPortEnterCritical>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d103      	bne.n	8001476 <vQueueWaitForMessageRestricted+0x2a>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800147c:	b25b      	sxtb	r3, r3
 800147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001482:	d103      	bne.n	800148c <vQueueWaitForMessageRestricted+0x40>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800148c:	f001 fe8c 	bl	80031a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3324      	adds	r3, #36	@ 0x24
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd23 	bl	8001eec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff00 	bl	80012ac <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af04      	add	r7, sp, #16
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 ff62 	bl	8003390 <pvPortMalloc>
 80014cc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80014d4:	2058      	movs	r0, #88	@ 0x58
 80014d6:	f001 ff5b 	bl	8003390 <pvPortMalloc>
 80014da:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80014e2:	2258      	movs	r2, #88	@ 0x58
 80014e4:	2100      	movs	r1, #0
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f007 fea6 	bl	8009238 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f2:	e005      	b.n	8001500 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f002 f87d 	bl	80035f4 <vPortFree>
 80014fa:	e001      	b.n	8001500 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00d      	beq.n	8001522 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001506:	2300      	movs	r3, #0
 8001508:	9303      	str	r3, [sp, #12]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f828 	bl	8001572 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001522:	697b      	ldr	r3, [r7, #20]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ffb3 	bl	80014b4 <prvCreateTask>
 800154e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001556:	6938      	ldr	r0, [r7, #16]
 8001558:	f000 f89c 	bl	8001694 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e002      	b.n	8001568 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001568:	697b      	ldr	r3, [r7, #20]
    }
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b088      	sub	sp, #32
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001582:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	21a5      	movs	r1, #165	@ 0xa5
 800158c:	f007 fe54 	bl	8009238 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800159a:	3b01      	subs	r3, #1
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f023 0307 	bic.w	r3, r3, #7
 80015a8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <prvInitialiseNewTask+0x5a>
    __asm volatile
 80015b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b8:	f383 8811 	msr	BASEPRI, r3
 80015bc:	f3bf 8f6f 	isb	sy
 80015c0:	f3bf 8f4f 	dsb	sy
 80015c4:	617b      	str	r3, [r7, #20]
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01e      	beq.n	8001610 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e012      	b.n	80015fe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	7819      	ldrb	r1, [r3, #0]
 80015e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	3334      	adds	r3, #52	@ 0x34
 80015e8:	460a      	mov	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2b09      	cmp	r3, #9
 8001602:	d9e9      	bls.n	80015d8 <prvInitialiseNewTask+0x66>
 8001604:	e000      	b.n	8001608 <prvInitialiseNewTask+0x96>
            {
                break;
 8001606:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001612:	2b04      	cmp	r3, #4
 8001614:	d90b      	bls.n	800162e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800161a:	f383 8811 	msr	BASEPRI, r3
 800161e:	f3bf 8f6f 	isb	sy
 8001622:	f3bf 8f4f 	dsb	sy
 8001626:	613b      	str	r3, [r7, #16]
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800162e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001630:	2b04      	cmp	r3, #4
 8001632:	d901      	bls.n	8001638 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001634:	2304      	movs	r3, #4
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800163a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800163e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001642:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001646:	3304      	adds	r3, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ffd1 	bl	80005f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001650:	3318      	adds	r3, #24
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ffcc 	bl	80005f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800165a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800165c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001660:	f1c3 0205 	rsb	r2, r3, #5
 8001664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001666:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	69b8      	ldr	r0, [r7, #24]
 8001674:	f001 fbe4 	bl	8002e40 <pxPortInitialiseStack>
 8001678:	4602      	mov	r2, r0
 800167a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800167c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001688:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800169c:	f001 fd52 	bl	8003144 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80016a0:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <prvAddNewTaskToReadyList+0x114>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a40      	ldr	r2, [pc, #256]	@ (80017a8 <prvAddNewTaskToReadyList+0x114>)
 80016a8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <prvAddNewTaskToReadyList+0x118>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80016b2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ac <prvAddNewTaskToReadyList+0x118>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016b8:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <prvAddNewTaskToReadyList+0x114>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d110      	bne.n	80016e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80016c0:	f000 fdd6 	bl	8002270 <prvInitialiseTaskLists>
 80016c4:	e00d      	b.n	80016e2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80016c6:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <prvAddNewTaskToReadyList+0x11c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <prvAddNewTaskToReadyList+0x118>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d8:	429a      	cmp	r2, r3
 80016da:	d802      	bhi.n	80016e2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80016dc:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <prvAddNewTaskToReadyList+0x118>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80016e2:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <prvAddNewTaskToReadyList+0x120>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <prvAddNewTaskToReadyList+0x120>)
 80016ea:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <prvAddNewTaskToReadyList+0x120>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	2201      	movs	r2, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <prvAddNewTaskToReadyList+0x124>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4313      	orrs	r3, r2
 8001702:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <prvAddNewTaskToReadyList+0x124>)
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800170a:	492c      	ldr	r1, [pc, #176]	@ (80017bc <prvAddNewTaskToReadyList+0x128>)
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3304      	adds	r3, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	3204      	adds	r2, #4
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <prvAddNewTaskToReadyList+0x128>)
 800174a:	441a      	add	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001754:	4919      	ldr	r1, [pc, #100]	@ (80017bc <prvAddNewTaskToReadyList+0x128>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	4814      	ldr	r0, [pc, #80]	@ (80017bc <prvAddNewTaskToReadyList+0x128>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4403      	add	r3, r0
 8001774:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001776:	f001 fd17 	bl	80031a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <prvAddNewTaskToReadyList+0x11c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <prvAddNewTaskToReadyList+0x118>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <prvAddNewTaskToReadyList+0x10c>
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <prvAddNewTaskToReadyList+0x12c>)
 8001792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f3bf 8f4f 	dsb	sy
 800179c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000198 	.word	0x20000198
 80017ac:	200000c0 	.word	0x200000c0
 80017b0:	200001a4 	.word	0x200001a4
 80017b4:	200001b4 	.word	0x200001b4
 80017b8:	200001a0 	.word	0x200001a0
 80017bc:	200000c4 	.word	0x200000c4
 80017c0:	e000ed04 	.word	0xe000ed04

080017c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d018      	beq.n	8001808 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80017d6:	f000 f8b9 	bl	800194c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <vTaskDelay+0x64>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d00b      	beq.n	80017fa <vTaskDelay+0x36>
    __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	60bb      	str	r3, [r7, #8]
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f001 f80b 	bl	8002818 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001802:	f000 f8b1 	bl	8001968 <xTaskResumeAll>
 8001806:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <vTaskDelay+0x68>)
 8001810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001c0 	.word	0x200001c0
 800182c:	e000ed04 	.word	0xe000ed04

08001830 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e011      	b.n	8001868 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001844:	4a1c      	ldr	r2, [pc, #112]	@ (80018b8 <prvCreateIdleTasks+0x88>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	7819      	ldrb	r1, [r3, #0]
 800184c:	1d3a      	adds	r2, r7, #4
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	460a      	mov	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001856:	1d3a      	adds	r2, r7, #4
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b09      	cmp	r3, #9
 800186c:	ddea      	ble.n	8001844 <prvCreateIdleTasks+0x14>
 800186e:	e000      	b.n	8001872 <prvCreateIdleTasks+0x42>
        {
            break;
 8001870:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	e015      	b.n	80018a4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <prvCreateIdleTasks+0x8c>)
 800187a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <prvCreateIdleTasks+0x90>)
 8001882:	4413      	add	r3, r2
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	2282      	movs	r2, #130	@ 0x82
 8001890:	6938      	ldr	r0, [r7, #16]
 8001892:	f7ff fe4b 	bl	800152c <xTaskCreate>
 8001896:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dde6      	ble.n	8001878 <prvCreateIdleTasks+0x48>
 80018aa:	e000      	b.n	80018ae <prvCreateIdleTasks+0x7e>
        {
            break;
 80018ac:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80018ae:	69fb      	ldr	r3, [r7, #28]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	08009b50 	.word	0x08009b50
 80018bc:	08002241 	.word	0x08002241
 80018c0:	200001bc 	.word	0x200001bc

080018c4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80018ca:	f7ff ffb1 	bl	8001830 <prvCreateIdleTasks>
 80018ce:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d102      	bne.n	80018dc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80018d6:	f001 f821 	bl	800291c <xTimerCreateTimerTask>
 80018da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d116      	bne.n	8001910 <vTaskStartScheduler+0x4c>
    __asm volatile
 80018e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60bb      	str	r3, [r7, #8]
}
 80018f4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <vTaskStartScheduler+0x78>)
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <vTaskStartScheduler+0x7c>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <vTaskStartScheduler+0x80>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800190a:	f001 fb2b 	bl	8002f64 <xPortStartScheduler>
 800190e:	e00f      	b.n	8001930 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d10b      	bne.n	8001930 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191c:	f383 8811 	msr	BASEPRI, r3
 8001920:	f3bf 8f6f 	isb	sy
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	607b      	str	r3, [r7, #4]
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <vTaskStartScheduler+0x84>)
 8001932:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200001b8 	.word	0x200001b8
 8001940:	200001a4 	.word	0x200001a4
 8001944:	2000019c 	.word	0x2000019c
 8001948:	20000000 	.word	0x20000000

0800194c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <vTaskSuspendAll+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	4a03      	ldr	r2, [pc, #12]	@ (8001964 <vTaskSuspendAll+0x18>)
 8001958:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	200001c0 	.word	0x200001c0

08001968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001976:	f001 fbe5 	bl	8003144 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800197e:	4b75      	ldr	r3, [pc, #468]	@ (8001b54 <xTaskResumeAll+0x1ec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10b      	bne.n	800199e <xTaskResumeAll+0x36>
    __asm volatile
 8001986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	603b      	str	r3, [r7, #0]
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <xTaskResumeAll+0x1ec>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001b54 <xTaskResumeAll+0x1ec>)
 80019a6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80019a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <xTaskResumeAll+0x1ec>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 80ca 	bne.w	8001b46 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019b2:	4b69      	ldr	r3, [pc, #420]	@ (8001b58 <xTaskResumeAll+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80c5 	beq.w	8001b46 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019bc:	e08e      	b.n	8001adc <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <xTaskResumeAll+0x1f4>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	6a12      	ldr	r2, [r2, #32]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	69d2      	ldr	r2, [r2, #28]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3318      	adds	r3, #24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d103      	bne.n	80019f4 <xTaskResumeAll+0x8c>
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	68d2      	ldr	r2, [r2, #12]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	6892      	ldr	r2, [r2, #8]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d103      	bne.n	8001a32 <xTaskResumeAll+0xca>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <xTaskResumeAll+0x1f8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	4a43      	ldr	r2, [pc, #268]	@ (8001b60 <xTaskResumeAll+0x1f8>)
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a58:	4942      	ldr	r1, [pc, #264]	@ (8001b64 <xTaskResumeAll+0x1fc>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3304      	adds	r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	3204      	adds	r2, #4
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	1d1a      	adds	r2, r3, #4
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4a33      	ldr	r2, [pc, #204]	@ (8001b64 <xTaskResumeAll+0x1fc>)
 8001a98:	441a      	add	r2, r3
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	615a      	str	r2, [r3, #20]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa2:	4930      	ldr	r1, [pc, #192]	@ (8001b64 <xTaskResumeAll+0x1fc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	482b      	ldr	r0, [pc, #172]	@ (8001b64 <xTaskResumeAll+0x1fc>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4403      	add	r3, r0
 8001ac2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <xTaskResumeAll+0x200>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d904      	bls.n	8001adc <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001ad2:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <xTaskResumeAll+0x204>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <xTaskResumeAll+0x1f4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f af6c 	bne.w	80019be <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001aec:	f000 fc3e 	bl	800236c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <xTaskResumeAll+0x208>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001afc:	f000 f858 	bl	8001bb0 <xTaskIncrementTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d004      	beq.n	8001b10 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001b06:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <xTaskResumeAll+0x204>)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ef      	bne.n	8001afc <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <xTaskResumeAll+0x208>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <xTaskResumeAll+0x204>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <xTaskResumeAll+0x200>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <xTaskResumeAll+0x20c>)
 8001b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001b46:	f001 fb2f 	bl	80031a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200001c0 	.word	0x200001c0
 8001b58:	20000198 	.word	0x20000198
 8001b5c:	20000158 	.word	0x20000158
 8001b60:	200001a0 	.word	0x200001a0
 8001b64:	200000c4 	.word	0x200000c4
 8001b68:	200000c0 	.word	0x200000c0
 8001b6c:	200001ac 	.word	0x200001ac
 8001b70:	200001a8 	.word	0x200001a8
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <xTaskGetTickCount+0x1c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000019c 	.word	0x2000019c

08001b98 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <uxTaskGetNumberOfTasks+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000198 	.word	0x20000198

08001bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001bba:	4b7f      	ldr	r3, [pc, #508]	@ (8001db8 <xTaskIncrementTick+0x208>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80ef 	bne.w	8001da2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dbc <xTaskIncrementTick+0x20c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001bcc:	4a7b      	ldr	r2, [pc, #492]	@ (8001dbc <xTaskIncrementTick+0x20c>)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d121      	bne.n	8001c1c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001bd8:	4b79      	ldr	r3, [pc, #484]	@ (8001dc0 <xTaskIncrementTick+0x210>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <xTaskIncrementTick+0x4a>
    __asm volatile
 8001be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	607b      	str	r3, [r7, #4]
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	e7fd      	b.n	8001bf6 <xTaskIncrementTick+0x46>
 8001bfa:	4b71      	ldr	r3, [pc, #452]	@ (8001dc0 <xTaskIncrementTick+0x210>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	4b70      	ldr	r3, [pc, #448]	@ (8001dc4 <xTaskIncrementTick+0x214>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc0 <xTaskIncrementTick+0x210>)
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <xTaskIncrementTick+0x214>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc8 <xTaskIncrementTick+0x218>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a6c      	ldr	r2, [pc, #432]	@ (8001dc8 <xTaskIncrementTick+0x218>)
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	f000 fba8 	bl	800236c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dcc <xTaskIncrementTick+0x21c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	f0c0 80a8 	bcc.w	8001d78 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c28:	4b65      	ldr	r3, [pc, #404]	@ (8001dc0 <xTaskIncrementTick+0x210>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001c32:	4b66      	ldr	r3, [pc, #408]	@ (8001dcc <xTaskIncrementTick+0x21c>)
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	601a      	str	r2, [r3, #0]
                    break;
 8001c3a:	e09d      	b.n	8001d78 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c3c:	4b60      	ldr	r3, [pc, #384]	@ (8001dc0 <xTaskIncrementTick+0x210>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d203      	bcs.n	8001c5c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c54:	4a5d      	ldr	r2, [pc, #372]	@ (8001dcc <xTaskIncrementTick+0x21c>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6013      	str	r3, [r2, #0]
                        break;
 8001c5a:	e08d      	b.n	8001d78 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	68d2      	ldr	r2, [r2, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	6892      	ldr	r2, [r2, #8]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d103      	bne.n	8001c8a <xTaskIncrementTick+0xda>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01e      	beq.n	8001ce0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	6a12      	ldr	r2, [r2, #32]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	69d2      	ldr	r2, [r2, #28]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d103      	bne.n	8001cd0 <xTaskIncrementTick+0x120>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <xTaskIncrementTick+0x220>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4a38      	ldr	r2, [pc, #224]	@ (8001dd0 <xTaskIncrementTick+0x220>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf6:	4937      	ldr	r1, [pc, #220]	@ (8001dd4 <xTaskIncrementTick+0x224>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	3204      	adds	r2, #4
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1d1a      	adds	r2, r3, #4
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <xTaskIncrementTick+0x224>)
 8001d36:	441a      	add	r2, r3
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d40:	4924      	ldr	r1, [pc, #144]	@ (8001dd4 <xTaskIncrementTick+0x224>)
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	481f      	ldr	r0, [pc, #124]	@ (8001dd4 <xTaskIncrementTick+0x224>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4403      	add	r3, r0
 8001d60:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <xTaskIncrementTick+0x228>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f67f af5b 	bls.w	8001c28 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d76:	e757      	b.n	8001c28 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <xTaskIncrementTick+0x228>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7e:	4915      	ldr	r1, [pc, #84]	@ (8001dd4 <xTaskIncrementTick+0x224>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d901      	bls.n	8001d94 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <xTaskIncrementTick+0x22c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	e004      	b.n	8001dac <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <xTaskIncrementTick+0x230>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <xTaskIncrementTick+0x230>)
 8001daa:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200001c0 	.word	0x200001c0
 8001dbc:	2000019c 	.word	0x2000019c
 8001dc0:	20000150 	.word	0x20000150
 8001dc4:	20000154 	.word	0x20000154
 8001dc8:	200001b0 	.word	0x200001b0
 8001dcc:	200001b8 	.word	0x200001b8
 8001dd0:	200001a0 	.word	0x200001a0
 8001dd4:	200000c4 	.word	0x200000c4
 8001dd8:	200000c0 	.word	0x200000c0
 8001ddc:	200001ac 	.word	0x200001ac
 8001de0:	200001a8 	.word	0x200001a8

08001de4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <vTaskSwitchContext+0xa8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001df2:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <vTaskSwitchContext+0xac>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001df8:	e041      	b.n	8001e7e <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <vTaskSwitchContext+0xac>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <vTaskSwitchContext+0xb0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f1c3 031f 	rsb	r3, r3, #31
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	4920      	ldr	r1, [pc, #128]	@ (8001e98 <vTaskSwitchContext+0xb4>)
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <vTaskSwitchContext+0x5e>
    __asm volatile
 8001e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	607b      	str	r3, [r7, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	e7fd      	b.n	8001e3e <vTaskSwitchContext+0x5a>
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <vTaskSwitchContext+0xb4>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	3308      	adds	r3, #8
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d103      	bne.n	8001e70 <vTaskSwitchContext+0x8c>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <vTaskSwitchContext+0xb8>)
 8001e78:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <vTaskSwitchContext+0xb8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
    }
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	200001c0 	.word	0x200001c0
 8001e90:	200001ac 	.word	0x200001ac
 8001e94:	200001a0 	.word	0x200001a0
 8001e98:	200000c4 	.word	0x200000c4
 8001e9c:	200000c0 	.word	0x200000c0

08001ea0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	60fb      	str	r3, [r7, #12]
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <vTaskPlaceOnEventList+0x48>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3318      	adds	r3, #24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe fb9a 	bl	800060a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	f000 fc9d 	bl	8002818 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000c0 	.word	0x200000c0

08001eec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	613b      	str	r3, [r7, #16]
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	e7fd      	b.n	8001f12 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	61da      	str	r2, [r3, #28]
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	6892      	ldr	r2, [r2, #8]
 8001f2c:	621a      	str	r2, [r3, #32]
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	3218      	adds	r2, #24
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f103 0218 	add.w	r2, r3, #24
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <vTaskPlaceOnEventListRestricted+0x88>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f000 fc56 	bl	8002818 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000c0 	.word	0x200000c0

08001f78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	60fb      	str	r3, [r7, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	e7fd      	b.n	8001fa2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	6a12      	ldr	r2, [r2, #32]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	69d2      	ldr	r2, [r2, #28]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <xTaskRemoveFromEventList+0x5c>
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8002114 <xTaskRemoveFromEventList+0x19c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d160      	bne.n	80020ae <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	6892      	ldr	r2, [r2, #8]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	3304      	adds	r3, #4
 800200e:	429a      	cmp	r2, r3
 8002010:	d103      	bne.n	800201a <xTaskRemoveFromEventList+0xa2>
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	4b39      	ldr	r3, [pc, #228]	@ (8002118 <xTaskRemoveFromEventList+0x1a0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	4a37      	ldr	r2, [pc, #220]	@ (8002118 <xTaskRemoveFromEventList+0x1a0>)
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002040:	4936      	ldr	r1, [pc, #216]	@ (800211c <xTaskRemoveFromEventList+0x1a4>)
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3304      	adds	r3, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	3204      	adds	r2, #4
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	1d1a      	adds	r2, r3, #4
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4a27      	ldr	r2, [pc, #156]	@ (800211c <xTaskRemoveFromEventList+0x1a4>)
 8002080:	441a      	add	r2, r3
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800208a:	4924      	ldr	r1, [pc, #144]	@ (800211c <xTaskRemoveFromEventList+0x1a4>)
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	481f      	ldr	r0, [pc, #124]	@ (800211c <xTaskRemoveFromEventList+0x1a4>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4403      	add	r3, r0
 80020aa:	6019      	str	r1, [r3, #0]
 80020ac:	e01b      	b.n	80020e6 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <xTaskRemoveFromEventList+0x1a8>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	61da      	str	r2, [r3, #28]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	621a      	str	r2, [r3, #32]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	3218      	adds	r2, #24
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f103 0218 	add.w	r2, r3, #24
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	4a11      	ldr	r2, [pc, #68]	@ (8002120 <xTaskRemoveFromEventList+0x1a8>)
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <xTaskRemoveFromEventList+0x1a8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <xTaskRemoveFromEventList+0x1a8>)
 80020e4:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <xTaskRemoveFromEventList+0x1ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d905      	bls.n	8002100 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <xTaskRemoveFromEventList+0x1b0>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e001      	b.n	8002104 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002106:	4618      	mov	r0, r3
 8002108:	372c      	adds	r7, #44	@ 0x2c
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200001c0 	.word	0x200001c0
 8002118:	200001a0 	.word	0x200001a0
 800211c:	200000c4 	.word	0x200000c4
 8002120:	20000158 	.word	0x20000158
 8002124:	200000c0 	.word	0x200000c0
 8002128:	200001ac 	.word	0x200001ac

0800212c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <vTaskInternalSetTimeOutState+0x24>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <vTaskInternalSetTimeOutState+0x28>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	200001b0 	.word	0x200001b0
 8002154:	2000019c 	.word	0x2000019c

08002158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	613b      	str	r3, [r7, #16]
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8002186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	60fb      	str	r3, [r7, #12]
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	e7fd      	b.n	800219a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800219e:	f000 ffd1 	bl	8003144 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <xTaskCheckForTimeOut+0xc8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d102      	bne.n	80021c2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	e026      	b.n	8002210 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <xTaskCheckForTimeOut+0xcc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d00a      	beq.n	80021e4 <xTaskCheckForTimeOut+0x8c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d305      	bcc.n	80021e4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e015      	b.n	8002210 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20b      	bcs.n	8002206 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff96 	bl	800212c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	e004      	b.n	8002210 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002210:	f000 ffca 	bl	80031a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002214:	69fb      	ldr	r3, [r7, #28]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000019c 	.word	0x2000019c
 8002224:	200001b0 	.word	0x200001b0

08002228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <vTaskMissedYield+0x14>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200001ac 	.word	0x200001ac

08002240 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002248:	f000 f852 	bl	80022f0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <prvIdleTask+0x28>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d9f9      	bls.n	8002248 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <prvIdleTask+0x2c>)
 8002256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002264:	e7f0      	b.n	8002248 <prvIdleTask+0x8>
 8002266:	bf00      	nop
 8002268:	200000c4 	.word	0x200000c4
 800226c:	e000ed04 	.word	0xe000ed04

08002270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	e00c      	b.n	8002296 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <prvInitialiseTaskLists+0x60>)
 8002288:	4413      	add	r3, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f990 	bl	80005b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d9ef      	bls.n	800227c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800229c:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <prvInitialiseTaskLists+0x64>)
 800229e:	f7fe f987 	bl	80005b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80022a2:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <prvInitialiseTaskLists+0x68>)
 80022a4:	f7fe f984 	bl	80005b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <prvInitialiseTaskLists+0x6c>)
 80022aa:	f7fe f981 	bl	80005b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80022ae:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <prvInitialiseTaskLists+0x70>)
 80022b0:	f7fe f97e 	bl	80005b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80022b4:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <prvInitialiseTaskLists+0x74>)
 80022b6:	f7fe f97b 	bl	80005b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <prvInitialiseTaskLists+0x78>)
 80022bc:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <prvInitialiseTaskLists+0x64>)
 80022be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <prvInitialiseTaskLists+0x7c>)
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <prvInitialiseTaskLists+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200000c4 	.word	0x200000c4
 80022d4:	20000128 	.word	0x20000128
 80022d8:	2000013c 	.word	0x2000013c
 80022dc:	20000158 	.word	0x20000158
 80022e0:	2000016c 	.word	0x2000016c
 80022e4:	20000184 	.word	0x20000184
 80022e8:	20000150 	.word	0x20000150
 80022ec:	20000154 	.word	0x20000154

080022f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f6:	e019      	b.n	800232c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80022f8:	f000 ff24 	bl	8003144 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <prvCheckTasksWaitingTermination+0x50>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f9b7 	bl	800067c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <prvCheckTasksWaitingTermination+0x54>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	4a0b      	ldr	r2, [pc, #44]	@ (8002344 <prvCheckTasksWaitingTermination+0x54>)
 8002316:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <prvCheckTasksWaitingTermination+0x58>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3b01      	subs	r3, #1
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <prvCheckTasksWaitingTermination+0x58>)
 8002320:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002322:	f000 ff41 	bl	80031a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f810 	bl	800234c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <prvCheckTasksWaitingTermination+0x58>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e1      	bne.n	80022f8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000016c 	.word	0x2000016c
 8002344:	20000198 	.word	0x20000198
 8002348:	20000180 	.word	0x20000180

0800234c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f94b 	bl	80035f4 <vPortFree>
            vPortFree( pxTCB );
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f001 f948 	bl	80035f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <prvResetNextTaskUnblockTime+0x30>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <prvResetNextTaskUnblockTime+0x34>)
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002382:	e005      	b.n	8002390 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <prvResetNextTaskUnblockTime+0x30>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <prvResetNextTaskUnblockTime+0x34>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000150 	.word	0x20000150
 80023a0:	200001b8 	.word	0x200001b8

080023a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <xTaskGetSchedulerState+0x34>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80023b2:	2301      	movs	r3, #1
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e008      	b.n	80023ca <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <xTaskGetSchedulerState+0x38>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80023c0:	2302      	movs	r3, #2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	e001      	b.n	80023ca <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80023ca:	687b      	ldr	r3, [r7, #4]
    }
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	200001a4 	.word	0x200001a4
 80023dc:	200001c0 	.word	0x200001c0

080023e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8089 	beq.w	800250a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	4b45      	ldr	r3, [pc, #276]	@ (8002514 <xTaskPriorityInherit+0x134>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	429a      	cmp	r2, r3
 8002404:	d278      	bcs.n	80024f8 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db06      	blt.n	800241c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <xTaskPriorityInherit+0x134>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	f1c3 0205 	rsb	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6959      	ldr	r1, [r3, #20]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4a3a      	ldr	r2, [pc, #232]	@ (8002518 <xTaskPriorityInherit+0x138>)
 800242e:	4413      	add	r3, r2
 8002430:	4299      	cmp	r1, r3
 8002432:	d159      	bne.n	80024e8 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3304      	adds	r3, #4
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f91f 	bl	800067c <uxListRemove>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	4b32      	ldr	r3, [pc, #200]	@ (800251c <xTaskPriorityInherit+0x13c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4013      	ands	r3, r2
 8002456:	4a31      	ldr	r2, [pc, #196]	@ (800251c <xTaskPriorityInherit+0x13c>)
 8002458:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800245a:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <xTaskPriorityInherit+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <xTaskPriorityInherit+0x13c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <xTaskPriorityInherit+0x13c>)
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247a:	4927      	ldr	r1, [pc, #156]	@ (8002518 <xTaskPriorityInherit+0x138>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	3204      	adds	r2, #4
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4a17      	ldr	r2, [pc, #92]	@ (8002518 <xTaskPriorityInherit+0x138>)
 80024ba:	441a      	add	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c4:	4914      	ldr	r1, [pc, #80]	@ (8002518 <xTaskPriorityInherit+0x138>)
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	480f      	ldr	r0, [pc, #60]	@ (8002518 <xTaskPriorityInherit+0x138>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	6019      	str	r1, [r3, #0]
 80024e6:	e004      	b.n	80024f2 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <xTaskPriorityInherit+0x134>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e008      	b.n	800250a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <xTaskPriorityInherit+0x134>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	429a      	cmp	r2, r3
 8002504:	d201      	bcs.n	800250a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002506:	2301      	movs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800250a:	697b      	ldr	r3, [r7, #20]
    }
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200000c0 	.word	0x200000c0
 8002518:	200000c4 	.word	0x200000c4
 800251c:	200001a0 	.word	0x200001a0

08002520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8090 	beq.w	8002658 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <xTaskPriorityDisinherit+0x144>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	429a      	cmp	r2, r3
 8002540:	d00b      	beq.n	800255a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	613b      	str	r3, [r7, #16]
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	e7fd      	b.n	8002556 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	60fb      	str	r3, [r7, #12]
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	429a      	cmp	r2, r3
 800258e:	d063      	beq.n	8002658 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d15f      	bne.n	8002658 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	3304      	adds	r3, #4
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe f86d 	bl	800067c <uxListRemove>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	2201      	movs	r2, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002668 <xTaskPriorityDisinherit+0x148>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4013      	ands	r3, r2
 80025ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <xTaskPriorityDisinherit+0x148>)
 80025bc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	f1c3 0205 	rsb	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <xTaskPriorityDisinherit+0x148>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <xTaskPriorityDisinherit+0x148>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e8:	4920      	ldr	r1, [pc, #128]	@ (800266c <xTaskPriorityDisinherit+0x14c>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	3204      	adds	r2, #4
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4a11      	ldr	r2, [pc, #68]	@ (800266c <xTaskPriorityDisinherit+0x14c>)
 8002628:	441a      	add	r2, r3
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	615a      	str	r2, [r3, #20]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002632:	490e      	ldr	r1, [pc, #56]	@ (800266c <xTaskPriorityDisinherit+0x14c>)
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002644:	1c59      	adds	r1, r3, #1
 8002646:	4809      	ldr	r0, [pc, #36]	@ (800266c <xTaskPriorityDisinherit+0x14c>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4403      	add	r3, r0
 8002652:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002654:	2301      	movs	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002658:	69fb      	ldr	r3, [r7, #28]
    }
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200000c0 	.word	0x200000c0
 8002668:	200001a0 	.word	0x200001a0
 800266c:	200000c4 	.word	0x200000c4

08002670 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a5 	beq.w	80027d4 <vTaskPriorityDisinheritAfterTimeout+0x164>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	613b      	str	r3, [r7, #16]
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	e7fd      	b.n	80026a6 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d902      	bls.n	80026ba <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b8:	e002      	b.n	80026c0 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c6:	429a      	cmp	r2, r3
 80026c8:	f000 8084 	beq.w	80027d4 <vTaskPriorityDisinheritAfterTimeout+0x164>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d17e      	bne.n	80027d4 <vTaskPriorityDisinheritAfterTimeout+0x164>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80026d6:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a3a      	ldr	r2, [r7, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10b      	bne.n	80026f8 <vTaskPriorityDisinheritAfterTimeout+0x88>
    __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	60fb      	str	r3, [r7, #12]
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002702:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	db04      	blt.n	8002716 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f1c3 0205 	rsb	r2, r3, #5
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	6959      	ldr	r1, [r3, #20]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4a2e      	ldr	r2, [pc, #184]	@ (80027e0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002726:	4413      	add	r3, r2
 8002728:	4299      	cmp	r1, r3
 800272a:	d153      	bne.n	80027d4 <vTaskPriorityDisinheritAfterTimeout+0x164>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ffa3 	bl	800067c <uxListRemove>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	4b26      	ldr	r3, [pc, #152]	@ (80027e4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4013      	ands	r3, r2
 800274e:	4a25      	ldr	r2, [pc, #148]	@ (80027e4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002750:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002768:	491d      	ldr	r1, [pc, #116]	@ (80027e0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3304      	adds	r3, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	6a3a      	ldr	r2, [r7, #32]
 800278e:	3204      	adds	r2, #4
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	1d1a      	adds	r2, r3, #4
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4a0e      	ldr	r2, [pc, #56]	@ (80027e0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80027a8:	441a      	add	r2, r3
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	615a      	str	r2, [r3, #20]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b2:	490b      	ldr	r1, [pc, #44]	@ (80027e0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	4806      	ldr	r0, [pc, #24]	@ (80027e0 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4403      	add	r3, r0
 80027d2:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	@ 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200000c0 	.word	0x200000c0
 80027e0:	200000c4 	.word	0x200000c4
 80027e4:	200001a0 	.word	0x200001a0

080027e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <pvTaskIncrementMutexHeldCount+0x2c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8002804:	687b      	ldr	r3, [r7, #4]
    }
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200000c0 	.word	0x200000c0

08002818 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002822:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <prvAddCurrentTaskToDelayedList+0xec>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800282e:	4b36      	ldr	r3, [pc, #216]	@ (8002908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002834:	4b35      	ldr	r3, [pc, #212]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3304      	adds	r3, #4
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd ff1e 	bl	800067c <uxListRemove>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002846:	4b31      	ldr	r3, [pc, #196]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	2201      	movs	r2, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4013      	ands	r3, r2
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <prvAddCurrentTaskToDelayedList+0xf8>)
 800285c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d124      	bne.n	80028b0 <prvAddCurrentTaskToDelayedList+0x98>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800286c:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <prvAddCurrentTaskToDelayedList+0xfc>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	6892      	ldr	r2, [r2, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	3204      	adds	r2, #4
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	1d1a      	adds	r2, r3, #4
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1d      	ldr	r2, [pc, #116]	@ (8002914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80028ae:	e022      	b.n	80028f6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3304      	adds	r3, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7fd fe9a 	bl	800060a <vListInsert>
}
 80028d6:	e00e      	b.n	80028f6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <prvAddCurrentTaskToDelayedList+0xf4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3304      	adds	r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	69b8      	ldr	r0, [r7, #24]
 80028e2:	f7fd fe92 	bl	800060a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <prvAddCurrentTaskToDelayedList+0x100>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d202      	bcs.n	80028f6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80028f0:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <prvAddCurrentTaskToDelayedList+0x100>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6013      	str	r3, [r2, #0]
}
 80028f6:	bf00      	nop
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000019c 	.word	0x2000019c
 8002904:	20000150 	.word	0x20000150
 8002908:	20000154 	.word	0x20000154
 800290c:	200000c0 	.word	0x200000c0
 8002910:	200001a0 	.word	0x200001a0
 8002914:	20000184 	.word	0x20000184
 8002918:	200001b8 	.word	0x200001b8

0800291c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002926:	f000 fa55 	bl	8002dd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <xTimerCreateTimerTask+0x58>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <xTimerCreateTimerTask+0x5c>)
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002940:	490e      	ldr	r1, [pc, #56]	@ (800297c <xTimerCreateTimerTask+0x60>)
 8002942:	480f      	ldr	r0, [pc, #60]	@ (8002980 <xTimerCreateTimerTask+0x64>)
 8002944:	f7fe fdf2 	bl	800152c <xTaskCreate>
 8002948:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	603b      	str	r3, [r7, #0]
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002968:	687b      	ldr	r3, [r7, #4]
    }
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001f4 	.word	0x200001f4
 8002978:	200001f8 	.word	0x200001f8
 800297c:	08009b58 	.word	0x08009b58
 8002980:	08002a29 	.word	0x08002a29

08002984 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002990:	e008      	b.n	80029a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	18d1      	adds	r1, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8df 	bl	8002b74 <prvInsertTimerInActiveList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <prvReloadTimer+0xe>
        }
    }
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029d2:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <prvProcessExpiredTimer+0x5c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3304      	adds	r3, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fe4b 	bl	800067c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff ffc3 	bl	8002984 <prvReloadTimer>
 80029fe:	e008      	b.n	8002a12 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	4798      	blx	r3
    }
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200001ec 	.word	0x200001ec

08002a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f859 	bl	8002aec <prvGetNextExpireTime>
 8002a3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f805 	bl	8002a50 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a46:	f000 f8d7 	bl	8002bf8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a4a:	bf00      	nop
 8002a4c:	e7f0      	b.n	8002a30 <prvTimerTask+0x8>
	...

08002a50 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a5a:	f7fe ff77 	bl	800194c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f866 	bl	8002b34 <prvSampleTimeNow>
 8002a68:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d130      	bne.n	8002ad2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <prvProcessTimerOrBlockTask+0x3c>
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d806      	bhi.n	8002a8c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a7e:	f7fe ff73 	bl	8001968 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff9f 	bl	80029c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a8a:	e024      	b.n	8002ad6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <prvProcessTimerOrBlockTask+0x90>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <prvProcessTimerOrBlockTask+0x50>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <prvProcessTimerOrBlockTask+0x52>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <prvProcessTimerOrBlockTask+0x94>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe fccb 	bl	800144c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002ab6:	f7fe ff57 	bl	8001968 <xTaskResumeAll>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <prvProcessTimerOrBlockTask+0x98>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
    }
 8002ad0:	e001      	b.n	8002ad6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002ad2:	f7fe ff49 	bl	8001968 <xTaskResumeAll>
    }
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200001f0 	.word	0x200001f0
 8002ae4:	200001f4 	.word	0x200001f4
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <prvGetNextExpireTime+0x44>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <prvGetNextExpireTime+0x16>
 8002afe:	2201      	movs	r2, #1
 8002b00:	e000      	b.n	8002b04 <prvGetNextExpireTime+0x18>
 8002b02:	2200      	movs	r2, #0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <prvGetNextExpireTime+0x44>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e001      	b.n	8002b20 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b20:	68fb      	ldr	r3, [r7, #12]
    }
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200001ec 	.word	0x200001ec

08002b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002b3c:	f7ff f81c 	bl	8001b78 <xTaskGetTickCount>
 8002b40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <prvSampleTimeNow+0x3c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d205      	bcs.n	8002b58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b4c:	f000 f91c 	bl	8002d88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e002      	b.n	8002b5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <prvSampleTimeNow+0x3c>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002b64:	68fb      	ldr	r3, [r7, #12]
    }
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200001fc 	.word	0x200001fc

08002b74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d812      	bhi.n	8002bc0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e01b      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <prvInsertTimerInActiveList+0x7c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7fd fd26 	bl	800060a <vListInsert>
 8002bbe:	e012      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d206      	bcs.n	8002bd6 <prvInsertTimerInActiveList+0x62>
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e007      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bd6:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <prvInsertTimerInActiveList+0x80>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7fd fd12 	bl	800060a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002be6:	697b      	ldr	r3, [r7, #20]
    }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200001f0 	.word	0x200001f0
 8002bf4:	200001ec 	.word	0x200001ec

08002bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002c0a:	e0a9      	b.n	8002d60 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f2c0 80a6 	blt.w	8002d60 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fd29 	bl	800067c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff81 	bl	8002b34 <prvSampleTimeNow>
 8002c32:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f200 808e 	bhi.w	8002d5a <prvProcessReceivedCommands+0x162>
 8002c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <prvProcessReceivedCommands+0x4c>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c69 	.word	0x08002c69
 8002c4c:	08002cd1 	.word	0x08002cd1
 8002c50:	08002ce5 	.word	0x08002ce5
 8002c54:	08002d31 	.word	0x08002d31
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c69 	.word	0x08002c69
 8002c60:	08002cd1 	.word	0x08002cd1
 8002c64:	08002ce5 	.word	0x08002ce5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	18d1      	adds	r1, r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	69f8      	ldr	r0, [r7, #28]
 8002c88:	f7ff ff74 	bl	8002b74 <prvInsertTimerInActiveList>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d065      	beq.n	8002d5e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4619      	mov	r1, r3
 8002cac:	69f8      	ldr	r0, [r7, #28]
 8002cae:	f7ff fe69 	bl	8002984 <prvReloadTimer>
 8002cb2:	e008      	b.n	8002cc6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	69f8      	ldr	r0, [r7, #28]
 8002ccc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002cce:	e046      	b.n	8002d5e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002ce2:	e03d      	b.n	8002d60 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	617b      	str	r3, [r7, #20]
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	18d1      	adds	r1, r2, r3
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	69f8      	ldr	r0, [r7, #28]
 8002d2a:	f7ff ff23 	bl	8002b74 <prvInsertTimerInActiveList>
                        break;
 8002d2e:	e017      	b.n	8002d60 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	f000 fc58 	bl	80035f4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d44:	e00c      	b.n	8002d60 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002d58:	e002      	b.n	8002d60 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <prvProcessReceivedCommands+0x168>
                        break;
 8002d5e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <prvProcessReceivedCommands+0x18c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f107 0108 	add.w	r1, r7, #8
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f814 	bl	8000d98 <xQueueReceive>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f47f af4a 	bne.w	8002c0c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200001f4 	.word	0x200001f4

08002d88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d8e:	e009      	b.n	8002da4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d90:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <prvSwitchTimerLists+0x44>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	f7ff fe12 	bl	80029c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <prvSwitchTimerLists+0x44>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <prvSwitchTimerLists+0x44>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <prvSwitchTimerLists+0x48>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <prvSwitchTimerLists+0x44>)
 8002dba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <prvSwitchTimerLists+0x48>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
    }
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200001ec 	.word	0x200001ec
 8002dd0:	200001f0 	.word	0x200001f0

08002dd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002dd8:	f000 f9b4 	bl	8003144 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ddc:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11d      	bne.n	8002e20 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002de4:	4811      	ldr	r0, [pc, #68]	@ (8002e2c <prvCheckForValidListAndQueue+0x58>)
 8002de6:	f7fd fbe3 	bl	80005b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002dea:	4811      	ldr	r0, [pc, #68]	@ (8002e30 <prvCheckForValidListAndQueue+0x5c>)
 8002dec:	f7fd fbe0 	bl	80005b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <prvCheckForValidListAndQueue+0x60>)
 8002df2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <prvCheckForValidListAndQueue+0x58>)
 8002df4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <prvCheckForValidListAndQueue+0x64>)
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <prvCheckForValidListAndQueue+0x5c>)
 8002dfa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	210c      	movs	r1, #12
 8002e00:	200a      	movs	r0, #10
 8002e02:	f7fd fcf7 	bl	80007f4 <xQueueGenericCreate>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e0a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <prvCheckForValidListAndQueue+0x68>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fac6 	bl	80013ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e20:	f000 f9c2 	bl	80031a8 <vPortExitCritical>
    }
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200001f4 	.word	0x200001f4
 8002e2c:	200001c4 	.word	0x200001c4
 8002e30:	200001d8 	.word	0x200001d8
 8002e34:	200001ec 	.word	0x200001ec
 8002e38:	200001f0 	.word	0x200001f0
 8002e3c:	08009b60 	.word	0x08009b60

08002e40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3b04      	subs	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e70:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea4 <pxPortInitialiseStack+0x64>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b14      	subs	r3, #20
 8002e7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b04      	subs	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f06f 0202 	mvn.w	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b20      	subs	r3, #32
 8002e94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	08002ea9 	.word	0x08002ea9

08002ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002eb2:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <prvTaskExitError+0x58>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d00b      	beq.n	8002ed4 <prvTaskExitError+0x2c>
    __asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60fb      	str	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <prvTaskExitError+0x28>
    __asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	60bb      	str	r3, [r7, #8]
}
 8002ee6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ee8:	bf00      	nop
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0fc      	beq.n	8002eea <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000004 	.word	0x20000004
	...

08002f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f10:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <pxCurrentTCBConst2>)
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	f380 8809 	msr	PSP, r0
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f380 8811 	msr	BASEPRI, r0
 8002f2a:	4770      	bx	lr
 8002f2c:	f3af 8000 	nop.w

08002f30 <pxCurrentTCBConst2>:
 8002f30:	200000c0 	.word	0x200000c0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop

08002f38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f38:	4808      	ldr	r0, [pc, #32]	@ (8002f5c <prvPortStartFirstTask+0x24>)
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f380 8808 	msr	MSP, r0
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8814 	msr	CONTROL, r0
 8002f4a:	b662      	cpsie	i
 8002f4c:	b661      	cpsie	f
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	df00      	svc	0
 8002f58:	bf00      	nop
 8002f5a:	0000      	.short	0x0000
 8002f5c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop

08002f64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	@ 0x30
 8002f68:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f6a:	4b69      	ldr	r3, [pc, #420]	@ (8003110 <xPortStartScheduler+0x1ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a69      	ldr	r2, [pc, #420]	@ (8003114 <xPortStartScheduler+0x1b0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10b      	bne.n	8002f8c <xPortStartScheduler+0x28>
    __asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f8c:	4b60      	ldr	r3, [pc, #384]	@ (8003110 <xPortStartScheduler+0x1ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a61      	ldr	r2, [pc, #388]	@ (8003118 <xPortStartScheduler+0x1b4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10b      	bne.n	8002fae <xPortStartScheduler+0x4a>
    __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	623b      	str	r3, [r7, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002fae:	4b5b      	ldr	r3, [pc, #364]	@ (800311c <xPortStartScheduler+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	332c      	adds	r3, #44	@ 0x2c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a59      	ldr	r2, [pc, #356]	@ (8003120 <xPortStartScheduler+0x1bc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <xPortStartScheduler+0x74>
    __asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	61fb      	str	r3, [r7, #28]
}
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	3338      	adds	r3, #56	@ 0x38
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a51      	ldr	r2, [pc, #324]	@ (8003124 <xPortStartScheduler+0x1c0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <xPortStartScheduler+0x98>
    __asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	61bb      	str	r3, [r7, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003000:	4b49      	ldr	r3, [pc, #292]	@ (8003128 <xPortStartScheduler+0x1c4>)
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	22ff      	movs	r2, #255	@ 0xff
 8003010:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b41      	ldr	r3, [pc, #260]	@ (800312c <xPortStartScheduler+0x1c8>)
 8003026:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003028:	4b40      	ldr	r3, [pc, #256]	@ (800312c <xPortStartScheduler+0x1c8>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <xPortStartScheduler+0xe4>
    __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	617b      	str	r3, [r7, #20]
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <xPortStartScheduler+0x11a>
    __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	613b      	str	r3, [r7, #16]
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	e7fd      	b.n	800306a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d0f1      	beq.n	800306e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d103      	bne.n	8003098 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003090:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <xPortStartScheduler+0x1cc>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e004      	b.n	80030a2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	4a24      	ldr	r2, [pc, #144]	@ (8003130 <xPortStartScheduler+0x1cc>)
 80030a0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <xPortStartScheduler+0x1cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <xPortStartScheduler+0x1cc>)
 80030aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030ac:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <xPortStartScheduler+0x1cc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <xPortStartScheduler+0x1cc>)
 80030b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <xPortStartScheduler+0x1d0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <xPortStartScheduler+0x1d0>)
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <xPortStartScheduler+0x1d0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <xPortStartScheduler+0x1d0>)
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80030d8:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <xPortStartScheduler+0x1d4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030de:	f000 f8e5 	bl	80032ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030e2:	4b16      	ldr	r3, [pc, #88]	@ (800313c <xPortStartScheduler+0x1d8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030e8:	f000 f904 	bl	80032f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030ec:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <xPortStartScheduler+0x1dc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <xPortStartScheduler+0x1dc>)
 80030f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80030f8:	f7ff ff1e 	bl	8002f38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80030fc:	f7fe fe72 	bl	8001de4 <vTaskSwitchContext>
    prvTaskExitError();
 8003100:	f7ff fed2 	bl	8002ea8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	@ 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	410fc271 	.word	0x410fc271
 8003118:	410fc270 	.word	0x410fc270
 800311c:	e000ed08 	.word	0xe000ed08
 8003120:	08002f11 	.word	0x08002f11
 8003124:	08003201 	.word	0x08003201
 8003128:	e000e400 	.word	0xe000e400
 800312c:	20000200 	.word	0x20000200
 8003130:	20000204 	.word	0x20000204
 8003134:	e000ed20 	.word	0xe000ed20
 8003138:	e000ed1c 	.word	0xe000ed1c
 800313c:	20000004 	.word	0x20000004
 8003140:	e000ef34 	.word	0xe000ef34

08003144 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
    __asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	607b      	str	r3, [r7, #4]
}
 800315c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <vPortEnterCritical+0x5c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	4a0e      	ldr	r2, [pc, #56]	@ (80031a0 <vPortEnterCritical+0x5c>)
 8003166:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003168:	4b0d      	ldr	r3, [pc, #52]	@ (80031a0 <vPortEnterCritical+0x5c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d110      	bne.n	8003192 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <vPortEnterCritical+0x60>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <vPortEnterCritical+0x4e>
    __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	603b      	str	r3, [r7, #0]
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	e7fd      	b.n	800318e <vPortEnterCritical+0x4a>
    }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000004 	.word	0x20000004
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <vPortExitCritical+0x50>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <vPortExitCritical+0x26>
    __asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	607b      	str	r3, [r7, #4]
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	e7fd      	b.n	80031ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <vPortExitCritical+0x50>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <vPortExitCritical+0x50>)
 80031d6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80031d8:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <vPortExitCritical+0x50>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <vPortExitCritical+0x44>
 80031e0:	2300      	movs	r3, #0
 80031e2:	603b      	str	r3, [r7, #0]
    __asm volatile
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f383 8811 	msr	BASEPRI, r3
}
 80031ea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	20000004 	.word	0x20000004
 80031fc:	00000000 	.word	0x00000000

08003200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003200:	f3ef 8009 	mrs	r0, PSP
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <pxCurrentTCBConst>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f01e 0f10 	tst.w	lr, #16
 8003210:	bf08      	it	eq
 8003212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321a:	6010      	str	r0, [r2, #0]
 800321c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003224:	f380 8811 	msr	BASEPRI, r0
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f7fe fdd8 	bl	8001de4 <vTaskSwitchContext>
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f380 8811 	msr	BASEPRI, r0
 800323c:	bc09      	pop	{r0, r3}
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	6808      	ldr	r0, [r1, #0]
 8003242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003246:	f01e 0f10 	tst.w	lr, #16
 800324a:	bf08      	it	eq
 800324c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003250:	f380 8809 	msr	PSP, r0
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	f3af 8000 	nop.w

08003260 <pxCurrentTCBConst>:
 8003260:	200000c0 	.word	0x200000c0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
    __asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
}
 8003280:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003282:	f7fe fc95 	bl	8001bb0 <xTaskIncrementTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <SysTick_Handler+0x40>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f383 8811 	msr	BASEPRI, r3
}
 800329e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <vPortSetupTimerInterrupt+0x34>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <vPortSetupTimerInterrupt+0x38>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <vPortSetupTimerInterrupt+0x3c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <vPortSetupTimerInterrupt+0x40>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <vPortSetupTimerInterrupt+0x44>)
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <vPortSetupTimerInterrupt+0x34>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010
 80032e4:	e000e018 	.word	0xe000e018
 80032e8:	20000008 	.word	0x20000008
 80032ec:	10624dd3 	.word	0x10624dd3
 80032f0:	e000e014 	.word	0xe000e014

080032f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80032f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003304 <vPortEnableVFP+0x10>
 80032f8:	6801      	ldr	r1, [r0, #0]
 80032fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80032fe:	6001      	str	r1, [r0, #0]
 8003300:	4770      	bx	lr
 8003302:	0000      	.short	0x0000
 8003304:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop

0800330c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003312:	f3ef 8305 	mrs	r3, IPSR
 8003316:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d915      	bls.n	800334a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800331e:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <vPortValidateInterruptPriority+0x74>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <vPortValidateInterruptPriority+0x78>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	7afa      	ldrb	r2, [r7, #11]
 800332e:	429a      	cmp	r2, r3
 8003330:	d20b      	bcs.n	800334a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <vPortValidateInterruptPriority+0x7c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003352:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <vPortValidateInterruptPriority+0x80>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90b      	bls.n	8003372 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	603b      	str	r3, [r7, #0]
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <vPortValidateInterruptPriority+0x62>
    }
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e3f0 	.word	0xe000e3f0
 8003384:	20000200 	.word	0x20000200
 8003388:	e000ed0c 	.word	0xe000ed0c
 800338c:	20000204 	.word	0x20000204

08003390 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d022      	beq.n	80033e8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80033a2:	2308      	movs	r3, #8
 80033a4:	43db      	mvns	r3, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d81b      	bhi.n	80033e4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80033ac:	2208      	movs	r2, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	f1c3 0308 	rsb	r3, r3, #8
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	43db      	mvns	r3, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d804      	bhi.n	80033de <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d8:	4413      	add	r3, r2
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	e004      	b.n	80033e8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e001      	b.n	80033e8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80033e8:	f7fe fab0 	bl	800194c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033ec:	4b7a      	ldr	r3, [pc, #488]	@ (80035d8 <pvPortMalloc+0x248>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80033f4:	f000 f978 	bl	80036e8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f2c0 80d3 	blt.w	80035a6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80cf 	beq.w	80035a6 <pvPortMalloc+0x216>
 8003408:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <pvPortMalloc+0x24c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	f200 80c9 	bhi.w	80035a6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003414:	4b72      	ldr	r3, [pc, #456]	@ (80035e0 <pvPortMalloc+0x250>)
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003418:	4b71      	ldr	r3, [pc, #452]	@ (80035e0 <pvPortMalloc+0x250>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800341e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003420:	4a70      	ldr	r2, [pc, #448]	@ (80035e4 <pvPortMalloc+0x254>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d305      	bcc.n	8003432 <pvPortMalloc+0xa2>
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	4a6f      	ldr	r2, [pc, #444]	@ (80035e8 <pvPortMalloc+0x258>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d801      	bhi.n	8003432 <pvPortMalloc+0xa2>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <pvPortMalloc+0xa4>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d129      	bne.n	800348c <pvPortMalloc+0xfc>
    __asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	623b      	str	r3, [r7, #32]
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	4a61      	ldr	r2, [pc, #388]	@ (80035e4 <pvPortMalloc+0x254>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d305      	bcc.n	800346e <pvPortMalloc+0xde>
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	4a60      	ldr	r2, [pc, #384]	@ (80035e8 <pvPortMalloc+0x258>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d801      	bhi.n	800346e <pvPortMalloc+0xde>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <pvPortMalloc+0xe0>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <pvPortMalloc+0xfc>
    __asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	61fb      	str	r3, [r7, #28]
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d903      	bls.n	800349e <pvPortMalloc+0x10e>
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1d8      	bne.n	8003450 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800349e:	4b4e      	ldr	r3, [pc, #312]	@ (80035d8 <pvPortMalloc+0x248>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d07e      	beq.n	80035a6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2208      	movs	r2, #8
 80034ae:	4413      	add	r3, r2
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	4a4b      	ldr	r2, [pc, #300]	@ (80035e4 <pvPortMalloc+0x254>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d305      	bcc.n	80034c6 <pvPortMalloc+0x136>
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	4a4a      	ldr	r2, [pc, #296]	@ (80035e8 <pvPortMalloc+0x258>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d801      	bhi.n	80034c6 <pvPortMalloc+0x136>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <pvPortMalloc+0x138>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <pvPortMalloc+0x154>
    __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	61bb      	str	r3, [r7, #24]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80034ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90b      	bls.n	800350e <pvPortMalloc+0x17e>
    __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	617b      	str	r3, [r7, #20]
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800350e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	2308      	movs	r3, #8
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	429a      	cmp	r2, r3
 800351c:	d924      	bls.n	8003568 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800351e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4413      	add	r3, r2
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <pvPortMalloc+0x1b8>
    __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003566:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <pvPortMalloc+0x24c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <pvPortMalloc+0x24c>)
 8003574:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <pvPortMalloc+0x24c>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <pvPortMalloc+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d203      	bcs.n	800358a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003582:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <pvPortMalloc+0x24c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <pvPortMalloc+0x25c>)
 8003588:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003594:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <pvPortMalloc+0x260>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <pvPortMalloc+0x260>)
 80035a4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035a6:	f7fe f9df 	bl	8001968 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <pvPortMalloc+0x23c>
    __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <pvPortMalloc+0x238>
    return pvReturn;
 80035cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3738      	adds	r7, #56	@ 0x38
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20012e10 	.word	0x20012e10
 80035dc:	20012e14 	.word	0x20012e14
 80035e0:	20012e08 	.word	0x20012e08
 80035e4:	20000208 	.word	0x20000208
 80035e8:	20012e07 	.word	0x20012e07
 80035ec:	20012e18 	.word	0x20012e18
 80035f0:	20012e1c 	.word	0x20012e1c

080035f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d064      	beq.n	80036d0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003606:	2308      	movs	r3, #8
 8003608:	425b      	negs	r3, r3
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4a30      	ldr	r2, [pc, #192]	@ (80036d8 <vPortFree+0xe4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d305      	bcc.n	8003628 <vPortFree+0x34>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4a2f      	ldr	r2, [pc, #188]	@ (80036dc <vPortFree+0xe8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d801      	bhi.n	8003628 <vPortFree+0x34>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <vPortFree+0x36>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <vPortFree+0x52>
    __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	617b      	str	r3, [r7, #20]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <vPortFree+0x72>
    __asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	613b      	str	r3, [r7, #16]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <vPortFree+0x92>
    __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60fb      	str	r3, [r7, #12]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0fdb      	lsrs	r3, r3, #31
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80036aa:	f7fe f94f 	bl	800194c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <vPortFree+0xec>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <vPortFree+0xec>)
 80036ba:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036bc:	69b8      	ldr	r0, [r7, #24]
 80036be:	f000 f86d 	bl	800379c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <vPortFree+0xf0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <vPortFree+0xf0>)
 80036ca:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036cc:	f7fe f94c 	bl	8001968 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036d0:	bf00      	nop
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000208 	.word	0x20000208
 80036dc:	20012e07 	.word	0x20012e07
 80036e0:	20012e14 	.word	0x20012e14
 80036e4:	20012e20 	.word	0x20012e20

080036e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036ee:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80036f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <prvHeapInit+0xa0>)
 80036f6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3307      	adds	r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <prvHeapInit+0xa0>)
 8003718:	4413      	add	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <prvHeapInit+0xa4>)
 8003720:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <prvHeapInit+0xa4>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4413      	add	r3, r2
 800372e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003730:	2208      	movs	r2, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f023 0307 	bic.w	r3, r3, #7
 800373e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <prvHeapInit+0xa8>)
 8003744:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <prvHeapInit+0xa8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <prvHeapInit+0xa8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <prvHeapInit+0xa8>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a08      	ldr	r2, [pc, #32]	@ (8003794 <prvHeapInit+0xac>)
 8003772:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <prvHeapInit+0xb0>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20000208 	.word	0x20000208
 800378c:	20012e08 	.word	0x20012e08
 8003790:	20012e10 	.word	0x20012e10
 8003794:	20012e18 	.word	0x20012e18
 8003798:	20012e14 	.word	0x20012e14

0800379c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <prvInsertBlockIntoFreeList+0xe4>)
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e002      	b.n	80037b0 <prvInsertBlockIntoFreeList+0x14>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d8f7      	bhi.n	80037aa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a30      	ldr	r2, [pc, #192]	@ (8003880 <prvInsertBlockIntoFreeList+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003884 <prvInsertBlockIntoFreeList+0xe8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d305      	bcc.n	80037d6 <prvInsertBlockIntoFreeList+0x3a>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003888 <prvInsertBlockIntoFreeList+0xec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d801      	bhi.n	80037d6 <prvInsertBlockIntoFreeList+0x3a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <prvInsertBlockIntoFreeList+0x3c>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60fb      	str	r3, [r7, #12]
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d108      	bne.n	8003818 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	441a      	add	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	441a      	add	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d118      	bne.n	800385e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b16      	ldr	r3, [pc, #88]	@ (800388c <prvInsertBlockIntoFreeList+0xf0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d00d      	beq.n	8003854 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e008      	b.n	8003866 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <prvInsertBlockIntoFreeList+0xf0>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e003      	b.n	8003866 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d002      	beq.n	8003874 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	20012e08 	.word	0x20012e08
 8003884:	20000208 	.word	0x20000208
 8003888:	20012e07 	.word	0x20012e07
 800388c:	20012e10 	.word	0x20012e10

08003890 <CAN_Init>:
#include "main_1.h"

void CAN_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8003894:	4b17      	ldr	r3, [pc, #92]	@ (80038f4 <CAN_Init+0x64>)
 8003896:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <CAN_Init+0x68>)
 8003898:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800389a:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <CAN_Init+0x64>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 80038a0:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <CAN_Init+0x64>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <CAN_Init+0x64>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <CAN_Init+0x64>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <CAN_Init+0x64>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <CAN_Init+0x64>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	761a      	strb	r2, [r3, #24]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <CAN_Init+0x64>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	775a      	strb	r2, [r3, #29]

	//Time Quanta Parameter settings
//	hcan.Init.Prescaler = 5; //To get 250Kbps Pre-scalar is 10
	hcan.Init.Prescaler = 10;
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <CAN_Init+0x64>)
 80038c6:	220a      	movs	r2, #10
 80038c8:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <CAN_Init+0x64>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80038d0:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <CAN_Init+0x64>)
 80038d2:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80038d6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <CAN_Init+0x64>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
*/

	if(HAL_CAN_Init(&hcan) != HAL_OK)
 80038de:	4805      	ldr	r0, [pc, #20]	@ (80038f4 <CAN_Init+0x64>)
 80038e0:	f000 ffde 	bl	80048a0 <HAL_CAN_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <CAN_Init+0x5e>
		{
			error_handler();
 80038ea:	f000 fcf9 	bl	80042e0 <error_handler>
		}

}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20012e88 	.word	0x20012e88
 80038f8:	40006400 	.word	0x40006400

080038fc <CAN_Tx>:

void CAN_Tx(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	@ 0x28
 8003900:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef CAN_Tx;
	uint32_t TxMailbox;
	//uint8_t data_msg[5] = {'H','E','L','L','0'};
	uint8_t data_msg[8] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};
 8003902:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <CAN_Tx+0x48>)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800390a:	e883 0003 	stmia.w	r3, {r0, r1}

	CAN_Tx.StdId = 0x330;
 800390e:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8003912:	613b      	str	r3, [r7, #16]
	CAN_Tx.IDE = CAN_ID_STD;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
	CAN_Tx.RTR = CAN_RTR_DATA;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
	CAN_Tx.DLC = 8;
 800391c:	2308      	movs	r3, #8
 800391e:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(&hcan, &CAN_Tx, data_msg, &TxMailbox) != HAL_OK)
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	1d3a      	adds	r2, r7, #4
 8003926:	f107 0110 	add.w	r1, r7, #16
 800392a:	4807      	ldr	r0, [pc, #28]	@ (8003948 <CAN_Tx+0x4c>)
 800392c:	f001 f9d8 	bl	8004ce0 <HAL_CAN_AddTxMessage>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <CAN_Tx+0x3e>
		{
			error_handler();
 8003936:	f000 fcd3 	bl	80042e0 <error_handler>
		}
}
 800393a:	bf00      	nop
 800393c:	3728      	adds	r7, #40	@ 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08009b68 	.word	0x08009b68
 8003948:	20012e88 	.word	0x20012e88

0800394c <CAN_Filter_Config>:
	*/

}

void CAN_Filter_Config(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	@ 0x28
 8003950:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_Filter;

	CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8003952:	2301      	movs	r3, #1
 8003954:	623b      	str	r3, [r7, #32]
	CAN_Filter.FilterIdHigh = 0x620 << 5;
 8003956:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800395a:	603b      	str	r3, [r7, #0]
	CAN_Filter.FilterIdLow = 0x0000; //For Standard ID's(11bit) Low filter ID is not used
 800395c:	2300      	movs	r3, #0
 800395e:	607b      	str	r3, [r7, #4]
	CAN_Filter.FilterMaskIdHigh = 0x7F0 << 5;
 8003960:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8003964:	60bb      	str	r3, [r7, #8]
	CAN_Filter.FilterMaskIdLow = 0x0000; //For Standard ID's(11bit) Low filter MaskID is not used
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
	CAN_Filter.FilterFIFOAssignment = CAN_RX_FIFO0; //Can use CAN_FILTER_FIFO0 as well
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
	CAN_Filter.FilterBank = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
	CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
	CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003976:	2301      	movs	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan, &CAN_Filter) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	4619      	mov	r1, r3
 800397e:	4806      	ldr	r0, [pc, #24]	@ (8003998 <CAN_Filter_Config+0x4c>)
 8003980:	f001 f88a 	bl	8004a98 <HAL_CAN_ConfigFilter>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <CAN_Filter_Config+0x42>
		{
			error_handler();
 800398a:	f000 fca9 	bl	80042e0 <error_handler>
		}

}
 800398e:	bf00      	nop
 8003990:	3728      	adds	r7, #40	@ 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20012e88 	.word	0x20012e88

0800399c <HAL_CAN_TxMailbox0CompleteCallback>:

/*CAN Interrupt Callbacks for TX & RX*/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	//send_msg("\r\nMessage Transmitted:Mailbox0\r\n");
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox1");
 80039b8:	4803      	ldr	r0, [pc, #12]	@ (80039c8 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80039ba:	f000 fc65 	bl	8004288 <send_msg>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08009b7c 	.word	0x08009b7c

080039cc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox2");
 80039d4:	4803      	ldr	r0, [pc, #12]	@ (80039e4 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80039d6:	f000 fc57 	bl	8004288 <send_msg>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	08009b9c 	.word	0x08009b9c

080039e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
}
#endif

#ifdef _WITH_RTOS_
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b094      	sub	sp, #80	@ 0x50
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	CAN_data_t canMessage;
    CAN_RxHeaderTypeDef CAN_RxHeader;
    uint8_t Rec_data[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, Rec_data) != HAL_OK)
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	f107 0218 	add.w	r2, r7, #24
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 fa40 	bl	8004e80 <HAL_CAN_GetRxMessage>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    {
        error_handler();
 8003a06:	f000 fc6b 	bl	80042e0 <error_handler>
    }

    CAN_Tx();
 8003a0a:	f7ff ff77 	bl	80038fc <CAN_Tx>

    canMessage.canID = CAN_RxHeader.StdId;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
    //canMessage.data[] = Rec_data;
    memcpy(canMessage.data, Rec_data, sizeof(Rec_data));
 8003a12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a16:	f107 0210 	add.w	r2, r7, #16
 8003a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a1e:	e883 0003 	stmia.w	r3, {r0, r1}


    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
    xQueueSendFromISR(canqueue, &canMessage, &xHigherPriorityTaskWoken);
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	f107 020c 	add.w	r2, r7, #12
 8003a2e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003a32:	2300      	movs	r3, #0
 8003a34:	f7fd f852 	bl	8000adc <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8003a3e:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	f3bf 8f6f 	isb	sy

}
 8003a4e:	bf00      	nop
 8003a50:	3750      	adds	r7, #80	@ 0x50
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20012f54 	.word	0x20012f54
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <speed>:
}
#endif

#ifdef _WITH_RTOS_
void speed(uint8_t *arr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
    //LCD_data_t speedData; // Create a structure variable

    speed_val = arr[2] << 8 | arr[3];
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	3203      	adds	r2, #3
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <speed+0x70>)
 8003a80:	601a      	str	r2, [r3, #0]
    speed_kmph = (uint32_t)(0.1183f * (float)speed_val);
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <speed+0x70>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003ad4 <speed+0x74>
 8003a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9a:	ee17 2a90 	vmov	r2, s15
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad8 <speed+0x78>)
 8003aa0:	601a      	str	r2, [r3, #0]
    //speedData.value = (uint32_t)(0.1183f * (float)speed_val);
    //speedData.msg = "Speed (km/h)";

    xQueueSendFromISR(speedqueue, &speed_kmph, &xHigherPriorityTaskWoken);
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <speed+0x7c>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f107 020c 	add.w	r2, r7, #12
 8003aaa:	2300      	movs	r3, #0
 8003aac:	490a      	ldr	r1, [pc, #40]	@ (8003ad8 <speed+0x78>)
 8003aae:	f7fd f815 	bl	8000adc <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <speed+0x68>
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <speed+0x80>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20012e24 	.word	0x20012e24
 8003ad4:	3df24745 	.word	0x3df24745
 8003ad8:	20012e28 	.word	0x20012e28
 8003adc:	20012f58 	.word	0x20012f58
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <Mode>:
}
#endif

#ifdef _WITH_RTOS_
void Mode(uint8_t *arr)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	//LCD_data_t data;
	static char mode[20] = {};
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
	send_msg("Entered Mode functionality\r\n ");
 8003af0:	4830      	ldr	r0, [pc, #192]	@ (8003bb4 <Mode+0xd0>)
 8003af2:	f000 fbc9 	bl	8004288 <send_msg>

		if(arr[2] == 0x26)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3302      	adds	r3, #2
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b26      	cmp	r3, #38	@ 0x26
 8003afe:	d103      	bne.n	8003b08 <Mode+0x24>
		{
			//data.msg = "MODE : ECO";
			strcpy(mode,"ECO");
 8003b00:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <Mode+0xd4>)
 8003b02:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <Mode+0xd8>)
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e03d      	b.n	8003b84 <Mode+0xa0>


		}
		else if(arr[2] == 0x46)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b46      	cmp	r3, #70	@ 0x46
 8003b10:	d10a      	bne.n	8003b28 <Mode+0x44>
		{
			//data.msg = "MODE : Normal";
			strcpy(mode,"Normal");
 8003b12:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <Mode+0xd4>)
 8003b14:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc0 <Mode+0xdc>)
 8003b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b1a:	6018      	str	r0, [r3, #0]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	8019      	strh	r1, [r3, #0]
 8003b20:	3302      	adds	r3, #2
 8003b22:	0c0a      	lsrs	r2, r1, #16
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e02d      	b.n	8003b84 <Mode+0xa0>
			//send_msg("Normal mode\r\n");
		}
		else if(arr[2] == 0x86)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b86      	cmp	r3, #134	@ 0x86
 8003b30:	d10a      	bne.n	8003b48 <Mode+0x64>
		{
			//data.msg = "MODE : Sports";
			strcpy(mode,"Sports");
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <Mode+0xd4>)
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <Mode+0xe0>)
 8003b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3a:	6018      	str	r0, [r3, #0]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	8019      	strh	r1, [r3, #0]
 8003b40:	3302      	adds	r3, #2
 8003b42:	0c0a      	lsrs	r2, r1, #16
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e01d      	b.n	8003b84 <Mode+0xa0>
		}
		else if(arr[2] == 0x60 && speed_kmph == 0x00)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b60      	cmp	r3, #96	@ 0x60
 8003b50:	d109      	bne.n	8003b66 <Mode+0x82>
 8003b52:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <Mode+0xe4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <Mode+0x82>
		{
			//data.msg = "Park Mode";
			strcpy(mode,"Park Mode");
 8003b5a:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <Mode+0xd4>)
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <Mode+0xe8>)
 8003b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b60:	c303      	stmia	r3!, {r0, r1}
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	e00e      	b.n	8003b84 <Mode+0xa0>
		}
		else if(arr[3] == 0x80)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b80      	cmp	r3, #128	@ 0x80
 8003b6e:	d106      	bne.n	8003b7e <Mode+0x9a>
		{
			//data.msg = "Reverse Mode";
			strcpy(mode,"Reverse Mode");
 8003b70:	4a11      	ldr	r2, [pc, #68]	@ (8003bb8 <Mode+0xd4>)
 8003b72:	4b17      	ldr	r3, [pc, #92]	@ (8003bd0 <Mode+0xec>)
 8003b74:	4614      	mov	r4, r2
 8003b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b78:	c407      	stmia	r4!, {r0, r1, r2}
 8003b7a:	7023      	strb	r3, [r4, #0]
 8003b7c:	e002      	b.n	8003b84 <Mode+0xa0>
		}
		else
		{
			send_msg("Invalid Byte value for MOODE\r\n");
 8003b7e:	4815      	ldr	r0, [pc, #84]	@ (8003bd4 <Mode+0xf0>)
 8003b80:	f000 fb82 	bl	8004288 <send_msg>
			//error_handler();
		}

	    xQueueSendFromISR(modequeue,&mode,&xHigherPriorityTaskWoken);
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <Mode+0xf4>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	f107 020c 	add.w	r2, r7, #12
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	490a      	ldr	r1, [pc, #40]	@ (8003bb8 <Mode+0xd4>)
 8003b90:	f7fc ffa4 	bl	8000adc <xQueueGenericSendFromISR>

	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <Mode+0xc6>
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <Mode+0xf8>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy

}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08009bbc 	.word	0x08009bbc
 8003bb8:	20012e2c 	.word	0x20012e2c
 8003bbc:	004f4345 	.word	0x004f4345
 8003bc0:	08009bdc 	.word	0x08009bdc
 8003bc4:	08009be4 	.word	0x08009be4
 8003bc8:	20012e28 	.word	0x20012e28
 8003bcc:	08009bec 	.word	0x08009bec
 8003bd0:	08009bf8 	.word	0x08009bf8
 8003bd4:	08009c08 	.word	0x08009c08
 8003bd8:	20012f5c 	.word	0x20012f5c
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <HAL_CAN_ErrorCallback>:
#endif

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	send_msg("Error Occurred");
 8003be8:	4803      	ldr	r0, [pc, #12]	@ (8003bf8 <HAL_CAN_ErrorCallback+0x18>)
 8003bea:	f000 fb4d 	bl	8004288 <send_msg>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08009c28 	.word	0x08009c28

08003bfc <LCD_Init>:
    LCD_Command(LCD_ENTRY_MODE);    // Increment cursor, no shift
}
#endif

#ifdef _WITH_RTOS_
void LCD_Init(void) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	// Wait for LCD to power up
    vTaskDelay(pdMS_TO_TICKS(50));
 8003c00:	2032      	movs	r0, #50	@ 0x32
 8003c02:	f7fd fddf 	bl	80017c4 <vTaskDelay>
    //HAL_Delay(50);

    // Initialization sequence
    LCD_Send(0x03, 0); // Function set (8-bit mode)
 8003c06:	2100      	movs	r1, #0
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 f83f 	bl	8003c8c <LCD_Send>
    vTaskDelay(pdMS_TO_TICKS(5));      // Wait >4.1ms
 8003c0e:	2005      	movs	r0, #5
 8003c10:	f7fd fdd8 	bl	80017c4 <vTaskDelay>
    LCD_Send(0x03, 0); // Repeat
 8003c14:	2100      	movs	r1, #0
 8003c16:	2003      	movs	r0, #3
 8003c18:	f000 f838 	bl	8003c8c <LCD_Send>
    vTaskDelay(pdMS_TO_TICKS(1));      // Wait >100us
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fd fdd1 	bl	80017c4 <vTaskDelay>
    LCD_Send(0x03, 0); // Repeat
 8003c22:	2100      	movs	r1, #0
 8003c24:	2003      	movs	r0, #3
 8003c26:	f000 f831 	bl	8003c8c <LCD_Send>
    vTaskDelay(pdMS_TO_TICKS(5));
 8003c2a:	2005      	movs	r0, #5
 8003c2c:	f7fd fdca 	bl	80017c4 <vTaskDelay>
    LCD_Send(0x02, 0); // Set 4-bit mode
 8003c30:	2100      	movs	r1, #0
 8003c32:	2002      	movs	r0, #2
 8003c34:	f000 f82a 	bl	8003c8c <LCD_Send>

    // Configure LCD
    LCD_Command(LCD_FUNCTION_SET);  // 4-bit mode, 2-line display
 8003c38:	2028      	movs	r0, #40	@ 0x28
 8003c3a:	f000 f80b 	bl	8003c54 <LCD_Command>
    LCD_Command(LCD_DISPLAY_ON);    // Display ON, Cursor OFF
 8003c3e:	200c      	movs	r0, #12
 8003c40:	f000 f808 	bl	8003c54 <LCD_Command>
    LCD_Command(LCD_CLEAR);         // Clear display
 8003c44:	2001      	movs	r0, #1
 8003c46:	f000 f805 	bl	8003c54 <LCD_Command>
    LCD_Command(LCD_ENTRY_MODE);    // Increment cursor, no shift
 8003c4a:	2006      	movs	r0, #6
 8003c4c:	f000 f802 	bl	8003c54 <LCD_Command>
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LCD_Command>:
#endif

void LCD_Command(uint8_t cmd) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0); // Send as command (RS = 0)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f812 	bl	8003c8c <LCD_Send>
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <LCD_Data>:

void LCD_Data(uint8_t data) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_RS); // Send as data (RS = 1)
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f804 	bl	8003c8c <LCD_Send>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <LCD_Send>:
}
#endif


#ifdef _WITH_RTOS_
void LCD_Send(uint8_t value, uint8_t mode) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	460a      	mov	r2, r1
 8003c96:	71fb      	strb	r3, [r7, #7]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71bb      	strb	r3, [r7, #6]
    uint8_t upper_nibble = (value & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	f023 030f 	bic.w	r3, r3, #15
 8003ca4:	b25a      	sxtb	r2, r3
 8003ca6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	f043 030c 	orr.w	r3, r3, #12
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((value << 4) & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	b25a      	sxtb	r2, r3
 8003cbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	f043 030c 	orr.w	r3, r3, #12
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	73bb      	strb	r3, [r7, #14]

    i2c_buffer[0] = upper_nibble;
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d78 <LCD_Send+0xec>)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	7013      	strb	r3, [r2, #0]
    if (HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1) == HAL_OK) {
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <LCD_Send+0xec>)
 8003cd6:	214e      	movs	r1, #78	@ 0x4e
 8003cd8:	4828      	ldr	r0, [pc, #160]	@ (8003d7c <LCD_Send+0xf0>)
 8003cda:	f002 f86d 	bl	8005db8 <HAL_I2C_Master_Transmit_IT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <LCD_Send+0x72>
        if (xSemaphoreTake(i2cSemaphore, pdMS_TO_TICKS(10)) == pdFALSE) {
 8003ce4:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <LCD_Send+0xf4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f936 	bl	8000f5c <xQueueSemaphoreTake>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <LCD_Send+0x7a>
            send_msg("I2C timeout on upper nibble\r\n");
 8003cf6:	4823      	ldr	r0, [pc, #140]	@ (8003d84 <LCD_Send+0xf8>)
 8003cf8:	f000 fac6 	bl	8004288 <send_msg>
            return;
 8003cfc:	e039      	b.n	8003d72 <LCD_Send+0xe6>
        }
    } else {
        send_msg("I2C transmission error on upper nibble\r\n");
 8003cfe:	4822      	ldr	r0, [pc, #136]	@ (8003d88 <LCD_Send+0xfc>)
 8003d00:	f000 fac2 	bl	8004288 <send_msg>
        return;
 8003d04:	e035      	b.n	8003d72 <LCD_Send+0xe6>
    }

    i2c_buffer[0] = upper_nibble & ~LCD_EN;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <LCD_Send+0xec>)
 8003d10:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8003d12:	2301      	movs	r3, #1
 8003d14:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <LCD_Send+0xec>)
 8003d16:	214e      	movs	r1, #78	@ 0x4e
 8003d18:	4818      	ldr	r0, [pc, #96]	@ (8003d7c <LCD_Send+0xf0>)
 8003d1a:	f002 f84d 	bl	8005db8 <HAL_I2C_Master_Transmit_IT>
    xSemaphoreTake(i2cSemaphore, pdMS_TO_TICKS(10));
 8003d1e:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <LCD_Send+0xf4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	210a      	movs	r1, #10
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd f919 	bl	8000f5c <xQueueSemaphoreTake>

    i2c_buffer[0] = lower_nibble;
 8003d2a:	4a13      	ldr	r2, [pc, #76]	@ (8003d78 <LCD_Send+0xec>)
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8003d30:	2301      	movs	r3, #1
 8003d32:	4a11      	ldr	r2, [pc, #68]	@ (8003d78 <LCD_Send+0xec>)
 8003d34:	214e      	movs	r1, #78	@ 0x4e
 8003d36:	4811      	ldr	r0, [pc, #68]	@ (8003d7c <LCD_Send+0xf0>)
 8003d38:	f002 f83e 	bl	8005db8 <HAL_I2C_Master_Transmit_IT>
    xSemaphoreTake(i2cSemaphore, pdMS_TO_TICKS(10));
 8003d3c:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <LCD_Send+0xf4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	210a      	movs	r1, #10
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd f90a 	bl	8000f5c <xQueueSemaphoreTake>

    i2c_buffer[0] = lower_nibble & ~LCD_EN;
 8003d48:	7bbb      	ldrb	r3, [r7, #14]
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <LCD_Send+0xec>)
 8003d52:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8003d54:	2301      	movs	r3, #1
 8003d56:	4a08      	ldr	r2, [pc, #32]	@ (8003d78 <LCD_Send+0xec>)
 8003d58:	214e      	movs	r1, #78	@ 0x4e
 8003d5a:	4808      	ldr	r0, [pc, #32]	@ (8003d7c <LCD_Send+0xf0>)
 8003d5c:	f002 f82c 	bl	8005db8 <HAL_I2C_Master_Transmit_IT>
    xSemaphoreTake(i2cSemaphore, pdMS_TO_TICKS(10));
 8003d60:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <LCD_Send+0xf4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	210a      	movs	r1, #10
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd f8f8 	bl	8000f5c <xQueueSemaphoreTake>

    vTaskDelay(pdMS_TO_TICKS(1));
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fd fd29 	bl	80017c4 <vTaskDelay>
}
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20012f64 	.word	0x20012f64
 8003d7c:	20012eb0 	.word	0x20012eb0
 8003d80:	20012f60 	.word	0x20012f60
 8003d84:	08009c38 	.word	0x08009c38
 8003d88:	08009c58 	.word	0x08009c58

08003d8c <LCD_Print>:
#endif


void LCD_Print(char *str) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    while (*str) {
 8003d94:	e006      	b.n	8003da4 <LCD_Print+0x18>
        LCD_Data((uint8_t)*str++);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff66 	bl	8003c70 <LCD_Data>
    while (*str) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f4      	bne.n	8003d96 <LCD_Print+0xa>
    }
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <LCD_SetCursor>:

/* Set Cursor Position */
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	71fb      	strb	r3, [r7, #7]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? col : (0x40 + col);
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <LCD_SetCursor+0x1e>
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
 8003dce:	3340      	adds	r3, #64	@ 0x40
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e000      	b.n	8003dd6 <LCD_SetCursor+0x20>
 8003dd4:	79bb      	ldrb	r3, [r7, #6]
 8003dd6:	73fb      	strb	r3, [r7, #15]
    LCD_Command(LCD_SET_DDRAM_ADDR | addr);
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff37 	bl	8003c54 <LCD_Command>
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <LCD_Clear>:

void LCD_Clear(uint8_t cmd) {
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
    //LCD_Send(cmd, 0);  // 0x01 is the clear screen command
    LCD_Command(cmd);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff2a 	bl	8003c54 <LCD_Command>
    vTaskDelay(pdMS_TO_TICKS(2));;       // Wait for 2ms to ensure the command is processed
 8003e00:	2002      	movs	r0, #2
 8003e02:	f7fd fcdf 	bl	80017c4 <vTaskDelay>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <CAN1_TX_IRQHandler>:
}
#endif

/*CAN INRQ Handlers*/
void CAN1_TX_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8003e14:	4802      	ldr	r0, [pc, #8]	@ (8003e20 <CAN1_TX_IRQHandler+0x10>)
 8003e16:	f001 f97b 	bl	8005110 <HAL_CAN_IRQHandler>
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20012e88 	.word	0x20012e88

08003e24 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8003e28:	4802      	ldr	r0, [pc, #8]	@ (8003e34 <CAN1_RX0_IRQHandler+0x10>)
 8003e2a:	f001 f971 	bl	8005110 <HAL_CAN_IRQHandler>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20012e88 	.word	0x20012e88

08003e38 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8003e3c:	4802      	ldr	r0, [pc, #8]	@ (8003e48 <CAN1_RX1_IRQHandler+0x10>)
 8003e3e:	f001 f967 	bl	8005110 <HAL_CAN_IRQHandler>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20012e88 	.word	0x20012e88

08003e4c <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8003e50:	4802      	ldr	r0, [pc, #8]	@ (8003e5c <CAN1_SCE_IRQHandler+0x10>)
 8003e52:	f001 f95d 	bl	8005110 <HAL_CAN_IRQHandler>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20012e88 	.word	0x20012e88

08003e60 <I2C1_EV_IRQHandler>:

/*I2C IRQ Handlers*/
void I2C1_EV_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c);
 8003e64:	4802      	ldr	r0, [pc, #8]	@ (8003e70 <I2C1_EV_IRQHandler+0x10>)
 8003e66:	f002 f849 	bl	8005efc <HAL_I2C_EV_IRQHandler>
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20012eb0 	.word	0x20012eb0

08003e74 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(&hi2c);
 8003e78:	4802      	ldr	r0, [pc, #8]	@ (8003e84 <I2C1_ER_IRQHandler+0x10>)
 8003e7a:	f002 f992 	bl	80061a2 <HAL_I2C_ER_IRQHandler>
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20012eb0 	.word	0x20012eb0

08003e88 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <TIM6_DAC_IRQHandler+0x14>)
 8003e8e:	f004 fbcf 	bl	8008630 <HAL_TIM_IRQHandler>
  HAL_IncTick();
 8003e92:	f000 fce5 	bl	8004860 <HAL_IncTick>
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20012f04 	.word	0x20012f04

08003ea0 <main>:
#ifdef _WITHOUT_RTOS_
volatile uint8_t i2c_busy = 0; // Flag to check if I2C is busy
#endif

int main()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
	BaseType_t status;

	HAL_Init();
 8003ea6:	f000 fcb9 	bl	800481c <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_50_MHZ);
 8003eaa:	2032      	movs	r0, #50	@ 0x32
 8003eac:	f000 f956 	bl	800415c <SystemClockConfig>

    /* Initialize TIM6 for HAL_Delay */
    HAL_InitTick(6);
 8003eb0:	2006      	movs	r0, #6
 8003eb2:	f000 faa7 	bl	8004404 <HAL_InitTick>

	UART2_Init();
 8003eb6:	f000 f8b5 	bl	8004024 <UART2_Init>

	I2C_Init();
 8003eba:	f000 f8d9 	bl	8004070 <I2C_Init>

    send_msg("Initializations Done");
 8003ebe:	484e      	ldr	r0, [pc, #312]	@ (8003ff8 <main+0x158>)
 8003ec0:	f000 f9e2 	bl	8004288 <send_msg>

	CAN_Init(); // This will change the CAN controller from Sleep mode to Initialization mode
 8003ec4:	f7ff fce4 	bl	8003890 <CAN_Init>

	CAN_Filter_Config(); // While Receiving CAN data we have to use filters HAL_CAN_ConfigFilter();
 8003ec8:	f7ff fd40 	bl	800394c <CAN_Filter_Config>

	//This will Enables bxCAN interrupts @arg CAN_Interrupts.
	if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF) != HAL_OK)
 8003ecc:	f240 4103 	movw	r1, #1027	@ 0x403
 8003ed0:	484a      	ldr	r0, [pc, #296]	@ (8003ffc <main+0x15c>)
 8003ed2:	f001 f8f7 	bl	80050c4 <HAL_CAN_ActivateNotification>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <main+0x40>
	{
		error_handler();
 8003edc:	f000 fa00 	bl	80042e0 <error_handler>
	}

	// This will change CAN from Initialization mode to Normal mode
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 8003ee0:	4846      	ldr	r0, [pc, #280]	@ (8003ffc <main+0x15c>)
 8003ee2:	f000 feb9 	bl	8004c58 <HAL_CAN_Start>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <main+0x50>
	{
		error_handler();
 8003eec:	f000 f9f8 	bl	80042e0 <error_handler>
	}
	CAN_Tx();
 8003ef0:	f7ff fd04 	bl	80038fc <CAN_Tx>


	status = xTaskCreate(LCD_task, "LCD Task", 250, NULL, 2, &lcd_task_handler);
 8003ef4:	4b42      	ldr	r3, [pc, #264]	@ (8004000 <main+0x160>)
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2302      	movs	r3, #2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	22fa      	movs	r2, #250	@ 0xfa
 8003f00:	4940      	ldr	r1, [pc, #256]	@ (8004004 <main+0x164>)
 8003f02:	4841      	ldr	r0, [pc, #260]	@ (8004008 <main+0x168>)
 8003f04:	f7fd fb12 	bl	800152c <xTaskCreate>
 8003f08:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d00b      	beq.n	8003f28 <main+0x88>
    __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	613b      	str	r3, [r7, #16]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <main+0x84>

	status = xTaskCreate(CAN_task, "CAN Task", 500, NULL, 3, &can_task_hanlder);
 8003f28:	4b38      	ldr	r3, [pc, #224]	@ (800400c <main+0x16c>)
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003f36:	4936      	ldr	r1, [pc, #216]	@ (8004010 <main+0x170>)
 8003f38:	4836      	ldr	r0, [pc, #216]	@ (8004014 <main+0x174>)
 8003f3a:	f7fd faf7 	bl	800152c <xTaskCreate>
 8003f3e:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d00b      	beq.n	8003f5e <main+0xbe>
    __asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	60fb      	str	r3, [r7, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	e7fd      	b.n	8003f5a <main+0xba>

	/*Create a Queue to store received CAN data in Queue*/
	canqueue = xQueueCreate(10,sizeof(CAN_data_t));
 8003f5e:	2200      	movs	r2, #0
 8003f60:	211c      	movs	r1, #28
 8003f62:	200a      	movs	r0, #10
 8003f64:	f7fc fc46 	bl	80007f4 <xQueueGenericCreate>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004018 <main+0x178>)
 8003f6c:	6013      	str	r3, [r2, #0]
	configASSERT(canqueue != NULL);
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004018 <main+0x178>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <main+0xee>
    __asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60bb      	str	r3, [r7, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <main+0xea>

	speedqueue = xQueueCreate(10,sizeof(LCD_data_t));
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2108      	movs	r1, #8
 8003f92:	200a      	movs	r0, #10
 8003f94:	f7fc fc2e 	bl	80007f4 <xQueueGenericCreate>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4a20      	ldr	r2, [pc, #128]	@ (800401c <main+0x17c>)
 8003f9c:	6013      	str	r3, [r2, #0]
	configASSERT(speedqueue != NULL);
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800401c <main+0x17c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <main+0x11e>
    __asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	607b      	str	r3, [r7, #4]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <main+0x11a>

	modequeue = xQueueCreate(10,sizeof(LCD_data_t));
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2108      	movs	r1, #8
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f7fc fc16 	bl	80007f4 <xQueueGenericCreate>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <main+0x180>)
 8003fcc:	6013      	str	r3, [r2, #0]
	configASSERT(modequeue != NULL);
 8003fce:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <main+0x180>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <main+0x14e>
    __asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	603b      	str	r3, [r7, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <main+0x14a>

	vTaskStartScheduler();
 8003fee:	f7fd fc69 	bl	80018c4 <vTaskStartScheduler>

	while(1)
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <main+0x152>
 8003ff6:	bf00      	nop
 8003ff8:	08009c88 	.word	0x08009c88
 8003ffc:	20012e88 	.word	0x20012e88
 8004000:	20012f4c 	.word	0x20012f4c
 8004004:	08009ca0 	.word	0x08009ca0
 8004008:	080042f5 	.word	0x080042f5
 800400c:	20012f50 	.word	0x20012f50
 8004010:	08009cac 	.word	0x08009cac
 8004014:	080043a5 	.word	0x080043a5
 8004018:	20012f54 	.word	0x20012f54
 800401c:	20012f58 	.word	0x20012f58
 8004020:	20012f5c 	.word	0x20012f5c

08004024 <UART2_Init>:

	return 0;
}

void UART2_Init()
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	huart.Instance = USART2;
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <UART2_Init+0x44>)
 800402a:	4a10      	ldr	r2, [pc, #64]	@ (800406c <UART2_Init+0x48>)
 800402c:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <UART2_Init+0x44>)
 8004030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004034:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8004036:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <UART2_Init+0x44>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <UART2_Init+0x44>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8004042:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <UART2_Init+0x44>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 8004048:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <UART2_Init+0x44>)
 800404a:	220c      	movs	r2, #12
 800404c:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <UART2_Init+0x44>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]

	if((HAL_UART_Init(&huart)) != HAL_OK)
 8004054:	4804      	ldr	r0, [pc, #16]	@ (8004068 <UART2_Init+0x44>)
 8004056:	f004 fcc3 	bl	80089e0 <HAL_UART_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <UART2_Init+0x40>
	{
		error_handler();
 8004060:	f000 f93e 	bl	80042e0 <error_handler>
	}
}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20012e40 	.word	0x20012e40
 800406c:	40004400 	.word	0x40004400

08004070 <I2C_Init>:
#endif

#ifdef _WITH_RTOS_

void I2C_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	hi2c.Instance = I2C1;
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <I2C_Init+0x70>)
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <I2C_Init+0x74>)
 8004078:	601a      	str	r2, [r3, #0]
    hi2c.Init.ClockSpeed = 100000;              // 100 kHz standard mode
 800407a:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <I2C_Init+0x70>)
 800407c:	4a1a      	ldr	r2, [pc, #104]	@ (80040e8 <I2C_Init+0x78>)
 800407e:	605a      	str	r2, [r3, #4]
    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;     // Standard duty cycle
 8004080:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <I2C_Init+0x70>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
    hi2c.Init.OwnAddress1 = 0;                 // Not used in master mode
 8004086:	4b16      	ldr	r3, [pc, #88]	@ (80040e0 <I2C_Init+0x70>)
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
    hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800408c:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <I2C_Init+0x70>)
 800408e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004092:	611a      	str	r2, [r3, #16]
    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <I2C_Init+0x70>)
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
    hi2c.Init.OwnAddress2 = 0;
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <I2C_Init+0x70>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <I2C_Init+0x70>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <I2C_Init+0x70>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80040ac:	480c      	ldr	r0, [pc, #48]	@ (80040e0 <I2C_Init+0x70>)
 80040ae:	f001 fd29 	bl	8005b04 <HAL_I2C_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <I2C_Init+0x4c>
    {
        error_handler();
 80040b8:	f000 f912 	bl	80042e0 <error_handler>
    }

    i2cSemaphore = xSemaphoreCreateBinary();
 80040bc:	2203      	movs	r2, #3
 80040be:	2100      	movs	r1, #0
 80040c0:	2001      	movs	r0, #1
 80040c2:	f7fc fb97 	bl	80007f4 <xQueueGenericCreate>
 80040c6:	4603      	mov	r3, r0
 80040c8:	4a08      	ldr	r2, [pc, #32]	@ (80040ec <I2C_Init+0x7c>)
 80040ca:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(i2cSemaphore);
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <I2C_Init+0x7c>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	2300      	movs	r3, #0
 80040d2:	2200      	movs	r2, #0
 80040d4:	2100      	movs	r1, #0
 80040d6:	f7fc fbff 	bl	80008d8 <xQueueGenericSend>
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20012eb0 	.word	0x20012eb0
 80040e4:	40005400 	.word	0x40005400
 80040e8:	000186a0 	.word	0x000186a0
 80040ec:	20012f60 	.word	0x20012f60

080040f0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    if (hi2c1->Instance == hi2c.Instance) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d105      	bne.n	8004110 <HAL_I2C_MasterTxCpltCallback+0x20>
    	xSemaphoreGiveFromISR(i2cSemaphore,NULL);
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fd9c 	bl	8000c48 <xQueueGiveFromISR>
    }
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20012eb0 	.word	0x20012eb0
 800411c:	20012f60 	.word	0x20012f60

08004120 <HAL_I2C_ErrorCallback>:

/* I2C Error Callback */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c1) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	send_msg("I2C Error Call\r\n");
 8004128:	4809      	ldr	r0, [pc, #36]	@ (8004150 <HAL_I2C_ErrorCallback+0x30>)
 800412a:	f000 f8ad 	bl	8004288 <send_msg>
    if (hi2c1->Instance == hi2c.Instance) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_I2C_ErrorCallback+0x34>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d105      	bne.n	8004146 <HAL_I2C_ErrorCallback+0x26>
    	xSemaphoreGiveFromISR(i2cSemaphore,NULL);
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <HAL_I2C_ErrorCallback+0x38>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fd81 	bl	8000c48 <xQueueGiveFromISR>
    }
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	08009cb8 	.word	0x08009cb8
 8004154:	20012eb0 	.word	0x20012eb0
 8004158:	20012f60 	.word	0x20012f60

0800415c <SystemClockConfig>:
#endif

void SystemClockConfig(uint8_t clk_freq)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b096      	sub	sp, #88	@ 0x58
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800416c:	2301      	movs	r3, #1
 800416e:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8004170:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24

	osc_init.PLL.PLLState = RCC_PLL_ON;
 8004176:	2302      	movs	r3, #2
 8004178:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800417a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clk_freq)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	2b78      	cmp	r3, #120	@ 0x78
 8004184:	d03a      	beq.n	80041fc <SystemClockConfig+0xa0>
 8004186:	2b78      	cmp	r3, #120	@ 0x78
 8004188:	dc77      	bgt.n	800427a <SystemClockConfig+0x11e>
 800418a:	2b32      	cmp	r3, #50	@ 0x32
 800418c:	d002      	beq.n	8004194 <SystemClockConfig+0x38>
 800418e:	2b54      	cmp	r3, #84	@ 0x54
 8004190:	d01a      	beq.n	80041c8 <SystemClockConfig+0x6c>

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
 8004192:	e072      	b.n	800427a <SystemClockConfig+0x11e>
		osc_init.PLL.PLLM = 8;
 8004194:	2308      	movs	r3, #8
 8004196:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 100;
 8004198:	2364      	movs	r3, #100	@ 0x64
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 800419c:	2302      	movs	r3, #2
 800419e:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 80041a0:	2302      	movs	r3, #2
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 80041a4:	2302      	movs	r3, #2
 80041a6:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80041a8:	230f      	movs	r3, #15
 80041aa:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ac:	2302      	movs	r3, #2
 80041ae:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80041b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041b8:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80041ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041be:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_1WS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 80041c6:	e033      	b.n	8004230 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 80041c8:	2308      	movs	r3, #8
 80041ca:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 160;
 80041cc:	23a0      	movs	r3, #160	@ 0xa0
 80041ce:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 80041d0:	2302      	movs	r3, #2
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 80041d4:	2302      	movs	r3, #2
 80041d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 80041d8:	2302      	movs	r3, #2
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80041dc:	230f      	movs	r3, #15
 80041de:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041e0:	2302      	movs	r3, #2
 80041e2:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80041e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041ec:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80041ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041f2:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_2WS;
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 80041fa:	e019      	b.n	8004230 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 80041fc:	2308      	movs	r3, #8
 80041fe:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 240;
 8004200:	23f0      	movs	r3, #240	@ 0xf0
 8004202:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8004204:	2302      	movs	r3, #2
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8004208:	2302      	movs	r3, #2
 800420a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 800420c:	2302      	movs	r3, #2
 800420e:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8004210:	230f      	movs	r3, #15
 8004212:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004214:	2302      	movs	r3, #2
 8004216:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800421c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004220:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8004222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004226:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8004228:	2303      	movs	r3, #3
 800422a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 800422e:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8004230:	f107 0320 	add.w	r3, r7, #32
 8004234:	4618      	mov	r0, r3
 8004236:	f003 fe9d 	bl	8007f74 <HAL_RCC_OscConfig>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <SystemClockConfig+0xe8>
		{
			error_handler();
 8004240:	f000 f84e 	bl	80042e0 <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8004244:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004248:	f107 030c 	add.w	r3, r7, #12
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f003 fb14 	bl	800787c <HAL_RCC_ClockConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <SystemClockConfig+0x102>
		{
			error_handler();
 800425a:	f000 f841 	bl	80042e0 <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 800425e:	f003 fc59 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8004262:	4603      	mov	r3, r0
 8004264:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <SystemClockConfig+0x128>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fa5c 	bl	800572a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004272:	2004      	movs	r0, #4
 8004274:	f001 fa66 	bl	8005744 <HAL_SYSTICK_CLKSourceConfig>
 8004278:	e000      	b.n	800427c <SystemClockConfig+0x120>
		return;
 800427a:	bf00      	nop
}
 800427c:	3758      	adds	r7, #88	@ 0x58
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <send_msg>:


void send_msg(char msg[])
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fb ffbd 	bl	8000210 <strlen>
 8004296:	4603      	mov	r3, r0
 8004298:	b29a      	uxth	r2, r3
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	480d      	ldr	r0, [pc, #52]	@ (80042d8 <send_msg+0x50>)
 80042a2:	f004 fbed 	bl	8008a80 <HAL_UART_Transmit>
    char line[3];
    sprintf(line,"\r\n");
 80042a6:	f107 030c 	add.w	r3, r7, #12
 80042aa:	490c      	ldr	r1, [pc, #48]	@ (80042dc <send_msg+0x54>)
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 ffa3 	bl	80091f8 <siprintf>
    HAL_UART_Transmit(&huart, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fb ffaa 	bl	8000210 <strlen>
 80042bc:	4603      	mov	r3, r0
 80042be:	b29a      	uxth	r2, r3
 80042c0:	f107 010c 	add.w	r1, r7, #12
 80042c4:	f04f 33ff 	mov.w	r3, #4294967295
 80042c8:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <send_msg+0x50>)
 80042ca:	f004 fbd9 	bl	8008a80 <HAL_UART_Transmit>

}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20012e40 	.word	0x20012e40
 80042dc:	08009ccc 	.word	0x08009ccc

080042e0 <error_handler>:

void error_handler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
    send_msg("Entered into Error Handler");
 80042e4:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <error_handler+0x10>)
 80042e6:	f7ff ffcf 	bl	8004288 <send_msg>
	while(1);
 80042ea:	bf00      	nop
 80042ec:	e7fd      	b.n	80042ea <error_handler+0xa>
 80042ee:	bf00      	nop
 80042f0:	08009cd0 	.word	0x08009cd0

080042f4 <LCD_task>:
}

/*Task handlers*/

void LCD_task(void *parameter)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	@ 0x38
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	LCD_Init();
 80042fc:	f7ff fc7e 	bl	8003bfc <LCD_Init>

    LCD_SetCursor(0,0);
 8004300:	2100      	movs	r1, #0
 8004302:	2000      	movs	r0, #0
 8004304:	f7ff fd57 	bl	8003db6 <LCD_SetCursor>
    LCD_Clear(LCD_CLR_SCREEN);
 8004308:	2001      	movs	r0, #1
 800430a:	f7ff fd70 	bl	8003dee <LCD_Clear>
    LCD_Print("Welcome");
 800430e:	4821      	ldr	r0, [pc, #132]	@ (8004394 <LCD_task+0xa0>)
 8004310:	f7ff fd3c 	bl	8003d8c <LCD_Print>
    vTaskDelay(pdMS_TO_TICKS(200));
 8004314:	20c8      	movs	r0, #200	@ 0xc8
 8004316:	f7fd fa55 	bl	80017c4 <vTaskDelay>
    LCD_Clear(LCD_CLR_SCREEN);
 800431a:	2001      	movs	r0, #1
 800431c:	f7ff fd67 	bl	8003dee <LCD_Clear>
	//LCD_data_t receivedData;
	char mode[20];
	uint8_t speed;
	while(1)
	{
	       if (xQueueReceive(speedqueue, &speed, pdMS_TO_TICKS(10)) == pdPASS)
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <LCD_task+0xa4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8004328:	220a      	movs	r2, #10
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fd34 	bl	8000d98 <xQueueReceive>
 8004330:	4603      	mov	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d112      	bne.n	800435c <LCD_task+0x68>
	        {
	            char speedMsg[20];
	            sprintf(speedMsg, "Speed: %d", speed);
 8004336:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800433a:	461a      	mov	r2, r3
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	4916      	ldr	r1, [pc, #88]	@ (800439c <LCD_task+0xa8>)
 8004342:	4618      	mov	r0, r3
 8004344:	f004 ff58 	bl	80091f8 <siprintf>
	            LCD_Print(speedMsg);
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fd1d 	bl	8003d8c <LCD_Print>
	            send_msg(speedMsg);
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff96 	bl	8004288 <send_msg>
	        }

	        // Check for mode data
	        if (xQueueReceive(modequeue, &mode, pdMS_TO_TICKS(10)) == pdPASS)
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <LCD_task+0xac>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004364:	220a      	movs	r2, #10
 8004366:	4618      	mov	r0, r3
 8004368:	f7fc fd16 	bl	8000d98 <xQueueReceive>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d109      	bne.n	8004386 <LCD_task+0x92>
	        {
	            LCD_Print(mode);
 8004372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd08 	bl	8003d8c <LCD_Print>
	            send_msg(mode);
 800437c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff81 	bl	8004288 <send_msg>
	        }

	        vTaskDelay(pdMS_TO_TICKS(200)); // Avoid spamming LCD updates
 8004386:	20c8      	movs	r0, #200	@ 0xc8
 8004388:	f7fd fa1c 	bl	80017c4 <vTaskDelay>
	        LCD_Clear(LCD_CLR_SCREEN);
 800438c:	2001      	movs	r0, #1
 800438e:	f7ff fd2e 	bl	8003dee <LCD_Clear>
	       if (xQueueReceive(speedqueue, &speed, pdMS_TO_TICKS(10)) == pdPASS)
 8004392:	e7c5      	b.n	8004320 <LCD_task+0x2c>
 8004394:	08009cec 	.word	0x08009cec
 8004398:	20012f58 	.word	0x20012f58
 800439c:	08009cf4 	.word	0x08009cf4
 80043a0:	20012f5c 	.word	0x20012f5c

080043a4 <CAN_task>:

	}
}
void CAN_task(void *parameter)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	@ 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	CAN_data_t receivedData;

    while (1)
    {
        if (xQueueReceive(canqueue, &receivedData, portMAX_DELAY) == pdPASS)
 80043ac:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <CAN_task+0x58>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f107 010c 	add.w	r1, r7, #12
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc fced 	bl	8000d98 <xQueueReceive>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d1f3      	bne.n	80043ac <CAN_task+0x8>
        {
            switch (receivedData.canID)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 80043ca:	d00a      	beq.n	80043e2 <CAN_task+0x3e>
 80043cc:	f240 6221 	movw	r2, #1569	@ 0x621
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10d      	bne.n	80043f0 <CAN_task+0x4c>
            {
                case 0x621:
                    speed(receivedData.data);
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fb40 	bl	8003a60 <speed>
                    break;
 80043e0:	e00a      	b.n	80043f8 <CAN_task+0x54>
                case 0x620:
                    Mode(receivedData.data);
 80043e2:	f107 030c 	add.w	r3, r7, #12
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fb7b 	bl	8003ae4 <Mode>
                    break;
 80043ee:	e003      	b.n	80043f8 <CAN_task+0x54>
                default:
                    send_msg("Switch entered default state");
 80043f0:	4803      	ldr	r0, [pc, #12]	@ (8004400 <CAN_task+0x5c>)
 80043f2:	f7ff ff49 	bl	8004288 <send_msg>
                    break;
 80043f6:	bf00      	nop
        if (xQueueReceive(canqueue, &receivedData, portMAX_DELAY) == pdPASS)
 80043f8:	e7d8      	b.n	80043ac <CAN_task+0x8>
 80043fa:	bf00      	nop
 80043fc:	20012f54 	.word	0x20012f54
 8004400:	08009d00 	.word	0x08009d00

08004404 <HAL_InitTick>:
        }
    }
}

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	@ 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
    RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t uwPrescalerValue = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t pFLatency;

    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4b1f      	ldr	r3, [pc, #124]	@ (8004498 <HAL_InitTick+0x94>)
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <HAL_InitTick+0x94>)
 800441e:	f043 0310 	orr.w	r3, r3, #16
 8004422:	6413      	str	r3, [r2, #64]	@ 0x40
 8004424:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <HAL_InitTick+0x94>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004430:	f107 0210 	add.w	r2, r7, #16
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fb38 	bl	8007ab0 <HAL_RCC_GetClockConfig>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004440:	f003 fb0e 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8004444:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Compute the prescaler value to get 1ms time base */
    uwPrescalerValue = (uwTimclock / 1000) - 1;
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <HAL_InitTick+0x98>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	3b01      	subs	r3, #1
 8004452:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Initialize TIM6 */
    htim6.Instance = TIM6;
 8004454:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <HAL_InitTick+0x9c>)
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <HAL_InitTick+0xa0>)
 8004458:	601a      	str	r2, [r3, #0]
    htim6.Init.Period = uwPrescalerValue;
 800445a:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <HAL_InitTick+0x9c>)
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	60d3      	str	r3, [r2, #12]
    htim6.Init.Prescaler = 0;
 8004460:	4b0f      	ldr	r3, [pc, #60]	@ (80044a0 <HAL_InitTick+0x9c>)
 8004462:	2200      	movs	r2, #0
 8004464:	605a      	str	r2, [r3, #4]
    htim6.Init.ClockDivision = 0;
 8004466:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <HAL_InitTick+0x9c>)
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <HAL_InitTick+0x9c>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <HAL_InitTick+0x9c>)
 8004474:	2200      	movs	r2, #0
 8004476:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004478:	4809      	ldr	r0, [pc, #36]	@ (80044a0 <HAL_InitTick+0x9c>)
 800447a:	f004 f819 	bl	80084b0 <HAL_TIM_Base_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <HAL_InitTick+0x8a>
    {
        /* Start the TIM time base generation in interrupt mode */
        return HAL_TIM_Base_Start_IT(&htim6);
 8004484:	4806      	ldr	r0, [pc, #24]	@ (80044a0 <HAL_InitTick+0x9c>)
 8004486:	f004 f863 	bl	8008550 <HAL_TIM_Base_Start_IT>
 800448a:	4603      	mov	r3, r0
 800448c:	e000      	b.n	8004490 <HAL_InitTick+0x8c>
    }

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	3730      	adds	r7, #48	@ 0x30
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	10624dd3 	.word	0x10624dd3
 80044a0:	20012f04 	.word	0x20012f04
 80044a4:	40001000 	.word	0x40001000

080044a8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044ba:	f000 f9d1 	bl	8004860 <HAL_IncTick>
  }

}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40001000 	.word	0x40001000

080044cc <HAL_MspInit>:
#include "main_1.h"

void HAL_MspInit(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044d0:	2003      	movs	r0, #3
 80044d2:	f001 f8f5 	bl	80056c0 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 80044d6:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <HAL_MspInit+0x40>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	4a0c      	ldr	r2, [pc, #48]	@ (800450c <HAL_MspInit+0x40>)
 80044dc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80044e0:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	f06f 000b 	mvn.w	r0, #11
 80044ea:	f001 f8f4 	bl	80056d6 <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	f06f 000a 	mvn.w	r0, #10
 80044f6:	f001 f8ee 	bl	80056d6 <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	f06f 0009 	mvn.w	r0, #9
 8004502:	f001 f8e8 	bl	80056d6 <HAL_NVIC_SetPriority>
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	@ 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	/*Implementing Low level init's of USART2 peripheral*/
	//1. Enable the clock for the UART2 peripheral
		__HAL_RCC_USART2_CLK_ENABLE();
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	4b1e      	ldr	r3, [pc, #120]	@ (8004598 <HAL_UART_MspInit+0x88>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <HAL_UART_MspInit+0x88>)
 8004522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004526:	6413      	str	r3, [r2, #64]	@ 0x40
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_UART_MspInit+0x88>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	4b17      	ldr	r3, [pc, #92]	@ (8004598 <HAL_UART_MspInit+0x88>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <HAL_UART_MspInit+0x88>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6313      	str	r3, [r2, #48]	@ 0x30
 8004544:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <HAL_UART_MspInit+0x88>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
	//2. Pin muxing configurations
		gpio_uart.Pin = GPIO_PIN_2;
 8004550:	2304      	movs	r3, #4
 8004552:	617b      	str	r3, [r7, #20]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8004554:	2300      	movs	r3, #0
 8004556:	623b      	str	r3, [r7, #32]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
		gpio_uart.Alternate = GPIO_AF7_USART2;
 800455c:	2307      	movs	r3, #7
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
		gpio_uart.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4619      	mov	r1, r3
 800456a:	480c      	ldr	r0, [pc, #48]	@ (800459c <HAL_UART_MspInit+0x8c>)
 800456c:	f001 f936 	bl	80057dc <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8004570:	2308      	movs	r3, #8
 8004572:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4619      	mov	r1, r3
 800457a:	4808      	ldr	r0, [pc, #32]	@ (800459c <HAL_UART_MspInit+0x8c>)
 800457c:	f001 f92e 	bl	80057dc <HAL_GPIO_Init>
	//3. Enable the IRQ and set-up the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004580:	2026      	movs	r0, #38	@ 0x26
 8004582:	f001 f8c4 	bl	800570e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 13, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	210d      	movs	r1, #13
 800458a:	2026      	movs	r0, #38	@ 0x26
 800458c:	f001 f8a3 	bl	80056d6 <HAL_NVIC_SetPriority>
}
 8004590:	bf00      	nop
 8004592:	3728      	adds	r7, #40	@ 0x28
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	40020000 	.word	0x40020000

080045a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_CAN;
	//Enable clock for CAN1
	__HAL_RCC_CAN1_CLK_ENABLE();
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <HAL_CAN_MspInit+0xa0>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	4a23      	ldr	r2, [pc, #140]	@ (8004640 <HAL_CAN_MspInit+0xa0>)
 80045b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b8:	4b21      	ldr	r3, [pc, #132]	@ (8004640 <HAL_CAN_MspInit+0xa0>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	68bb      	ldr	r3, [r7, #8]

	//Pin Muxing Configuration
	gpio_CAN.Pin = GPIO_PIN_11;
 80045c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045c8:	60fb      	str	r3, [r7, #12]
	gpio_CAN.Mode = GPIO_MODE_AF_PP;
 80045ca:	2302      	movs	r3, #2
 80045cc:	613b      	str	r3, [r7, #16]
	gpio_CAN.Alternate = GPIO_AF9_CAN1;
 80045ce:	2309      	movs	r3, #9
 80045d0:	61fb      	str	r3, [r7, #28]
	gpio_CAN.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
	gpio_CAN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	2303      	movs	r3, #3
 80045d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	4619      	mov	r1, r3
 80045e0:	4818      	ldr	r0, [pc, #96]	@ (8004644 <HAL_CAN_MspInit+0xa4>)
 80045e2:	f001 f8fb 	bl	80057dc <HAL_GPIO_Init>

	gpio_CAN.Pin = GPIO_PIN_12;
 80045e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4619      	mov	r1, r3
 80045f2:	4814      	ldr	r0, [pc, #80]	@ (8004644 <HAL_CAN_MspInit+0xa4>)
 80045f4:	f001 f8f2 	bl	80057dc <HAL_GPIO_Init>

	//Enable the IRQ and set-up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80045f8:	2013      	movs	r0, #19
 80045fa:	f001 f888 	bl	800570e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80045fe:	2014      	movs	r0, #20
 8004600:	f001 f885 	bl	800570e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004604:	2015      	movs	r0, #21
 8004606:	f001 f882 	bl	800570e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800460a:	2016      	movs	r0, #22
 800460c:	f001 f87f 	bl	800570e <HAL_NVIC_EnableIRQ>

	//HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 12, 0);
 8004610:	2200      	movs	r2, #0
 8004612:	210c      	movs	r1, #12
 8004614:	2013      	movs	r0, #19
 8004616:	f001 f85e 	bl	80056d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 12, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	210c      	movs	r1, #12
 800461e:	2014      	movs	r0, #20
 8004620:	f001 f859 	bl	80056d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 12, 0);
 8004624:	2200      	movs	r2, #0
 8004626:	210c      	movs	r1, #12
 8004628:	2015      	movs	r0, #21
 800462a:	f001 f854 	bl	80056d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 12, 0);
 800462e:	2200      	movs	r2, #0
 8004630:	210c      	movs	r1, #12
 8004632:	2016      	movs	r0, #22
 8004634:	f001 f84f 	bl	80056d6 <HAL_NVIC_SetPriority>
}
 8004638:	bf00      	nop
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	40020000 	.word	0x40020000

08004648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	@ 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_i2c;

    if (hi2c->Instance == I2C1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <HAL_I2C_MspInit+0x94>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d13c      	bne.n	80046d4 <HAL_I2C_MspInit+0x8c>
    {
        // 1. Enable I2C clock
        __HAL_RCC_I2C1_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 8004664:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004668:	6413      	str	r3, [r2, #64]	@ 0x40
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6313      	str	r3, [r2, #48]	@ 0x30
 8004686:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <HAL_I2C_MspInit+0x98>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        // 2. Configure I2C SCL and SDA pins (e.g., PB6 for SCL, PB7 for SDA)
        gpio_i2c.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004696:	617b      	str	r3, [r7, #20]
        gpio_i2c.Mode = GPIO_MODE_AF_OD;       // Open-drain for I2C
 8004698:	2312      	movs	r3, #18
 800469a:	61bb      	str	r3, [r7, #24]
        gpio_i2c.Pull = GPIO_PULLUP;
 800469c:	2301      	movs	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
        gpio_i2c.Speed = GPIO_SPEED_FREQ_HIGH;
 80046a0:	2302      	movs	r3, #2
 80046a2:	623b      	str	r3, [r7, #32]
        gpio_i2c.Alternate = GPIO_AF4_I2C1;    // Alternate function for I2C1
 80046a4:	2304      	movs	r3, #4
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &gpio_i2c);
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4619      	mov	r1, r3
 80046ae:	480d      	ldr	r0, [pc, #52]	@ (80046e4 <HAL_I2C_MspInit+0x9c>)
 80046b0:	f001 f894 	bl	80057dc <HAL_GPIO_Init>

        // 3. Enable and configure NVIC for I2C interrupts (optional for interrupts)
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 11, 0);
 80046b4:	2200      	movs	r2, #0
 80046b6:	210b      	movs	r1, #11
 80046b8:	201f      	movs	r0, #31
 80046ba:	f001 f80c 	bl	80056d6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80046be:	201f      	movs	r0, #31
 80046c0:	f001 f825 	bl	800570e <HAL_NVIC_EnableIRQ>

        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 11, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	210b      	movs	r1, #11
 80046c8:	2020      	movs	r0, #32
 80046ca:	f001 f804 	bl	80056d6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046ce:	2020      	movs	r0, #32
 80046d0:	f001 f81d 	bl	800570e <HAL_NVIC_EnableIRQ>
    }
}
 80046d4:	bf00      	nop
 80046d6:	3728      	adds	r7, #40	@ 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40005400 	.word	0x40005400
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40020400 	.word	0x40020400

080046e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM6)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004730 <HAL_TIM_Base_MspInit+0x48>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d115      	bne.n	8004726 <HAL_TIM_Base_MspInit+0x3e>
    {
        /* Enable TIM6 clock */
        __HAL_RCC_TIM6_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <HAL_TIM_Base_MspInit+0x4c>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <HAL_TIM_Base_MspInit+0x4c>)
 8004704:	f043 0310 	orr.w	r3, r3, #16
 8004708:	6413      	str	r3, [r2, #64]	@ 0x40
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <HAL_TIM_Base_MspInit+0x4c>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]

        /* Configure TIM6 interrupt priority and enable it */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2106      	movs	r1, #6
 800471a:	2036      	movs	r0, #54	@ 0x36
 800471c:	f000 ffdb 	bl	80056d6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004720:	2036      	movs	r0, #54	@ 0x36
 8004722:	f000 fff4 	bl	800570e <HAL_NVIC_EnableIRQ>
    }
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40001000 	.word	0x40001000
 8004734:	40023800 	.word	0x40023800

08004738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <_sbrk+0x5c>)
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <_sbrk+0x60>)
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800474c:	4b13      	ldr	r3, [pc, #76]	@ (800479c <_sbrk+0x64>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <_sbrk+0x64>)
 8004756:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <_sbrk+0x68>)
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <_sbrk+0x64>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d207      	bcs.n	8004778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004768:	f004 fd6e 	bl	8009248 <__errno>
 800476c:	4603      	mov	r3, r0
 800476e:	220c      	movs	r2, #12
 8004770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	e009      	b.n	800478c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <_sbrk+0x64>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <_sbrk+0x64>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	4a05      	ldr	r2, [pc, #20]	@ (800479c <_sbrk+0x64>)
 8004788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20020000 	.word	0x20020000
 8004798:	00000400 	.word	0x00000400
 800479c:	20012f68 	.word	0x20012f68
 80047a0:	200130b8 	.word	0x200130b8

080047a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <SystemInit+0x20>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	4a05      	ldr	r2, [pc, #20]	@ (80047c4 <SystemInit+0x20>)
 80047b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004800 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047cc:	f7ff ffea 	bl	80047a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047d0:	480c      	ldr	r0, [pc, #48]	@ (8004804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047d2:	490d      	ldr	r1, [pc, #52]	@ (8004808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047d4:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047d8:	e002      	b.n	80047e0 <LoopCopyDataInit>

080047da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047de:	3304      	adds	r3, #4

080047e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047e4:	d3f9      	bcc.n	80047da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047ec:	e001      	b.n	80047f2 <LoopFillZerobss>

080047ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f0:	3204      	adds	r2, #4

080047f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047f4:	d3fb      	bcc.n	80047ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80047f6:	f004 fd2d 	bl	8009254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047fa:	f7ff fb51 	bl	8003ea0 <main>
  bx  lr    
 80047fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004808:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800480c:	08009d7c 	.word	0x08009d7c
  ldr r2, =_sbss
 8004810:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004814:	200130b8 	.word	0x200130b8

08004818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004818:	e7fe      	b.n	8004818 <ADC_IRQHandler>
	...

0800481c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004820:	4b0e      	ldr	r3, [pc, #56]	@ (800485c <HAL_Init+0x40>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0d      	ldr	r2, [pc, #52]	@ (800485c <HAL_Init+0x40>)
 8004826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800482a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <HAL_Init+0x40>)
 8004832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004838:	4b08      	ldr	r3, [pc, #32]	@ (800485c <HAL_Init+0x40>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a07      	ldr	r2, [pc, #28]	@ (800485c <HAL_Init+0x40>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004844:	2003      	movs	r0, #3
 8004846:	f000 ff3b 	bl	80056c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff fdda 	bl	8004404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004850:	f7ff fe3c 	bl	80044cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023c00 	.word	0x40023c00

08004860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_IncTick+0x20>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_IncTick+0x24>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4413      	add	r3, r2
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_IncTick+0x24>)
 8004872:	6013      	str	r3, [r2, #0]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000010 	.word	0x20000010
 8004884:	20012f6c 	.word	0x20012f6c

08004888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return uwTick;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_GetTick+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20012f6c 	.word	0x20012f6c

080048a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0ed      	b.n	8004a8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fe6e 	bl	80045a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048d4:	f7ff ffd8 	bl	8004888 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048da:	e012      	b.n	8004902 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048dc:	f7ff ffd4 	bl	8004888 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b0a      	cmp	r3, #10
 80048e8:	d90b      	bls.n	8004902 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2205      	movs	r2, #5
 80048fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e0c5      	b.n	8004a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0e5      	beq.n	80048dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0202 	bic.w	r2, r2, #2
 800491e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004920:	f7ff ffb2 	bl	8004888 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004926:	e012      	b.n	800494e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004928:	f7ff ffae 	bl	8004888 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b0a      	cmp	r3, #10
 8004934:	d90b      	bls.n	800494e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2205      	movs	r2, #5
 8004946:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e09f      	b.n	8004a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7e1b      	ldrb	r3, [r3, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d108      	bne.n	8004976 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e007      	b.n	8004986 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7e5b      	ldrb	r3, [r3, #25]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d108      	bne.n	80049a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e007      	b.n	80049b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	7e9b      	ldrb	r3, [r3, #26]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d108      	bne.n	80049ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e007      	b.n	80049da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0220 	bic.w	r2, r2, #32
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7edb      	ldrb	r3, [r3, #27]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d108      	bne.n	80049f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0210 	bic.w	r2, r2, #16
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e007      	b.n	8004a04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0210 	orr.w	r2, r2, #16
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7f1b      	ldrb	r3, [r3, #28]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e007      	b.n	8004a2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7f5b      	ldrb	r3, [r3, #29]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0204 	orr.w	r2, r2, #4
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e007      	b.n	8004a58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0204 	bic.w	r2, r2, #4
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	ea42 0103 	orr.w	r1, r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	1e5a      	subs	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d003      	beq.n	8004abe <HAL_CAN_ConfigFilter+0x26>
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f040 80be 	bne.w	8004c3a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004abe:	4b65      	ldr	r3, [pc, #404]	@ (8004c54 <HAL_CAN_ConfigFilter+0x1bc>)
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ad8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	431a      	orrs	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	401a      	ands	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d123      	bne.n	8004b68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3248      	adds	r2, #72	@ 0x48
 8004b48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	3348      	adds	r3, #72	@ 0x48
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d122      	bne.n	8004bb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3248      	adds	r2, #72	@ 0x48
 8004b96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004baa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bac:	6979      	ldr	r1, [r7, #20]
 8004bae:	3348      	adds	r3, #72	@ 0x48
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	401a      	ands	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004bd0:	e007      	b.n	8004be2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004bfc:	e007      	b.n	8004c0e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c2c:	f023 0201 	bic.w	r2, r3, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e006      	b.n	8004c48 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40006400 	.word	0x40006400

08004c58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d12e      	bne.n	8004cca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c84:	f7ff fe00 	bl	8004888 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c8a:	e012      	b.n	8004cb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c8c:	f7ff fdfc 	bl	8004888 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b0a      	cmp	r3, #10
 8004c98:	d90b      	bls.n	8004cb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2205      	movs	r2, #5
 8004caa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e012      	b.n	8004cd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e5      	bne.n	8004c8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e006      	b.n	8004cd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	@ 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d003      	beq.n	8004d0c <HAL_CAN_AddTxMessage+0x2c>
 8004d04:	7ffb      	ldrb	r3, [r7, #31]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	f040 80ad 	bne.w	8004e66 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8095 	beq.w	8004e56 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	0e1b      	lsrs	r3, r3, #24
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d36:	2201      	movs	r2, #1
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	440b      	add	r3, r1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e00f      	b.n	8004d84 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d6e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004d78:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3318      	adds	r3, #24
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	440b      	add	r3, r1
 8004d82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3318      	adds	r3, #24
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	440b      	add	r3, r1
 8004d94:	3304      	adds	r3, #4
 8004d96:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	7d1b      	ldrb	r3, [r3, #20]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d111      	bne.n	8004dc4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3318      	adds	r3, #24
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	3304      	adds	r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6811      	ldr	r1, [r2, #0]
 8004db4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3318      	adds	r3, #24
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3307      	adds	r3, #7
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	061a      	lsls	r2, r3, #24
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3306      	adds	r3, #6
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3305      	adds	r3, #5
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	4313      	orrs	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	3204      	adds	r2, #4
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	4610      	mov	r0, r2
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	6811      	ldr	r1, [r2, #0]
 8004dec:	ea43 0200 	orr.w	r2, r3, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004dfa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3303      	adds	r3, #3
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	061a      	lsls	r2, r3, #24
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3302      	adds	r3, #2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3301      	adds	r3, #1
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	4313      	orrs	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6811      	ldr	r1, [r2, #0]
 8004e22:	ea43 0200 	orr.w	r2, r3, r0
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004e30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3318      	adds	r3, #24
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	4413      	add	r3, r2
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6811      	ldr	r1, [r2, #0]
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	440b      	add	r3, r1
 8004e50:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e00e      	b.n	8004e74 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e006      	b.n	8004e74 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3724      	adds	r7, #36	@ 0x24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d003      	beq.n	8004ea4 <HAL_CAN_GetRxMessage+0x24>
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	f040 8103 	bne.w	80050aa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0f7      	b.n	80050b8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0e8      	b.n	80050b8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	331b      	adds	r3, #27
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	4413      	add	r3, r2
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0204 	and.w	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	331b      	adds	r3, #27
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4413      	add	r3, r2
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0d5b      	lsrs	r3, r3, #21
 8004f14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e00b      	b.n	8004f36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	331b      	adds	r3, #27
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4413      	add	r3, r2
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	331b      	adds	r3, #27
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4413      	add	r3, r2
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0202 	and.w	r2, r3, #2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	331b      	adds	r3, #27
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2208      	movs	r2, #8
 8004f68:	611a      	str	r2, [r3, #16]
 8004f6a:	e00b      	b.n	8004f84 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	331b      	adds	r3, #27
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	3304      	adds	r3, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	331b      	adds	r3, #27
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	4413      	add	r3, r2
 8004f90:	3304      	adds	r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	331b      	adds	r3, #27
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3304      	adds	r3, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0a1a      	lsrs	r2, r3, #8
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0c1a      	lsrs	r2, r3, #16
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	4413      	add	r3, r2
 8005008:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	0e1a      	lsrs	r2, r3, #24
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	3303      	adds	r3, #3
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	4413      	add	r3, r2
 8005022:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0a1a      	lsrs	r2, r3, #8
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3305      	adds	r3, #5
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	0c1a      	lsrs	r2, r3, #16
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	3306      	adds	r3, #6
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	4413      	add	r3, r2
 800506e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	0e1a      	lsrs	r2, r3, #24
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	3307      	adds	r3, #7
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0220 	orr.w	r2, r2, #32
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	e007      	b.n	80050a6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0220 	orr.w	r2, r2, #32
 80050a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e006      	b.n	80050b8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d002      	beq.n	80050e2 <HAL_CAN_ActivateNotification+0x1e>
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d109      	bne.n	80050f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6959      	ldr	r1, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e006      	b.n	8005104 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	@ 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d07c      	beq.n	8005250 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d023      	beq.n	80051a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fe fc12 	bl	800399c <HAL_CAN_TxMailbox0CompleteCallback>
 8005178:	e016      	b.n	80051a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
 800518c:	e00c      	b.n	80051a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a0:	e002      	b.n	80051a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f96b 	bl	800547e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d024      	beq.n	80051fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fe fbf2 	bl	80039b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80051cc:	e016      	b.n	80051fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e0:	e00c      	b.n	80051fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	e002      	b.n	80051fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f94b 	bl	8005492 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d024      	beq.n	8005250 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800520e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fe fbd6 	bl	80039cc <HAL_CAN_TxMailbox2CompleteCallback>
 8005220:	e016      	b.n	8005250 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
 8005234:	e00c      	b.n	8005250 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
 8005248:	e002      	b.n	8005250 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f92b 	bl	80054a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2210      	movs	r2, #16
 8005272:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2208      	movs	r2, #8
 800528e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f912 	bl	80054ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fe fb9a 	bl	80039e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2210      	movs	r2, #16
 80052d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2208      	movs	r2, #8
 80052f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8f4 	bl	80054e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8db 	bl	80054ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2210      	movs	r2, #16
 8005332:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8de 	bl	80054f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2208      	movs	r2, #8
 8005354:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8d7 	bl	800550a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d07b      	beq.n	800545e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d072      	beq.n	8005456 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d043      	beq.n	8005456 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d03e      	beq.n	8005456 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053de:	2b60      	cmp	r3, #96	@ 0x60
 80053e0:	d02b      	beq.n	800543a <HAL_CAN_IRQHandler+0x32a>
 80053e2:	2b60      	cmp	r3, #96	@ 0x60
 80053e4:	d82e      	bhi.n	8005444 <HAL_CAN_IRQHandler+0x334>
 80053e6:	2b50      	cmp	r3, #80	@ 0x50
 80053e8:	d022      	beq.n	8005430 <HAL_CAN_IRQHandler+0x320>
 80053ea:	2b50      	cmp	r3, #80	@ 0x50
 80053ec:	d82a      	bhi.n	8005444 <HAL_CAN_IRQHandler+0x334>
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d019      	beq.n	8005426 <HAL_CAN_IRQHandler+0x316>
 80053f2:	2b40      	cmp	r3, #64	@ 0x40
 80053f4:	d826      	bhi.n	8005444 <HAL_CAN_IRQHandler+0x334>
 80053f6:	2b30      	cmp	r3, #48	@ 0x30
 80053f8:	d010      	beq.n	800541c <HAL_CAN_IRQHandler+0x30c>
 80053fa:	2b30      	cmp	r3, #48	@ 0x30
 80053fc:	d822      	bhi.n	8005444 <HAL_CAN_IRQHandler+0x334>
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d002      	beq.n	8005408 <HAL_CAN_IRQHandler+0x2f8>
 8005402:	2b20      	cmp	r3, #32
 8005404:	d005      	beq.n	8005412 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005406:	e01d      	b.n	8005444 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	f043 0308 	orr.w	r3, r3, #8
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005410:	e019      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	f043 0310 	orr.w	r3, r3, #16
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800541a:	e014      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	f043 0320 	orr.w	r3, r3, #32
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005424:	e00f      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800542e:	e00a      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005438:	e005      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005442:	e000      	b.n	8005446 <HAL_CAN_IRQHandler+0x336>
            break;
 8005444:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005454:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2204      	movs	r2, #4
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fe fbb5 	bl	8003be0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005476:	bf00      	nop
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800553c:	4013      	ands	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800554c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005552:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	60d3      	str	r3, [r2, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <__NVIC_GetPriorityGrouping+0x18>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	f003 0307 	and.w	r3, r3, #7
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db0b      	blt.n	80055ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	f003 021f 	and.w	r2, r3, #31
 800559c:	4907      	ldr	r1, [pc, #28]	@ (80055bc <__NVIC_EnableIRQ+0x38>)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2001      	movs	r0, #1
 80055a6:	fa00 f202 	lsl.w	r2, r0, r2
 80055aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e100 	.word	0xe000e100

080055c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db0a      	blt.n	80055ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	490c      	ldr	r1, [pc, #48]	@ (800560c <__NVIC_SetPriority+0x4c>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	440b      	add	r3, r1
 80055e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e8:	e00a      	b.n	8005600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4908      	ldr	r1, [pc, #32]	@ (8005610 <__NVIC_SetPriority+0x50>)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3b04      	subs	r3, #4
 80055f8:	0112      	lsls	r2, r2, #4
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	440b      	add	r3, r1
 80055fe:	761a      	strb	r2, [r3, #24]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000e100 	.word	0xe000e100
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f1c3 0307 	rsb	r3, r3, #7
 800562e:	2b04      	cmp	r3, #4
 8005630:	bf28      	it	cs
 8005632:	2304      	movcs	r3, #4
 8005634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3304      	adds	r3, #4
 800563a:	2b06      	cmp	r3, #6
 800563c:	d902      	bls.n	8005644 <NVIC_EncodePriority+0x30>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3b03      	subs	r3, #3
 8005642:	e000      	b.n	8005646 <NVIC_EncodePriority+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	401a      	ands	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800565c:	f04f 31ff 	mov.w	r1, #4294967295
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	43d9      	mvns	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	4313      	orrs	r3, r2
         );
}
 800566e:	4618      	mov	r0, r3
 8005670:	3724      	adds	r7, #36	@ 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800568c:	d301      	bcc.n	8005692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800568e:	2301      	movs	r3, #1
 8005690:	e00f      	b.n	80056b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005692:	4a0a      	ldr	r2, [pc, #40]	@ (80056bc <SysTick_Config+0x40>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800569a:	210f      	movs	r1, #15
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	f7ff ff8e 	bl	80055c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <SysTick_Config+0x40>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056aa:	4b04      	ldr	r3, [pc, #16]	@ (80056bc <SysTick_Config+0x40>)
 80056ac:	2207      	movs	r2, #7
 80056ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	e000e010 	.word	0xe000e010

080056c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff29 	bl	8005520 <__NVIC_SetPriorityGrouping>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4603      	mov	r3, r0
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e8:	f7ff ff3e 	bl	8005568 <__NVIC_GetPriorityGrouping>
 80056ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f7ff ff8e 	bl	8005614 <NVIC_EncodePriority>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff5d 	bl	80055c0 <__NVIC_SetPriority>
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff31 	bl	8005584 <__NVIC_EnableIRQ>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffa2 	bl	800567c <SysTick_Config>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d106      	bne.n	8005760 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005752:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a08      	ldr	r2, [pc, #32]	@ (8005778 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005758:	f043 0304 	orr.w	r3, r3, #4
 800575c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800575e:	e005      	b.n	800576c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005766:	f023 0304 	bic.w	r3, r3, #4
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	e000e010 	.word	0xe000e010

0800577c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d004      	beq.n	800579a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2280      	movs	r2, #128	@ 0x80
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e00c      	b.n	80057b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2205      	movs	r2, #5
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ce:	b2db      	uxtb	r3, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	@ 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e165      	b.n	8005ac4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057f8:	2201      	movs	r2, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	f040 8154 	bne.w	8005abe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d005      	beq.n	800582e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800582a:	2b02      	cmp	r3, #2
 800582c:	d130      	bne.n	8005890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	2203      	movs	r2, #3
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005864:	2201      	movs	r2, #1
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 0201 	and.w	r2, r3, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d017      	beq.n	80058cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d123      	bne.n	8005920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	08da      	lsrs	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3208      	adds	r2, #8
 80058e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	220f      	movs	r2, #15
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	08da      	lsrs	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3208      	adds	r2, #8
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	2203      	movs	r2, #3
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0203 	and.w	r2, r3, #3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4313      	orrs	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80ae 	beq.w	8005abe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b5d      	ldr	r3, [pc, #372]	@ (8005adc <HAL_GPIO_Init+0x300>)
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	4a5c      	ldr	r2, [pc, #368]	@ (8005adc <HAL_GPIO_Init+0x300>)
 800596c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005970:	6453      	str	r3, [r2, #68]	@ 0x44
 8005972:	4b5a      	ldr	r3, [pc, #360]	@ (8005adc <HAL_GPIO_Init+0x300>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800597e:	4a58      	ldr	r2, [pc, #352]	@ (8005ae0 <HAL_GPIO_Init+0x304>)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	3302      	adds	r3, #2
 8005986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	220f      	movs	r2, #15
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ae4 <HAL_GPIO_Init+0x308>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d025      	beq.n	80059f6 <HAL_GPIO_Init+0x21a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a4e      	ldr	r2, [pc, #312]	@ (8005ae8 <HAL_GPIO_Init+0x30c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01f      	beq.n	80059f2 <HAL_GPIO_Init+0x216>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a4d      	ldr	r2, [pc, #308]	@ (8005aec <HAL_GPIO_Init+0x310>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d019      	beq.n	80059ee <HAL_GPIO_Init+0x212>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a4c      	ldr	r2, [pc, #304]	@ (8005af0 <HAL_GPIO_Init+0x314>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_GPIO_Init+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4b      	ldr	r2, [pc, #300]	@ (8005af4 <HAL_GPIO_Init+0x318>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00d      	beq.n	80059e6 <HAL_GPIO_Init+0x20a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4a      	ldr	r2, [pc, #296]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <HAL_GPIO_Init+0x206>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a49      	ldr	r2, [pc, #292]	@ (8005afc <HAL_GPIO_Init+0x320>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <HAL_GPIO_Init+0x202>
 80059da:	2306      	movs	r3, #6
 80059dc:	e00c      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059de:	2307      	movs	r3, #7
 80059e0:	e00a      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059e2:	2305      	movs	r3, #5
 80059e4:	e008      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059e6:	2304      	movs	r3, #4
 80059e8:	e006      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059ea:	2303      	movs	r3, #3
 80059ec:	e004      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e002      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_GPIO_Init+0x21c>
 80059f6:	2300      	movs	r3, #0
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	f002 0203 	and.w	r2, r2, #3
 80059fe:	0092      	lsls	r2, r2, #2
 8005a00:	4093      	lsls	r3, r2
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a08:	4935      	ldr	r1, [pc, #212]	@ (8005ae0 <HAL_GPIO_Init+0x304>)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	3302      	adds	r3, #2
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a16:	4b3a      	ldr	r3, [pc, #232]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a3a:	4a31      	ldr	r2, [pc, #196]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a40:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a64:	4a26      	ldr	r2, [pc, #152]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a6a:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a94:	4b1a      	ldr	r3, [pc, #104]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab8:	4a11      	ldr	r2, [pc, #68]	@ (8005b00 <HAL_GPIO_Init+0x324>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	f67f ae96 	bls.w	80057f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	3724      	adds	r7, #36	@ 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40013800 	.word	0x40013800
 8005ae4:	40020000 	.word	0x40020000
 8005ae8:	40020400 	.word	0x40020400
 8005aec:	40020800 	.word	0x40020800
 8005af0:	40020c00 	.word	0x40020c00
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40021400 	.word	0x40021400
 8005afc:	40021800 	.word	0x40021800
 8005b00:	40013c00 	.word	0x40013c00

08005b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e12b      	b.n	8005d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fe fd8c 	bl	8004648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	@ 0x24
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b68:	f001 ff7a 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a81      	ldr	r2, [pc, #516]	@ (8005d78 <HAL_I2C_Init+0x274>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d807      	bhi.n	8005b88 <HAL_I2C_Init+0x84>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a80      	ldr	r2, [pc, #512]	@ (8005d7c <HAL_I2C_Init+0x278>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bf94      	ite	ls
 8005b80:	2301      	movls	r3, #1
 8005b82:	2300      	movhi	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e006      	b.n	8005b96 <HAL_I2C_Init+0x92>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d80 <HAL_I2C_Init+0x27c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf94      	ite	ls
 8005b90:	2301      	movls	r3, #1
 8005b92:	2300      	movhi	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0e7      	b.n	8005d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a78      	ldr	r2, [pc, #480]	@ (8005d84 <HAL_I2C_Init+0x280>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	0c9b      	lsrs	r3, r3, #18
 8005ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8005d78 <HAL_I2C_Init+0x274>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d802      	bhi.n	8005bd8 <HAL_I2C_Init+0xd4>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	e009      	b.n	8005bec <HAL_I2C_Init+0xe8>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	4a69      	ldr	r2, [pc, #420]	@ (8005d88 <HAL_I2C_Init+0x284>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	3301      	adds	r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	495c      	ldr	r1, [pc, #368]	@ (8005d78 <HAL_I2C_Init+0x274>)
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	d819      	bhi.n	8005c40 <HAL_I2C_Init+0x13c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e59      	subs	r1, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c20:	400b      	ands	r3, r1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_I2C_Init+0x138>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e59      	subs	r1, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c34:	3301      	adds	r3, #1
 8005c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3a:	e051      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	e04f      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d111      	bne.n	8005c6c <HAL_I2C_Init+0x168>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1e58      	subs	r0, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e012      	b.n	8005c92 <HAL_I2C_Init+0x18e>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1e58      	subs	r0, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6859      	ldr	r1, [r3, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	0099      	lsls	r1, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c82:	3301      	adds	r3, #1
 8005c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_I2C_Init+0x196>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e022      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_I2C_Init+0x1bc>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1e58      	subs	r0, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6859      	ldr	r1, [r3, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	440b      	add	r3, r1
 8005cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbe:	e00f      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e58      	subs	r0, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	0099      	lsls	r1, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	6809      	ldr	r1, [r1, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6911      	ldr	r1, [r2, #16]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68d2      	ldr	r2, [r2, #12]
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	000186a0 	.word	0x000186a0
 8005d7c:	001e847f 	.word	0x001e847f
 8005d80:	003d08ff 	.word	0x003d08ff
 8005d84:	431bde83 	.word	0x431bde83
 8005d88:	10624dd3 	.word	0x10624dd3

08005d8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9e:	2b80      	cmp	r3, #128	@ 0x80
 8005da0:	d103      	bne.n	8005daa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]
  }
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	817b      	strh	r3, [r7, #10]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	f040 8081 	bne.w	8005ee0 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dde:	4b44      	ldr	r3, [pc, #272]	@ (8005ef0 <HAL_I2C_Master_Transmit_IT+0x138>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	08db      	lsrs	r3, r3, #3
 8005de4:	4a43      	ldr	r2, [pc, #268]	@ (8005ef4 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0a1a      	lsrs	r2, r3, #8
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009a      	lsls	r2, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d112      	bne.n	8005e2a <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
 8005e28:	e05b      	b.n	8005ee2 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d0df      	beq.n	8005df8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_I2C_Master_Transmit_IT+0x8e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e04d      	b.n	8005ee2 <HAL_I2C_Master_Transmit_IT+0x12a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d007      	beq.n	8005e6c <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2221      	movs	r2, #33	@ 0x21
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2210      	movs	r2, #16
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	893a      	ldrh	r2, [r7, #8]
 8005e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005eac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005eae:	897a      	ldrh	r2, [r7, #10]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005eca:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eda:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000008 	.word	0x20000008
 8005ef4:	14f8b589 	.word	0x14f8b589
 8005ef8:	ffff0000 	.word	0xffff0000

08005efc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d003      	beq.n	8005f34 <HAL_I2C_EV_IRQHandler+0x38>
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	f040 80b1 	bne.w	8006096 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10d      	bne.n	8005f6a <HAL_I2C_EV_IRQHandler+0x6e>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005f54:	d003      	beq.n	8005f5e <HAL_I2C_EV_IRQHandler+0x62>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2C_EV_IRQHandler+0x66>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_I2C_EV_IRQHandler+0x68>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f000 8114 	beq.w	8006192 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <HAL_I2C_EV_IRQHandler+0x90>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fc60 	bl	8007844 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fd66 	bl	8006a56 <I2C_Master_SB>
 8005f8a:	e083      	b.n	8006094 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_I2C_EV_IRQHandler+0xac>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fdde 	bl	8006b62 <I2C_Master_ADD10>
 8005fa6:	e075      	b.n	8006094 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_I2C_EV_IRQHandler+0xc8>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fdfa 	bl	8006bb6 <I2C_Master_ADDR>
 8005fc2:	e067      	b.n	8006094 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d036      	beq.n	800603c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fdc:	f000 80db 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <HAL_I2C_EV_IRQHandler+0x10a>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_I2C_EV_IRQHandler+0x10a>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9c2 	bl	8006388 <I2C_MasterTransmit_TXE>
 8006004:	e046      	b.n	8006094 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80c2 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80bc 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b21      	cmp	r3, #33	@ 0x21
 8006022:	d103      	bne.n	800602c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa4b 	bl	80064c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800602a:	e0b4      	b.n	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b40      	cmp	r3, #64	@ 0x40
 8006030:	f040 80b1 	bne.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fab9 	bl	80065ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800603a:	e0ac      	b.n	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604a:	f000 80a4 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x178>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x178>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb35 	bl	80066dc <I2C_MasterReceive_RXNE>
 8006072:	e00f      	b.n	8006094 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 808b 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8085 	beq.w	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fbed 	bl	800686c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006092:	e080      	b.n	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
 8006094:	e07f      	b.n	8006196 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	e007      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80060dc:	69b9      	ldr	r1, [r7, #24]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 ffb8 	bl	8007054 <I2C_Slave_ADDR>
 80060e4:	e05a      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_I2C_EV_IRQHandler+0x206>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fff2 	bl	80070e4 <I2C_Slave_STOPF>
 8006100:	e04c      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b21      	cmp	r3, #33	@ 0x21
 8006106:	d002      	beq.n	800610e <HAL_I2C_EV_IRQHandler+0x212>
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b29      	cmp	r3, #41	@ 0x29
 800610c:	d120      	bne.n	8006150 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <HAL_I2C_EV_IRQHandler+0x238>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_I2C_EV_IRQHandler+0x238>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fed3 	bl	8006ed8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006132:	e032      	b.n	800619a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d02d      	beq.n	800619a <HAL_I2C_EV_IRQHandler+0x29e>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006144:	2b00      	cmp	r3, #0
 8006146:	d028      	beq.n	800619a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 ff02 	bl	8006f52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800614e:	e024      	b.n	800619a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0x27a>
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0x27a>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 ff10 	bl	8006f94 <I2C_SlaveReceive_RXNE>
 8006174:	e012      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006186:	2b00      	cmp	r3, #0
 8006188:	d008      	beq.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 ff40 	bl	8007010 <I2C_SlaveReceive_BTF>
 8006190:	e004      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006192:	bf00      	nop
 8006194:	e002      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800619a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b08a      	sub	sp, #40	@ 0x28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <HAL_I2C_ER_IRQHandler+0x4a>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d008      	beq.n	80061ec <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00d      	beq.n	8006212 <HAL_I2C_ER_IRQHandler+0x70>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	f043 0302 	orr.w	r3, r3, #2
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006210:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006218:	2b00      	cmp	r3, #0
 800621a:	d03e      	beq.n	800629a <HAL_I2C_ER_IRQHandler+0xf8>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006222:	2b00      	cmp	r3, #0
 8006224:	d039      	beq.n	800629a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006226:	7efb      	ldrb	r3, [r7, #27]
 8006228:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006238:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006240:	7ebb      	ldrb	r3, [r7, #26]
 8006242:	2b20      	cmp	r3, #32
 8006244:	d112      	bne.n	800626c <HAL_I2C_ER_IRQHandler+0xca>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10f      	bne.n	800626c <HAL_I2C_ER_IRQHandler+0xca>
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	2b21      	cmp	r3, #33	@ 0x21
 8006250:	d008      	beq.n	8006264 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	2b29      	cmp	r3, #41	@ 0x29
 8006256:	d005      	beq.n	8006264 <HAL_I2C_ER_IRQHandler+0xc2>
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	2b28      	cmp	r3, #40	@ 0x28
 800625c:	d106      	bne.n	800626c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b21      	cmp	r3, #33	@ 0x21
 8006262:	d103      	bne.n	800626c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f86d 	bl	8007344 <I2C_Slave_AF>
 800626a:	e016      	b.n	800629a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006274:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800627e:	7efb      	ldrb	r3, [r7, #27]
 8006280:	2b10      	cmp	r3, #16
 8006282:	d002      	beq.n	800628a <HAL_I2C_ER_IRQHandler+0xe8>
 8006284:	7efb      	ldrb	r3, [r7, #27]
 8006286:	2b40      	cmp	r3, #64	@ 0x40
 8006288:	d107      	bne.n	800629a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006298:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <HAL_I2C_ER_IRQHandler+0x11e>
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	f043 0308 	orr.w	r3, r3, #8
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80062be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f8aa 	bl	800742c <I2C_ITError>
  }
}
 80062d8:	bf00      	nop
 80062da:	3728      	adds	r7, #40	@ 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
 8006328:	4613      	mov	r3, r2
 800632a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006396:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800639e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d150      	bne.n	8006450 <I2C_MasterTransmit_TXE+0xc8>
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b21      	cmp	r3, #33	@ 0x21
 80063b2:	d14d      	bne.n	8006450 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d01d      	beq.n	80063f6 <I2C_MasterTransmit_TXE+0x6e>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d01a      	beq.n	80063f6 <I2C_MasterTransmit_TXE+0x6e>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063c6:	d016      	beq.n	80063f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2211      	movs	r2, #17
 80063dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fd fe7e 	bl	80040f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063f4:	e060      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006404:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006414:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d107      	bne.n	8006440 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff ff87 	bl	800634c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800643e:	e03b      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fd fe51 	bl	80040f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800644e:	e033      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b21      	cmp	r3, #33	@ 0x21
 8006454:	d005      	beq.n	8006462 <I2C_MasterTransmit_TXE+0xda>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b40      	cmp	r3, #64	@ 0x40
 800645a:	d12d      	bne.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b22      	cmp	r3, #34	@ 0x22
 8006460:	d12a      	bne.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d108      	bne.n	800647e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800647c:	e01c      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d103      	bne.n	8006492 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f88e 	bl	80065ac <I2C_MemoryTransmit_TXE_BTF>
}
 8006490:	e012      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80064b6:	e7ff      	b.n	80064b8 <I2C_MasterTransmit_TXE+0x130>
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b21      	cmp	r3, #33	@ 0x21
 80064d8:	d164      	bne.n	80065a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006508:	e04c      	b.n	80065a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d01d      	beq.n	800654c <I2C_MasterTransmit_BTF+0x8c>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b20      	cmp	r3, #32
 8006514:	d01a      	beq.n	800654c <I2C_MasterTransmit_BTF+0x8c>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800651c:	d016      	beq.n	800654c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800652c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2211      	movs	r2, #17
 8006532:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fd fdd3 	bl	80040f0 <HAL_I2C_MasterTxCpltCallback>
}
 800654a:	e02b      	b.n	80065a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800655a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800656a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d107      	bne.n	8006596 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fedc 	bl	800634c <HAL_I2C_MemTxCpltCallback>
}
 8006594:	e006      	b.n	80065a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fd fda6 	bl	80040f0 <HAL_I2C_MasterTxCpltCallback>
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11d      	bne.n	8006600 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10b      	bne.n	80065e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80065e2:	e077      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	121b      	asrs	r3, r3, #8
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80065fe:	e069      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10b      	bne.n	8006620 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660c:	b2da      	uxtb	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800661e:	e059      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	2b02      	cmp	r3, #2
 8006626:	d152      	bne.n	80066ce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b22      	cmp	r3, #34	@ 0x22
 800662c:	d10d      	bne.n	800664a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800663c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006648:	e044      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d015      	beq.n	8006680 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b21      	cmp	r3, #33	@ 0x21
 8006658:	d112      	bne.n	8006680 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800667e:	e029      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d124      	bne.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b21      	cmp	r3, #33	@ 0x21
 800668e:	d121      	bne.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800669e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff fe40 	bl	800634c <HAL_I2C_MemTxCpltCallback>
}
 80066cc:	e002      	b.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fb5c 	bl	8005d8c <I2C_Flush_DR>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b22      	cmp	r3, #34	@ 0x22
 80066ee:	f040 80b9 	bne.w	8006864 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d921      	bls.n	800674a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b03      	cmp	r3, #3
 8006734:	f040 8096 	bne.w	8006864 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006746:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006748:	e08c      	b.n	8006864 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	2b02      	cmp	r3, #2
 8006750:	d07f      	beq.n	8006852 <I2C_MasterReceive_RXNE+0x176>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d002      	beq.n	800675e <I2C_MasterReceive_RXNE+0x82>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d179      	bne.n	8006852 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 f83e 	bl	80077e0 <I2C_WaitOnSTOPRequestThroughIT>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d14c      	bne.n	8006804 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006778:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006788:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d10a      	bne.n	80067da <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fdc4 	bl	8006360 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80067d8:	e044      	b.n	8006864 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d002      	beq.n	80067ee <I2C_MasterReceive_RXNE+0x112>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d103      	bne.n	80067f6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80067f4:	e002      	b.n	80067fc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2212      	movs	r2, #18
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fd6f 	bl	80062e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006802:	e02f      	b.n	8006864 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006812:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fd fc68 	bl	8004120 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006850:	e008      	b.n	8006864 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006860:	605a      	str	r2, [r3, #4]
}
 8006862:	e7ff      	b.n	8006864 <I2C_MasterReceive_RXNE+0x188>
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006878:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b04      	cmp	r3, #4
 8006882:	d11b      	bne.n	80068bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006892:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80068ba:	e0c8      	b.n	8006a4e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d129      	bne.n	800691a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d00a      	beq.n	80068f2 <I2C_MasterReceive_BTF+0x86>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d007      	beq.n	80068f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006918:	e099      	b.n	8006a4e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	f040 8081 	bne.w	8006a28 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d002      	beq.n	8006932 <I2C_MasterReceive_BTF+0xc6>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b10      	cmp	r3, #16
 8006930:	d108      	bne.n	8006944 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e019      	b.n	8006978 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b04      	cmp	r3, #4
 8006948:	d002      	beq.n	8006950 <I2C_MasterReceive_BTF+0xe4>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d108      	bne.n	8006962 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e00a      	b.n	8006978 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b10      	cmp	r3, #16
 8006966:	d007      	beq.n	8006978 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006976:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80069d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	d10a      	bne.n	80069fe <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff fcb2 	bl	8006360 <HAL_I2C_MemRxCpltCallback>
}
 80069fc:	e027      	b.n	8006a4e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d002      	beq.n	8006a12 <I2C_MasterReceive_BTF+0x1a6>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d103      	bne.n	8006a1a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a18:	e002      	b.n	8006a20 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2212      	movs	r2, #18
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fc5d 	bl	80062e0 <HAL_I2C_MasterRxCpltCallback>
}
 8006a26:	e012      	b.n	8006a4e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d117      	bne.n	8006a9a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a82:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006a84:	e067      	b.n	8006b56 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	611a      	str	r2, [r3, #16]
}
 8006a98:	e05d      	b.n	8006b56 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa2:	d133      	bne.n	8006b0c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b21      	cmp	r3, #33	@ 0x21
 8006aae:	d109      	bne.n	8006ac4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e008      	b.n	8006ad6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <I2C_Master_SB+0x92>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d032      	beq.n	8006b56 <I2C_Master_SB+0x100>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d02d      	beq.n	8006b56 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b08:	605a      	str	r2, [r3, #4]
}
 8006b0a:	e024      	b.n	8006b56 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10e      	bne.n	8006b32 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	11db      	asrs	r3, r3, #7
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0306 	and.w	r3, r3, #6
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f063 030f 	orn	r3, r3, #15
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	611a      	str	r2, [r3, #16]
}
 8006b30:	e011      	b.n	8006b56 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d10d      	bne.n	8006b56 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	11db      	asrs	r3, r3, #7
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	f003 0306 	and.w	r3, r3, #6
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f063 030e 	orn	r3, r3, #14
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	611a      	str	r2, [r3, #16]
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <I2C_Master_ADD10+0x26>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d108      	bne.n	8006b9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <I2C_Master_ADD10+0x48>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ba8:	605a      	str	r2, [r3, #4]
  }
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b091      	sub	sp, #68	@ 0x44
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b22      	cmp	r3, #34	@ 0x22
 8006bde:	f040 8169 	bne.w	8006eb4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <I2C_Master_ADDR+0x54>
 8006bea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d10b      	bne.n	8006c0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	e160      	b.n	8006ecc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11d      	bne.n	8006c4e <I2C_Master_ADDR+0x98>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c1a:	d118      	bne.n	8006c4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c4c:	e13e      	b.n	8006ecc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d113      	bne.n	8006c80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e115      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	f040 808a 	bne.w	8006da0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c92:	d137      	bne.n	8006d04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb2:	d113      	bne.n	8006cdc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	e0e7      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	623b      	str	r3, [r7, #32]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e0d3      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d02e      	beq.n	8006d68 <I2C_Master_ADDR+0x1b2>
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d02b      	beq.n	8006d68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	2b12      	cmp	r3, #18
 8006d14:	d102      	bne.n	8006d1c <I2C_Master_ADDR+0x166>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d125      	bne.n	8006d68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d00e      	beq.n	8006d40 <I2C_Master_ADDR+0x18a>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d00b      	beq.n	8006d40 <I2C_Master_ADDR+0x18a>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d008      	beq.n	8006d40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e007      	b.n	8006d50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	e0a1      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e085      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d14d      	bne.n	8006e46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d016      	beq.n	8006dde <I2C_Master_ADDR+0x228>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d013      	beq.n	8006dde <I2C_Master_ADDR+0x228>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	2b10      	cmp	r3, #16
 8006dba:	d010      	beq.n	8006dde <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e007      	b.n	8006dee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006dec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfc:	d117      	bne.n	8006e2e <I2C_Master_ADDR+0x278>
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e04:	d00b      	beq.n	8006e1e <I2C_Master_ADDR+0x268>
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d008      	beq.n	8006e1e <I2C_Master_ADDR+0x268>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d005      	beq.n	8006e1e <I2C_Master_ADDR+0x268>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d002      	beq.n	8006e1e <I2C_Master_ADDR+0x268>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d107      	bne.n	8006e2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	e032      	b.n	8006eac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e64:	d117      	bne.n	8006e96 <I2C_Master_ADDR+0x2e0>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e6c:	d00b      	beq.n	8006e86 <I2C_Master_ADDR+0x2d0>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d008      	beq.n	8006e86 <I2C_Master_ADDR+0x2d0>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d005      	beq.n	8006e86 <I2C_Master_ADDR+0x2d0>
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d002      	beq.n	8006e86 <I2C_Master_ADDR+0x2d0>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d107      	bne.n	8006e96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006eb2:	e00b      	b.n	8006ecc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
}
 8006eca:	e7ff      	b.n	8006ecc <I2C_Master_ADDR+0x316>
 8006ecc:	bf00      	nop
 8006ece:	3744      	adds	r7, #68	@ 0x44
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02b      	beq.n	8006f4a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d114      	bne.n	8006f4a <I2C_SlaveTransmit_TXE+0x72>
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b29      	cmp	r3, #41	@ 0x29
 8006f24:	d111      	bne.n	8006f4a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2221      	movs	r2, #33	@ 0x21
 8006f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2228      	movs	r2, #40	@ 0x28
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff f9d5 	bl	80062f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02c      	beq.n	8007008 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d114      	bne.n	8007008 <I2C_SlaveReceive_RXNE+0x74>
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe2:	d111      	bne.n	8007008 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ff2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2222      	movs	r2, #34	@ 0x22
 8006ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2228      	movs	r2, #40	@ 0x28
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff f980 	bl	8006308 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d012      	beq.n	8007048 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800706e:	2b28      	cmp	r3, #40	@ 0x28
 8007070:	d125      	bne.n	80070be <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007080:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	81bb      	strh	r3, [r7, #12]
 80070a0:	e002      	b.n	80070a8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80070b0:	89ba      	ldrh	r2, [r7, #12]
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff f930 	bl	800631c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80070bc:	e00e      	b.n	80070dc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007102:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007104:	2300      	movs	r3, #0
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	60bb      	str	r3, [r7, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007130:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007140:	d172      	bne.n	8007228 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b22      	cmp	r3, #34	@ 0x22
 8007146:	d002      	beq.n	800714e <I2C_Slave_STOPF+0x6a>
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b2a      	cmp	r3, #42	@ 0x2a
 800714c:	d135      	bne.n	80071ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f043 0204 	orr.w	r2, r3, #4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fb1a 	bl	80057c0 <HAL_DMA_GetState>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d049      	beq.n	8007226 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	4a69      	ldr	r2, [pc, #420]	@ (800733c <I2C_Slave_STOPF+0x258>)
 8007198:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe faec 	bl	800577c <HAL_DMA_Abort_IT>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d03d      	beq.n	8007226 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b8:	e035      	b.n	8007226 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fae4 	bl	80057c0 <HAL_DMA_GetState>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d014      	beq.n	8007228 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007202:	4a4e      	ldr	r2, [pc, #312]	@ (800733c <I2C_Slave_STOPF+0x258>)
 8007204:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fab6 	bl	800577c <HAL_DMA_Abort_IT>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	e000      	b.n	8007228 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007226:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d03e      	beq.n	80072b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d112      	bne.n	8007266 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007270:	2b40      	cmp	r3, #64	@ 0x40
 8007272:	d112      	bne.n	800729a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	f043 0204 	orr.w	r2, r3, #4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8b7 	bl	800742c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80072be:	e039      	b.n	8007334 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c4:	d109      	bne.n	80072da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2228      	movs	r2, #40	@ 0x28
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff f817 	bl	8006308 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b28      	cmp	r3, #40	@ 0x28
 80072e4:	d111      	bne.n	800730a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <I2C_Slave_STOPF+0x25c>)
 80072ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff f818 	bl	8006338 <HAL_I2C_ListenCpltCallback>
}
 8007308:	e014      	b.n	8007334 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730e:	2b22      	cmp	r3, #34	@ 0x22
 8007310:	d002      	beq.n	8007318 <I2C_Slave_STOPF+0x234>
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b22      	cmp	r3, #34	@ 0x22
 8007316:	d10d      	bne.n	8007334 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe ffea 	bl	8006308 <HAL_I2C_SlaveRxCpltCallback>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	08007691 	.word	0x08007691
 8007340:	ffff0000 	.word	0xffff0000

08007344 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007352:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d002      	beq.n	8007366 <I2C_Slave_AF+0x22>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b20      	cmp	r3, #32
 8007364:	d129      	bne.n	80073ba <I2C_Slave_AF+0x76>
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b28      	cmp	r3, #40	@ 0x28
 800736a:	d126      	bne.n	80073ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a2e      	ldr	r2, [pc, #184]	@ (8007428 <I2C_Slave_AF+0xe4>)
 8007370:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007380:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800738a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800739a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fe ffc0 	bl	8006338 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80073b8:	e031      	b.n	800741e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b21      	cmp	r3, #33	@ 0x21
 80073be:	d129      	bne.n	8007414 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <I2C_Slave_AF+0xe4>)
 80073c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2221      	movs	r2, #33	@ 0x21
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80073ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007404:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe fcc0 	bl	8005d8c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe ff71 	bl	80062f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8007412:	e004      	b.n	800741e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800741c:	615a      	str	r2, [r3, #20]
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	ffff0000 	.word	0xffff0000

0800742c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800743a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007442:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b10      	cmp	r3, #16
 8007448:	d002      	beq.n	8007450 <I2C_ITError+0x24>
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d10a      	bne.n	8007466 <I2C_ITError+0x3a>
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b22      	cmp	r3, #34	@ 0x22
 8007454:	d107      	bne.n	8007466 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007464:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800746c:	2b28      	cmp	r3, #40	@ 0x28
 800746e:	d107      	bne.n	8007480 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2228      	movs	r2, #40	@ 0x28
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800747e:	e015      	b.n	80074ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748e:	d00a      	beq.n	80074a6 <I2C_ITError+0x7a>
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b60      	cmp	r3, #96	@ 0x60
 8007494:	d007      	beq.n	80074a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ba:	d162      	bne.n	8007582 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d020      	beq.n	800751c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074de:	4a6a      	ldr	r2, [pc, #424]	@ (8007688 <I2C_ITError+0x25c>)
 80074e0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe f948 	bl	800577c <HAL_DMA_Abort_IT>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8089 	beq.w	8007606 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
 800751a:	e074      	b.n	8007606 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007520:	4a59      	ldr	r2, [pc, #356]	@ (8007688 <I2C_ITError+0x25c>)
 8007522:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe f927 	bl	800577c <HAL_DMA_Abort_IT>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d068      	beq.n	8007606 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753e:	2b40      	cmp	r3, #64	@ 0x40
 8007540:	d10b      	bne.n	800755a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	e041      	b.n	8007606 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b60      	cmp	r3, #96	@ 0x60
 800758c:	d125      	bne.n	80075da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a6:	2b40      	cmp	r3, #64	@ 0x40
 80075a8:	d10b      	bne.n	80075c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fe fece 	bl	8006374 <HAL_I2C_AbortCpltCallback>
 80075d8:	e015      	b.n	8007606 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b40      	cmp	r3, #64	@ 0x40
 80075e6:	d10b      	bne.n	8007600 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fc fd8d 	bl	8004120 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10e      	bne.n	8007634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007642:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800764a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d113      	bne.n	8007680 <I2C_ITError+0x254>
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	2b28      	cmp	r3, #40	@ 0x28
 800765c:	d110      	bne.n	8007680 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <I2C_ITError+0x260>)
 8007662:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fe fe5c 	bl	8006338 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	08007691 	.word	0x08007691
 800768c:	ffff0000 	.word	0xffff0000

08007690 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076aa:	4b4b      	ldr	r3, [pc, #300]	@ (80077d8 <I2C_DMAAbort+0x148>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	08db      	lsrs	r3, r3, #3
 80076b0:	4a4a      	ldr	r2, [pc, #296]	@ (80077dc <I2C_DMAAbort+0x14c>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	0a1a      	lsrs	r2, r3, #8
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	00da      	lsls	r2, r3, #3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80076d6:	e00a      	b.n	80076ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ec:	d0ea      	beq.n	80076c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fa:	2200      	movs	r2, #0
 80076fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	2200      	movs	r2, #0
 800770c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800771c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2200      	movs	r2, #0
 8007722:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007730:	2200      	movs	r2, #0
 8007732:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	2200      	movs	r2, #0
 8007742:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b60      	cmp	r3, #96	@ 0x60
 800775e:	d10e      	bne.n	800777e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007776:	6978      	ldr	r0, [r7, #20]
 8007778:	f7fe fdfc 	bl	8006374 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800777c:	e027      	b.n	80077ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800777e:	7cfb      	ldrb	r3, [r7, #19]
 8007780:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007784:	2b28      	cmp	r3, #40	@ 0x28
 8007786:	d117      	bne.n	80077b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2228      	movs	r2, #40	@ 0x28
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80077b6:	e007      	b.n	80077c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077c8:	6978      	ldr	r0, [r7, #20]
 80077ca:	f7fc fca9 	bl	8004120 <HAL_I2C_ErrorCallback>
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000008 	.word	0x20000008
 80077dc:	14f8b589 	.word	0x14f8b589

080077e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80077ec:	4b13      	ldr	r3, [pc, #76]	@ (800783c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	4a13      	ldr	r2, [pc, #76]	@ (8007840 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	0a1a      	lsrs	r2, r3, #8
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b01      	subs	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d107      	bne.n	800781e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e008      	b.n	8007830 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800782c:	d0e9      	beq.n	8007802 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000008 	.word	0x20000008
 8007840:	14f8b589 	.word	0x14f8b589

08007844 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007854:	d103      	bne.n	800785e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800785c:	e007      	b.n	800786e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007866:	d102      	bne.n	800786e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2208      	movs	r2, #8
 800786c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0cc      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007890:	4b68      	ldr	r3, [pc, #416]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d90c      	bls.n	80078b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	4b65      	ldr	r3, [pc, #404]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a6:	4b63      	ldr	r3, [pc, #396]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d001      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0b8      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d0:	4b59      	ldr	r3, [pc, #356]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	4a58      	ldr	r2, [pc, #352]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078e8:	4b53      	ldr	r3, [pc, #332]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	4a52      	ldr	r2, [pc, #328]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80078ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078f4:	4b50      	ldr	r3, [pc, #320]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	494d      	ldr	r1, [pc, #308]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	4313      	orrs	r3, r2
 8007904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d044      	beq.n	800799c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d107      	bne.n	800792a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791a:	4b47      	ldr	r3, [pc, #284]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d119      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e07f      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d003      	beq.n	800793a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007936:	2b03      	cmp	r3, #3
 8007938:	d107      	bne.n	800794a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800793a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e06f      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e067      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800795a:	4b37      	ldr	r3, [pc, #220]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f023 0203 	bic.w	r2, r3, #3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4934      	ldr	r1, [pc, #208]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 8007968:	4313      	orrs	r3, r2
 800796a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800796c:	f7fc ff8c 	bl	8004888 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007972:	e00a      	b.n	800798a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007974:	f7fc ff88 	bl	8004888 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007982:	4293      	cmp	r3, r2
 8007984:	d901      	bls.n	800798a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e04f      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800798a:	4b2b      	ldr	r3, [pc, #172]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 020c 	and.w	r2, r3, #12
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	429a      	cmp	r2, r3
 800799a:	d1eb      	bne.n	8007974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800799c:	4b25      	ldr	r3, [pc, #148]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d20c      	bcs.n	80079c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079aa:	4b22      	ldr	r3, [pc, #136]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b2:	4b20      	ldr	r3, [pc, #128]	@ (8007a34 <HAL_RCC_ClockConfig+0x1b8>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d001      	beq.n	80079c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e032      	b.n	8007a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d0:	4b19      	ldr	r3, [pc, #100]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	4916      	ldr	r1, [pc, #88]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079ee:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	490e      	ldr	r1, [pc, #56]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a02:	f000 f887 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007a06:	4602      	mov	r2, r0
 8007a08:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	490a      	ldr	r1, [pc, #40]	@ (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 8007a14:	5ccb      	ldrb	r3, [r1, r3]
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	4a09      	ldr	r2, [pc, #36]	@ (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <HAL_RCC_ClockConfig+0x1c8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fc fcee 	bl	8004404 <HAL_InitTick>

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40023c00 	.word	0x40023c00
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	08009d20 	.word	0x08009d20
 8007a40:	20000008 	.word	0x20000008
 8007a44:	2000000c 	.word	0x2000000c

08007a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	@ (8007a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000008 	.word	0x20000008

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a64:	f7ff fff0 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	0a9b      	lsrs	r3, r3, #10
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	4903      	ldr	r1, [pc, #12]	@ (8007a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a76:	5ccb      	ldrb	r3, [r1, r3]
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	08009d30 	.word	0x08009d30

08007a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a8c:	f7ff ffdc 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a90:	4602      	mov	r2, r0
 8007a92:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	0b5b      	lsrs	r3, r3, #13
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	4903      	ldr	r1, [pc, #12]	@ (8007aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a9e:	5ccb      	ldrb	r3, [r1, r3]
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	08009d30 	.word	0x08009d30

08007ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	220f      	movs	r2, #15
 8007abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ac0:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <HAL_RCC_GetClockConfig+0x5c>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 0203 	and.w	r2, r3, #3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007acc:	4b0f      	ldr	r3, [pc, #60]	@ (8007b0c <HAL_RCC_GetClockConfig+0x5c>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <HAL_RCC_GetClockConfig+0x5c>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ae4:	4b09      	ldr	r3, [pc, #36]	@ (8007b0c <HAL_RCC_GetClockConfig+0x5c>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	08db      	lsrs	r3, r3, #3
 8007aea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007af2:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <HAL_RCC_GetClockConfig+0x60>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 020f 	and.w	r2, r3, #15
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	40023c00 	.word	0x40023c00

08007b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b18:	b0ae      	sub	sp, #184	@ 0xb8
 8007b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b3a:	4bcb      	ldr	r3, [pc, #812]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
 8007b42:	2b0c      	cmp	r3, #12
 8007b44:	f200 8206 	bhi.w	8007f54 <HAL_RCC_GetSysClockFreq+0x440>
 8007b48:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007f55 	.word	0x08007f55
 8007b58:	08007f55 	.word	0x08007f55
 8007b5c:	08007f55 	.word	0x08007f55
 8007b60:	08007b8d 	.word	0x08007b8d
 8007b64:	08007f55 	.word	0x08007f55
 8007b68:	08007f55 	.word	0x08007f55
 8007b6c:	08007f55 	.word	0x08007f55
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007f55 	.word	0x08007f55
 8007b78:	08007f55 	.word	0x08007f55
 8007b7c:	08007f55 	.word	0x08007f55
 8007b80:	08007d85 	.word	0x08007d85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b84:	4bb9      	ldr	r3, [pc, #740]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8007b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b8a:	e1e7      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b8c:	4bb8      	ldr	r3, [pc, #736]	@ (8007e70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b92:	e1e3      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b94:	4bb4      	ldr	r3, [pc, #720]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ba0:	4bb1      	ldr	r3, [pc, #708]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d071      	beq.n	8007c90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bac:	4bae      	ldr	r3, [pc, #696]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	f04f 0000 	mov.w	r0, #0
 8007bda:	f04f 0100 	mov.w	r1, #0
 8007bde:	0159      	lsls	r1, r3, #5
 8007be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007be4:	0150      	lsls	r0, r2, #5
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4621      	mov	r1, r4
 8007bec:	1a51      	subs	r1, r2, r1
 8007bee:	6439      	str	r1, [r7, #64]	@ 0x40
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8007bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007c04:	4649      	mov	r1, r9
 8007c06:	018b      	lsls	r3, r1, #6
 8007c08:	4641      	mov	r1, r8
 8007c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c0e:	4641      	mov	r1, r8
 8007c10:	018a      	lsls	r2, r1, #6
 8007c12:	4641      	mov	r1, r8
 8007c14:	1a51      	subs	r1, r2, r1
 8007c16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c18:	4649      	mov	r1, r9
 8007c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	00cb      	lsls	r3, r1, #3
 8007c30:	4641      	mov	r1, r8
 8007c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c36:	4641      	mov	r1, r8
 8007c38:	00ca      	lsls	r2, r1, #3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4622      	mov	r2, r4
 8007c42:	189b      	adds	r3, r3, r2
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c46:	462b      	mov	r3, r5
 8007c48:	460a      	mov	r2, r1
 8007c4a:	eb42 0303 	adc.w	r3, r2, r3
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	024b      	lsls	r3, r1, #9
 8007c60:	4621      	mov	r1, r4
 8007c62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c66:	4621      	mov	r1, r4
 8007c68:	024a      	lsls	r2, r1, #9
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007c80:	f7f8 fb1e 	bl	80002c0 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4613      	mov	r3, r2
 8007c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c8e:	e067      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c90:	4b75      	ldr	r3, [pc, #468]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	099b      	lsrs	r3, r3, #6
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007caa:	2300      	movs	r3, #0
 8007cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	f04f 0000 	mov.w	r0, #0
 8007cba:	f04f 0100 	mov.w	r1, #0
 8007cbe:	0159      	lsls	r1, r3, #5
 8007cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cc4:	0150      	lsls	r0, r2, #5
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4621      	mov	r1, r4
 8007ccc:	1a51      	subs	r1, r2, r1
 8007cce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8007cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	018b      	lsls	r3, r1, #6
 8007ce8:	4641      	mov	r1, r8
 8007cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007cee:	4641      	mov	r1, r8
 8007cf0:	018a      	lsls	r2, r1, #6
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d12:	4692      	mov	sl, r2
 8007d14:	469b      	mov	fp, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	eb1a 0303 	adds.w	r3, sl, r3
 8007d1c:	623b      	str	r3, [r7, #32]
 8007d1e:	462b      	mov	r3, r5
 8007d20:	eb4b 0303 	adc.w	r3, fp, r3
 8007d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007d32:	4629      	mov	r1, r5
 8007d34:	028b      	lsls	r3, r1, #10
 8007d36:	4621      	mov	r1, r4
 8007d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	028a      	lsls	r2, r1, #10
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d48:	2200      	movs	r2, #0
 8007d4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007d52:	f7f8 fab5 	bl	80002c0 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d60:	4b41      	ldr	r3, [pc, #260]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007d82:	e0eb      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d84:	4b38      	ldr	r3, [pc, #224]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d90:	4b35      	ldr	r3, [pc, #212]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d06b      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d9c:	4b32      	ldr	r3, [pc, #200]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	099b      	lsrs	r3, r3, #6
 8007da2:	2200      	movs	r2, #0
 8007da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007da8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8007db0:	2300      	movs	r3, #0
 8007db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007db4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007db8:	4622      	mov	r2, r4
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f04f 0000 	mov.w	r0, #0
 8007dc0:	f04f 0100 	mov.w	r1, #0
 8007dc4:	0159      	lsls	r1, r3, #5
 8007dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dca:	0150      	lsls	r0, r2, #5
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	1a51      	subs	r1, r2, r1
 8007dd4:	61b9      	str	r1, [r7, #24]
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	eb63 0301 	sbc.w	r3, r3, r1
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007dea:	4659      	mov	r1, fp
 8007dec:	018b      	lsls	r3, r1, #6
 8007dee:	4651      	mov	r1, sl
 8007df0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007df4:	4651      	mov	r1, sl
 8007df6:	018a      	lsls	r2, r1, #6
 8007df8:	4651      	mov	r1, sl
 8007dfa:	ebb2 0801 	subs.w	r8, r2, r1
 8007dfe:	4659      	mov	r1, fp
 8007e00:	eb63 0901 	sbc.w	r9, r3, r1
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e18:	4690      	mov	r8, r2
 8007e1a:	4699      	mov	r9, r3
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	eb18 0303 	adds.w	r3, r8, r3
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	462b      	mov	r3, r5
 8007e26:	eb49 0303 	adc.w	r3, r9, r3
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007e38:	4629      	mov	r1, r5
 8007e3a:	024b      	lsls	r3, r1, #9
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e42:	4621      	mov	r1, r4
 8007e44:	024a      	lsls	r2, r1, #9
 8007e46:	4610      	mov	r0, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e4e:	2200      	movs	r2, #0
 8007e50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e58:	f7f8 fa32 	bl	80002c0 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4613      	mov	r3, r2
 8007e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e66:	e065      	b.n	8007f34 <HAL_RCC_GetSysClockFreq+0x420>
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	00f42400 	.word	0x00f42400
 8007e70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e74:	4b3d      	ldr	r3, [pc, #244]	@ (8007f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	4611      	mov	r1, r2
 8007e80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e86:	2300      	movs	r3, #0
 8007e88:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007e8e:	4642      	mov	r2, r8
 8007e90:	464b      	mov	r3, r9
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f04f 0100 	mov.w	r1, #0
 8007e9a:	0159      	lsls	r1, r3, #5
 8007e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea0:	0150      	lsls	r0, r2, #5
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	1a51      	subs	r1, r2, r1
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	4649      	mov	r1, r9
 8007eae:	eb63 0301 	sbc.w	r3, r3, r1
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	018b      	lsls	r3, r1, #6
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eca:	4651      	mov	r1, sl
 8007ecc:	018a      	lsls	r2, r1, #6
 8007ece:	4651      	mov	r1, sl
 8007ed0:	1a54      	subs	r4, r2, r1
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	eb63 0501 	sbc.w	r5, r3, r1
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	00eb      	lsls	r3, r5, #3
 8007ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ee6:	00e2      	lsls	r2, r4, #3
 8007ee8:	4614      	mov	r4, r2
 8007eea:	461d      	mov	r5, r3
 8007eec:	4643      	mov	r3, r8
 8007eee:	18e3      	adds	r3, r4, r3
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	eb45 0303 	adc.w	r3, r5, r3
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f06:	4629      	mov	r1, r5
 8007f08:	028b      	lsls	r3, r1, #10
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f10:	4621      	mov	r1, r4
 8007f12:	028a      	lsls	r2, r1, #10
 8007f14:	4610      	mov	r0, r2
 8007f16:	4619      	mov	r1, r3
 8007f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007f22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f26:	f7f8 f9cb 	bl	80002c0 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4613      	mov	r3, r2
 8007f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007f34:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	0f1b      	lsrs	r3, r3, #28
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f52:	e003      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f54:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	37b8      	adds	r7, #184	@ 0xb8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	00f42400 	.word	0x00f42400

08007f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e28d      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 8083 	beq.w	800809a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f94:	4b94      	ldr	r3, [pc, #592]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f003 030c 	and.w	r3, r3, #12
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d019      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007fa0:	4b91      	ldr	r3, [pc, #580]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d106      	bne.n	8007fba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007fac:	4b8e      	ldr	r3, [pc, #568]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fba:	4b8b      	ldr	r3, [pc, #556]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d112      	bne.n	8007fec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc6:	4b88      	ldr	r3, [pc, #544]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fd2:	d10b      	bne.n	8007fec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd4:	4b84      	ldr	r3, [pc, #528]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05b      	beq.n	8008098 <HAL_RCC_OscConfig+0x124>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d157      	bne.n	8008098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e25a      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff4:	d106      	bne.n	8008004 <HAL_RCC_OscConfig+0x90>
 8007ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a7b      	ldr	r2, [pc, #492]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e01d      	b.n	8008040 <HAL_RCC_OscConfig+0xcc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800800c:	d10c      	bne.n	8008028 <HAL_RCC_OscConfig+0xb4>
 800800e:	4b76      	ldr	r3, [pc, #472]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a75      	ldr	r2, [pc, #468]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4b73      	ldr	r3, [pc, #460]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a72      	ldr	r2, [pc, #456]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0xcc>
 8008028:	4b6f      	ldr	r3, [pc, #444]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a6e      	ldr	r2, [pc, #440]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800802e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b6c      	ldr	r3, [pc, #432]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a6b      	ldr	r2, [pc, #428]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800803a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800803e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fc fc1e 	bl	8004888 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008050:	f7fc fc1a 	bl	8004888 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	@ 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e21f      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	4b61      	ldr	r3, [pc, #388]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0xdc>
 800806e:	e014      	b.n	800809a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fc0a 	bl	8004888 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008078:	f7fc fc06 	bl	8004888 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	@ 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e20b      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808a:	4b57      	ldr	r3, [pc, #348]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x104>
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d06f      	beq.n	8008186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80080a6:	4b50      	ldr	r3, [pc, #320]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 030c 	and.w	r3, r3, #12
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d017      	beq.n	80080e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80080b2:	4b4d      	ldr	r3, [pc, #308]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d105      	bne.n	80080ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80080be:	4b4a      	ldr	r3, [pc, #296]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ca:	4b47      	ldr	r3, [pc, #284]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80080d2:	2b0c      	cmp	r3, #12
 80080d4:	d11c      	bne.n	8008110 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080d6:	4b44      	ldr	r3, [pc, #272]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d116      	bne.n	8008110 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080e2:	4b41      	ldr	r3, [pc, #260]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_RCC_OscConfig+0x186>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d001      	beq.n	80080fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e1d3      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fa:	4b3b      	ldr	r3, [pc, #236]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4937      	ldr	r1, [pc, #220]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800810a:	4313      	orrs	r3, r2
 800810c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800810e:	e03a      	b.n	8008186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d020      	beq.n	800815a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008118:	4b34      	ldr	r3, [pc, #208]	@ (80081ec <HAL_RCC_OscConfig+0x278>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811e:	f7fc fbb3 	bl	8004888 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008126:	f7fc fbaf 	bl	8004888 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e1b4      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008138:	4b2b      	ldr	r3, [pc, #172]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008144:	4b28      	ldr	r3, [pc, #160]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	4925      	ldr	r1, [pc, #148]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008154:	4313      	orrs	r3, r2
 8008156:	600b      	str	r3, [r1, #0]
 8008158:	e015      	b.n	8008186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800815a:	4b24      	ldr	r3, [pc, #144]	@ (80081ec <HAL_RCC_OscConfig+0x278>)
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fc fb92 	bl	8004888 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008168:	f7fc fb8e 	bl	8004888 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e193      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800817a:	4b1b      	ldr	r3, [pc, #108]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d036      	beq.n	8008200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d016      	beq.n	80081c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800819a:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800819c:	2201      	movs	r2, #1
 800819e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a0:	f7fc fb72 	bl	8004888 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a8:	f7fc fb6e 	bl	8004888 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e173      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ba:	4b0b      	ldr	r3, [pc, #44]	@ (80081e8 <HAL_RCC_OscConfig+0x274>)
 80081bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0x234>
 80081c6:	e01b      	b.n	8008200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c8:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7fc fb5b 	bl	8004888 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d4:	e00e      	b.n	80081f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081d6:	f7fc fb57 	bl	8004888 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d907      	bls.n	80081f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e15c      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
 80081e8:	40023800 	.word	0x40023800
 80081ec:	42470000 	.word	0x42470000
 80081f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081f4:	4b8a      	ldr	r3, [pc, #552]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80081f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1ea      	bne.n	80081d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8097 	beq.w	800833c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008212:	4b83      	ldr	r3, [pc, #524]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10f      	bne.n	800823e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	4b7f      	ldr	r3, [pc, #508]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	4a7e      	ldr	r2, [pc, #504]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800822c:	6413      	str	r3, [r2, #64]	@ 0x40
 800822e:	4b7c      	ldr	r3, [pc, #496]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823e:	4b79      	ldr	r3, [pc, #484]	@ (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d118      	bne.n	800827c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800824a:	4b76      	ldr	r3, [pc, #472]	@ (8008424 <HAL_RCC_OscConfig+0x4b0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a75      	ldr	r2, [pc, #468]	@ (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008256:	f7fc fb17 	bl	8004888 <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825e:	f7fc fb13 	bl	8004888 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e118      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008270:	4b6c      	ldr	r3, [pc, #432]	@ (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f0      	beq.n	800825e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d106      	bne.n	8008292 <HAL_RCC_OscConfig+0x31e>
 8008284:	4b66      	ldr	r3, [pc, #408]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008288:	4a65      	ldr	r2, [pc, #404]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008290:	e01c      	b.n	80082cc <HAL_RCC_OscConfig+0x358>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b05      	cmp	r3, #5
 8008298:	d10c      	bne.n	80082b4 <HAL_RCC_OscConfig+0x340>
 800829a:	4b61      	ldr	r3, [pc, #388]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800829c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829e:	4a60      	ldr	r2, [pc, #384]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a6:	4b5e      	ldr	r3, [pc, #376]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082aa:	4a5d      	ldr	r2, [pc, #372]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b2:	e00b      	b.n	80082cc <HAL_RCC_OscConfig+0x358>
 80082b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b8:	4a59      	ldr	r2, [pc, #356]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082ba:	f023 0301 	bic.w	r3, r3, #1
 80082be:	6713      	str	r3, [r2, #112]	@ 0x70
 80082c0:	4b57      	ldr	r3, [pc, #348]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c4:	4a56      	ldr	r2, [pc, #344]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082c6:	f023 0304 	bic.w	r3, r3, #4
 80082ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d4:	f7fc fad8 	bl	8004888 <HAL_GetTick>
 80082d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082da:	e00a      	b.n	80082f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082dc:	f7fc fad4 	bl	8004888 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e0d7      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0ee      	beq.n	80082dc <HAL_RCC_OscConfig+0x368>
 80082fe:	e014      	b.n	800832a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008300:	f7fc fac2 	bl	8004888 <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008306:	e00a      	b.n	800831e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008308:	f7fc fabe 	bl	8004888 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008316:	4293      	cmp	r3, r2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e0c1      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800831e:	4b40      	ldr	r3, [pc, #256]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1ee      	bne.n	8008308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d105      	bne.n	800833c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008330:	4b3b      	ldr	r3, [pc, #236]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008334:	4a3a      	ldr	r2, [pc, #232]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800833a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80ad 	beq.w	80084a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008346:	4b36      	ldr	r3, [pc, #216]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
 800834e:	2b08      	cmp	r3, #8
 8008350:	d060      	beq.n	8008414 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d145      	bne.n	80083e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835a:	4b33      	ldr	r3, [pc, #204]	@ (8008428 <HAL_RCC_OscConfig+0x4b4>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008360:	f7fc fa92 	bl	8004888 <HAL_GetTick>
 8008364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008368:	f7fc fa8e 	bl	8004888 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e093      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837a:	4b29      	ldr	r3, [pc, #164]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f0      	bne.n	8008368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69da      	ldr	r2, [r3, #28]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	019b      	lsls	r3, r3, #6
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	3b01      	subs	r3, #1
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a8:	061b      	lsls	r3, r3, #24
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	071b      	lsls	r3, r3, #28
 80083b2:	491b      	ldr	r1, [pc, #108]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008428 <HAL_RCC_OscConfig+0x4b4>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fc fa63 	bl	8004888 <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c6:	f7fc fa5f 	bl	8004888 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e064      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083d8:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0f0      	beq.n	80083c6 <HAL_RCC_OscConfig+0x452>
 80083e4:	e05c      	b.n	80084a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e6:	4b10      	ldr	r3, [pc, #64]	@ (8008428 <HAL_RCC_OscConfig+0x4b4>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fc fa4c 	bl	8004888 <HAL_GetTick>
 80083f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f4:	f7fc fa48 	bl	8004888 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e04d      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008406:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f0      	bne.n	80083f4 <HAL_RCC_OscConfig+0x480>
 8008412:	e045      	b.n	80084a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d107      	bne.n	800842c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e040      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
 8008420:	40023800 	.word	0x40023800
 8008424:	40007000 	.word	0x40007000
 8008428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800842c:	4b1f      	ldr	r3, [pc, #124]	@ (80084ac <HAL_RCC_OscConfig+0x538>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d030      	beq.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008444:	429a      	cmp	r2, r3
 8008446:	d129      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008452:	429a      	cmp	r2, r3
 8008454:	d122      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800845c:	4013      	ands	r3, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008464:	4293      	cmp	r3, r2
 8008466:	d119      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	3b01      	subs	r3, #1
 8008476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d10f      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008488:	429a      	cmp	r2, r3
 800848a:	d107      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800

080084b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e041      	b.n	8008546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fc f906 	bl	80046e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3304      	adds	r3, #4
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f000 f9b6 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d001      	beq.n	8008568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e04e      	b.n	8008606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a23      	ldr	r2, [pc, #140]	@ (8008614 <HAL_TIM_Base_Start_IT+0xc4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d022      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008592:	d01d      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1f      	ldr	r2, [pc, #124]	@ (8008618 <HAL_TIM_Base_Start_IT+0xc8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d018      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1e      	ldr	r2, [pc, #120]	@ (800861c <HAL_TIM_Base_Start_IT+0xcc>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d013      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008620 <HAL_TIM_Base_Start_IT+0xd0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00e      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008624 <HAL_TIM_Base_Start_IT+0xd4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <HAL_TIM_Base_Start_IT+0xd8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a18      	ldr	r2, [pc, #96]	@ (800862c <HAL_TIM_Base_Start_IT+0xdc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d111      	bne.n	80085f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b06      	cmp	r3, #6
 80085e0:	d010      	beq.n	8008604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f2:	e007      	b.n	8008604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40001800 	.word	0x40001800

08008630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d020      	beq.n	8008694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01b      	beq.n	8008694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0202 	mvn.w	r2, #2
 8008664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8d2 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 8008680:	e005      	b.n	800868e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8c4 	bl	8008810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8d5 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d020      	beq.n	80086e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01b      	beq.n	80086e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0204 	mvn.w	r2, #4
 80086b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f8ac 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 80086cc:	e005      	b.n	80086da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f89e 	bl	8008810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8af 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d020      	beq.n	800872c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01b      	beq.n	800872c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f06f 0208 	mvn.w	r2, #8
 80086fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2204      	movs	r2, #4
 8008702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f886 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 8008718:	e005      	b.n	8008726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f878 	bl	8008810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f889 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	d020      	beq.n	8008778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01b      	beq.n	8008778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0210 	mvn.w	r2, #16
 8008748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2208      	movs	r2, #8
 800874e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f860 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 8008764:	e005      	b.n	8008772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f852 	bl	8008810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f863 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0201 	mvn.w	r2, #1
 8008794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fb fe86 	bl	80044a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00c      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80087b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f906 	bl	80089cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d007      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f834 	bl	800884c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00c      	beq.n	8008808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 0320 	and.w	r3, r3, #32
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0220 	mvn.w	r2, #32
 8008800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f8d8 	bl	80089b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a46      	ldr	r2, [pc, #280]	@ (800898c <TIM_Base_SetConfig+0x12c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d013      	beq.n	80088a0 <TIM_Base_SetConfig+0x40>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887e:	d00f      	beq.n	80088a0 <TIM_Base_SetConfig+0x40>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a43      	ldr	r2, [pc, #268]	@ (8008990 <TIM_Base_SetConfig+0x130>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00b      	beq.n	80088a0 <TIM_Base_SetConfig+0x40>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a42      	ldr	r2, [pc, #264]	@ (8008994 <TIM_Base_SetConfig+0x134>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d007      	beq.n	80088a0 <TIM_Base_SetConfig+0x40>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a41      	ldr	r2, [pc, #260]	@ (8008998 <TIM_Base_SetConfig+0x138>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a40      	ldr	r2, [pc, #256]	@ (800899c <TIM_Base_SetConfig+0x13c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d108      	bne.n	80088b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a35      	ldr	r2, [pc, #212]	@ (800898c <TIM_Base_SetConfig+0x12c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d02b      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c0:	d027      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a32      	ldr	r2, [pc, #200]	@ (8008990 <TIM_Base_SetConfig+0x130>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d023      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a31      	ldr	r2, [pc, #196]	@ (8008994 <TIM_Base_SetConfig+0x134>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d01f      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a30      	ldr	r2, [pc, #192]	@ (8008998 <TIM_Base_SetConfig+0x138>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01b      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a2f      	ldr	r2, [pc, #188]	@ (800899c <TIM_Base_SetConfig+0x13c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d017      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2e      	ldr	r2, [pc, #184]	@ (80089a0 <TIM_Base_SetConfig+0x140>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2d      	ldr	r2, [pc, #180]	@ (80089a4 <TIM_Base_SetConfig+0x144>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00f      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2c      	ldr	r2, [pc, #176]	@ (80089a8 <TIM_Base_SetConfig+0x148>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00b      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2b      	ldr	r2, [pc, #172]	@ (80089ac <TIM_Base_SetConfig+0x14c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d007      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2a      	ldr	r2, [pc, #168]	@ (80089b0 <TIM_Base_SetConfig+0x150>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a29      	ldr	r2, [pc, #164]	@ (80089b4 <TIM_Base_SetConfig+0x154>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d108      	bne.n	8008924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a10      	ldr	r2, [pc, #64]	@ (800898c <TIM_Base_SetConfig+0x12c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <TIM_Base_SetConfig+0xf8>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a12      	ldr	r2, [pc, #72]	@ (800899c <TIM_Base_SetConfig+0x13c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d103      	bne.n	8008960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b01      	cmp	r3, #1
 8008970:	d105      	bne.n	800897e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f023 0201 	bic.w	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	611a      	str	r2, [r3, #16]
  }
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40000400 	.word	0x40000400
 8008994:	40000800 	.word	0x40000800
 8008998:	40000c00 	.word	0x40000c00
 800899c:	40010400 	.word	0x40010400
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400
 80089a8:	40014800 	.word	0x40014800
 80089ac:	40001800 	.word	0x40001800
 80089b0:	40001c00 	.word	0x40001c00
 80089b4:	40002000 	.word	0x40002000

080089b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e042      	b.n	8008a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fb fd82 	bl	8004510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2224      	movs	r2, #36	@ 0x24
 8008a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f973 	bl	8008d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695a      	ldr	r2, [r3, #20]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	@ 0x28
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d175      	bne.n	8008b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Transmit+0x2c>
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e06e      	b.n	8008b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2221      	movs	r2, #33	@ 0x21
 8008aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008abe:	f7fb fee3 	bl	8004888 <HAL_GetTick>
 8008ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad8:	d108      	bne.n	8008aec <HAL_UART_Transmit+0x6c>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	e003      	b.n	8008af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008af4:	e02e      	b.n	8008b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2180      	movs	r1, #128	@ 0x80
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f848 	bl	8008b96 <UART_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e03a      	b.n	8008b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10b      	bne.n	8008b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	3302      	adds	r3, #2
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	e007      	b.n	8008b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	3301      	adds	r3, #1
 8008b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1cb      	bne.n	8008af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2200      	movs	r2, #0
 8008b66:	2140      	movs	r1, #64	@ 0x40
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f814 	bl	8008b96 <UART_WaitOnFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e006      	b.n	8008b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba6:	e03b      	b.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d037      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb0:	f7fb fe6a 	bl	8004888 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	6a3a      	ldr	r2, [r7, #32]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d302      	bcc.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e03a      	b.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d023      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b80      	cmp	r3, #128	@ 0x80
 8008bdc:	d020      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b40      	cmp	r3, #64	@ 0x40
 8008be2:	d01d      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d116      	bne.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 f81d 	bl	8008c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2208      	movs	r2, #8
 8008c12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e00f      	b.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	bf0c      	ite	eq
 8008c30:	2301      	moveq	r3, #1
 8008c32:	2300      	movne	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	461a      	mov	r2, r3
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d0b4      	beq.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b095      	sub	sp, #84	@ 0x54
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c70:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e5      	bne.n	8008c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3314      	adds	r3, #20
 8008ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e5      	bne.n	8008c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d119      	bne.n	8008cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f023 0310 	bic.w	r3, r3, #16
 8008cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce0:	61ba      	str	r2, [r7, #24]
 8008ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6979      	ldr	r1, [r7, #20]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	613b      	str	r3, [r7, #16]
   return(result);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d02:	bf00      	nop
 8008d04:	3754      	adds	r7, #84	@ 0x54
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
	...

08008d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d14:	b0c0      	sub	sp, #256	@ 0x100
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d2c:	68d9      	ldr	r1, [r3, #12]
 8008d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	ea40 0301 	orr.w	r3, r0, r1
 8008d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d68:	f021 010c 	bic.w	r1, r1, #12
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d76:	430b      	orrs	r3, r1
 8008d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d8a:	6999      	ldr	r1, [r3, #24]
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	ea40 0301 	orr.w	r3, r0, r1
 8008d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8008fdc <UART_SetConfig+0x2cc>)
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d005      	beq.n	8008db0 <UART_SetConfig+0xa0>
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	4b8d      	ldr	r3, [pc, #564]	@ (8008fe0 <UART_SetConfig+0x2d0>)
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d104      	bne.n	8008dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008db0:	f7fe fe6a 	bl	8007a88 <HAL_RCC_GetPCLK2Freq>
 8008db4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008db8:	e003      	b.n	8008dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dba:	f7fe fe51 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8008dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dcc:	f040 810c 	bne.w	8008fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008dda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008de2:	4622      	mov	r2, r4
 8008de4:	462b      	mov	r3, r5
 8008de6:	1891      	adds	r1, r2, r2
 8008de8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008dea:	415b      	adcs	r3, r3
 8008dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008df2:	4621      	mov	r1, r4
 8008df4:	eb12 0801 	adds.w	r8, r2, r1
 8008df8:	4629      	mov	r1, r5
 8008dfa:	eb43 0901 	adc.w	r9, r3, r1
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e12:	4690      	mov	r8, r2
 8008e14:	4699      	mov	r9, r3
 8008e16:	4623      	mov	r3, r4
 8008e18:	eb18 0303 	adds.w	r3, r8, r3
 8008e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e20:	462b      	mov	r3, r5
 8008e22:	eb49 0303 	adc.w	r3, r9, r3
 8008e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e3e:	460b      	mov	r3, r1
 8008e40:	18db      	adds	r3, r3, r3
 8008e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e44:	4613      	mov	r3, r2
 8008e46:	eb42 0303 	adc.w	r3, r2, r3
 8008e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e54:	f7f7 fa34 	bl	80002c0 <__aeabi_uldivmod>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4b61      	ldr	r3, [pc, #388]	@ (8008fe4 <UART_SetConfig+0x2d4>)
 8008e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	011c      	lsls	r4, r3, #4
 8008e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	1891      	adds	r1, r2, r2
 8008e7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008e80:	415b      	adcs	r3, r3
 8008e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e88:	4641      	mov	r1, r8
 8008e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e8e:	4649      	mov	r1, r9
 8008e90:	eb43 0b01 	adc.w	fp, r3, r1
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ea8:	4692      	mov	sl, r2
 8008eaa:	469b      	mov	fp, r3
 8008eac:	4643      	mov	r3, r8
 8008eae:	eb1a 0303 	adds.w	r3, sl, r3
 8008eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8008ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	18db      	adds	r3, r3, r3
 8008ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eda:	4613      	mov	r3, r2
 8008edc:	eb42 0303 	adc.w	r3, r2, r3
 8008ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008eea:	f7f7 f9e9 	bl	80002c0 <__aeabi_uldivmod>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fe4 <UART_SetConfig+0x2d4>)
 8008ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	2264      	movs	r2, #100	@ 0x64
 8008efe:	fb02 f303 	mul.w	r3, r2, r3
 8008f02:	1acb      	subs	r3, r1, r3
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f0a:	4b36      	ldr	r3, [pc, #216]	@ (8008fe4 <UART_SetConfig+0x2d4>)
 8008f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f18:	441c      	add	r4, r3
 8008f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	464b      	mov	r3, r9
 8008f30:	1891      	adds	r1, r2, r2
 8008f32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f34:	415b      	adcs	r3, r3
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	1851      	adds	r1, r2, r1
 8008f40:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f42:	4649      	mov	r1, r9
 8008f44:	414b      	adcs	r3, r1
 8008f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f54:	4659      	mov	r1, fp
 8008f56:	00cb      	lsls	r3, r1, #3
 8008f58:	4651      	mov	r1, sl
 8008f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f5e:	4651      	mov	r1, sl
 8008f60:	00ca      	lsls	r2, r1, #3
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	4642      	mov	r2, r8
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f70:	464b      	mov	r3, r9
 8008f72:	460a      	mov	r2, r1
 8008f74:	eb42 0303 	adc.w	r3, r2, r3
 8008f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f90:	460b      	mov	r3, r1
 8008f92:	18db      	adds	r3, r3, r3
 8008f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f96:	4613      	mov	r3, r2
 8008f98:	eb42 0303 	adc.w	r3, r2, r3
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008fa6:	f7f7 f98b 	bl	80002c0 <__aeabi_uldivmod>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <UART_SetConfig+0x2d4>)
 8008fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2164      	movs	r1, #100	@ 0x64
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	3332      	adds	r3, #50	@ 0x32
 8008fc2:	4a08      	ldr	r2, [pc, #32]	@ (8008fe4 <UART_SetConfig+0x2d4>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f003 0207 	and.w	r2, r3, #7
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4422      	add	r2, r4
 8008fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fd8:	e106      	b.n	80091e8 <UART_SetConfig+0x4d8>
 8008fda:	bf00      	nop
 8008fdc:	40011000 	.word	0x40011000
 8008fe0:	40011400 	.word	0x40011400
 8008fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	1891      	adds	r1, r2, r2
 8009000:	6239      	str	r1, [r7, #32]
 8009002:	415b      	adcs	r3, r3
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
 8009006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800900a:	4641      	mov	r1, r8
 800900c:	1854      	adds	r4, r2, r1
 800900e:	4649      	mov	r1, r9
 8009010:	eb43 0501 	adc.w	r5, r3, r1
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	00eb      	lsls	r3, r5, #3
 800901e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009022:	00e2      	lsls	r2, r4, #3
 8009024:	4614      	mov	r4, r2
 8009026:	461d      	mov	r5, r3
 8009028:	4643      	mov	r3, r8
 800902a:	18e3      	adds	r3, r4, r3
 800902c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009030:	464b      	mov	r3, r9
 8009032:	eb45 0303 	adc.w	r3, r5, r3
 8009036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009046:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009056:	4629      	mov	r1, r5
 8009058:	008b      	lsls	r3, r1, #2
 800905a:	4621      	mov	r1, r4
 800905c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009060:	4621      	mov	r1, r4
 8009062:	008a      	lsls	r2, r1, #2
 8009064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009068:	f7f7 f92a 	bl	80002c0 <__aeabi_uldivmod>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4b60      	ldr	r3, [pc, #384]	@ (80091f4 <UART_SetConfig+0x4e4>)
 8009072:	fba3 2302 	umull	r2, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	011c      	lsls	r4, r3, #4
 800907a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800907e:	2200      	movs	r2, #0
 8009080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009084:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800908c:	4642      	mov	r2, r8
 800908e:	464b      	mov	r3, r9
 8009090:	1891      	adds	r1, r2, r2
 8009092:	61b9      	str	r1, [r7, #24]
 8009094:	415b      	adcs	r3, r3
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800909c:	4641      	mov	r1, r8
 800909e:	1851      	adds	r1, r2, r1
 80090a0:	6139      	str	r1, [r7, #16]
 80090a2:	4649      	mov	r1, r9
 80090a4:	414b      	adcs	r3, r1
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090b4:	4659      	mov	r1, fp
 80090b6:	00cb      	lsls	r3, r1, #3
 80090b8:	4651      	mov	r1, sl
 80090ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090be:	4651      	mov	r1, sl
 80090c0:	00ca      	lsls	r2, r1, #3
 80090c2:	4610      	mov	r0, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	4603      	mov	r3, r0
 80090c8:	4642      	mov	r2, r8
 80090ca:	189b      	adds	r3, r3, r2
 80090cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090d0:	464b      	mov	r3, r9
 80090d2:	460a      	mov	r2, r1
 80090d4:	eb42 0303 	adc.w	r3, r2, r3
 80090d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80090f4:	4649      	mov	r1, r9
 80090f6:	008b      	lsls	r3, r1, #2
 80090f8:	4641      	mov	r1, r8
 80090fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090fe:	4641      	mov	r1, r8
 8009100:	008a      	lsls	r2, r1, #2
 8009102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009106:	f7f7 f8db 	bl	80002c0 <__aeabi_uldivmod>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4611      	mov	r1, r2
 8009110:	4b38      	ldr	r3, [pc, #224]	@ (80091f4 <UART_SetConfig+0x4e4>)
 8009112:	fba3 2301 	umull	r2, r3, r3, r1
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	2264      	movs	r2, #100	@ 0x64
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	1acb      	subs	r3, r1, r3
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	3332      	adds	r3, #50	@ 0x32
 8009124:	4a33      	ldr	r2, [pc, #204]	@ (80091f4 <UART_SetConfig+0x4e4>)
 8009126:	fba2 2303 	umull	r2, r3, r2, r3
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009130:	441c      	add	r4, r3
 8009132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009136:	2200      	movs	r2, #0
 8009138:	673b      	str	r3, [r7, #112]	@ 0x70
 800913a:	677a      	str	r2, [r7, #116]	@ 0x74
 800913c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	1891      	adds	r1, r2, r2
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	415b      	adcs	r3, r3
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009150:	4641      	mov	r1, r8
 8009152:	1851      	adds	r1, r2, r1
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	4649      	mov	r1, r9
 8009158:	414b      	adcs	r3, r1
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009168:	4659      	mov	r1, fp
 800916a:	00cb      	lsls	r3, r1, #3
 800916c:	4651      	mov	r1, sl
 800916e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009172:	4651      	mov	r1, sl
 8009174:	00ca      	lsls	r2, r1, #3
 8009176:	4610      	mov	r0, r2
 8009178:	4619      	mov	r1, r3
 800917a:	4603      	mov	r3, r0
 800917c:	4642      	mov	r2, r8
 800917e:	189b      	adds	r3, r3, r2
 8009180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009182:	464b      	mov	r3, r9
 8009184:	460a      	mov	r2, r1
 8009186:	eb42 0303 	adc.w	r3, r2, r3
 800918a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	663b      	str	r3, [r7, #96]	@ 0x60
 8009196:	667a      	str	r2, [r7, #100]	@ 0x64
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80091a4:	4649      	mov	r1, r9
 80091a6:	008b      	lsls	r3, r1, #2
 80091a8:	4641      	mov	r1, r8
 80091aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ae:	4641      	mov	r1, r8
 80091b0:	008a      	lsls	r2, r1, #2
 80091b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80091b6:	f7f7 f883 	bl	80002c0 <__aeabi_uldivmod>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <UART_SetConfig+0x4e4>)
 80091c0:	fba3 1302 	umull	r1, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	2164      	movs	r1, #100	@ 0x64
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	3332      	adds	r3, #50	@ 0x32
 80091d2:	4a08      	ldr	r2, [pc, #32]	@ (80091f4 <UART_SetConfig+0x4e4>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	f003 020f 	and.w	r2, r3, #15
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4422      	add	r2, r4
 80091e6:	609a      	str	r2, [r3, #8]
}
 80091e8:	bf00      	nop
 80091ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80091ee:	46bd      	mov	sp, r7
 80091f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091f4:	51eb851f 	.word	0x51eb851f

080091f8 <siprintf>:
 80091f8:	b40e      	push	{r1, r2, r3}
 80091fa:	b500      	push	{lr}
 80091fc:	b09c      	sub	sp, #112	@ 0x70
 80091fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009200:	9002      	str	r0, [sp, #8]
 8009202:	9006      	str	r0, [sp, #24]
 8009204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009208:	4809      	ldr	r0, [pc, #36]	@ (8009230 <siprintf+0x38>)
 800920a:	9107      	str	r1, [sp, #28]
 800920c:	9104      	str	r1, [sp, #16]
 800920e:	4909      	ldr	r1, [pc, #36]	@ (8009234 <siprintf+0x3c>)
 8009210:	f853 2b04 	ldr.w	r2, [r3], #4
 8009214:	9105      	str	r1, [sp, #20]
 8009216:	6800      	ldr	r0, [r0, #0]
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	a902      	add	r1, sp, #8
 800921c:	f000 f9a2 	bl	8009564 <_svfiprintf_r>
 8009220:	9b02      	ldr	r3, [sp, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	b01c      	add	sp, #112	@ 0x70
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	20000014 	.word	0x20000014
 8009234:	ffff0208 	.word	0xffff0208

08009238 <memset>:
 8009238:	4402      	add	r2, r0
 800923a:	4603      	mov	r3, r0
 800923c:	4293      	cmp	r3, r2
 800923e:	d100      	bne.n	8009242 <memset+0xa>
 8009240:	4770      	bx	lr
 8009242:	f803 1b01 	strb.w	r1, [r3], #1
 8009246:	e7f9      	b.n	800923c <memset+0x4>

08009248 <__errno>:
 8009248:	4b01      	ldr	r3, [pc, #4]	@ (8009250 <__errno+0x8>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000014 	.word	0x20000014

08009254 <__libc_init_array>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4d0d      	ldr	r5, [pc, #52]	@ (800928c <__libc_init_array+0x38>)
 8009258:	4c0d      	ldr	r4, [pc, #52]	@ (8009290 <__libc_init_array+0x3c>)
 800925a:	1b64      	subs	r4, r4, r5
 800925c:	10a4      	asrs	r4, r4, #2
 800925e:	2600      	movs	r6, #0
 8009260:	42a6      	cmp	r6, r4
 8009262:	d109      	bne.n	8009278 <__libc_init_array+0x24>
 8009264:	4d0b      	ldr	r5, [pc, #44]	@ (8009294 <__libc_init_array+0x40>)
 8009266:	4c0c      	ldr	r4, [pc, #48]	@ (8009298 <__libc_init_array+0x44>)
 8009268:	f000 fc66 	bl	8009b38 <_init>
 800926c:	1b64      	subs	r4, r4, r5
 800926e:	10a4      	asrs	r4, r4, #2
 8009270:	2600      	movs	r6, #0
 8009272:	42a6      	cmp	r6, r4
 8009274:	d105      	bne.n	8009282 <__libc_init_array+0x2e>
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	f855 3b04 	ldr.w	r3, [r5], #4
 800927c:	4798      	blx	r3
 800927e:	3601      	adds	r6, #1
 8009280:	e7ee      	b.n	8009260 <__libc_init_array+0xc>
 8009282:	f855 3b04 	ldr.w	r3, [r5], #4
 8009286:	4798      	blx	r3
 8009288:	3601      	adds	r6, #1
 800928a:	e7f2      	b.n	8009272 <__libc_init_array+0x1e>
 800928c:	08009d74 	.word	0x08009d74
 8009290:	08009d74 	.word	0x08009d74
 8009294:	08009d74 	.word	0x08009d74
 8009298:	08009d78 	.word	0x08009d78

0800929c <__retarget_lock_acquire_recursive>:
 800929c:	4770      	bx	lr

0800929e <__retarget_lock_release_recursive>:
 800929e:	4770      	bx	lr

080092a0 <memcpy>:
 80092a0:	440a      	add	r2, r1
 80092a2:	4291      	cmp	r1, r2
 80092a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a8:	d100      	bne.n	80092ac <memcpy+0xc>
 80092aa:	4770      	bx	lr
 80092ac:	b510      	push	{r4, lr}
 80092ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b6:	4291      	cmp	r1, r2
 80092b8:	d1f9      	bne.n	80092ae <memcpy+0xe>
 80092ba:	bd10      	pop	{r4, pc}

080092bc <_free_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4605      	mov	r5, r0
 80092c0:	2900      	cmp	r1, #0
 80092c2:	d041      	beq.n	8009348 <_free_r+0x8c>
 80092c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c8:	1f0c      	subs	r4, r1, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfb8      	it	lt
 80092ce:	18e4      	addlt	r4, r4, r3
 80092d0:	f000 f8e0 	bl	8009494 <__malloc_lock>
 80092d4:	4a1d      	ldr	r2, [pc, #116]	@ (800934c <_free_r+0x90>)
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	b933      	cbnz	r3, 80092e8 <_free_r+0x2c>
 80092da:	6063      	str	r3, [r4, #4]
 80092dc:	6014      	str	r4, [r2, #0]
 80092de:	4628      	mov	r0, r5
 80092e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e4:	f000 b8dc 	b.w	80094a0 <__malloc_unlock>
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d908      	bls.n	80092fe <_free_r+0x42>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	1821      	adds	r1, r4, r0
 80092f0:	428b      	cmp	r3, r1
 80092f2:	bf01      	itttt	eq
 80092f4:	6819      	ldreq	r1, [r3, #0]
 80092f6:	685b      	ldreq	r3, [r3, #4]
 80092f8:	1809      	addeq	r1, r1, r0
 80092fa:	6021      	streq	r1, [r4, #0]
 80092fc:	e7ed      	b.n	80092da <_free_r+0x1e>
 80092fe:	461a      	mov	r2, r3
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	b10b      	cbz	r3, 8009308 <_free_r+0x4c>
 8009304:	42a3      	cmp	r3, r4
 8009306:	d9fa      	bls.n	80092fe <_free_r+0x42>
 8009308:	6811      	ldr	r1, [r2, #0]
 800930a:	1850      	adds	r0, r2, r1
 800930c:	42a0      	cmp	r0, r4
 800930e:	d10b      	bne.n	8009328 <_free_r+0x6c>
 8009310:	6820      	ldr	r0, [r4, #0]
 8009312:	4401      	add	r1, r0
 8009314:	1850      	adds	r0, r2, r1
 8009316:	4283      	cmp	r3, r0
 8009318:	6011      	str	r1, [r2, #0]
 800931a:	d1e0      	bne.n	80092de <_free_r+0x22>
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	6053      	str	r3, [r2, #4]
 8009322:	4408      	add	r0, r1
 8009324:	6010      	str	r0, [r2, #0]
 8009326:	e7da      	b.n	80092de <_free_r+0x22>
 8009328:	d902      	bls.n	8009330 <_free_r+0x74>
 800932a:	230c      	movs	r3, #12
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	e7d6      	b.n	80092de <_free_r+0x22>
 8009330:	6820      	ldr	r0, [r4, #0]
 8009332:	1821      	adds	r1, r4, r0
 8009334:	428b      	cmp	r3, r1
 8009336:	bf04      	itt	eq
 8009338:	6819      	ldreq	r1, [r3, #0]
 800933a:	685b      	ldreq	r3, [r3, #4]
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	bf04      	itt	eq
 8009340:	1809      	addeq	r1, r1, r0
 8009342:	6021      	streq	r1, [r4, #0]
 8009344:	6054      	str	r4, [r2, #4]
 8009346:	e7ca      	b.n	80092de <_free_r+0x22>
 8009348:	bd38      	pop	{r3, r4, r5, pc}
 800934a:	bf00      	nop
 800934c:	200130b4 	.word	0x200130b4

08009350 <sbrk_aligned>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4e0f      	ldr	r6, [pc, #60]	@ (8009390 <sbrk_aligned+0x40>)
 8009354:	460c      	mov	r4, r1
 8009356:	6831      	ldr	r1, [r6, #0]
 8009358:	4605      	mov	r5, r0
 800935a:	b911      	cbnz	r1, 8009362 <sbrk_aligned+0x12>
 800935c:	f000 fba6 	bl	8009aac <_sbrk_r>
 8009360:	6030      	str	r0, [r6, #0]
 8009362:	4621      	mov	r1, r4
 8009364:	4628      	mov	r0, r5
 8009366:	f000 fba1 	bl	8009aac <_sbrk_r>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d103      	bne.n	8009376 <sbrk_aligned+0x26>
 800936e:	f04f 34ff 	mov.w	r4, #4294967295
 8009372:	4620      	mov	r0, r4
 8009374:	bd70      	pop	{r4, r5, r6, pc}
 8009376:	1cc4      	adds	r4, r0, #3
 8009378:	f024 0403 	bic.w	r4, r4, #3
 800937c:	42a0      	cmp	r0, r4
 800937e:	d0f8      	beq.n	8009372 <sbrk_aligned+0x22>
 8009380:	1a21      	subs	r1, r4, r0
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fb92 	bl	8009aac <_sbrk_r>
 8009388:	3001      	adds	r0, #1
 800938a:	d1f2      	bne.n	8009372 <sbrk_aligned+0x22>
 800938c:	e7ef      	b.n	800936e <sbrk_aligned+0x1e>
 800938e:	bf00      	nop
 8009390:	200130b0 	.word	0x200130b0

08009394 <_malloc_r>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	1ccd      	adds	r5, r1, #3
 800939a:	f025 0503 	bic.w	r5, r5, #3
 800939e:	3508      	adds	r5, #8
 80093a0:	2d0c      	cmp	r5, #12
 80093a2:	bf38      	it	cc
 80093a4:	250c      	movcc	r5, #12
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	4606      	mov	r6, r0
 80093aa:	db01      	blt.n	80093b0 <_malloc_r+0x1c>
 80093ac:	42a9      	cmp	r1, r5
 80093ae:	d904      	bls.n	80093ba <_malloc_r+0x26>
 80093b0:	230c      	movs	r3, #12
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	2000      	movs	r0, #0
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009490 <_malloc_r+0xfc>
 80093be:	f000 f869 	bl	8009494 <__malloc_lock>
 80093c2:	f8d8 3000 	ldr.w	r3, [r8]
 80093c6:	461c      	mov	r4, r3
 80093c8:	bb44      	cbnz	r4, 800941c <_malloc_r+0x88>
 80093ca:	4629      	mov	r1, r5
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff ffbf 	bl	8009350 <sbrk_aligned>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	4604      	mov	r4, r0
 80093d6:	d158      	bne.n	800948a <_malloc_r+0xf6>
 80093d8:	f8d8 4000 	ldr.w	r4, [r8]
 80093dc:	4627      	mov	r7, r4
 80093de:	2f00      	cmp	r7, #0
 80093e0:	d143      	bne.n	800946a <_malloc_r+0xd6>
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	d04b      	beq.n	800947e <_malloc_r+0xea>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	4639      	mov	r1, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	eb04 0903 	add.w	r9, r4, r3
 80093f0:	f000 fb5c 	bl	8009aac <_sbrk_r>
 80093f4:	4581      	cmp	r9, r0
 80093f6:	d142      	bne.n	800947e <_malloc_r+0xea>
 80093f8:	6821      	ldr	r1, [r4, #0]
 80093fa:	1a6d      	subs	r5, r5, r1
 80093fc:	4629      	mov	r1, r5
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ffa6 	bl	8009350 <sbrk_aligned>
 8009404:	3001      	adds	r0, #1
 8009406:	d03a      	beq.n	800947e <_malloc_r+0xea>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	442b      	add	r3, r5
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	f8d8 3000 	ldr.w	r3, [r8]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	bb62      	cbnz	r2, 8009470 <_malloc_r+0xdc>
 8009416:	f8c8 7000 	str.w	r7, [r8]
 800941a:	e00f      	b.n	800943c <_malloc_r+0xa8>
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	1b52      	subs	r2, r2, r5
 8009420:	d420      	bmi.n	8009464 <_malloc_r+0xd0>
 8009422:	2a0b      	cmp	r2, #11
 8009424:	d917      	bls.n	8009456 <_malloc_r+0xc2>
 8009426:	1961      	adds	r1, r4, r5
 8009428:	42a3      	cmp	r3, r4
 800942a:	6025      	str	r5, [r4, #0]
 800942c:	bf18      	it	ne
 800942e:	6059      	strne	r1, [r3, #4]
 8009430:	6863      	ldr	r3, [r4, #4]
 8009432:	bf08      	it	eq
 8009434:	f8c8 1000 	streq.w	r1, [r8]
 8009438:	5162      	str	r2, [r4, r5]
 800943a:	604b      	str	r3, [r1, #4]
 800943c:	4630      	mov	r0, r6
 800943e:	f000 f82f 	bl	80094a0 <__malloc_unlock>
 8009442:	f104 000b 	add.w	r0, r4, #11
 8009446:	1d23      	adds	r3, r4, #4
 8009448:	f020 0007 	bic.w	r0, r0, #7
 800944c:	1ac2      	subs	r2, r0, r3
 800944e:	bf1c      	itt	ne
 8009450:	1a1b      	subne	r3, r3, r0
 8009452:	50a3      	strne	r3, [r4, r2]
 8009454:	e7af      	b.n	80093b6 <_malloc_r+0x22>
 8009456:	6862      	ldr	r2, [r4, #4]
 8009458:	42a3      	cmp	r3, r4
 800945a:	bf0c      	ite	eq
 800945c:	f8c8 2000 	streq.w	r2, [r8]
 8009460:	605a      	strne	r2, [r3, #4]
 8009462:	e7eb      	b.n	800943c <_malloc_r+0xa8>
 8009464:	4623      	mov	r3, r4
 8009466:	6864      	ldr	r4, [r4, #4]
 8009468:	e7ae      	b.n	80093c8 <_malloc_r+0x34>
 800946a:	463c      	mov	r4, r7
 800946c:	687f      	ldr	r7, [r7, #4]
 800946e:	e7b6      	b.n	80093de <_malloc_r+0x4a>
 8009470:	461a      	mov	r2, r3
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	42a3      	cmp	r3, r4
 8009476:	d1fb      	bne.n	8009470 <_malloc_r+0xdc>
 8009478:	2300      	movs	r3, #0
 800947a:	6053      	str	r3, [r2, #4]
 800947c:	e7de      	b.n	800943c <_malloc_r+0xa8>
 800947e:	230c      	movs	r3, #12
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	4630      	mov	r0, r6
 8009484:	f000 f80c 	bl	80094a0 <__malloc_unlock>
 8009488:	e794      	b.n	80093b4 <_malloc_r+0x20>
 800948a:	6005      	str	r5, [r0, #0]
 800948c:	e7d6      	b.n	800943c <_malloc_r+0xa8>
 800948e:	bf00      	nop
 8009490:	200130b4 	.word	0x200130b4

08009494 <__malloc_lock>:
 8009494:	4801      	ldr	r0, [pc, #4]	@ (800949c <__malloc_lock+0x8>)
 8009496:	f7ff bf01 	b.w	800929c <__retarget_lock_acquire_recursive>
 800949a:	bf00      	nop
 800949c:	200130ac 	.word	0x200130ac

080094a0 <__malloc_unlock>:
 80094a0:	4801      	ldr	r0, [pc, #4]	@ (80094a8 <__malloc_unlock+0x8>)
 80094a2:	f7ff befc 	b.w	800929e <__retarget_lock_release_recursive>
 80094a6:	bf00      	nop
 80094a8:	200130ac 	.word	0x200130ac

080094ac <__ssputs_r>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	688e      	ldr	r6, [r1, #8]
 80094b2:	461f      	mov	r7, r3
 80094b4:	42be      	cmp	r6, r7
 80094b6:	680b      	ldr	r3, [r1, #0]
 80094b8:	4682      	mov	sl, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4690      	mov	r8, r2
 80094be:	d82d      	bhi.n	800951c <__ssputs_r+0x70>
 80094c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094c8:	d026      	beq.n	8009518 <__ssputs_r+0x6c>
 80094ca:	6965      	ldr	r5, [r4, #20]
 80094cc:	6909      	ldr	r1, [r1, #16]
 80094ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d2:	eba3 0901 	sub.w	r9, r3, r1
 80094d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094da:	1c7b      	adds	r3, r7, #1
 80094dc:	444b      	add	r3, r9
 80094de:	106d      	asrs	r5, r5, #1
 80094e0:	429d      	cmp	r5, r3
 80094e2:	bf38      	it	cc
 80094e4:	461d      	movcc	r5, r3
 80094e6:	0553      	lsls	r3, r2, #21
 80094e8:	d527      	bpl.n	800953a <__ssputs_r+0x8e>
 80094ea:	4629      	mov	r1, r5
 80094ec:	f7ff ff52 	bl	8009394 <_malloc_r>
 80094f0:	4606      	mov	r6, r0
 80094f2:	b360      	cbz	r0, 800954e <__ssputs_r+0xa2>
 80094f4:	6921      	ldr	r1, [r4, #16]
 80094f6:	464a      	mov	r2, r9
 80094f8:	f7ff fed2 	bl	80092a0 <memcpy>
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	6126      	str	r6, [r4, #16]
 800950a:	6165      	str	r5, [r4, #20]
 800950c:	444e      	add	r6, r9
 800950e:	eba5 0509 	sub.w	r5, r5, r9
 8009512:	6026      	str	r6, [r4, #0]
 8009514:	60a5      	str	r5, [r4, #8]
 8009516:	463e      	mov	r6, r7
 8009518:	42be      	cmp	r6, r7
 800951a:	d900      	bls.n	800951e <__ssputs_r+0x72>
 800951c:	463e      	mov	r6, r7
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	4632      	mov	r2, r6
 8009522:	4641      	mov	r1, r8
 8009524:	f000 faa8 	bl	8009a78 <memmove>
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	1b9b      	subs	r3, r3, r6
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4433      	add	r3, r6
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	2000      	movs	r0, #0
 8009536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953a:	462a      	mov	r2, r5
 800953c:	f000 fac6 	bl	8009acc <_realloc_r>
 8009540:	4606      	mov	r6, r0
 8009542:	2800      	cmp	r0, #0
 8009544:	d1e0      	bne.n	8009508 <__ssputs_r+0x5c>
 8009546:	6921      	ldr	r1, [r4, #16]
 8009548:	4650      	mov	r0, sl
 800954a:	f7ff feb7 	bl	80092bc <_free_r>
 800954e:	230c      	movs	r3, #12
 8009550:	f8ca 3000 	str.w	r3, [sl]
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	e7e9      	b.n	8009536 <__ssputs_r+0x8a>
	...

08009564 <_svfiprintf_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	4698      	mov	r8, r3
 800956a:	898b      	ldrh	r3, [r1, #12]
 800956c:	061b      	lsls	r3, r3, #24
 800956e:	b09d      	sub	sp, #116	@ 0x74
 8009570:	4607      	mov	r7, r0
 8009572:	460d      	mov	r5, r1
 8009574:	4614      	mov	r4, r2
 8009576:	d510      	bpl.n	800959a <_svfiprintf_r+0x36>
 8009578:	690b      	ldr	r3, [r1, #16]
 800957a:	b973      	cbnz	r3, 800959a <_svfiprintf_r+0x36>
 800957c:	2140      	movs	r1, #64	@ 0x40
 800957e:	f7ff ff09 	bl	8009394 <_malloc_r>
 8009582:	6028      	str	r0, [r5, #0]
 8009584:	6128      	str	r0, [r5, #16]
 8009586:	b930      	cbnz	r0, 8009596 <_svfiprintf_r+0x32>
 8009588:	230c      	movs	r3, #12
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	b01d      	add	sp, #116	@ 0x74
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	2340      	movs	r3, #64	@ 0x40
 8009598:	616b      	str	r3, [r5, #20]
 800959a:	2300      	movs	r3, #0
 800959c:	9309      	str	r3, [sp, #36]	@ 0x24
 800959e:	2320      	movs	r3, #32
 80095a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a8:	2330      	movs	r3, #48	@ 0x30
 80095aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009748 <_svfiprintf_r+0x1e4>
 80095ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095b2:	f04f 0901 	mov.w	r9, #1
 80095b6:	4623      	mov	r3, r4
 80095b8:	469a      	mov	sl, r3
 80095ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095be:	b10a      	cbz	r2, 80095c4 <_svfiprintf_r+0x60>
 80095c0:	2a25      	cmp	r2, #37	@ 0x25
 80095c2:	d1f9      	bne.n	80095b8 <_svfiprintf_r+0x54>
 80095c4:	ebba 0b04 	subs.w	fp, sl, r4
 80095c8:	d00b      	beq.n	80095e2 <_svfiprintf_r+0x7e>
 80095ca:	465b      	mov	r3, fp
 80095cc:	4622      	mov	r2, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff ff6b 	bl	80094ac <__ssputs_r>
 80095d6:	3001      	adds	r0, #1
 80095d8:	f000 80a7 	beq.w	800972a <_svfiprintf_r+0x1c6>
 80095dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095de:	445a      	add	r2, fp
 80095e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80095e2:	f89a 3000 	ldrb.w	r3, [sl]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 809f 	beq.w	800972a <_svfiprintf_r+0x1c6>
 80095ec:	2300      	movs	r3, #0
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295
 80095f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f6:	f10a 0a01 	add.w	sl, sl, #1
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	9307      	str	r3, [sp, #28]
 80095fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009602:	931a      	str	r3, [sp, #104]	@ 0x68
 8009604:	4654      	mov	r4, sl
 8009606:	2205      	movs	r2, #5
 8009608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960c:	484e      	ldr	r0, [pc, #312]	@ (8009748 <_svfiprintf_r+0x1e4>)
 800960e:	f7f6 fe07 	bl	8000220 <memchr>
 8009612:	9a04      	ldr	r2, [sp, #16]
 8009614:	b9d8      	cbnz	r0, 800964e <_svfiprintf_r+0xea>
 8009616:	06d0      	lsls	r0, r2, #27
 8009618:	bf44      	itt	mi
 800961a:	2320      	movmi	r3, #32
 800961c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009620:	0711      	lsls	r1, r2, #28
 8009622:	bf44      	itt	mi
 8009624:	232b      	movmi	r3, #43	@ 0x2b
 8009626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800962a:	f89a 3000 	ldrb.w	r3, [sl]
 800962e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009630:	d015      	beq.n	800965e <_svfiprintf_r+0xfa>
 8009632:	9a07      	ldr	r2, [sp, #28]
 8009634:	4654      	mov	r4, sl
 8009636:	2000      	movs	r0, #0
 8009638:	f04f 0c0a 	mov.w	ip, #10
 800963c:	4621      	mov	r1, r4
 800963e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009642:	3b30      	subs	r3, #48	@ 0x30
 8009644:	2b09      	cmp	r3, #9
 8009646:	d94b      	bls.n	80096e0 <_svfiprintf_r+0x17c>
 8009648:	b1b0      	cbz	r0, 8009678 <_svfiprintf_r+0x114>
 800964a:	9207      	str	r2, [sp, #28]
 800964c:	e014      	b.n	8009678 <_svfiprintf_r+0x114>
 800964e:	eba0 0308 	sub.w	r3, r0, r8
 8009652:	fa09 f303 	lsl.w	r3, r9, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	46a2      	mov	sl, r4
 800965c:	e7d2      	b.n	8009604 <_svfiprintf_r+0xa0>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	9103      	str	r1, [sp, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfbb      	ittet	lt
 800966a:	425b      	neglt	r3, r3
 800966c:	f042 0202 	orrlt.w	r2, r2, #2
 8009670:	9307      	strge	r3, [sp, #28]
 8009672:	9307      	strlt	r3, [sp, #28]
 8009674:	bfb8      	it	lt
 8009676:	9204      	strlt	r2, [sp, #16]
 8009678:	7823      	ldrb	r3, [r4, #0]
 800967a:	2b2e      	cmp	r3, #46	@ 0x2e
 800967c:	d10a      	bne.n	8009694 <_svfiprintf_r+0x130>
 800967e:	7863      	ldrb	r3, [r4, #1]
 8009680:	2b2a      	cmp	r3, #42	@ 0x2a
 8009682:	d132      	bne.n	80096ea <_svfiprintf_r+0x186>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	9203      	str	r2, [sp, #12]
 800968c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009690:	3402      	adds	r4, #2
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009758 <_svfiprintf_r+0x1f4>
 8009698:	7821      	ldrb	r1, [r4, #0]
 800969a:	2203      	movs	r2, #3
 800969c:	4650      	mov	r0, sl
 800969e:	f7f6 fdbf 	bl	8000220 <memchr>
 80096a2:	b138      	cbz	r0, 80096b4 <_svfiprintf_r+0x150>
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	eba0 000a 	sub.w	r0, r0, sl
 80096aa:	2240      	movs	r2, #64	@ 0x40
 80096ac:	4082      	lsls	r2, r0
 80096ae:	4313      	orrs	r3, r2
 80096b0:	3401      	adds	r4, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b8:	4824      	ldr	r0, [pc, #144]	@ (800974c <_svfiprintf_r+0x1e8>)
 80096ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096be:	2206      	movs	r2, #6
 80096c0:	f7f6 fdae 	bl	8000220 <memchr>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d036      	beq.n	8009736 <_svfiprintf_r+0x1d2>
 80096c8:	4b21      	ldr	r3, [pc, #132]	@ (8009750 <_svfiprintf_r+0x1ec>)
 80096ca:	bb1b      	cbnz	r3, 8009714 <_svfiprintf_r+0x1b0>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	3307      	adds	r3, #7
 80096d0:	f023 0307 	bic.w	r3, r3, #7
 80096d4:	3308      	adds	r3, #8
 80096d6:	9303      	str	r3, [sp, #12]
 80096d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096da:	4433      	add	r3, r6
 80096dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096de:	e76a      	b.n	80095b6 <_svfiprintf_r+0x52>
 80096e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e4:	460c      	mov	r4, r1
 80096e6:	2001      	movs	r0, #1
 80096e8:	e7a8      	b.n	800963c <_svfiprintf_r+0xd8>
 80096ea:	2300      	movs	r3, #0
 80096ec:	3401      	adds	r4, #1
 80096ee:	9305      	str	r3, [sp, #20]
 80096f0:	4619      	mov	r1, r3
 80096f2:	f04f 0c0a 	mov.w	ip, #10
 80096f6:	4620      	mov	r0, r4
 80096f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fc:	3a30      	subs	r2, #48	@ 0x30
 80096fe:	2a09      	cmp	r2, #9
 8009700:	d903      	bls.n	800970a <_svfiprintf_r+0x1a6>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0c6      	beq.n	8009694 <_svfiprintf_r+0x130>
 8009706:	9105      	str	r1, [sp, #20]
 8009708:	e7c4      	b.n	8009694 <_svfiprintf_r+0x130>
 800970a:	fb0c 2101 	mla	r1, ip, r1, r2
 800970e:	4604      	mov	r4, r0
 8009710:	2301      	movs	r3, #1
 8009712:	e7f0      	b.n	80096f6 <_svfiprintf_r+0x192>
 8009714:	ab03      	add	r3, sp, #12
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	462a      	mov	r2, r5
 800971a:	4b0e      	ldr	r3, [pc, #56]	@ (8009754 <_svfiprintf_r+0x1f0>)
 800971c:	a904      	add	r1, sp, #16
 800971e:	4638      	mov	r0, r7
 8009720:	f3af 8000 	nop.w
 8009724:	1c42      	adds	r2, r0, #1
 8009726:	4606      	mov	r6, r0
 8009728:	d1d6      	bne.n	80096d8 <_svfiprintf_r+0x174>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	065b      	lsls	r3, r3, #25
 800972e:	f53f af2d 	bmi.w	800958c <_svfiprintf_r+0x28>
 8009732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009734:	e72c      	b.n	8009590 <_svfiprintf_r+0x2c>
 8009736:	ab03      	add	r3, sp, #12
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	462a      	mov	r2, r5
 800973c:	4b05      	ldr	r3, [pc, #20]	@ (8009754 <_svfiprintf_r+0x1f0>)
 800973e:	a904      	add	r1, sp, #16
 8009740:	4638      	mov	r0, r7
 8009742:	f000 f879 	bl	8009838 <_printf_i>
 8009746:	e7ed      	b.n	8009724 <_svfiprintf_r+0x1c0>
 8009748:	08009d38 	.word	0x08009d38
 800974c:	08009d42 	.word	0x08009d42
 8009750:	00000000 	.word	0x00000000
 8009754:	080094ad 	.word	0x080094ad
 8009758:	08009d3e 	.word	0x08009d3e

0800975c <_printf_common>:
 800975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	4616      	mov	r6, r2
 8009762:	4698      	mov	r8, r3
 8009764:	688a      	ldr	r2, [r1, #8]
 8009766:	690b      	ldr	r3, [r1, #16]
 8009768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800976c:	4293      	cmp	r3, r2
 800976e:	bfb8      	it	lt
 8009770:	4613      	movlt	r3, r2
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009778:	4607      	mov	r7, r0
 800977a:	460c      	mov	r4, r1
 800977c:	b10a      	cbz	r2, 8009782 <_printf_common+0x26>
 800977e:	3301      	adds	r3, #1
 8009780:	6033      	str	r3, [r6, #0]
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	0699      	lsls	r1, r3, #26
 8009786:	bf42      	ittt	mi
 8009788:	6833      	ldrmi	r3, [r6, #0]
 800978a:	3302      	addmi	r3, #2
 800978c:	6033      	strmi	r3, [r6, #0]
 800978e:	6825      	ldr	r5, [r4, #0]
 8009790:	f015 0506 	ands.w	r5, r5, #6
 8009794:	d106      	bne.n	80097a4 <_printf_common+0x48>
 8009796:	f104 0a19 	add.w	sl, r4, #25
 800979a:	68e3      	ldr	r3, [r4, #12]
 800979c:	6832      	ldr	r2, [r6, #0]
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	42ab      	cmp	r3, r5
 80097a2:	dc26      	bgt.n	80097f2 <_printf_common+0x96>
 80097a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097a8:	6822      	ldr	r2, [r4, #0]
 80097aa:	3b00      	subs	r3, #0
 80097ac:	bf18      	it	ne
 80097ae:	2301      	movne	r3, #1
 80097b0:	0692      	lsls	r2, r2, #26
 80097b2:	d42b      	bmi.n	800980c <_printf_common+0xb0>
 80097b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097b8:	4641      	mov	r1, r8
 80097ba:	4638      	mov	r0, r7
 80097bc:	47c8      	blx	r9
 80097be:	3001      	adds	r0, #1
 80097c0:	d01e      	beq.n	8009800 <_printf_common+0xa4>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	6922      	ldr	r2, [r4, #16]
 80097c6:	f003 0306 	and.w	r3, r3, #6
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	bf02      	ittt	eq
 80097ce:	68e5      	ldreq	r5, [r4, #12]
 80097d0:	6833      	ldreq	r3, [r6, #0]
 80097d2:	1aed      	subeq	r5, r5, r3
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	bf0c      	ite	eq
 80097d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097dc:	2500      	movne	r5, #0
 80097de:	4293      	cmp	r3, r2
 80097e0:	bfc4      	itt	gt
 80097e2:	1a9b      	subgt	r3, r3, r2
 80097e4:	18ed      	addgt	r5, r5, r3
 80097e6:	2600      	movs	r6, #0
 80097e8:	341a      	adds	r4, #26
 80097ea:	42b5      	cmp	r5, r6
 80097ec:	d11a      	bne.n	8009824 <_printf_common+0xc8>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e008      	b.n	8009804 <_printf_common+0xa8>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4652      	mov	r2, sl
 80097f6:	4641      	mov	r1, r8
 80097f8:	4638      	mov	r0, r7
 80097fa:	47c8      	blx	r9
 80097fc:	3001      	adds	r0, #1
 80097fe:	d103      	bne.n	8009808 <_printf_common+0xac>
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009808:	3501      	adds	r5, #1
 800980a:	e7c6      	b.n	800979a <_printf_common+0x3e>
 800980c:	18e1      	adds	r1, r4, r3
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	2030      	movs	r0, #48	@ 0x30
 8009812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009816:	4422      	add	r2, r4
 8009818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800981c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009820:	3302      	adds	r3, #2
 8009822:	e7c7      	b.n	80097b4 <_printf_common+0x58>
 8009824:	2301      	movs	r3, #1
 8009826:	4622      	mov	r2, r4
 8009828:	4641      	mov	r1, r8
 800982a:	4638      	mov	r0, r7
 800982c:	47c8      	blx	r9
 800982e:	3001      	adds	r0, #1
 8009830:	d0e6      	beq.n	8009800 <_printf_common+0xa4>
 8009832:	3601      	adds	r6, #1
 8009834:	e7d9      	b.n	80097ea <_printf_common+0x8e>
	...

08009838 <_printf_i>:
 8009838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	7e0f      	ldrb	r7, [r1, #24]
 800983e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009840:	2f78      	cmp	r7, #120	@ 0x78
 8009842:	4691      	mov	r9, r2
 8009844:	4680      	mov	r8, r0
 8009846:	460c      	mov	r4, r1
 8009848:	469a      	mov	sl, r3
 800984a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800984e:	d807      	bhi.n	8009860 <_printf_i+0x28>
 8009850:	2f62      	cmp	r7, #98	@ 0x62
 8009852:	d80a      	bhi.n	800986a <_printf_i+0x32>
 8009854:	2f00      	cmp	r7, #0
 8009856:	f000 80d2 	beq.w	80099fe <_printf_i+0x1c6>
 800985a:	2f58      	cmp	r7, #88	@ 0x58
 800985c:	f000 80b9 	beq.w	80099d2 <_printf_i+0x19a>
 8009860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009868:	e03a      	b.n	80098e0 <_printf_i+0xa8>
 800986a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800986e:	2b15      	cmp	r3, #21
 8009870:	d8f6      	bhi.n	8009860 <_printf_i+0x28>
 8009872:	a101      	add	r1, pc, #4	@ (adr r1, 8009878 <_printf_i+0x40>)
 8009874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009878:	080098d1 	.word	0x080098d1
 800987c:	080098e5 	.word	0x080098e5
 8009880:	08009861 	.word	0x08009861
 8009884:	08009861 	.word	0x08009861
 8009888:	08009861 	.word	0x08009861
 800988c:	08009861 	.word	0x08009861
 8009890:	080098e5 	.word	0x080098e5
 8009894:	08009861 	.word	0x08009861
 8009898:	08009861 	.word	0x08009861
 800989c:	08009861 	.word	0x08009861
 80098a0:	08009861 	.word	0x08009861
 80098a4:	080099e5 	.word	0x080099e5
 80098a8:	0800990f 	.word	0x0800990f
 80098ac:	0800999f 	.word	0x0800999f
 80098b0:	08009861 	.word	0x08009861
 80098b4:	08009861 	.word	0x08009861
 80098b8:	08009a07 	.word	0x08009a07
 80098bc:	08009861 	.word	0x08009861
 80098c0:	0800990f 	.word	0x0800990f
 80098c4:	08009861 	.word	0x08009861
 80098c8:	08009861 	.word	0x08009861
 80098cc:	080099a7 	.word	0x080099a7
 80098d0:	6833      	ldr	r3, [r6, #0]
 80098d2:	1d1a      	adds	r2, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6032      	str	r2, [r6, #0]
 80098d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098e0:	2301      	movs	r3, #1
 80098e2:	e09d      	b.n	8009a20 <_printf_i+0x1e8>
 80098e4:	6833      	ldr	r3, [r6, #0]
 80098e6:	6820      	ldr	r0, [r4, #0]
 80098e8:	1d19      	adds	r1, r3, #4
 80098ea:	6031      	str	r1, [r6, #0]
 80098ec:	0606      	lsls	r6, r0, #24
 80098ee:	d501      	bpl.n	80098f4 <_printf_i+0xbc>
 80098f0:	681d      	ldr	r5, [r3, #0]
 80098f2:	e003      	b.n	80098fc <_printf_i+0xc4>
 80098f4:	0645      	lsls	r5, r0, #25
 80098f6:	d5fb      	bpl.n	80098f0 <_printf_i+0xb8>
 80098f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	da03      	bge.n	8009908 <_printf_i+0xd0>
 8009900:	232d      	movs	r3, #45	@ 0x2d
 8009902:	426d      	negs	r5, r5
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009908:	4859      	ldr	r0, [pc, #356]	@ (8009a70 <_printf_i+0x238>)
 800990a:	230a      	movs	r3, #10
 800990c:	e011      	b.n	8009932 <_printf_i+0xfa>
 800990e:	6821      	ldr	r1, [r4, #0]
 8009910:	6833      	ldr	r3, [r6, #0]
 8009912:	0608      	lsls	r0, r1, #24
 8009914:	f853 5b04 	ldr.w	r5, [r3], #4
 8009918:	d402      	bmi.n	8009920 <_printf_i+0xe8>
 800991a:	0649      	lsls	r1, r1, #25
 800991c:	bf48      	it	mi
 800991e:	b2ad      	uxthmi	r5, r5
 8009920:	2f6f      	cmp	r7, #111	@ 0x6f
 8009922:	4853      	ldr	r0, [pc, #332]	@ (8009a70 <_printf_i+0x238>)
 8009924:	6033      	str	r3, [r6, #0]
 8009926:	bf14      	ite	ne
 8009928:	230a      	movne	r3, #10
 800992a:	2308      	moveq	r3, #8
 800992c:	2100      	movs	r1, #0
 800992e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009932:	6866      	ldr	r6, [r4, #4]
 8009934:	60a6      	str	r6, [r4, #8]
 8009936:	2e00      	cmp	r6, #0
 8009938:	bfa2      	ittt	ge
 800993a:	6821      	ldrge	r1, [r4, #0]
 800993c:	f021 0104 	bicge.w	r1, r1, #4
 8009940:	6021      	strge	r1, [r4, #0]
 8009942:	b90d      	cbnz	r5, 8009948 <_printf_i+0x110>
 8009944:	2e00      	cmp	r6, #0
 8009946:	d04b      	beq.n	80099e0 <_printf_i+0x1a8>
 8009948:	4616      	mov	r6, r2
 800994a:	fbb5 f1f3 	udiv	r1, r5, r3
 800994e:	fb03 5711 	mls	r7, r3, r1, r5
 8009952:	5dc7      	ldrb	r7, [r0, r7]
 8009954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009958:	462f      	mov	r7, r5
 800995a:	42bb      	cmp	r3, r7
 800995c:	460d      	mov	r5, r1
 800995e:	d9f4      	bls.n	800994a <_printf_i+0x112>
 8009960:	2b08      	cmp	r3, #8
 8009962:	d10b      	bne.n	800997c <_printf_i+0x144>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	07df      	lsls	r7, r3, #31
 8009968:	d508      	bpl.n	800997c <_printf_i+0x144>
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	6861      	ldr	r1, [r4, #4]
 800996e:	4299      	cmp	r1, r3
 8009970:	bfde      	ittt	le
 8009972:	2330      	movle	r3, #48	@ 0x30
 8009974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800997c:	1b92      	subs	r2, r2, r6
 800997e:	6122      	str	r2, [r4, #16]
 8009980:	f8cd a000 	str.w	sl, [sp]
 8009984:	464b      	mov	r3, r9
 8009986:	aa03      	add	r2, sp, #12
 8009988:	4621      	mov	r1, r4
 800998a:	4640      	mov	r0, r8
 800998c:	f7ff fee6 	bl	800975c <_printf_common>
 8009990:	3001      	adds	r0, #1
 8009992:	d14a      	bne.n	8009a2a <_printf_i+0x1f2>
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	b004      	add	sp, #16
 800999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	f043 0320 	orr.w	r3, r3, #32
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	4833      	ldr	r0, [pc, #204]	@ (8009a74 <_printf_i+0x23c>)
 80099a8:	2778      	movs	r7, #120	@ 0x78
 80099aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	6831      	ldr	r1, [r6, #0]
 80099b2:	061f      	lsls	r7, r3, #24
 80099b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80099b8:	d402      	bmi.n	80099c0 <_printf_i+0x188>
 80099ba:	065f      	lsls	r7, r3, #25
 80099bc:	bf48      	it	mi
 80099be:	b2ad      	uxthmi	r5, r5
 80099c0:	6031      	str	r1, [r6, #0]
 80099c2:	07d9      	lsls	r1, r3, #31
 80099c4:	bf44      	itt	mi
 80099c6:	f043 0320 	orrmi.w	r3, r3, #32
 80099ca:	6023      	strmi	r3, [r4, #0]
 80099cc:	b11d      	cbz	r5, 80099d6 <_printf_i+0x19e>
 80099ce:	2310      	movs	r3, #16
 80099d0:	e7ac      	b.n	800992c <_printf_i+0xf4>
 80099d2:	4827      	ldr	r0, [pc, #156]	@ (8009a70 <_printf_i+0x238>)
 80099d4:	e7e9      	b.n	80099aa <_printf_i+0x172>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f023 0320 	bic.w	r3, r3, #32
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	e7f6      	b.n	80099ce <_printf_i+0x196>
 80099e0:	4616      	mov	r6, r2
 80099e2:	e7bd      	b.n	8009960 <_printf_i+0x128>
 80099e4:	6833      	ldr	r3, [r6, #0]
 80099e6:	6825      	ldr	r5, [r4, #0]
 80099e8:	6961      	ldr	r1, [r4, #20]
 80099ea:	1d18      	adds	r0, r3, #4
 80099ec:	6030      	str	r0, [r6, #0]
 80099ee:	062e      	lsls	r6, r5, #24
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	d501      	bpl.n	80099f8 <_printf_i+0x1c0>
 80099f4:	6019      	str	r1, [r3, #0]
 80099f6:	e002      	b.n	80099fe <_printf_i+0x1c6>
 80099f8:	0668      	lsls	r0, r5, #25
 80099fa:	d5fb      	bpl.n	80099f4 <_printf_i+0x1bc>
 80099fc:	8019      	strh	r1, [r3, #0]
 80099fe:	2300      	movs	r3, #0
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	4616      	mov	r6, r2
 8009a04:	e7bc      	b.n	8009980 <_printf_i+0x148>
 8009a06:	6833      	ldr	r3, [r6, #0]
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	6032      	str	r2, [r6, #0]
 8009a0c:	681e      	ldr	r6, [r3, #0]
 8009a0e:	6862      	ldr	r2, [r4, #4]
 8009a10:	2100      	movs	r1, #0
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7f6 fc04 	bl	8000220 <memchr>
 8009a18:	b108      	cbz	r0, 8009a1e <_printf_i+0x1e6>
 8009a1a:	1b80      	subs	r0, r0, r6
 8009a1c:	6060      	str	r0, [r4, #4]
 8009a1e:	6863      	ldr	r3, [r4, #4]
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	2300      	movs	r3, #0
 8009a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a28:	e7aa      	b.n	8009980 <_printf_i+0x148>
 8009a2a:	6923      	ldr	r3, [r4, #16]
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4640      	mov	r0, r8
 8009a32:	47d0      	blx	sl
 8009a34:	3001      	adds	r0, #1
 8009a36:	d0ad      	beq.n	8009994 <_printf_i+0x15c>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	079b      	lsls	r3, r3, #30
 8009a3c:	d413      	bmi.n	8009a66 <_printf_i+0x22e>
 8009a3e:	68e0      	ldr	r0, [r4, #12]
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	4298      	cmp	r0, r3
 8009a44:	bfb8      	it	lt
 8009a46:	4618      	movlt	r0, r3
 8009a48:	e7a6      	b.n	8009998 <_printf_i+0x160>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4640      	mov	r0, r8
 8009a52:	47d0      	blx	sl
 8009a54:	3001      	adds	r0, #1
 8009a56:	d09d      	beq.n	8009994 <_printf_i+0x15c>
 8009a58:	3501      	adds	r5, #1
 8009a5a:	68e3      	ldr	r3, [r4, #12]
 8009a5c:	9903      	ldr	r1, [sp, #12]
 8009a5e:	1a5b      	subs	r3, r3, r1
 8009a60:	42ab      	cmp	r3, r5
 8009a62:	dcf2      	bgt.n	8009a4a <_printf_i+0x212>
 8009a64:	e7eb      	b.n	8009a3e <_printf_i+0x206>
 8009a66:	2500      	movs	r5, #0
 8009a68:	f104 0619 	add.w	r6, r4, #25
 8009a6c:	e7f5      	b.n	8009a5a <_printf_i+0x222>
 8009a6e:	bf00      	nop
 8009a70:	08009d49 	.word	0x08009d49
 8009a74:	08009d5a 	.word	0x08009d5a

08009a78 <memmove>:
 8009a78:	4288      	cmp	r0, r1
 8009a7a:	b510      	push	{r4, lr}
 8009a7c:	eb01 0402 	add.w	r4, r1, r2
 8009a80:	d902      	bls.n	8009a88 <memmove+0x10>
 8009a82:	4284      	cmp	r4, r0
 8009a84:	4623      	mov	r3, r4
 8009a86:	d807      	bhi.n	8009a98 <memmove+0x20>
 8009a88:	1e43      	subs	r3, r0, #1
 8009a8a:	42a1      	cmp	r1, r4
 8009a8c:	d008      	beq.n	8009aa0 <memmove+0x28>
 8009a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a96:	e7f8      	b.n	8009a8a <memmove+0x12>
 8009a98:	4402      	add	r2, r0
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	428a      	cmp	r2, r1
 8009a9e:	d100      	bne.n	8009aa2 <memmove+0x2a>
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aaa:	e7f7      	b.n	8009a9c <memmove+0x24>

08009aac <_sbrk_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	@ (8009ac8 <_sbrk_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7fa fe3e 	bl	8004738 <_sbrk>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_sbrk_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_sbrk_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	200130a8 	.word	0x200130a8

08009acc <_realloc_r>:
 8009acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	4615      	mov	r5, r2
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	b921      	cbnz	r1, 8009ae2 <_realloc_r+0x16>
 8009ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009adc:	4611      	mov	r1, r2
 8009ade:	f7ff bc59 	b.w	8009394 <_malloc_r>
 8009ae2:	b92a      	cbnz	r2, 8009af0 <_realloc_r+0x24>
 8009ae4:	f7ff fbea 	bl	80092bc <_free_r>
 8009ae8:	2400      	movs	r4, #0
 8009aea:	4620      	mov	r0, r4
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	f000 f81a 	bl	8009b28 <_malloc_usable_size_r>
 8009af4:	4285      	cmp	r5, r0
 8009af6:	4606      	mov	r6, r0
 8009af8:	d802      	bhi.n	8009b00 <_realloc_r+0x34>
 8009afa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009afe:	d8f4      	bhi.n	8009aea <_realloc_r+0x1e>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4640      	mov	r0, r8
 8009b04:	f7ff fc46 	bl	8009394 <_malloc_r>
 8009b08:	4607      	mov	r7, r0
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d0ec      	beq.n	8009ae8 <_realloc_r+0x1c>
 8009b0e:	42b5      	cmp	r5, r6
 8009b10:	462a      	mov	r2, r5
 8009b12:	4621      	mov	r1, r4
 8009b14:	bf28      	it	cs
 8009b16:	4632      	movcs	r2, r6
 8009b18:	f7ff fbc2 	bl	80092a0 <memcpy>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f7ff fbcc 	bl	80092bc <_free_r>
 8009b24:	463c      	mov	r4, r7
 8009b26:	e7e0      	b.n	8009aea <_realloc_r+0x1e>

08009b28 <_malloc_usable_size_r>:
 8009b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2c:	1f18      	subs	r0, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bfbc      	itt	lt
 8009b32:	580b      	ldrlt	r3, [r1, r0]
 8009b34:	18c0      	addlt	r0, r0, r3
 8009b36:	4770      	bx	lr

08009b38 <_init>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	bf00      	nop
 8009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3e:	bc08      	pop	{r3}
 8009b40:	469e      	mov	lr, r3
 8009b42:	4770      	bx	lr

08009b44 <_fini>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	bf00      	nop
 8009b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4a:	bc08      	pop	{r3}
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	4770      	bx	lr
